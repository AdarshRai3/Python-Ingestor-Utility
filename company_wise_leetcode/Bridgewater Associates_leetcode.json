[
  {
    "question_id": "",
    "title": "Count Strictly Increasing Subarrays",
    "description": "Given an array of integers, your task is to determine the number of contiguous subarrays that are strictly increasing. A strictly increasing subarray is defined as a subarray where each subsequent element is greater than the previous one.",
    "topic": "Array",
    "subtopic": "Subarray",
    "tags": [
      "Array",
      "Subarray",
      "Counting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the number of strictly increasing subarrays.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 2, 5]",
        "output": "7",
        "explanation": "The strictly increasing subarrays are [1], [1, 2], [1, 2, 3], [2], [2, 3], [3], and [2, 5]. There are a total of 7 such subarrays."
      },
      {
        "input": "nums = [5, 4, 3, 2]",
        "output": "4",
        "explanation": "The strictly increasing subarrays are [5], [4], [3], and [2]. There are no other valid subarrays, resulting in a total of 4."
      },
      {
        "input": "nums = [1, 3, 2, 4, 5]",
        "output": "9",
        "explanation": "The strictly increasing subarrays are [1], [3], [2], [4], [5], [1, 3], [2, 4], [2, 4, 5], and [4, 5]. Thus, there are a total of 9 increasing subarrays."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Keep track of the length of the current increasing subarray.",
      "Each time the subarray is found, add its length to the total count."
    ],
    "company": "Bridgewater Associates"
  },
  {
    "question_id": "",
    "title": "Knight Dialer",
    "description": "A knight is positioned on a standard telephone keypad, which consists of the numbers 0-9 arranged as follows:\n\n```\n  1  2  3\n  4  5  6\n  7  8  9\n     0\n```\n\nThe knight moves in an 'L' shape: two squares in one direction and then one square perpendicular. For example, moving from '1' can lead to '6', '8', and so on.\n\nGiven the number of digits `n`, find the number of distinct possible sequences of digits that the knight can dial, starting from any key.\n\nReturn the count of distinct sequences modulo 10^9 + 7.",
    "topic": "Dynamic Programming",
    "subtopic": "DP on Graphs",
    "tags": [
      "Dynamic Programming",
      "Graph",
      "Number of Paths"
    ],
    "input_format": "An integer n (1 <= n <= 5000) representing the length of the sequences to dial.",
    "output_format": "An integer representing the count of distinct sequences modulo 10^9 + 7.",
    "constraints": [
      "1 <= n <= 5000"
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "10",
        "explanation": "With a single digit, you can dial any of the 10 digits (0-9)."
      },
      {
        "input": "n = 2",
        "output": "20",
        "explanation": "The knight can move to 20 valid sequences in 2 moves from any starting digit."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a memoization approach to store intermediate results.",
      "Think about how transitions occur from one digit to another using the knight's movement rules."
    ],
    "company": "Bridgewater Associates"
  }
]