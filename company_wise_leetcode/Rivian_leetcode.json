[
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for a Least Recently Used (LRU) cache. It should support the following operations: get and put. The get method retrieves the value of the key if the key exists in the cache, otherwise returns -1. The put method updates the value of the key if the key exists. If the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Data Structures",
    "subtopic": "Cache",
    "tags": [
      "Data Structure",
      "Cache",
      "LRU"
    ],
    "input_format": "The cache will be initialized with a positive capacity. The get and put methods will take a key-value pair as input.",
    "output_format": "Return the value of the key if it exists, otherwise return -1 for the get operation. The put operation does not return anything.",
    "constraints": [
      "The capacity of the cache is always positive.",
      "The number of operations (get and put) will not exceed 10^4.",
      "The key and value are both integers."
    ],
    "examples": [
      {
        "input": "cache = LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1,-1,3,4]",
        "explanation": "Get key 1 returns 1; evicts key 2; Get key 2 returns -1 (not found); adds key 3; evicts key 1; Get key 1 returns -1 (not found); Get key 3 returns 3; Get key 4 returns 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a doubly linked list to maintain the order of usage.",
      "A hash map can help with O(1) access time."
    ],
    "company": "Rivian"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. For example, if the input intervals are [[1,3],[2,6],[8,10],[15,18]], the merged intervals would be [[1,6],[8,10],[15,18]]. The resulting intervals should be returned in a sorted manner.",
    "topic": "Array",
    "subtopic": "Sorting and Merging",
    "tags": [
      "Array",
      "Sorting",
      "Intervals"
    ],
    "input_format": "A list of intervals, where each interval is represented by a list of two integers [start, end].",
    "output_format": "A list of merged intervals sorted by their start values.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "The intervals [1,3] and [2,6] overlap, so we merge them into [1,6]. The other intervals do not overlap with these, resulting in [[1,6],[8,10],[15,18]]."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] touch at point 4, so we merge them into [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on their start values.",
      "Use a stack or list to keep track of the merged intervals."
    ],
    "company": "Rivian"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth First Search",
    "tags": [
      "Graph",
      "DFS",
      "Matrix"
    ],
    "input_format": "A 2D grid represented as a list of lists, where grid[i][j] is either '1' or '0'.",
    "output_format": "An integer representing the number of islands in the grid.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]",
        "output": "3",
        "explanation": "There are three islands in the given grid."
      },
      {
        "input": "grid = [[1,1,1,1,0],[1,1,0,1,0],[1,1,0,0,0],[0,0,0,0,0]]",
        "output": "1",
        "explanation": "There is one island formed by connecting all the '1's."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth First Search (DFS) or Breadth First Search (BFS) to explore the grid.",
      "Mark visited land cells to avoid counting them multiple times."
    ],
    "company": "Rivian"
  },
  {
    "question_id": "",
    "title": "Flatten Deeply Nested Array",
    "description": "Given a deeply nested array, write a function to flatten it into a single-level array. The nested array can contain integers and other nested arrays, and you need to ensure that all elements are included in the flattened output in the order they appear.",
    "topic": "Array",
    "subtopic": "Recursion",
    "tags": [
      "Array",
      "Recursion",
      "Flattening"
    ],
    "input_format": "A nested array consisting of integers and/or other nested arrays.",
    "output_format": "A single-level array containing all the integers from the nested array.",
    "constraints": [
      "The nested array can contain at most 10^4 elements.",
      "Each integer in the array can be in the range of -10^5 to 10^5."
    ],
    "examples": [
      {
        "input": "[1, [2, [3, 4]], 5]",
        "output": "[1, 2, 3, 4, 5]",
        "explanation": "The nested structure is flattened to [1, 2, 3, 4, 5]."
      },
      {
        "input": "[[1, 2, [3]], 4]",
        "output": "[1, 2, 3, 4]",
        "explanation": "Flattening the nested array gives [1, 2, 3, 4]."
      },
      {
        "input": "[1, 2, [3, 4, [5, 6]], 7]",
        "output": "[1, 2, 3, 4, 5, 6, 7]",
        "explanation": "Flatten to result in [1, 2, 3, 4, 5, 6, 7]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use recursion to handle nested arrays.",
      "You may also consider using a stack or queue approach."
    ],
    "company": "Rivian"
  },
  {
    "question_id": "",
    "title": "String Compression",
    "description": "Given a string, perform basic string compression by replacing consecutive identical characters with the character followed by the count of repetitions. For example, the string 'aabbcc' would become 'a2b2c2'. If the compressed string is not smaller than the original string, return the original string. You may assume the input string has only uppercase and lowercase letters (a-z, A-Z).",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Compression",
      "Manipulation"
    ],
    "input_format": "A single string s.",
    "output_format": "A string representing the compressed version of the input string or the original string if compression does not reduce its size.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of uppercase and lowercase letters."
    ],
    "examples": [
      {
        "input": "s = 'aabcccccaaa'",
        "output": "a2b1c5a3",
        "explanation": "The string 'aabcccccaaa' can be compressed to 'a2b1c5a3'."
      },
      {
        "input": "s = 'abcdef'",
        "output": "abcdef",
        "explanation": "The string 'abcdef' has no consecutive characters, so it remains unchanged."
      },
      {
        "input": "s = 'aa'",
        "output": "a2",
        "explanation": "The string 'aa' can be compressed to 'a2'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a loop to iterate through the string.",
      "Store the current character and its count to build the compressed string."
    ],
    "company": "Rivian"
  },
  {
    "question_id": "",
    "title": "Rotate String",
    "description": "Given two strings, s and goal, you need to determine if you can rotate string s so that it becomes equal to string goal. A rotation is defined as moving the front character of s to the back of the string. For example, string 'abcde' can be rotated to become 'bcdea', 'cdeab', 'deabc', or 'eabcd'.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Rotation"
    ],
    "input_format": "Two strings, s and goal, both of length n.",
    "output_format": "A boolean value indicating whether s can be rotated to become equal to goal.",
    "constraints": [
      "1 <= s.length, goal.length <= 100",
      "s and goal consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'abcde', goal = 'cdeab'",
        "output": "true",
        "explanation": "By rotating 'abcde' two places to the left, we get 'cdeab'."
      },
      {
        "input": "s = 'abcde', goal = 'abced'",
        "output": "false",
        "explanation": "'abcde' cannot be rotated to form 'abced'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try concatenating the string s with itself."
    ],
    "company": "Rivian"
  },
  {
    "question_id": "",
    "title": "Merge k Sorted Lists",
    "description": "You are given an array of k sorted linked lists. Merge all the linked lists into one sorted linked list and return it. The linked lists are represented by their head nodes. You may assume all input lists are non-empty and the input size is manageable.",
    "topic": "Linked List",
    "subtopic": "Merge",
    "tags": [
      "Linked List",
      "Merge",
      "Sorting"
    ],
    "input_format": "An array of k linked list nodes, where each node represents the head of a linked list.",
    "output_format": "The head node of the merged sorted linked list.",
    "constraints": [
      "0 <= k <= 10^4",
      "0 <= ListNode.val <= 10^4",
      "Each linked list contains at least one node."
    ],
    "examples": [
      {
        "input": "[1 -> 4 -> 5, 1 -> 3 -> 4, 2 -> 6]",
        "output": "[1 -> 1 -> 2 -> 3 -> 4 -> 4 -> 5 -> 6]",
        "explanation": "Merging the three linked lists results in a sorted list of [1, 1, 2, 3, 4, 4, 5, 6]."
      },
      {
        "input": "[]",
        "output": "[]",
        "explanation": "No linked lists provided, thus the result is an empty list."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a min-heap to efficiently merge the lists.",
      "You can create a dummy node to simplify the merging process.",
      "Take advantage of the fact that the lists are already sorted."
    ],
    "company": "Rivian"
  },
  {
    "question_id": "",
    "title": "Max Increase to Keep City Skyline",
    "description": "In a 2D grid representing a city skyline, each cell contains a non-negative integer representing the height of a building. We want to increase the heights of the buildings while keeping the skyline view from the left, right, top, and bottom unchanged. Write a function that computes the maximum total increase in the heights of the buildings you can achieve without altering the skyline view.",
    "topic": "Dynamic Programming",
    "subtopic": "Grid Manipulation",
    "tags": [
      "Dynamic Programming",
      "Grid",
      "Greedy"
    ],
    "input_format": "A 2D array of integers heights, where heights[i][j] represents the height of the building at row i and column j.",
    "output_format": "An integer representing the maximum total increase in heights.",
    "constraints": [
      "1 <= heights.length <= 50",
      "1 <= heights[i].length <= 50",
      "0 <= heights[i][j] <= 100"
    ],
    "examples": [
      {
        "input": "heights = [[3, 0, 8, 4], [2, 4, 5, 0], [8, 4, 2, 1], [0, 0, 0, 0]]",
        "output": "35",
        "explanation": "The new heights can be [[3, 3, 8, 4], [3, 4, 5, 4], [8, 4, 2, 1], [0, 0, 0, 0]]. The maximum total increase is 35."
      },
      {
        "input": "heights = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]",
        "output": "0",
        "explanation": "No increase can be made without changing the skyline, hence the answer is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the maximum height possible for each row and column.",
      "Remember to calculate the total allowed increase based on the min height constraints."
    ],
    "company": "Rivian"
  }
]