[
  {
    "question_id": "",
    "title": "Time Based Key-Value Store",
    "description": "Implement a time-based key-value store that supports the following operations: set(key, value, timestamp) and get(key, timestamp). The set operation associates the value with the key at the given timestamp. The get operation retrieves the most recent value associated with the key that has a timestamp less than or equal to the given timestamp. If there is no such value, return an empty string.",
    "topic": "Data Structures",
    "subtopic": "Hash Map",
    "tags": [
      "Hash Map",
      "Design",
      "Data Structures"
    ],
    "input_format": "The input consists of multiple operations. Each operation is either a set operation with a format: set(key, value, timestamp) or a get operation with a format: get(key, timestamp).",
    "output_format": "Each get operation returns a string representing the most recent value associated with the key at or before the given timestamp or an empty string if no such value exists.",
    "constraints": [
      "1 <= key.length, value.length <= 100",
      "1 <= timestamp <= 10^9",
      "The number of operations does not exceed 10^4."
    ],
    "examples": [
      {
        "input": "set('foo', 'bar', 1)\nget('foo', 1)",
        "output": "'bar'",
        "explanation": "The value for key 'foo' at timestamp 1 is 'bar'."
      },
      {
        "input": "set('foo', 'bar', 1)\nset('foo', 'baz', 2)\nget('foo', 1)",
        "output": "'bar'",
        "explanation": "At timestamp 1, the value is 'bar'."
      },
      {
        "input": "set('foo', 'bar', 1)\nset('foo', 'baz', 2)\nget('foo', 3)",
        "output": "'baz'",
        "explanation": "At timestamp 3, the most recent value is 'baz'."
      },
      {
        "input": "get('foo', 0)",
        "output": "''",
        "explanation": "There is no value for 'foo' at or before timestamp 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hashmap to store the key and a sorted list of timestamps for each key.",
      "Binary search might help in finding the closest timestamp efficiently."
    ],
    "company": "Axon"
  },
  {
    "question_id": "",
    "title": "Insert Delete GetRandom O(1)",
    "description": "Design a data structure that supports all following operations in average O(1) time complexity. Implement the RandomizedCollection class:\n\n- `insert(val: int) -> bool`: Inserts an item val into the collection. Returns true if the item was not already present.\n- `remove(val: int) -> bool`: Removes an item val from the collection. Returns true if the item was present.\n- `getRandom() -> int`: Gets a random element from the collection. Each element must have the same probability of being returned.\n\nYou must implement the class such that all operations can be done in average O(1) time complexity.",
    "topic": "Design",
    "subtopic": "Data Structures",
    "tags": [
      "Hash Table",
      "Randomization",
      "Design"
    ],
    "input_format": "You will be using the RandomizedCollection class and calling its methods.",
    "output_format": "Return boolean values for insert and remove methods; return an integer for getRandom method.",
    "constraints": [
      "The collection can contain at most 2 * 10^5 elements.",
      "When `getRandom` is called, the collection is not empty."
    ],
    "examples": [
      {
        "input": "RandomizedCollection collection = new RandomizedCollection();\ncollection.insert(1);\ncollection.insert(1);\ncollection.insert(2);\nint random = collection.getRandom();\nbool removed = collection.remove(1);",
        "output": "true",
        "explanation": "Insert operation returns true for the first insertion of '1' since it wasn't already present. The random element could be 1 or 2."
      },
      {
        "input": "bool removed = collection.remove(2);\nint random = collection.getRandom();",
        "output": "true",
        "explanation": "The remove operation returns true as '2' was present. The random element should still be '1' or '1' as '2' was removed."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to store the indices of elements.",
      "A list can be used to keep track of the elements for random access."
    ],
    "company": "Axon"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "DFS",
      "BFS",
      "Matrix"
    ],
    "input_format": "A 2D binary grid represented as an array of arrays (grid) where grid[i][j] is either '1' or '0'.",
    "output_format": "An integer representing the number of islands in the grid.",
    "constraints": [
      "1 <= grid.length <= 300",
      "1 <= grid[i].length <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [['1','1','1','1','0'], ['1','1','0','1','0'], ['0','0','0','0','0'], ['1','0','1','0','1']]",
        "output": "3",
        "explanation": "There are 3 distinct islands in the grid."
      },
      {
        "input": "grid = [['0','0','0','0','0'], ['0','0','0','0','0'], ['0','0','0','0','0']]",
        "output": "0",
        "explanation": "There are no islands in the grid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth-First Search (DFS) or Breadth-First Search (BFS) to explore the grid.",
      "Mark visited land as water by changing '1' to '0'.",
      "Count incrementally for each unvisited land piece."
    ],
    "company": "Axon"
  },
  {
    "question_id": "",
    "title": "Roman to Integer",
    "description": "Given a string representing a Roman numeral, convert it to an integer. Roman numerals are represented by the following symbols: I for 1, V for 5, X for 10, L for 50, C for 100, D for 500, and M for 1000. The value of a Roman numeral is the sum of the values of its symbols. However, if a smaller numeral appears before a larger numeral, it must be subtracted from the larger numeral.",
    "topic": "Math",
    "subtopic": "String Manipulation",
    "tags": [
      "Math",
      "String",
      "Conversion"
    ],
    "input_format": "A string s representing a Roman numeral.",
    "output_format": "An integer representing the converted value of the Roman numeral.",
    "constraints": [
      "1 <= s.length <= 15",
      "s consists of the characters I, V, X, L, C, D, M."
    ],
    "examples": [
      {
        "input": "s = 'III'",
        "output": "3",
        "explanation": "The Roman numeral III represents 1 + 1 + 1 = 3."
      },
      {
        "input": "s = 'IV'",
        "output": "4",
        "explanation": "The Roman numeral IV represents 5 - 1 = 4."
      },
      {
        "input": "s = 'IX'",
        "output": "9",
        "explanation": "The Roman numeral IX represents 10 - 1 = 9."
      },
      {
        "input": "s = 'LVIII'",
        "output": "58",
        "explanation": "The Roman numeral LVIII represents 50 + 5 + 3 = 58."
      },
      {
        "input": "s = 'MCMXCIV'",
        "output": "1994",
        "explanation": "The Roman numeral MCMXCIV represents 1000 + (1000 - 100) + (100 - 10) + 5 = 1994."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a map to track the values of each Roman numeral.",
      "Pay attention to the order of the characters to determine whether to add or subtract."
    ],
    "company": "Axon"
  },
  {
    "question_id": "",
    "title": "Edit Distance",
    "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. The allowed operations are insertion, deletion, or substitution of a character.",
    "topic": "Dynamic Programming",
    "subtopic": "String Manipulation",
    "tags": [
      "DP",
      "String",
      "Edit Distance"
    ],
    "input_format": "Two strings word1 and word2, where 0 <= word1.length, word2.length <= 500.",
    "output_format": "An integer representing the minimum number of operations required.",
    "constraints": [
      "0 <= word1.length, word2.length <= 500",
      "All characters in word1 and word2 are lowercase English letters."
    ],
    "examples": [
      {
        "input": "word1 = 'horse', word2 = 'ros'",
        "output": "3",
        "explanation": "horse \u2192 rorse (substitution) \u2192 roes (deletion) \u2192 ros (deletion)."
      },
      {
        "input": "word1 = 'intention', word2 = 'execution'",
        "output": "5",
        "explanation": "intention \u2192 inention (deletion) \u2192 enention (substitution) \u2192 exention (substitution) \u2192 exection (substitution) \u2192 execution (insertion)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a 2D array to store intermediate results.",
      "Think about how to build the solution using subproblems."
    ],
    "company": "Axon"
  },
  {
    "question_id": "",
    "title": "K Closest Points to Origin",
    "description": "Given an array of points where points[i] = [xi, yi] represents a point on the Cartesian plane, and an integer K, return the K closest points to the origin (0, 0). The distance between two points is the Euclidean distance, which can be calculated using the formula \u221a((x2 - x1)\u00b2 + (y2 - y1)\u00b2). The answer can be returned in any order. You may assume K is always valid, 1 \u2264 K \u2264 number of the points.",
    "topic": "Sorting",
    "subtopic": "Distance",
    "tags": [
      "Sorting",
      "Heap",
      "Distance"
    ],
    "input_format": "An array of points, where each point is represented as an array of two integers, and an integer K.",
    "output_format": "An array of K points, each represented as an array of two integers.",
    "constraints": [
      "1 <= K <= points.length <= 10^4",
      "-10^4 < xi, yi < 10^4"
    ],
    "examples": [
      {
        "input": "points = [[1,3],[-2,2],[5,8],[0,1]], K = 2",
        "output": "[[-2,2],[1,3]]",
        "explanation": "The distance of point [-2,2] is \u221a((-2)\u00b2 + 2\u00b2) = \u221a8, and that of [1,3] is \u221a(1\u00b2 + 3\u00b2) = \u221a10. Thus, the closest points are [-2,2] and [1,3]."
      },
      {
        "input": "points = [[3,3],[5,-1],[-2,4]], K = 1",
        "output": "[[3,3]]",
        "explanation": "The closest point to the origin from the given points is [3, 3] with a smaller distance compared to the other points."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a min-heap to store distances and points.",
      "You can calculate the squared distance to avoid floating-point inaccuracies.",
      "Sort points based on their distance from the origin."
    ],
    "company": "Axon"
  }
]