[
  {
    "question_id": "",
    "title": "Second Largest Digit in a String",
    "description": "Given a string s consisting of various characters, return the second largest digit present in the string. If there is no second largest digit, return -1.",
    "topic": "String",
    "subtopic": "Digit Extraction",
    "tags": [
      "String",
      "Digits",
      "Extraction"
    ],
    "input_format": "A single string s of length n (1 <= n <= 1000).",
    "output_format": "An integer representing the second largest digit, or -1 if it doesn't exist.",
    "constraints": [
      "s can contain uppercase and lowercase letters, digits, and special characters.",
      "The digits are from 0 to 9."
    ],
    "examples": [
      {
        "input": "s = 'abc1234'",
        "output": "3",
        "explanation": "The digits present are 1, 2, 3, and 4. The second largest digit is 3."
      },
      {
        "input": "s = 'hello1234'",
        "output": "3",
        "explanation": "The digits present are 1, 2, 3, and 4. The second largest digit is 3."
      },
      {
        "input": "s = 'abc'",
        "output": "-1",
        "explanation": "There are no digits in the string."
      },
      {
        "input": "s = '1'",
        "output": "-1",
        "explanation": "Only one digit is present. There is no second largest digit."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Extract digits from the string using a filtering method.",
      "Use a set to remove duplicates and sort the unique digits."
    ],
    "company": "Softwire"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A palindromic string is one that reads the same backward as forward.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A single string s, where 1 <= s.length <= 1000.",
    "output_format": "A string representing the longest palindromic substring in s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only digits and English letters."
    ],
    "examples": [
      {
        "input": "s = 'babad'",
        "output": "'bab' or 'aba'",
        "explanation": "Both 'bab' and 'aba' are palindromic substrings of maximum length 3."
      },
      {
        "input": "s = 'cbbd'",
        "output": "'bb'",
        "explanation": "'bb' is the longest palindromic substring."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around the center of a potential palindrome.",
      "You can use a two-pointer approach to check for palindromes."
    ],
    "company": "Softwire"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within a string.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Hash Map"
    ],
    "input_format": "A string s consisting of lowercase and uppercase English letters, digits, symbols and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 5 * 10^4",
      "s consists of English letters, digits, symbols and spaces."
    ],
    "examples": [
      {
        "input": "s = 'abcabcbb'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'abc', which has a length of 3."
      },
      {
        "input": "s = 'bbbbb'",
        "output": "1",
        "explanation": "The longest substring without repeating characters is 'b', with a length of 1."
      },
      {
        "input": "s = 'pwwkew'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'wke', with a length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach.",
      "Maintain a hash map to store the index of characters.",
      "Update the start of the window when a repeated character is found."
    ],
    "company": "Softwire"
  }
]