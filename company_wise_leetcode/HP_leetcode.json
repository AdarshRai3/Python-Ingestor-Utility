[
  {
    "question_id": "",
    "title": "Minimum Recolors to Get K Consecutive Black Blocks",
    "description": "You are given a string 'blocks' consisting of characters 'W' (white block) and 'B' (black block). Your goal is to achieve at least 'k' consecutive black blocks by performing the minimum number of recolors. Each recolor operation allows you to change a white block to a black block. Calculate the minimum number of recolors needed.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Greedy",
      "Sliding Window"
    ],
    "input_format": "A string 'blocks' and an integer 'k'.",
    "output_format": "An integer representing the minimum number of recolors needed.",
    "constraints": [
      "1 <= blocks.length <= 100",
      "1 <= k <= blocks.length"
    ],
    "examples": [
      {
        "input": "blocks = 'WBBBW', k = 3",
        "output": "1",
        "explanation": "You can recolor the first 'W' to 'B' to achieve 'BBBWW', which has at least 3 consecutive 'B's."
      },
      {
        "input": "blocks = 'BBBBB', k = 3",
        "output": "0",
        "explanation": "No recoloring is needed as there are already 5 consecutive 'B's."
      },
      {
        "input": "blocks = 'WWWWWW', k = 1",
        "output": "1",
        "explanation": "You cannot have 0 consecutive 'B's, so you need to recolor at least one 'W' to 'B'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a sliding window to check segments of length 'k'.",
      "Count the number of 'W's in each window of size 'k'."
    ],
    "company": "HP"
  },
  {
    "question_id": "",
    "title": "Minimum Cost Homecoming of a Robot in a Grid",
    "description": "A robot is located at the top-left corner of a grid (0, 0) and needs to return to its starting position after visiting a set of specified grid cells. Each cell in the grid has a specific cost associated with moving into it. The robot can only move either down or right at any point in time. Your task is to find the minimum cost for the robot to return back to its starting point after visiting all specified cells. You are required to return the minimum total cost to achieve this.",
    "topic": "Dynamic Programming",
    "subtopic": "Path Finding",
    "tags": [
      "Dynamic Programming",
      "Grid",
      "Minimum Cost"
    ],
    "input_format": "A 2D array 'grid' representing the cost of each cell and a list of coordinate pairs indicating the cells that must be visited.",
    "output_format": "An integer representing the minimum cost for the robot to return back to its starting point.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 100",
      "0 <= grid[i][j] <= 1000",
      "The list of coordinates will contain at least one valid cell."
    ],
    "examples": [
      {
        "input": {
          "grid": [
            [
              1,
              3,
              1
            ],
            [
              1,
              5,
              1
            ],
            [
              4,
              2,
              1
            ]
          ],
          "coordinates": [
            [
              1,
              2
            ],
            [
              2,
              1
            ]
          ]
        },
        "output": "7",
        "explanation": "The minimum path for the robot visiting the necessary cells with costs considered is (0,0) -> (0,1) -> (1,2) -> (2,2) -> (2,1) -> (1,1) -> (1,0) -> (0,0), resulting in a total cost of 1 + 3 + 1 + 1 + 5 + 1 + 1 = 7."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to build up to the solution.",
      "Keep track of the path costs to ensure you do not revisit cells unnecessarily.",
      "Utilize a priority queue to manage the cell visitation order based on cost."
    ],
    "company": "HP"
  },
  {
    "question_id": "",
    "title": "Longest Palindrome",
    "description": "Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromic substrings, return any of them.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Palindrome",
      "Dynamic Programming"
    ],
    "input_format": "A single string s consisting of lowercase and uppercase letters.",
    "output_format": "A string representing the longest palindromic substring.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consist of only digits and English letters."
    ],
    "examples": [
      {
        "input": "s = \"babad\"",
        "output": "\"bab\" or \"aba\"",
        "explanation": "Both \"bab\" and \"aba\" are valid longest palindromic substrings."
      },
      {
        "input": "s = \"cbbd\"",
        "output": "\"bb\"",
        "explanation": "\"bb\" is the longest palindromic substring."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider expanding around the center for potential palindromes.",
      "Keep track of the maximum length of palindromes found."
    ],
    "company": "HP"
  }
]