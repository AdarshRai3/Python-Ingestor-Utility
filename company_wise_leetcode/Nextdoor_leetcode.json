[
  {
    "question_id": "",
    "title": "Compare Version Numbers",
    "description": "You are given two version numbers, version1 and version2, represented as strings. The version numbers are separated by a dot '.' and may contain multiple parts. Each part is a non-negative integer and can be compared by its integer value. You need to compare the two version numbers.\n\n- If version1 > version2, return 1.\n- If version1 < version2, return -1.\n- Otherwise, return 0.",
    "topic": "String",
    "subtopic": "Comparison",
    "tags": [
      "String",
      "Comparison",
      "Version Control"
    ],
    "input_format": "Two strings, version1 and version2, representing the version numbers.",
    "output_format": "An integer: 1 if version1 > version2, -1 if version1 < version2, and 0 if they are equal.",
    "constraints": [
      "1 <= version1.length, version2.length <= 1000",
      "version1 and version2 are non-empty strings consisting of digits and '.' only.",
      "The '.' character appears at least once in each version string."
    ],
    "examples": [
      {
        "input": "version1 = \"1.01\", version2 = \"1.001\"",
        "output": "0",
        "explanation": "Both versions represent the same version because leading zeros are ignored."
      },
      {
        "input": "version1 = \"1.0.1\", version2 = \"1\"",
        "output": "1",
        "explanation": "version1 has a higher patch version than version2, so it is considered greater."
      },
      {
        "input": "version1 = \"1.0.0\", version2 = \"1.0\"",
        "output": "0",
        "explanation": "Both versions represent the same version as the trailing zeros do not affect the comparison."
      },
      {
        "input": "version1 = \"0.1\", version2 = \"1.1\"",
        "output": "-1",
        "explanation": "version1 is considered lower than version2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Split the version strings using the '.' delimiter.",
      "Compare each part as an integer."
    ],
    "company": "Nextdoor"
  },
  {
    "question_id": "",
    "title": "All O`one Data Structure",
    "description": "Design a data structure that supports the following operations:\n\n1. `insert(key: str)`: Inserts a new key or increments the count of an existing key.\n2. `remove(key: str)`: Decreases the count of the key if it exists and removes it if its count becomes zero.\n3. `getMaxKey()`: Returns one of the keys with the maximal count.\n4. `getMinKey()`: Returns one of the keys with the minimal count.\n\nYour data structure should be efficient with each operation taking O(1) time on average.",
    "topic": "Design",
    "subtopic": "Data Structure",
    "tags": [
      "Design",
      "Data Structure",
      "Hash Table",
      "Linked List"
    ],
    "input_format": "The operations will be a list of strings, each representing an operation to be performed on the data structure.",
    "output_format": "Return the output for `getMaxKey` and `getMinKey` operations in the order they are called.",
    "constraints": [
      "1 <= operations.length <= 10^4",
      "Key strings consist of lowercase English letters and have at most length 100."
    ],
    "examples": [
      {
        "input": "operations = [\"insert\", \"insert\", \"getMaxKey\", \"insert\", \"getMinKey\", \"remove\", \"getMaxKey\"]",
        "output": "[\"key1\", \"key1\"]",
        "explanation": "After inserting 'key1' twice, 'getMaxKey' will return 'key1'. Then after inserting 'key2', 'getMinKey' will return 'key2' before removing 'key1', after which the `getMaxKey` will return 'key2'."
      },
      {
        "input": "operations = [\"insert\", \"remove\", \"getMaxKey\", \"getMinKey\"]",
        "output": "[\"\", \"\"]",
        "explanation": "After inserting and immediately removing, no keys exist, so both `getMaxKey` and `getMinKey` return empty strings."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a hashmap for counting occurrences.",
      "Keep track of keys in lists at each count level."
    ],
    "company": "Nextdoor"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. An interval is represented as a pair of integers [start, end], where start <= end. When two intervals overlap, they can be merged into a single interval that covers both.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Interval"
    ],
    "input_format": "A 2D array of integers intervals where intervals[i] = [start, end].",
    "output_format": "A 2D array of merged intervals.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= start <= end <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "The intervals [1,3] and [2,6] overlap and can be merged into [1,6]."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] touch at point 4 and should be merged into [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on the starting time.",
      "Use a loop to check the end of the last merged interval with the start of the current interval."
    ],
    "company": "Nextdoor"
  },
  {
    "question_id": "",
    "title": "Letter Combinations of a Phone Number",
    "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. A mapping of digit to letters (just like on the telephone buttons) is as follows: 2 -> 'abc', 3 -> 'def', 4 -> 'ghi', 5 -> 'jkl', 6 -> 'mno', 7 -> 'pqrs', 8 -> 'tuv', 9 -> 'wxyz'. The output should be returned in any order.",
    "topic": "Backtracking",
    "subtopic": "String Manipulation",
    "tags": [
      "Backtracking",
      "String",
      "Combinations"
    ],
    "input_format": "A string of digits where 2 <= digits.length <= 4.",
    "output_format": "An array of strings representing all possible letter combinations.",
    "constraints": [
      "digits consists of digits from 2 to 9.",
      "The input string will not be empty."
    ],
    "examples": [
      {
        "input": "digits = '23'",
        "output": "['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']",
        "explanation": "The digit '2' maps to letters 'abc' and '3' maps to 'def'. Thus, combinations are formed by taking one letter from each mapping."
      },
      {
        "input": "digits = '2'",
        "output": "['a', 'b', 'c']",
        "explanation": "The digit '2' maps directly to 'abc'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use backtracking to explore combinations.",
      "Start with an empty combination and add letters recursively."
    ],
    "company": "Nextdoor"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of integers representing the heights of bars in a histogram, compute how much water can be trapped after raining. Each bar has a uniform width of 1.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Water Trapping"
    ],
    "input_format": "An array of integers representing the heights of the bars.",
    "output_format": "An integer representing the total amount of water trapped.",
    "constraints": [
      "n == height.length",
      "1 <= n <= 2 * 10^4",
      "0 <= height[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The water trapped is 6 units: between bars at indices 2-3, 5-6, and 7-8."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The water trapped is 9 units above the bars."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how to find the left and right limits for each bar.",
      "You might want to use a two-pointer approach for optimal space and time complexity."
    ],
    "company": "Nextdoor"
  },
  {
    "question_id": "",
    "title": "Nested List Weight Sum",
    "description": "You are given a nested list of integers. Each integer can be either a positive integer or another nested list. Your goal is to calculate the sum of all integers in the list, where each integer is multiplied by its depth. The depth of an integer is defined as follows: if an integer is at depth d, it is multiplied by d in the final sum. The depth of the outermost list is 1, the depth of the next inner list is 2, and so on. Write a function to compute this weighted sum.",
    "topic": "Recursion",
    "subtopic": "Depth-first Search",
    "tags": [
      "Recursion",
      "Depth",
      "Nested List"
    ],
    "input_format": "A list which can contain integers or more nested lists.",
    "output_format": "An integer representing the weighted sum of all integers in the nested list.",
    "constraints": [
      "The list can contain at most 100 nested lists.",
      "The depth of the nested lists does not exceed 10.",
      "-100 <= element <= 100"
    ],
    "examples": [
      {
        "input": "[1, [4, [6]]]",
        "output": "27",
        "explanation": "The sum is calculated as follows: 1*1 + 4*2 + 6*3 = 1 + 8 + 18 = 27."
      },
      {
        "input": "[1, 2, [3, 4], [5, [6, 7]]]",
        "output": "62",
        "explanation": "Calculation: 1*1 + 2*1 + 3*2 + 4*2 + 5*2 + 6*3 + 7*3 = 1 + 2 + 6 + 8 + 10 + 18 + 21 = 62."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use recursion to navigate through the nested structure.",
      "Keep track of the current depth while traversing."
    ],
    "company": "Nextdoor"
  },
  {
    "question_id": "",
    "title": "Divide Two Integers",
    "description": "Implement the division of two integers without using multiplication, division, or modulus operators. The function should return the quotient after dividing the two integers, with the quotient rounded towards zero.",
    "topic": "Mathematics",
    "subtopic": "Bit Manipulation",
    "tags": [
      "Math",
      "Bit Manipulation",
      "Divide"
    ],
    "input_format": "Two integers, dividend and divisor.",
    "output_format": "An integer representing the quotient of the division.",
    "constraints": [
      "-2^31 <= dividend, divisor <= 2^31 - 1",
      "divisor != 0"
    ],
    "examples": [
      {
        "input": "dividend = 10, divisor = 3",
        "output": "3",
        "explanation": "10 divided by 3 is 3 with a remainder of 1, which rounds towards zero."
      },
      {
        "input": "dividend = 7, divisor = -3",
        "output": "-2",
        "explanation": "7 divided by -3 is -2 with a remainder of 1, rounding towards zero."
      },
      {
        "input": "dividend = 0, divisor = 1",
        "output": "0",
        "explanation": "0 divided by any non-zero number is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using bit manipulation for faster calculations.",
      "Handle edge cases related to integer overflow."
    ],
    "company": "Nextdoor"
  },
  {
    "question_id": "",
    "title": "Time Based Key-Value Store",
    "description": "Design a time-based key-value store that allows values to be associated with keys at specific timestamps. Implement the following methods:  \n1. `set(key: str, value: str, timestamp: int)`: Stores the value `value` associated with the key `key` at the given `timestamp`.  \n2. `get(key: str, timestamp: int) -> str`: Returns the value associated with the key `key` at the given `timestamp`. If there is no value stored for that key at that timestamp, return the value associated with the key at the most recent timestamp before the given timestamp. If there is still no such value, return an empty string.",
    "topic": "Design",
    "subtopic": "Data Structures",
    "tags": [
      "Design",
      "HashMap",
      "Binary Search"
    ],
    "input_format": "The input consists of a list of operations in the format of `['set', 'get']` followed by the corresponding arguments.",
    "output_format": "For each `get` operation, return the corresponding value as a string.",
    "constraints": [
      "The key is a string of length at most 100.",
      "The value is a string of length at most 100.",
      "1 <= timestamp <= 10^9",
      "The number of operations `n` is at most 10^4."
    ],
    "examples": [
      {
        "input": "['set', 'key1', 'value1', 1], ['get', 'key1', 1], ['get', 'key1', 3], ['set', 'key1', 'value2', 4], ['get', 'key1', 4], ['get', 'key1', 5]",
        "output": "['value1', 'value1', 'value2', 'value2']",
        "explanation": "First, we store 'value1' for 'key1' at timestamp 1. At timestamp 1, 'get' returns 'value1'. At timestamp 3, 'get' also returns 'value1' as it's the most recent value. Then we update 'key1' to 'value2' at timestamp 4. For timestamp 4 and 5, 'get' returns 'value2'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to store the key and a list of pairs of (timestamp, value).",
      "For the 'get' operation, perform a binary search on the timestamps."
    ],
    "company": "Nextdoor"
  }
]