[
  {
    "question_id": "",
    "title": "Find the Index of the First Occurrence in a String",
    "description": "Given two strings `haystack` and `needle`, return the index of the first occurrence of `needle` in `haystack`, or -1 if `needle` is not part of `haystack`. You must implement this function in O(n) time complexity.",
    "topic": "String",
    "subtopic": "Searching",
    "tags": [
      "String",
      "Searching",
      "Two Pointers"
    ],
    "input_format": "Two strings `haystack` and `needle`.",
    "output_format": "An integer representing the index of the first occurrence of `needle` in `haystack` or -1 if not found.",
    "constraints": [
      "0 <= haystack.length <= 10^4",
      "0 <= needle.length <= 10^4",
      "Both haystack and needle consist of only lowercase English characters."
    ],
    "examples": [
      {
        "input": "haystack = 'sadbutsad', needle = 'sad'",
        "output": "0",
        "explanation": "'sad' occurs at index 0 in 'sadbutsad'."
      },
      {
        "input": "haystack = 'leetcode', needle = 'leeto'",
        "output": "-1",
        "explanation": "'leeto' does not occur in 'leetcode'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using the Knuth-Morris-Pratt algorithm for optimal performance.",
      "Look for ways to slide the needle over the haystack."
    ],
    "company": "Pocket Gems"
  },
  {
    "question_id": "",
    "title": "Sort Colors",
    "description": "Given an array nums consisting of only 0s, 1s, and 2s, sort the array in-place so that all 0s come first, followed by all 1s, and all 2s. You must solve this problem without using the sort function.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums, where each integer is 0, 1, or 2.",
    "output_format": "The same input array sorted in non-decreasing order.",
    "constraints": [
      "1 <= nums.length <= 300",
      "nums[i] is either 0, 1, or 2."
    ],
    "examples": [
      {
        "input": "nums = [2, 0, 2, 1, 1, 0]",
        "output": "[0, 0, 1, 1, 2, 2]",
        "explanation": "After sorting, all 0s come first, followed by 1s and then 2s."
      },
      {
        "input": "nums = [2, 0, 1]",
        "output": "[0, 1, 2]",
        "explanation": "The sorted array has 0 at the beginning, followed by 1, and then 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the Dutch National Flag algorithm.",
      "Use two pointers to track the current position of 0s and 2s."
    ],
    "company": "Pocket Gems"
  },
  {
    "question_id": "",
    "title": "Non-negative Integers without Consecutive Ones",
    "description": "Given a non-negative integer n, return the number of ways to write n as the sum of non-negative integers without consecutive ones. This means when forming the sum, no two consecutive integers can appear together. For example, for n = 5, representation such as 1 + 4 or 2 + 3 + 0 is valid, but 1 + 1 + 3 is not valid since it includes consecutive ones.",
    "topic": "Dynamic Programming",
    "subtopic": "Combinatorial",
    "tags": [
      "Dynamic Programming",
      "Combinatorial",
      "Integers"
    ],
    "input_format": "A single non-negative integer n (0 <= n <= 10^9).",
    "output_format": "An integer representing the number of valid representations of n without consecutive ones.",
    "constraints": [
      "0 <= n <= 10^9"
    ],
    "examples": [
      {
        "input": "n = 5",
        "output": "8",
        "explanation": "The valid representations are: 5, 4 + 1, 3 + 2, 3 + 1 + 1, 2 + 2 + 1, 2 + 1 + 1 + 1, 1 + 1 + 1 + 1 + 1, 1 + 4."
      },
      {
        "input": "n = 3",
        "output": "5",
        "explanation": "The valid representations are: 3, 2 + 1, 1 + 2, 1 + 1 + 1, and 0 + 3."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using dynamic programming to store results for subproblems.",
      "Think about accessing Fibonacci sequence properties."
    ],
    "company": "Pocket Gems"
  },
  {
    "question_id": "",
    "title": "Clone Graph",
    "description": "Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph. Each node in the graph contains a value and a list of its neighbors. The deep copy should consist of exactly the same nodes as the original graph, where each value of the nodes is the same, and the neighbors are referring to the newly cloned nodes in the cloned graph. Your solution should not use any extra space for the adjacency list for the graph, apart from the container for the returned clone.",
    "topic": "Graph",
    "subtopic": "Graph Traversal",
    "tags": [
      "Graph",
      "DFS",
      "BFS",
      "Clone"
    ],
    "input_format": "A node in the graph, represented as an object with 'val' (integer) and 'neighbors' (list of adjacent nodes).",
    "output_format": "A node, which is the root of the cloned graph.",
    "constraints": [
      "The number of nodes in the graph is in the range [0, 100].",
      "Each node's value is in the range [-100, 100].",
      "The graph is guaranteed to be connected and undirected."
    ],
    "examples": [
      {
        "input": "Input: adjList = [[2,4],[1,3],[2,4],[1,3]]",
        "output": "Output: [[2,4],[1,3],[2,4],[1,3]]",
        "explanation": "The graph can be represented as: 1 -- 2, 1 -- 4, 2 -- 3, 3 -- 4. The output shows the cloned connections."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using DFS or BFS to traverse the graph.",
      "Use a hashmap to keep track of cloned nodes."
    ],
    "company": "Pocket Gems"
  },
  {
    "question_id": "",
    "title": "Word Break",
    "description": "Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Trie"
    ],
    "input_format": "A string s and a list of strings wordDict.",
    "output_format": "A boolean value indicating whether the string s can be segmented.",
    "constraints": [
      "1 <= s.length <= 300",
      "1 <= wordDict.length <= 1000",
      "1 <= wordDict[i].length <= 20",
      "s and wordDict[i] consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'leetcode', wordDict = ['leet', 'code']",
        "output": "true",
        "explanation": "'leetcode' can be segmented as 'leet code'."
      },
      {
        "input": "s = 'applepenapple', wordDict = ['apple', 'pen']",
        "output": "true",
        "explanation": "'applepenapple' can be segmented as 'apple pen apple'."
      },
      {
        "input": "s = 'catsandog', wordDict = ['cats', 'dog', 'sand', 'and', 'cat']",
        "output": "false",
        "explanation": "'catsandog' cannot be segmented into words from the dictionary."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use dynamic programming to keep track of achievable indices.",
      "If s[0:i] can be segmented, check if s[i:j] is in wordDict.",
      "Consider using a set for wordDict for faster lookups."
    ],
    "company": "Pocket Gems"
  },
  {
    "question_id": "",
    "title": "Top K Frequent Words",
    "description": "Given a list of words, return the top k words that are most frequently used. If two words have the same frequency, return them in alphabetical order. The output should be limited to k words.",
    "topic": "Hash Map",
    "subtopic": "Sorting",
    "tags": [
      "Hash Map",
      "Sorting",
      "Heap"
    ],
    "input_format": "A list of strings words and an integer k.",
    "output_format": "A list of the top k frequent words sorted by frequency and then alphabetically.",
    "constraints": [
      "1 <= words.length <= 10000",
      "1 <= k <= the number of unique words in the list",
      "1 <= words[i].length <= 50"
    ],
    "examples": [
      {
        "input": {
          "words": [
            "i",
            "love",
            "leetcode",
            "i",
            "love",
            "coding"
          ],
          "k": 2
        },
        "output": [
          "i",
          "love"
        ],
        "explanation": "The word 'i' appears 2 times and 'love' appears 2 times as well. Alphabetically, 'i' comes before 'love'."
      },
      {
        "input": {
          "words": [
            "the",
            "day",
            "is",
            "sunny",
            "the",
            "the",
            "the",
            "sunny",
            "is",
            "is"
          ],
          "k": 4
        },
        "output": [
          "the",
          "is",
          "sunny",
          "day"
        ],
        "explanation": "'the' appears 4 times, 'is' appears 3 times, 'sunny' appears 2 times, and 'day' appears 1 time."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to count the frequency of each word.",
      "Consider using a heap to find the top k elements efficiently.",
      "Remember to use a sorting method for dealing with words of equal frequency."
    ],
    "company": "Pocket Gems"
  },
  {
    "question_id": "",
    "title": "Shortest Palindrome",
    "description": "Given a string s, you need to return the shortest palindrome you can create by adding characters in front of it. A palindrome is a string that reads the same backward as forward. You are allowed to add characters before the string only.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Palindrome",
      "Greedy"
    ],
    "input_format": "A single string s consisting of lowercase English letters.",
    "output_format": "A string representing the shortest palindrome formed by adding characters in front of the input string.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of lowercase English letters only."
    ],
    "examples": [
      {
        "input": "s = \"aacecaaa\"",
        "output": "aaacecaaa",
        "explanation": "By adding 'aa' in front of 'aacecaaa', we get 'aaacecaaa' which is a palindrome."
      },
      {
        "input": "s = \"abcd\"",
        "output": "dcbabcd",
        "explanation": "By adding 'dcb' in front of 'abcd', we get 'dcbabcd' which is a palindrome."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using string matching algorithms for efficient solution.",
      "Try to find the longest palindromic prefix."
    ],
    "company": "Pocket Gems"
  },
  {
    "question_id": "",
    "title": "Kth Largest Element in an Array",
    "description": "Given an integer array nums and an integer k, return the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element. You must solve it in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Sorting and Search",
    "tags": [
      "Array",
      "Sorting",
      "Search"
    ],
    "input_format": "An array of integers nums followed by an integer k.",
    "output_format": "An integer representing the kth largest element in the array.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 1, 5, 6, 4], k = 2",
        "output": "5",
        "explanation": "The 2nd largest element in the sorted array [1, 2, 3, 4, 5, 6] is 5."
      },
      {
        "input": "nums = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4",
        "output": "4",
        "explanation": "The 4th largest element in the sorted array [1, 2, 2, 3, 3, 4, 5, 5, 6] is 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a heap to efficiently track the kth largest element.",
      "The kth largest element is the same as the (n-k)th smallest element."
    ],
    "company": "Pocket Gems"
  },
  {
    "question_id": "",
    "title": "Alien Dictionary",
    "description": "There is a new alien language which uses the English alphabet. However, the order of letters in this language is different from the English alphabet. Given a sorted dictionary of words from this alien language, you need to derive the order of the letters in this language. The words are given in the form of an array of strings, and the dictionary is sorted lexicographically by the alien language\u2019s rules. Your goal is to return a string representing the order of letters. If there is an invalid ordering, return an empty string.",
    "topic": "Graph",
    "subtopic": "Topological Sorting",
    "tags": [
      "Graph",
      "Topological Sort",
      "DFS"
    ],
    "input_format": "An array of strings words representing the sorted dictionary.",
    "output_format": "A string representing the order of letters in the alien language, or an empty string if invalid.",
    "constraints": [
      "1 <= words.length <= 100",
      "1 <= words[i].length <= 100",
      "All characters in words[i] are lowercase English letters."
    ],
    "examples": [
      {
        "input": "words = [\"zx\", \"zy\", \"z\"]",
        "output": "zyx",
        "explanation": "The alien dictionary orders 'z' before 'y' based on the first two words."
      },
      {
        "input": "words = [\"abc\", \"ab\"]",
        "output": "",
        "explanation": "The ordering is invalid since 'abc' appears before 'ab' but 'abc' is longer."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Create a graph where each unique letter is a node.",
      "Find edges based on adjacent word pairs to determine letter order."
    ],
    "company": "Pocket Gems"
  },
  {
    "question_id": "",
    "title": "Basic Calculator III",
    "description": "Implement a basic calculator to evaluate a simple string expression containing non-negative integers, '+', '-', '*', and '/' operators, and parentheses. The expression is given as a string, and you need to consider the order of operations: multiplication and division first, followed by addition and subtraction. The result should be an integer, and all division operations should truncate towards zero.",
    "topic": "Mathematics",
    "subtopic": "Expression Evaluation",
    "tags": [
      "Math",
      "String Parsing",
      "Stack"
    ],
    "input_format": "A string expression, containing non-negative integers and operators.",
    "output_format": "An integer representing the result of the evaluated expression.",
    "constraints": [
      "The expression is guaranteed to be valid.",
      "1 <= expression.length <= 10^4"
    ],
    "examples": [
      {
        "input": "expression = '3+2*2'",
        "output": "7",
        "explanation": "Perform 2*2 first, which is 4, and then add 3 to get 7."
      },
      {
        "input": "expression = ' 3/2 '",
        "output": "1",
        "explanation": "3 divided by 2 is 1.5, but the result must truncate towards zero."
      },
      {
        "input": "expression = ' 3+5 / 2 '",
        "output": "5",
        "explanation": "First, compute 5/2 which is 2. Then 3+2 equals 5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a stack to handle operators and operands.",
      "Consider using a variable to keep track of the current number.",
      "Handle each operator based on its precedence."
    ],
    "company": "Pocket Gems"
  },
  {
    "question_id": "",
    "title": "Inorder Successor in BST",
    "description": "Given a binary search tree (BST), find the node that represents the inorder successor of a given node. The inorder successor of a node is the node with the smallest key greater than the key of the given node. If the given node has no inorder successor, return null.",
    "topic": "Tree",
    "subtopic": "Binary Search Tree",
    "tags": [
      "Tree",
      "BST",
      "Successor"
    ],
    "input_format": "The input consists of a root node of a binary search tree and a target node.",
    "output_format": "Return the inorder successor of the target node, or null if there is no successor.",
    "constraints": [
      "The number of nodes in the tree is in the range [1, 10^4].",
      "The values of the nodes are unique."
    ],
    "examples": [
      {
        "input": "root = [2, 1, 3], target = 1",
        "output": "2",
        "explanation": "The inorder traversal of the tree is [1, 2, 3]. The inorder successor of 1 is 2."
      },
      {
        "input": "root = [5, 3, 6, 2, 4, null, null, 1], target = 6",
        "output": "null",
        "explanation": "Node 6 is the largest node in the tree, so it has no inorder successor."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use properties of BST to find the successor.",
      "Consider the structure of the tree when the target node has a right child."
    ],
    "company": "Pocket Gems"
  },
  {
    "question_id": "",
    "title": "Top K Frequent Elements",
    "description": "Given a non-empty array of integers, return the k most frequent elements. You may assume that the answer is unique, and order of output does not matter.",
    "topic": "Hash Table",
    "subtopic": "Frequency Counting",
    "tags": [
      "Hash Table",
      "Sorting",
      "Count",
      "Heap"
    ],
    "input_format": "An integer array nums and an integer k, where 1 <= k <= number of unique elements in the array.",
    "output_format": "A list of the k most frequent elements.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= number of unique elements in the array"
    ],
    "examples": [
      {
        "input": "nums = [1,1,1,2,2,3], k = 2",
        "output": "[1, 2]",
        "explanation": "1 is the most frequent element and 2 is the second most frequent."
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]",
        "explanation": "Only one element is present, so it is returned."
      },
      {
        "input": "nums = [1,2,3,4,5,1,1,2,2], k = 2",
        "output": "[1, 2]",
        "explanation": "1 and 2 are the most frequent elements."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to count the frequency of elements.",
      "Consider using a min-heap to find the top k frequent elements."
    ],
    "company": "Pocket Gems"
  },
  {
    "question_id": "",
    "title": "Insert Delete GetRandom O(1)",
    "description": "Design a data structure that supports the following operations in average O(1) time complexity: insert, delete, and getRandom. The data structure should be able to store unique integers only. Implement the required methods to perform these operations and return appropriate values as needed.",
    "topic": "Data Structure",
    "subtopic": "Randomized Collection",
    "tags": [
      "Data Structure",
      "Randomization",
      "Design"
    ],
    "input_format": "Each method can be called independently with the following parameters: insert(val), delete(val), and getRandom().",
    "output_format": "The insert method returns a boolean indicating if the value was added successfully. The delete method returns a boolean indicating if the value was removed. The getRandom method returns a randomly chosen value from the collection.",
    "constraints": [
      "1 <= val <= 10^6",
      "Each element in the collection is unique."
    ],
    "examples": [
      {
        "input": "Insert 1, Delete 2, Insert 2, GetRandom()",
        "output": "1 or 2",
        "explanation": "Initially, the collection is empty. We insert 1 (returns true), then try to delete 2 (fails, returns false). We insert 2 (returns true). The random number could be either 1 or 2."
      },
      {
        "input": "Insert 3, GetRandom()",
        "output": "3",
        "explanation": "After inserting 3, the only element in the collection is 3, so getRandom() returns 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hashmap to track elements and their indices.",
      "Store the elements in an array for easy random access.",
      "When deleting an element, swap it with the last element of the array to maintain O(1) complexity."
    ],
    "company": "Pocket Gems"
  },
  {
    "question_id": "",
    "title": "Longest Repeating Character Replacement",
    "description": "Given a string s that consists of only uppercase English letters, you can perform at most k character replacements. Find the length of the longest substring that contains the same letter after performing at most k replacements.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Two Pointers"
    ],
    "input_format": "A string s and an integer k, where 1 <= s.length <= 10^5 and 0 <= k <= s.length.",
    "output_format": "An integer representing the length of the longest substring with repeating characters after replacements.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "0 <= k <= s.length"
    ],
    "examples": [
      {
        "input": "s = \"AABABBA\", k = 1",
        "output": "4",
        "explanation": "The longest substring is \"AABA\" after replacing one 'B' with 'A'."
      },
      {
        "input": "s = \"AABABBA\", k = 2",
        "output": "5",
        "explanation": "The longest substring is \"AABAB\" after replacing the two 'B' with 'A'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach.",
      "Keep track of the frequency of characters within the window.",
      "If the number of characters that need to change exceeds k, adjust the window."
    ],
    "company": "Pocket Gems"
  },
  {
    "question_id": "",
    "title": "Find All Duplicates in an Array",
    "description": "Given an array of integers, each of which is in the range [1, n] where n is the size of the array, find all the elements that appear more than once. You must not use extra space for another array and modify the input array in-place to mark duplicates.",
    "topic": "Array",
    "subtopic": "In-place Operations",
    "tags": [
      "Array",
      "Duplicates",
      "In-place"
    ],
    "input_format": "An array of integers nums of length n.",
    "output_format": "A list of integers representing the duplicates in nums.",
    "constraints": [
      "1 <= n <= 10^5",
      "1 <= nums[i] <= n"
    ],
    "examples": [
      {
        "input": "nums = [4, 3, 2, 7, 8, 2, 3, 1]",
        "output": "[2, 3]",
        "explanation": "The numbers 2 and 3 appear more than once in the array."
      },
      {
        "input": "nums = [1, 1, 2]",
        "output": "[1]",
        "explanation": "The number 1 appears more than once."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the indices of the array for marking seen numbers.",
      "A number at index i can be transformed to indicate the presence of the number i + 1."
    ],
    "company": "Pocket Gems"
  }
]