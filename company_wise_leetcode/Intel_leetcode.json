[
  {
    "question_id": "",
    "title": "Find Consecutive Integers from a Data Stream",
    "description": "You are tasked with implementing a data structure that can receive a stream of integers and determine if there exists at least one group of consecutive integers, K, in the stream. Your data structure should support the following operations: addNum(int num) which adds the integer num to the data structure, and containsConsecutive(k) which returns true if there are at least K consecutive integers in the data stream, or false otherwise.",
    "topic": "Data Structure",
    "subtopic": "Stream Processing",
    "tags": [
      "Data Structure",
      "Stream",
      "Consecutive Integers"
    ],
    "input_format": "A stream of integers via addNum method and an integer K via containsConsecutive method.",
    "output_format": "Boolean value indicating the presence of at least K consecutive integers.",
    "constraints": [
      "1 <= num <= 10^6",
      "1 <= k <= 10^6",
      "The addNum method will be called at most 10^4 times."
    ],
    "examples": [
      {
        "input": "addNum(1); addNum(2); addNum(3); containsConsecutive(3)",
        "output": "true",
        "explanation": "The integers 1, 2, and 3 are consecutive."
      },
      {
        "input": "addNum(1); addNum(2); containsConsecutive(4)",
        "output": "false",
        "explanation": "Only integers 1 and 2 exist in the stream, not enough for 4 consecutive numbers."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash set to keep track of the integers.",
      "Check for both lower and upper bounds of consecutive integers."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Maximum Nesting Depth of the Parentheses",
    "description": "Given a string s consisting of '(' and ')', return the maximum nesting depth of the parentheses in s. A string is valid if all parentheses are correctly matched. The nesting depth is the maximum level of depth you can achieve when traversing from the topmost '(' to the corresponding ')'.",
    "topic": "String",
    "subtopic": "Parsing",
    "tags": [
      "String",
      "Parentheses",
      "Depth"
    ],
    "input_format": "A string s consisting of only '(' and ')'.",
    "output_format": "An integer representing the maximum nesting depth of the parentheses.",
    "constraints": [
      "1 <= s.length <= 100",
      "s[i] is either '(' or ')'"
    ],
    "examples": [
      {
        "input": "s = '(1+(2*3)+(4/(5+6)))'",
        "output": "3",
        "explanation": "The maximum depth of nesting is 3, as the deepest nested parentheses are '((4/(5+6)))'."
      },
      {
        "input": "s = '()'",
        "output": "1",
        "explanation": "There is one pair of parentheses, so the maximum depth is 1."
      },
      {
        "input": "s = '(())()'",
        "output": "2",
        "explanation": "The two parenthesis groups have a maximum depth of 2."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a counter to track the current depth while iterating through the string.",
      "Increment the counter for '(' and decrement for ')'."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the elevation map where the width of each bar is 1, calculate how much water it can trap after raining.",
    "topic": "Array",
    "subtopic": "Two Pointers / Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Two Pointers",
      "Water Trapping"
    ],
    "input_format": "An array of integers height representing the elevation map.",
    "output_format": "An integer representing the total amount of trapped rain water.",
    "constraints": [
      "0 <= height.length <= 2 * 10^4",
      "0 <= height[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The structure can trap 6 units of water according to the elevation map."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The structure can trap 9 units of water according to the elevation map."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using two pointers to track the bounds.",
      "You can store the maximum height seen from both ends."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Copy List with Random Pointer",
    "description": "You are given a linked list where each node contains an additional random pointer, which could point to any node in the list or null. Implement a function to create a deep copy of the list, where each new node is a copy of the original node. The new linked list should have the same structure as the original one, including the connections via the random pointers.",
    "topic": "Linked List",
    "subtopic": "Deep Copy",
    "tags": [
      "Linked List",
      "Depth-first Search",
      "Hash Table"
    ],
    "input_format": "The head of the linked list with random pointers.",
    "output_format": "The head of the new linked list that is a deep copy of the original.",
    "constraints": [
      "The number of nodes in the list is in the range [0, 100].",
      "Each node's random pointer can be null or point to any node in the list."
    ],
    "examples": [
      {
        "input": "head = [[7,null],[13,0],[11,4],[10,2],[1,0]]",
        "output": "[[7,null],[13,0],[11,4],[10,2],[1,0]]",
        "explanation": "The original list's structure and random pointers are copied to the new list."
      },
      {
        "input": "head = [[1,1],[2,1]]",
        "output": "[[1,1],[2,1]]",
        "explanation": "Both nodes point to each other in the random pointers."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "You might want to use a hash map to map original nodes to their copies.",
      "Consider how to set the random pointers after copying the nodes."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string s consisting of just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Note that an empty string is also considered valid.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s containing only the characters '(', ')', '{', '}', '[' and ']'.",
    "output_format": "A boolean value indicating whether the string s is valid.",
    "constraints": [
      "0 <= s.length <= 10^4"
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The string contains valid parentheses, as the opening and closing brackets are paired correctly."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "Each type of bracket is closed properly in the correct order."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The parentheses are not closed in the correct order, as '(' is followed by ']' instead of ')'."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The order of the parentheses is incorrect; the string does not maintain valid nesting."
      },
      {
        "input": "s = '{[]}'",
        "output": "true",
        "explanation": "The brackets are properly closed in a valid order."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Check if the closing bracket matches the top of the stack.",
      "An empty string is considered valid."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "Depth-First Search",
      "Recursion"
    ],
    "input_format": "A 2D grid represented as a 2D list of characters, where '1' represents land and '0' represents water.",
    "output_format": "An integer representing the number of islands in the grid.",
    "constraints": [
      "1 <= grid.length <= 300",
      "1 <= grid[i].length <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "[['1', '1', '0', '0', '0'], ['1', '1', '0', '0', '0'], ['0', '0', '1', '0', '0'], ['0', '0', '0', '1', '1']]",
        "output": "3",
        "explanation": "There are three islands in the grid."
      },
      {
        "input": "[['0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0']]",
        "output": "0",
        "explanation": "There are no islands in the grid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth-First Search to explore islands.",
      "Keep track of visited nodes to avoid counting the same island multiple times."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointer"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the indices of the elements.",
      "For each number, check if there exists another number that adds up to the target."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Count Primes",
    "description": "Given an integer n, return the number of prime numbers that are strictly less than n. A prime number is a natural number greater than 1 that is not a product of two smaller natural numbers.",
    "topic": "Math",
    "subtopic": "Prime Numbers",
    "tags": [
      "Math",
      "Prime",
      "Counting"
    ],
    "input_format": "An integer n (0 <= n <= 10^6).",
    "output_format": "An integer representing the count of prime numbers less than n.",
    "constraints": [
      "0 <= n <= 10^6"
    ],
    "examples": [
      {
        "input": "n = 10",
        "output": "4",
        "explanation": "The prime numbers less than 10 are 2, 3, 5, and 7. Thus the count is 4."
      },
      {
        "input": "n = 0",
        "output": "0",
        "explanation": "There are no prime numbers less than 0."
      },
      {
        "input": "n = 1",
        "output": "0",
        "explanation": "There are no prime numbers less than 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the Sieve of Eratosthenes for an efficient solution.",
      "Think about edge cases for small values of n."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A single string s consisting of English letters, digits, symbols, and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s consists of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The longestSubstring is \"abc\" which length is 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The longestSubstring is \"b\" which length is 1."
      },
      {
        "input": "s = \"pwwkew\"",
        "output": "3",
        "explanation": "The longestSubstring is \"wke\" which length is 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window technique to check for repeating characters.",
      "Use a HashMap to store the last index of each character."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock II",
    "description": "You are given an array where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by making as many transactions as you like (i.e., buy one and sell one share of the stock multiple times). However, you must sell before you buy again. Return the maximum profit you can achieve.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithm",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers representing the stock prices where prices[i] is the price of the stock on the ith day.",
    "output_format": "An integer representing the maximum profit possible.",
    "constraints": [
      "1 <= prices.length <= 3 * 10^4",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "7",
        "explanation": "Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5 - 1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6 - 3 = 3. Total profit = 4 + 3 = 7."
      },
      {
        "input": "prices = [1, 2, 3, 4, 5]",
        "output": "4",
        "explanation": "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5 - 1 = 4."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider every time there\u2019s an increase in price; you can capture that profit.",
      "Calculate profit by summing up all positive differences between consecutive days."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for a Least Recently Used (LRU) cache. It should support the following operations: get and put. The get function retrieves the value of the key if the key exists in the cache. Otherwise, it returns -1. The put function updates the value of the key if the key exists. If the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Cache",
    "subtopic": "Data Structure",
    "tags": [
      "Cache",
      "Design",
      "Linked List"
    ],
    "input_format": "The cache will be initialized with a positive capacity. Operations will be provided as a list of tuples where the first element indicates the operation type ('get' or 'put'), the second element represents the key, and the third element is the value (only for 'put' operations).",
    "output_format": "Return the output of get operations as a list of integers or -1 when the key is not present.",
    "constraints": [
      "The capacity of the cache is in the range [1, 1000].",
      "All keys are unique and in the range [1, 10^5]."
    ],
    "examples": [
      {
        "input": "[[\"LRUCache\", 2], [\"put\", 1, 1], [\"put\", 2, 2], [\"get\", 1], [\"put\", 3, 3], [\"get\", 2], [\"put\", 4, 4], [\"get\", 1], [\"get\", 3], [\"get\", 4]]",
        "output": "[null,null,null,1,null,-1,null,-1,3,4]",
        "explanation": "The first put operation adds key 1 with value 1. Next, put key 2 with value 2. The get operation returns the value of key 1 which is 1. The next put operation adds key 3, and since the cache size exceeds 2, it removes the least recently used key (key 2). The next get retrieves -1 for key 2 as it was evicted. The following puts and gets follow the same logic for maintaining the LRU order."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about the trade-off between time complexity for get and put.",
      "Consider using a combination of a hash table and a doubly linked list."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Reverse Words in a String",
    "description": "Given a string s, you need to reverse the order of the words in the string. A word is defined as any sequence of non-space characters. The words in the returned string should be separated by a single space, and there should be no leading or trailing spaces.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "In-place"
    ],
    "input_format": "A single string s, which may contain leading or trailing spaces.",
    "output_format": "A string that contains the words in reverse order.",
    "constraints": [
      "1 <= s.length <= 10^4"
    ],
    "examples": [
      {
        "input": "s = 'the sky is blue'",
        "output": "'blue is sky the'",
        "explanation": "After reversing the words, the string becomes 'blue is sky the'."
      },
      {
        "input": "s = '   hello world   '",
        "output": "'world hello'",
        "explanation": "Leading and trailing spaces are removed and the words are reversed."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a stack to help reverse the words.",
      "Think about how to split the string by spaces and eliminate extra spaces."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithm",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Stock"
    ],
    "input_format": "An array of integers prices representing stock prices.",
    "output_format": "An integer representing the maximum profit that can be achieved.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7,1,5,3,6,4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7,6,4,3,1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price seen so far.",
      "Calculate the potential profit for each day and update the maximum profit."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Reverse Integer",
    "description": "Given a signed 32-bit integer, reverse the digits of the number. If the reversed integer overflows, return 0.",
    "topic": "Mathematics",
    "subtopic": "Integer Manipulation",
    "tags": [
      "Integer",
      "Mathematics",
      "Reverse"
    ],
    "input_format": "A single signed 32-bit integer x.",
    "output_format": "A signed 32-bit integer representing the reversed number, or 0 if it overflows.",
    "constraints": [
      "-2^31 <= x <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "x = 123",
        "output": "321",
        "explanation": "Reversing the digits of 123 gives 321."
      },
      {
        "input": "x = -456",
        "output": "-654",
        "explanation": "Reversing the digits of -456 gives -654."
      },
      {
        "input": "x = 120",
        "output": "21",
        "explanation": "Reversing the digits of 120 gives 021, which is 21."
      },
      {
        "input": "x = 1534236469",
        "output": "0",
        "explanation": "Reversing the digits of 1534236469 causes overflow, so return 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to handle negative numbers and leading zeros.",
      "Check for overflow conditions before returning the result."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Add Two Numbers",
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return it as a linked list.",
    "topic": "Linked List",
    "subtopic": "Addition",
    "tags": [
      "Linked List",
      "Mathematics",
      "Addition"
    ],
    "input_format": "Two linked lists l1 and l2, where each node contains a single digit.",
    "output_format": "A linked list representing the sum of the two numbers.",
    "constraints": [
      "The number of nodes in each linked list is in the range [1, 100].",
      "0 <= Node.val <= 9",
      "It is guaranteed that the last node of the linked list is the least significant digit."
    ],
    "examples": [
      {
        "input": "l1 = [2,4,3], l2 = [5,6,4]",
        "output": "[7,0,8]",
        "explanation": "The sum is 342 + 465 = 807, which is represented as [7,0,8] in reverse order."
      },
      {
        "input": "l1 = [0], l2 = [0]",
        "output": "[0]",
        "explanation": "The sum is 0 + 0 = 0, which is represented as [0]."
      },
      {
        "input": "l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]",
        "output": "[8,9,9,9,0,0,0,1]",
        "explanation": "The sum is 9999999 + 9999 = 10009998, represented as [8,9,9,9,0,0,0,1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dummy node to simplify the result list construction.",
      "Keep track of the carry when summing two digits."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "topic": "Dynamic Programming",
    "subtopic": "Fibonacci Sequence",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Fibonacci"
    ],
    "input_format": "An integer n representing the total number of steps.",
    "output_format": "An integer representing the number of distinct ways to climb to the top.",
    "constraints": [
      "1 <= n <= 45"
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step or 2 steps."
      },
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "There are three ways to climb to the top: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider breaking down the problem into smaller subproblems.",
      "The number of ways to reach the ith step depends on the (i-1)th and (i-2)th steps."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Merge Two Sorted Lists",
    "description": "Given the heads of two sorted linked lists, merge them into one sorted linked list. The merged list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.",
    "topic": "Linked List",
    "subtopic": "Merging Lists",
    "tags": [
      "Linked List",
      "Merge",
      "Sorting"
    ],
    "input_format": "The input consists of two linked list heads, list1 and list2.",
    "output_format": "Return the head of the new sorted linked list.",
    "constraints": [
      "The number of nodes in each list is in the range [0, 50].",
      "The values of the nodes are in the range [-100, 100]."
    ],
    "examples": [
      {
        "input": "list1 = 1 -> 2 -> 4, list2 = 1 -> 3 -> 4",
        "output": "1 -> 1 -> 2 -> 3 -> 4 -> 4",
        "explanation": "Merging the two sorted linked lists results in a new sorted list."
      },
      {
        "input": "list1 = 5 -> 10, list2 = 1 -> 2 -> 3",
        "output": "1 -> 2 -> 3 -> 5 -> 10",
        "explanation": "Merging the two lists results in the sorted list starting from 1 up to 10."
      },
      {
        "input": "list1 = , list2 = 0",
        "output": "0",
        "explanation": "One list is empty. The merged list is just the other list."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a dummy node to simplify the merging process.",
      "Use two pointers to keep track of the current nodes in both lists."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Palindrome Number",
    "description": "Given an integer n, determine if it is a palindrome. An integer is a palindrome when it reads the same backward as forward. For example, 121 is a palindrome, but 123 is not.",
    "topic": "Math",
    "subtopic": "Number Manipulation",
    "tags": [
      "Palindrome",
      "Math",
      "Integer"
    ],
    "input_format": "An integer n.",
    "output_format": "A boolean value indicating whether n is a palindrome.",
    "constraints": [
      "-2^31 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "n = 121",
        "output": "true",
        "explanation": "121 reads the same backward as forward."
      },
      {
        "input": "n = -121",
        "output": "false",
        "explanation": "-121 reads as 121- when reversed, which is not the same."
      },
      {
        "input": "n = 10",
        "output": "false",
        "explanation": "10 reads as 01 when reversed, which is not the same."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how to reverse an integer.",
      "Check edge cases for negative numbers."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Container With Most Water",
    "description": "You are given an integer array height where height[i] represents the height of a vertical line drawn at index i. The width of each line is 1. Find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy"
    ],
    "input_format": "An array of integers height representing the heights of the lines.",
    "output_format": "An integer representing the maximum amount of water that can be contained.",
    "constraints": [
      "2 <= height.length <= 10^5",
      "0 <= height[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "height = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The lines at indices 1 and 8 (heights 8 and 7) form a container that can contain 49 units of water."
      },
      {
        "input": "height = [1,1]",
        "output": "1",
        "explanation": "The only container formed by the two lines can hold 1 unit of water."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use two pointers starting from both ends of the array.",
      "Calculate the area and move the pointer pointing to the shorter line."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "You are given two integer arrays, `nums1` and `nums2`, both of which are sorted in non-decreasing order. Your task is to merge `nums2` into `nums1` as one sorted array. The merge should be done in-place and maintain the sorted order. Note that `nums1` has enough space to hold additional elements from `nums2`. Specifically, the length of `nums1` is `m + n`, where `m` is the number of initialized elements in `nums1` and `n` is the number of elements in `nums2`.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Merge"
    ],
    "input_format": "Two integer arrays `nums1` and `nums2`, with an integer `m` representing the number of initialized elements in `nums1`.",
    "output_format": "The merged array `nums1` in sorted order.",
    "constraints": [
      "1 <= m, n <= 200",
      "0 <= nums1[i], nums2[j] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1, 2, 3, 0, 0, 0], m = 3, nums2 = [2, 5, 6], n = 3",
        "output": "[1, 2, 2, 3, 5, 6]",
        "explanation": "After merging, the sorted array is [1, 2, 2, 3, 5, 6]."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "There's nothing to merge since nums2 is empty."
      },
      {
        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "output": "[1]",
        "explanation": "We directly copy the elements of nums2 since nums1 has no initialized elements."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers starting at the end of each array.",
      "Fill nums1 from the back to avoid overwriting elements in nums1."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Rotate Image",
    "description": "You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). You have to rotate the matrix in place, which means you have to modify the input 2D matrix directly. Do not use an additional matrix to rotate the image.",
    "topic": "Matrix",
    "subtopic": "In-Place Rotation",
    "tags": [
      "Matrix",
      "In-Place",
      "Rotation"
    ],
    "input_format": "A 2D list of integers representing the n x n matrix.",
    "output_format": "The input matrix must be modified in place to represent the rotated image.",
    "constraints": [
      "1 <= n <= 20",
      "-1000 <= matrix[i][j] <= 1000"
    ],
    "examples": [
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "matrix = [[7,4,1],[8,5,2],[9,6,3]]",
        "explanation": "The matrix is rotated 90 degrees clockwise."
      },
      {
        "input": "matrix = [[ 5, 1, 9,11],[ 2, 4, 8,10],[13, 3, 6, 7],[15,14,12,16]]",
        "output": "matrix = [[15,13, 2, 5],[14, 3, 4, 1],[12, 6, 8, 9],[16,10, 7,11]]",
        "explanation": "The matrix is rotated 90 degrees clockwise."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to visualize how the elements move in a 90-degree rotation.",
      "Consider the relationships between the matrix elements' positions."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Linked List Cycle",
    "description": "Given a linked list, determine if it has a cycle in it. A linked list is considered to have a cycle if any node can be reached again by continuously following the next pointer. Do not modify the linked list.",
    "topic": "Linked List",
    "subtopic": "Cycle Detection",
    "tags": [
      "Linked List",
      "Cycle Detection",
      "Two Pointers"
    ],
    "input_format": "The head of the linked list, which may or may not contain a cycle.",
    "output_format": "Return true if the linked list has a cycle, otherwise return false.",
    "constraints": [
      "The number of nodes in the linked list is in the range [0, 10^4].",
      "-10^5 <= Node.val <= 10^5",
      "Follow the next pointer only once while checking for a cycle."
    ],
    "examples": [
      {
        "input": "head = [3,2,0,-4], pos = 1",
        "output": "true",
        "explanation": "There is a cycle in the linked list, where the tail connects back to the second node."
      },
      {
        "input": "head = [1,2], pos = 0",
        "output": "true",
        "explanation": "The linked list has a cycle where the tail connects back to the head node."
      },
      {
        "input": "head = [1], pos = -1",
        "output": "false",
        "explanation": "The linked list has no cycle."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to traverse the linked list.",
      "If the fast pointer meets the slow pointer, there is a cycle."
    ],
    "company": "Intel"
  },
  {
    "question_id": "",
    "title": "Valid Palindrome",
    "description": "Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring case. A string is a palindrome if it reads the same forward and backward after ignoring non-alphanumeric characters and case differences.",
    "topic": "String",
    "subtopic": "Two Pointers",
    "tags": [
      "String",
      "Two Pointers",
      "Palindrome"
    ],
    "input_format": "A single string s consisting of alphanumeric characters and symbols.",
    "output_format": "A boolean value indicating whether the string is a palindrome.",
    "constraints": [
      "0 <= s.length <= 2 * 10^5",
      "s consists of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"A man, a plan, a canal: Panama\"",
        "output": "true",
        "explanation": "After removing non-alphanumeric characters and ignoring case, the string reads 'amanaplanacanalpanama', which is a palindrome."
      },
      {
        "input": "s = \"race a car\"",
        "output": "false",
        "explanation": "After cleaning and normalizing, the string 'raceacar' is not a palindrome."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to compare characters from the start and end.",
      "Ignore non-alphanumeric characters by checking their ASCII values.",
      "Convert the string to lowercase to handle case insensitivity."
    ],
    "company": "Intel"
  }
]