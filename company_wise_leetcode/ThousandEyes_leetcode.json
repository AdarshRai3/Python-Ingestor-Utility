[
  {
    "question_id": "",
    "title": "Clone Graph",
    "description": "Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph. Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors. The graph is guaranteed to be connected and undirected. The nodes are represented by an integer value, and you need to construct a new graph that is a clone of the given graph.",
    "topic": "Graph",
    "subtopic": "Depth First Search",
    "tags": [
      "Graph",
      "DFS",
      "Clone",
      "BFS",
      "Recursion"
    ],
    "input_format": "A node in the graph, which is the entry point of the graph.",
    "output_format": "A node that is the entry point of the cloned graph.",
    "constraints": [
      "The number of nodes in the graph is between 1 and 100.",
      "Each node's value is unique.",
      "The graph is undirected and connected."
    ],
    "examples": [
      {
        "input": "Node(1, [Node(2), Node(4)])",
        "output": "Node(1, [Node(2), Node(4)])",
        "explanation": "The original graph has a node with value 1 connected to nodes with values 2 and 4. The cloned graph should reflect this structure."
      },
      {
        "input": "Node(2, [Node(1), Node(3)])",
        "output": "Node(2, [Node(1), Node(3)])",
        "explanation": "The original node 2 should have connections to its neighbors in the cloned graph as well."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hashmap to keep track of copied nodes.",
      "Utilize DFS or BFS to traverse the graph.",
      "Make sure to handle cycles in the graph."
    ],
    "company": "ThousandEyes"
  },
  {
    "question_id": "",
    "title": "Insert Delete GetRandom O(1)",
    "description": "Design a data structure that supports the following operations in average O(1) time complexity: insert, delete, and getRandom. Implement the RandomizedSet class with the following methods: \n\n- `insert(val: int) -> bool`: Inserts an item val into the set if not already present. Returns true if the item was not present, false otherwise. \n- `remove(val: int) -> bool`: Removes an item val from the set if present. Returns true if the item was present, false otherwise. \n- `getRandom() -> int`: Returns a random element from the current set of elements. Each element must have the same probability of being returned.",
    "topic": "Design",
    "subtopic": "Data Structures",
    "tags": [
      "Design",
      "Hash Table",
      "Random"
    ],
    "input_format": "The methods take integer inputs for the insert and remove operations.",
    "output_format": "The insert and remove methods return a boolean value, while the getRandom method returns an integer.",
    "constraints": [
      "The number of operations will not exceed 1000.",
      "Each value must be unique and between -10^6 and 10^6."
    ],
    "examples": [
      {
        "input": "RandomizedSet randomSet = new RandomizedSet(); randomSet.insert(1); randomSet.insert(2); randomSet.remove(1); int rand = randomSet.getRandom();",
        "output": "2",
        "explanation": "After inserting 1 and 2, removing 1 leaves only 2 in the set. getRandom returns 2."
      },
      {
        "input": "randomSet.insert(3); bool res = randomSet.remove(2);",
        "output": "false",
        "explanation": "2 was never added to the set and thus cannot be removed. The operation returns false."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a combination of a list and a hash map.",
      "Ensure efficient storage and retrieval of elements."
    ],
    "company": "ThousandEyes"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Implement a data structure that follows the constraints of a Least Recently Used (LRU) cache. It should support the following operations: 'get' and 'put'. The 'get' operation should return the value of the key if the key exists in the cache, otherwise return -1. The 'put' operation will add a key-value pair to the cache. If the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Data Structure",
    "subtopic": "Cache",
    "tags": [
      "Cache",
      "Data Structure",
      "LRU"
    ],
    "input_format": "You will be given capacity as an integer and a series of 'get' or 'put' operations.",
    "output_format": "Return the output of the 'get' operations.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key, value <= 10^4"
    ],
    "examples": [
      {
        "input": "cache = LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1,-1,3,4]",
        "explanation": "After putting (1, 1) and (2, 2), 'get(1)' returns 1. When (3, 3) is put, the least recently used (2, 2) is evicted, 'get(2)' returns -1. (4, 4) replaces (1, 1), so 'get(1)' returns -1, 'get(3)' returns 3, and 'get(4)' returns 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a combination of a HashMap and a Doubly Linked List to achieve O(1) operations."
    ],
    "company": "ThousandEyes"
  },
  {
    "question_id": "",
    "title": "Design In-Memory File System",
    "description": "Design a file system that can store files in a tree-like structure in memory. You need to implement the classes FileSystem, File, and Directory. The FileSystem should allow for operations such as creating files and directories with specific paths, retrieving the content of a file, and listing the files and directories at a given path. Each file has a name and content, while directories can contain other files and directories.",
    "topic": "Design",
    "subtopic": "System Design",
    "tags": [
      "Design",
      "File System",
      "Data Structure"
    ],
    "input_format": "A series of operations as described in the methods of the FileSystem class.",
    "output_format": "Return the result of the operations, such as the content of a file or the list of files in a directory.",
    "constraints": [
      "1 <= number of operations <= 10^4",
      "File and directory names consist only of English letters and digits.",
      "Path operations follow Unix-like path standards."
    ],
    "examples": [
      {
        "input": "fileSystem.create('/a/b/c', 'content')\nfileSystem.read('/a/b/c')",
        "output": "'content'",
        "explanation": "A file is created at path '/a/b/c' with content 'content'. When reading the file, it returns the content 'content'."
      },
      {
        "input": "fileSystem.create('/a/d', 'data')\nfileSystem.list('/a')",
        "output": "['b', 'd']",
        "explanation": "A file is created at '/a/d'. Listing the contents of '/a' shows directories 'b' and 'd'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a tree data structure for storing directories and files.",
      "Each directory can be represented as a node with a map of filenames to File/Directory objects."
    ],
    "company": "ThousandEyes"
  },
  {
    "question_id": "",
    "title": "Cache With Time Limit",
    "description": "Implement a time-limited cache system that stores key-value pairs and automatically expires them after a specified time limit. The cache has methods to set a value with a time limit and to retrieve a value if it hasn't expired. If the value has expired, attempts to retrieve it should return -1.",
    "topic": "Design",
    "subtopic": "Cache Design",
    "tags": [
      "Cache",
      "Design",
      "Time Complexity"
    ],
    "input_format": "The cache accepts methods set(key, value, time) and get(key). 'key' is a string, 'value' is an integer, and 'time' is an integer representing the time limit in seconds.",
    "output_format": "Returns -1 if the key has expired, otherwise returns the value associated with the key.",
    "constraints": [
      "1 <= key.length <= 100",
      "1 <= value <= 10^6",
      "1 <= time <= 10^6",
      "The cache may contain at most 10^4 keys at any given time."
    ],
    "examples": [
      {
        "input": "cache.set('a', 1, 5); cache.get('a'); // sleep 3; cache.get('a'); // sleep 3; cache.get('a');",
        "output": "1, 1, -1",
        "explanation": "The value associated with key 'a' was set to 1 and lasts for 5 seconds. After waiting 3 seconds, it is still valid, but after another 3 seconds (totaling 6), it has expired."
      },
      {
        "input": "cache.set('b', 2, 2); cache.get('b'); // sleep 1; cache.get('b'); // sleep 2; cache.get('b');",
        "output": "2, 2, -1",
        "explanation": "The value for key 'b' was set to 2 with a timeout of 2 seconds. It is retrievable in both the first and second calls, but after the second sleep of 2 seconds, it has expired."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a data structure that allows fast retrieval and expiration checks.",
      "You may want to store the timestamp with each key-value pair to track expiration."
    ],
    "company": "ThousandEyes"
  }
]