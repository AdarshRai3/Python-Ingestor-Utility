[
  {
    "question_id": "",
    "title": "Minimum Bit Flips to Convert Number",
    "description": "Given two integers 'start' and 'goal', return the minimum number of bit flips required to convert 'start' to 'goal'. A bit flip is defined as changing a bit from 0 to 1 or from 1 to 0.",
    "topic": "Bit Manipulation",
    "subtopic": "Bitwise Operations",
    "tags": [
      "Bit Manipulation",
      "Bitwise",
      "Mathematics"
    ],
    "input_format": "Two integers, start and goal.",
    "output_format": "An integer representing the minimum number of bit flips required.",
    "constraints": [
      "0 <= start, goal <= 10^9"
    ],
    "examples": [
      {
        "input": "start = 10, goal = 7",
        "output": "3",
        "explanation": "The binary representation of start (10) is 1010 and for goal (7) is 0111. The differing bits are 1, 0, and 0. Thus, 3 flips are needed to change 1010 to 0111."
      },
      {
        "input": "start = 0, goal = 1",
        "output": "1",
        "explanation": "The binary representation of start (0) is 0 and for goal (1) is 1. Only one flip is needed."
      },
      {
        "input": "start = 15, goal = 7",
        "output": "3",
        "explanation": "Start (15) in binary is 1111 and goal (7) is 0111. The first bit needs to be flipped from 1 to 0, resulting in 3 flips."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use XOR to find differing bits.",
      "Count the number of 1s in the result of XOR."
    ],
    "company": "persistent systems"
  },
  {
    "question_id": "",
    "title": "Palindrome Number",
    "description": "Given an integer x, return true if x is a palindrome, and false otherwise. A palindrome is a number that reads the same backward as forward. For example, 121 is a palindrome while 123 is not.",
    "topic": "Math",
    "subtopic": "Number Theory",
    "tags": [
      "Palindrome",
      "Math",
      "Number Theory"
    ],
    "input_format": "An integer x.",
    "output_format": "A boolean value indicating whether x is a palindrome.",
    "constraints": [
      "-2^31 <= x <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "x = 121",
        "output": "true",
        "explanation": "121 reads the same backward."
      },
      {
        "input": "x = -121",
        "output": "false",
        "explanation": "-121 reversed is 121-, which is not the same."
      },
      {
        "input": "x = 10",
        "output": "false",
        "explanation": "10 reversed is 01, which is not the same."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider converting the integer to a string.",
      "Check if the string is equal to its reverse."
    ],
    "company": "persistent systems"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Every opening bracket must have a corresponding closing bracket of the same type.",
    "topic": "Stack",
    "subtopic": "Parentheses Matching",
    "tags": [
      "Stack",
      "String",
      "Validation"
    ],
    "input_format": "A single string s consisting of parentheses.",
    "output_format": "A boolean value indicating whether the input string is valid.",
    "constraints": [
      "0 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The parentheses are closed correctly."
      },
      {
        "input": "s = '({[]})'",
        "output": "true",
        "explanation": "All brackets are matched."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The square bracket is not closed by a matching opening bracket."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The brackets are closed in the wrong order."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Check for matching pairs when encountering a closing bracket."
    ],
    "company": "persistent systems"
  },
  {
    "question_id": "",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, return true if t is an anagram of s and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Hashing",
    "tags": [
      "String",
      "Hashing",
      "Sorting"
    ],
    "input_format": "Two strings s and t, where 1 <= s.length, t.length <= 5 * 10^4.",
    "output_format": "A boolean value indicating whether t is an anagram of s.",
    "constraints": [
      "s and t consist of lowercase alphabets only.",
      "1 <= s.length, t.length <= 5 * 10^4"
    ],
    "examples": [
      {
        "input": "s = 'anagram', t = 'nagaram'",
        "output": "true",
        "explanation": "'nagaram' is an anagram of 'anagram'."
      },
      {
        "input": "s = 'rat', t = 'car'",
        "output": "false",
        "explanation": "'car' is not an anagram of 'rat'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider counting the frequency of each character in both strings.",
      "Sorting the strings is another way to check for anagrams."
    ],
    "company": "persistent systems"
  },
  {
    "question_id": "",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Kadane's Algorithm"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum sum of the contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The contiguous subarray [4,-1,2,1] has the largest sum = 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The only element is 1, which is the largest sum."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The contiguous subarray [5,4,-1,7,8] has the largest sum = 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a variable to keep track of the current subarray sum.",
      "If the current subarray sum becomes negative, reset it to zero.",
      "Keep track of the maximum sum encountered during the process."
    ],
    "company": "persistent systems"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hash Map",
      "Two Pointers"
    ],
    "input_format": "An integer array nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "Assume there is exactly one solution."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9. Hence, the output is [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6. Hence, the output is [1, 2]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the values and their indices.",
      "Check if the complement (target - current number) exists in the map."
    ],
    "company": "persistent systems"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string. For example, in the string 'abcabcbb', the longest substring without repeating characters is 'abc', which has a length of 3.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A string s consisting of ASCII characters.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s consists of English letters, digits, symbols and spaces."
    ],
    "examples": [
      {
        "input": "s = 'abcabcbb'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'abc', which has a length of 3."
      },
      {
        "input": "s = 'bbbbb'",
        "output": "1",
        "explanation": "The longest substring without repeating characters is 'b', which has a length of 1."
      },
      {
        "input": "s = 'pwwkew'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'wke', which has a length of 3."
      },
      {
        "input": "s = ''",
        "output": "0",
        "explanation": "The longest substring without repeating characters is '', which has a length of 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach.",
      "Keep track of characters and their indices using a hashmap."
    ],
    "company": "persistent systems"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A string is called a palindrome if it reads the same forward and backward.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A string s of length n (1 <= n <= 1000).",
    "output_format": "A string representing the longest palindromic substring of s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only digits and English letters."
    ],
    "examples": [
      {
        "input": "s = 'babad'",
        "output": "'bab'",
        "explanation": "The longest palindromic substring is 'bab' or 'aba'."
      },
      {
        "input": "s = 'cbbd'",
        "output": "'bb'",
        "explanation": "The longest palindromic substring is 'bb'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Check substrings of all possible lengths.",
      "Consider expanding around the center of potential palindromes."
    ],
    "company": "persistent systems"
  },
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "You are given two sorted integer arrays nums1 and nums2, where nums1 has a size equal to m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a size of n. Merge nums1 and nums2 into a single sorted array in non-decreasing order.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Merge",
      "Two Pointers"
    ],
    "input_format": "Two sorted arrays nums1 and nums2, and integers m and n representing the number of valid elements in nums1 and the size of nums2, respectively.",
    "output_format": "The merged array in non-decreasing order, stored in nums1.",
    "constraints": [
      "0 <= m, n <= 200",
      "1 <= m + n <= 200",
      "-10^9 <= nums1[i], nums2[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1, 2, 3, 0, 0, 0], m = 3, nums2 = [2, 5, 6], n = 3",
        "output": "[1, 2, 2, 3, 5, 6]",
        "explanation": "After merging, the elements should be sorted in non-decreasing order."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "Since nums2 is empty, result is simply nums1."
      },
      {
        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "output": "[1]",
        "explanation": "Since nums1 has no elements, we should copy nums2 elements to nums1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using two pointers to traverse both arrays.",
      "Remember to start filling nums1 from the end to avoid overwriting."
    ],
    "company": "persistent systems"
  }
]