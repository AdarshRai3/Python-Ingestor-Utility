[
  {
    "question_id": "",
    "title": "Interval List Intersections",
    "description": "Given two lists of intervals, return the intersection of these two lists. Each interval is represented as a pair of integers [start, end]. The intersection of two intervals [a, b] and [c, d] is defined as the interval [max(a, c), min(b, d)] if they overlap. If there's no overlap, the intersection is an empty interval.",
    "topic": "Interval",
    "subtopic": "Intersection",
    "tags": [
      "Interval",
      "Intersection",
      "Array"
    ],
    "input_format": "Two lists of intervals, A and B, where each interval is represented as a list of two integers.",
    "output_format": "A list of intervals representing the intersection of A and B.",
    "constraints": [
      "0 <= A.length, B.length <= 1000",
      "A[i].length == 2 and B[i].length == 2",
      "-10^9 <= A[i][0] < A[i][1] <= 10^9",
      "-10^9 <= B[i][0] < B[i][1] <= 10^9"
    ],
    "examples": [
      {
        "input": "A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]",
        "output": "[[1,2],[5,5],[15,23],[24,24]]",
        "explanation": "The intervals that overlap between A and B are [1,2], [5,5], [15,23], and [24,24]."
      },
      {
        "input": "A = [[1,3],[5,9]], B = []",
        "output": "[]",
        "explanation": "There are no intervals in B, so the intersection is empty."
      },
      {
        "input": "A = [[1,7]], B = [[3,10]]",
        "output": "[[3,7]]",
        "explanation": "The overlap between the intervals is from 3 to 7."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to check for overlaps between intervals.",
      "Use a two-pointer technique to traverse both lists efficiently."
    ],
    "company": "Mixpanel"
  },
  {
    "question_id": "",
    "title": "Flatten Nested List Iterator",
    "description": "You are given a nested list of integers. Each element could be an integer or a list of integers. Implement an iterator to flatten the nested list structure. The iterator should return integers one by one in a flat manner. Your implementation should support the following operations: `hasNext()` and `next()`. The `hasNext()` method should return true if there are still integers to be returned, while the `next()` method should return the next integer in the iteration.",
    "topic": "Design",
    "subtopic": "Iterator",
    "tags": [
      "Design",
      "Iterator",
      "Stack"
    ],
    "input_format": "A nested list containing integers and another nested list.",
    "output_format": "A series of integers returned by the iterator through the `next()` method.",
    "constraints": [
      "The nested list can contain from 0 to 10^4 elements.",
      "Each integer in the input can range from -10^6 to 10^6."
    ],
    "examples": [
      {
        "input": "[1, [2, [3]], 4]",
        "output": "[1, 2, 3, 4]",
        "explanation": "The flattened list in order is [1, 2, 3, 4]."
      },
      {
        "input": "[[1, 1], 2, [1, 1]]",
        "output": "[1, 1, 2, 1, 1]",
        "explanation": "The iterator flattens all values resulting in [1, 1, 2, 1, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of your position in the nested lists.",
      "Ensure the `hasNext()` function checks for the next valid integer."
    ],
    "company": "Mixpanel"
  },
  {
    "question_id": "",
    "title": "Stock Price Fluctuation",
    "description": "You are given an array of stock prices where each element represents the stock price on a given day. Your task is to determine the maximum fluctuation in stock prices over any period of time. A fluctuation is defined as the absolute difference between the maximum and minimum stock prices in a given time interval.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices, where prices[i] is the price of the stock on the i-th day.",
    "output_format": "An integer representing the maximum fluctuation in stock prices.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "prices = [100, 180, 260, 310, 40, 535, 695]",
        "output": "655",
        "explanation": "The maximum fluctuation is between 100 and 695 (the first and last day), which results in 695 - 100 = 595."
      },
      {
        "input": "prices = [10, 20, 30, 40, 50]",
        "output": "40",
        "explanation": "The maximum fluctuation is between 10 and 50, which is 50 - 10 = 40."
      },
      {
        "input": "prices = [50, 50, 50, 50]",
        "output": "0",
        "explanation": "There is no fluctuation since all prices are the same."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a loop to track the maximum and minimum prices seen so far.",
      "The answer can be obtained by calculating the difference between the max and min prices."
    ],
    "company": "Mixpanel"
  }
]