[
  {
    "question_id": "",
    "title": "Divide an Array Into Subarrays With Minimum Cost II",
    "description": "You are given an integer array `cost` where `cost[i]` represents the cost of the i-th element. Your task is to divide this array into `k` non-empty subarrays such that the total cost of the subarrays is minimized. The cost of a subarray is defined as the maximum element within that subarray. Return the minimum total cost for dividing the array into `k` subarrays.",
    "topic": "Dynamic Programming",
    "subtopic": "DP on Arrays",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Minimization"
    ],
    "input_format": "An integer array cost and an integer k, where 1 <= k <= length of cost.",
    "output_format": "An integer representing the minimum total cost of dividing the array into k subarrays.",
    "constraints": [
      "1 <= cost.length <= 300",
      "1 <= cost[i] <= 10^6",
      "1 <= k <= cost.length"
    ],
    "examples": [
      {
        "input": {
          "cost": [
            1,
            3,
            5,
            1,
            2
          ],
          "k": 2
        },
        "output": "5",
        "explanation": "One possible division is [1, 3] and [5, 1, 2]. The maximum of the first subarray is 3 and the second is 5. Their sum is 3 + 5 = 8."
      },
      {
        "input": {
          "cost": [
            4,
            1,
            6,
            3
          ],
          "k": 1
        },
        "output": "6",
        "explanation": "When k = 1, we take the whole array, and the maximum is 6."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using dynamic programming to store results of subproblems.",
      "Think about how to split the array optimally."
    ],
    "company": "jio"
  },
  {
    "question_id": "",
    "title": "Find the Grid of Region Average",
    "description": "Given a 2D grid of integers, calculate the average for each non-overlapping region of size K x K and return the result as a new grid. If a region overlaps or goes out of bounds, disregard those cells when calculating the average.",
    "topic": "Matrix",
    "subtopic": "Grid Traversal",
    "tags": [
      "Matrix",
      "Grid",
      "Average"
    ],
    "input_format": "A 2D list of integers grid and an integer K.",
    "output_format": "A 2D list of floats representing the average for each region.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 100",
      "1 <= K <= min(grid.length, grid[i].length)",
      "-100 <= grid[i][j] <= 100"
    ],
    "examples": [
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,9]], K = 2",
        "output": "[[3.0, 4.5],[7.0, 8.5]]",
        "explanation": "Regions are: [[1,2],[4,5]] \u2192 3.0; [[2,3],[5,6]] \u2192 4.5; [[4,5],[7,8]] \u2192 7.0; [[5,6],[8,9]] \u2192 8.5."
      },
      {
        "input": "grid = [[-1,-1,-1],[0,0,0],[1,1,1]], K = 3",
        "output": "[[0.0]]",
        "explanation": "Only one region of size 3x3 exists, which averages to 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to iterate through the grid without overlapping regions.",
      "Use a nested loop to calculate the sum of elements in each KxK region.",
      "You may need to adjust the boundaries when K is large."
    ],
    "company": "jio"
  },
  {
    "question_id": "",
    "title": "Maximize the Number of Target Nodes After Connecting Trees I",
    "description": "In a forest represented as a collection of trees, each tree can be connected to another tree through edges. Each tree has a set of nodes, and each node has a target value assigned to it. Your goal is to connect these trees in such a way that maximizes the number of nodes that match a given target value after forming the connections. You need to determine how many nodes can be set to your target value after optimally connecting the trees.",
    "topic": "Graph",
    "subtopic": "Tree",
    "tags": [
      "Graph",
      "Tree",
      "Dynamic Programming"
    ],
    "input_format": "A list of trees, where each tree is represented as a list of integers indicating the values of its nodes, followed by an integer representing the target value.",
    "output_format": "An integer representing the maximum number of nodes that can have the target value after connecting the trees.",
    "constraints": [
      "1 <= number of trees <= 100",
      "1 <= number of nodes in each tree <= 100",
      "1 <= target value <= 10^6"
    ],
    "examples": [
      {
        "input": "[[1, 2, 3], [3, 4, 5]], target = 3",
        "output": "4",
        "explanation": "Both trees can connect at the node with value 3, allowing four nodes to have the target value 3."
      },
      {
        "input": "[[1, 1], [1, 2], [2, 2]], target = 2",
        "output": "5",
        "explanation": "After connecting the trees, all nodes can be adjusted to match the target value 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how connecting trees can introduce new target nodes.",
      "Utilize a depth-first search to explore node connections."
    ],
    "company": "jio"
  },
  {
    "question_id": "",
    "title": "Maximize the Number of Target Nodes After Connecting Trees II",
    "description": "You are given two binary trees, and you can connect the nodes from both trees to make paths. Your aim is to maximize the number of target nodes that can be reached from the root of the first tree. A target node is defined as a node in the second tree that can be accessed directly or indirectly through any number of connections. Write a function to return the maximum number of reachable target nodes after connecting the trees optimally.",
    "topic": "Tree",
    "subtopic": "Depth-First Search",
    "tags": [
      "Tree",
      "Graph",
      "DFS",
      "Dynamic Programming"
    ],
    "input_format": "Two binary tree root nodes, root1 and root2.",
    "output_format": "An integer representing the maximum number of reachable target nodes.",
    "constraints": [
      "1 <= number of nodes in each tree <= 1000",
      "Node values are unique and within the range of [-10^4, 10^4]."
    ],
    "examples": [
      {
        "input": "root1 = [1, 2, 3], root2 = [4, 5, 6]",
        "output": "4",
        "explanation": "By connecting node 1 to node 4, node 2 to node 5, and node 3 to node 6, all target nodes are reachable."
      },
      {
        "input": "root1 = [1], root2 = []",
        "output": "0",
        "explanation": "Since the second tree is empty, there are no target nodes to connect."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how tree connections can form paths.",
      "Use Depth-First Search to explore all possibilities.",
      "Think about the structure of the trees and their nodes' relationships."
    ],
    "company": "jio"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers `nums` and an integer `target`.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "Assume there is exactly one solution."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return the indices [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "Because nums[1] + nums[2] == 6, we return the indices [1, 2]."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "Because nums[0] + nums[1] == 6, we return the indices [0, 1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a map to store the numbers and their indices.",
      "Check if the complement of the current number exists in the map."
    ],
    "company": "jio"
  },
  {
    "question_id": "",
    "title": "Making A Large Island",
    "description": "You are given a 2D grid representing a map where 0s represent water and 1s represent land. An island is formed by connecting adjacent lands horizontally or vertically. Your task is to determine the maximum area of an island that can be formed by combining existing islands and extending into water tiles. You can only extend to directly adjacent tiles. Find the largest possible area of an island that can be created by transforming a single water tile (0) to land (1).",
    "topic": "Graph",
    "subtopic": "Depth-first Search",
    "tags": [
      "Grid",
      "DFS",
      "Union Find"
    ],
    "input_format": "A 2D grid of integers where each value is either 0 or 1.",
    "output_format": "An integer representing the maximum area of an island that can be formed.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 50",
      "grid[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "grid = [[1,0,1],[0,0,0],[1,1,1]]",
        "output": "5",
        "explanation": "By flipping the middle water tile (0) at (1,1) to land, we connect two islands creating an area of 5."
      },
      {
        "input": "grid = [[0,0,0],[0,0,0],[0,0,0]]",
        "output": "1",
        "explanation": "There are no islands, but flipping any water tile (0) creates an island of area 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider each water tile as a potential connection point.",
      "Use DFS to explore the area of islands."
    ],
    "company": "jio"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the height of walls, calculate how much water can be trapped after it rains. Each wall's height is represented by an integer in the array, and the width of each wall is 1. Water can only be trapped where it forms a valley between two walls.",
    "topic": "Array",
    "subtopic": "Two Pointer Technique",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "input_format": "An array of non-negative integers heights representing the height of walls.",
    "output_format": "An integer representing the total units of water that can be trapped.",
    "constraints": [
      "0 <= heights.length <= 2 * 10^4",
      "0 <= heights[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "heights = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "Water can be trapped between the heights at indices 3 and 7, yielding 6 units."
      },
      {
        "input": "heights = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "Water can collect between index 2 and index 4, accumulating 9 units."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using two pointers to manage the left and right boundaries.",
      "Keep track of the maximum height from both ends."
    ],
    "company": "jio"
  }
]