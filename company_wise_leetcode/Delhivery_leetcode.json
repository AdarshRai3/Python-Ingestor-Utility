[
  {
    "question_id": "",
    "title": "Integer to English Words",
    "description": "Convert a non-negative integer to its English words representation. The integer is guaranteed to be less than 2^31.",
    "topic": "Mathematics",
    "subtopic": "Number Representation",
    "tags": [
      "Math",
      "String",
      "Conversion"
    ],
    "input_format": "A single integer num, where 0 <= num < 231.",
    "output_format": "A string representing the English words of the integer.",
    "constraints": [
      "0 <= num < 2^31"
    ],
    "examples": [
      {
        "input": "num = 123",
        "output": "One Hundred Twenty Three",
        "explanation": "The number 123 is represented as 'One Hundred Twenty Three' in English."
      },
      {
        "input": "num = 100001",
        "output": "One Hundred Thousand One",
        "explanation": "The number 100001 is represented as 'One Hundred Thousand One' in English."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Break down the number into groups of thousands."
    ],
    "company": "Delhivery"
  },
  {
    "question_id": "",
    "title": "Min Stack",
    "description": "Design a stack that supports the following operations: push, pop, top, and retrieving the minimum element. All operations should be done in constant time. Your stack should support the following methods: \n\n- `void push(int x)`: Pushes the element x onto the stack. \n- `void pop()`: Removes the element on the top of the stack. \n- `int top()`: Get the top element. \n- `int getMin()`: Retrieve the minimum element in the stack.",
    "topic": "Design",
    "subtopic": "Data Structure",
    "tags": [
      "Stack",
      "Design",
      "Data Structure"
    ],
    "input_format": "The input consists of multiple operations as described above.",
    "output_format": "The output should return the result of the `top()` and `getMin()` operations as specified.",
    "constraints": [
      "The number of calls to push, pop, top, and getMin will not exceed 10^4.",
      "All operations are guaranteed to be valid."
    ],
    "examples": [
      {
        "input": "Push(5), Push(3), getMin(), Pop(), getMin(), Push(2), getMin()",
        "output": "[3, 5, 2]",
        "explanation": "Push 5 and 3 onto the stack. The minimum is 3. After popping, the minimum is 5. Push 2, new minimum is 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how to keep track of the minimum element efficiently.",
      "Consider using an auxiliary stack."
    ],
    "company": "Delhivery"
  },
  {
    "question_id": "",
    "title": "Consecutive Numbers",
    "description": "You are given a list of integers where some numbers may repeat. Your task is to determine the length of the longest sequence of consecutive numbers you can form from the list. The sequence must consist of consecutive integers, and numbers in the list may be used only once. Return the length of this longest sequence.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest consecutive sequence.",
    "constraints": [
      "0 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [100, 4, 200, 1, 3, 2]",
        "output": "4",
        "explanation": "The longest consecutive sequence is [1, 2, 3, 4], which has a length of 4."
      },
      {
        "input": "nums = [0, 0, 1, 1, 2, 2]",
        "output": "3",
        "explanation": "The longest consecutive sequence is [0, 1, 2], which has a length of 3."
      },
      {
        "input": "nums = []",
        "output": "0",
        "explanation": "There are no numbers to form a sequence, so the length is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a set to store unique elements for O(1) lookups.",
      "Iterate through each number and check if it's the start of a sequence."
    ],
    "company": "Delhivery"
  }
]