[
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A string is said to be a palindrome if it reads the same forward and backward. You must write a function that runs in O(n^2) time complexity.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Palindrome",
      "Dynamic Programming"
    ],
    "input_format": "A string s, where 1 <= s.length <= 1000.",
    "output_format": "A string representing the longest palindromic substring.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only digits and English letters."
    ],
    "examples": [
      {
        "input": "babad",
        "output": "bab",
        "explanation": "Both 'bab' and 'aba' are valid longest palindromic substrings."
      },
      {
        "input": "cbbd",
        "output": "bb",
        "explanation": "'bb' is the longest palindromic substring."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider checking for palindromes centered around each character and between characters.",
      "Use a dynamic approach to store the results of subproblems."
    ],
    "company": "CEDCOSS"
  },
  {
    "question_id": "",
    "title": "Longest Common Prefix",
    "description": "Write a function that takes an array of strings and returns the longest common prefix shared among all the strings in the array. If there is no common prefix, return an empty string.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Prefix",
      "Manipulation"
    ],
    "input_format": "An array of strings strs, where 1 <= strs.length <= 200 and 0 <= strs[i].length <= 200.",
    "output_format": "A string representing the longest common prefix among the input strings.",
    "constraints": [
      "1 <= strs.length <= 200",
      "0 <= strs[i].length <= 200"
    ],
    "examples": [
      {
        "input": "strs = [\"flower\", \"flow\", \"flight\"]",
        "output": "\"fl\"",
        "explanation": "The longest common prefix among the input strings is 'fl'."
      },
      {
        "input": "strs = [\"dog\", \"racecar\", \"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the input strings, so the output is an empty string."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Check each character of the strings one by one.",
      "Use the first string as the reference for the common prefix length."
    ],
    "company": "CEDCOSS"
  },
  {
    "question_id": "",
    "title": "Move Zeroes",
    "description": "Given an array of integers, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements. Demonstrate an efficient algorithm that achieves this in-place with O(1) extra space.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "In-Place",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "The modified array with all 0's moved to the end.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [0, 1, 0, 3, 12]",
        "output": "[1, 3, 12, 0, 0]",
        "explanation": "After moving the non-zero elements to the front, the array will have all 0's moved to the end."
      },
      {
        "input": "nums = [0, 0, 1]",
        "output": "[1, 0, 0]",
        "explanation": "The non-zero 1 is moved to the front, while the 0's stay at the end."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to track the position of non-zero elements.",
      "Keep swapping elements to move non-zero elements towards the front."
    ],
    "company": "CEDCOSS"
  }
]