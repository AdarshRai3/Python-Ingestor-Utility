[
  {
    "question_id": "",
    "title": "Max Points on a Line",
    "description": "Given an array of points where points[i] = [x_i, y_i] represents a point on the XY plane, return the maximum number of points that lie on the same straight line.",
    "topic": "Geometry",
    "subtopic": "Line and Slope",
    "tags": [
      "Geometry",
      "Hashmap",
      "Math"
    ],
    "input_format": "An array of points represented as a 2D list, where 2 <= points.length <= 3000 and points[i] consists of two integers representing the coordinates of the point.",
    "output_format": "An integer representing the maximum number of points that can lie on a single line.",
    "constraints": [
      "No duplicate points in the input array."
    ],
    "examples": [
      {
        "input": "points = [[1,1],[2,2],[3,3]]",
        "output": "3",
        "explanation": "All three points lie on the line y = x."
      },
      {
        "input": "points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]",
        "output": "4",
        "explanation": "The points [1,1],[2,3],[3,2],[4,1] can form the maximum line."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using the slope formula to compare the slopes between points.",
      "Use a hashmap to count points for each slope."
    ],
    "company": "Waymo"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth-first Search",
    "tags": [
      "Graph",
      "DFS",
      "Matrix"
    ],
    "input_format": "A 2D grid of characters representing the map.",
    "output_format": "An integer representing the number of islands.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "[['1','1','1','1','0'],['1','1','0','1','0'],['1','1','0','0','0'],['0','0','0','0','0']]",
        "output": "1",
        "explanation": "There is one island consisting of '1's."
      },
      {
        "input": "[['1','1','0','0','0'],['1','1','0','0','0'],['0','0','1','0','0'],['0','0','0','1','1']]",
        "output": "3",
        "explanation": "There are three distinct islands."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use Depth-First Search (DFS) or Breadth-First Search (BFS) to explore each island.",
      "To avoid counting the same island multiple times, mark visited positions."
    ],
    "company": "Waymo"
  },
  {
    "question_id": "",
    "title": "Meeting Rooms II",
    "description": "Given an array of meeting time intervals where intervals[i] = [start_i, end_i], return the minimum number of conference rooms required to hold all meetings.",
    "topic": "Greedy",
    "subtopic": "Interval Scheduling",
    "tags": [
      "Greedy",
      "Intervals",
      "Sorting"
    ],
    "input_format": "An array of meeting time intervals represented as an array of pairs, where each pair contains two integers: start and end times.",
    "output_format": "An integer representing the minimum number of conference rooms required.",
    "constraints": [
      "0 <= intervals.length <= 10^4",
      "0 <= start_i < end_i <= 10^6"
    ],
    "examples": [
      {
        "input": "intervals = [[0, 30],[5, 10],[15, 20]]",
        "output": "2",
        "explanation": "The meetings [0, 30] and [5, 10] overlap, requiring two rooms."
      },
      {
        "input": "intervals = [[7, 10],[2, 4]]",
        "output": "1",
        "explanation": "The meetings do not overlap, so only one room is needed."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the intervals based on their start times.",
      "Use a min-heap to track the end times of meetings."
    ],
    "company": "Waymo"
  },
  {
    "question_id": "",
    "title": "Shortest Distance from All Buildings",
    "description": "You are given a 2D grid of size m x n, where each cell can be either a building (represented by the number 1), an obstacle (represented by the number 2), or empty land (represented by the number 0). You want to find a point where the sum of the distances to all buildings is minimized. You need to return the minimum sum of distances from that point to all buildings. If it is not possible to reach all buildings, return -1.",
    "topic": "Graph",
    "subtopic": "Shortest Path",
    "tags": [
      "BFS",
      "Distance",
      "Grid"
    ],
    "input_format": "A 2D grid represented as a list of lists, where each cell is either 0, 1, or 2.",
    "output_format": "An integer representing the minimum sum of distances to all buildings, or -1 if not possible.",
    "constraints": [
      "1 <= m, n <= 20",
      "The number of buildings will not exceed 50."
    ],
    "examples": [
      {
        "input": "grid = [[0,0,0],[1,0,0],[0,0,2]]",
        "output": "2",
        "explanation": "The best location to build is at (0,1). The distance to the building at (1,0) is 1 and the distance to the obstacle at (2,2) is ignored."
      },
      {
        "input": "grid = [[1,0,2],[0,0,0],[2,0,1]]",
        "output": "4",
        "explanation": "The best location is at (1,1) which minimizes the distances to all buildings."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Try using BFS to calculate distances from each building.",
      "Keep track of the total distance and the number of buildings that can reach a point."
    ],
    "company": "Waymo"
  },
  {
    "question_id": "",
    "title": "Minimum Knight Moves",
    "description": "In a chessboard, a knight can move in an 'L' shape: two squares in one direction and then one square perpendicular, or vice versa. The objective of this problem is to determine the minimum number of moves a knight takes to go from a starting position (x1, y1) to a target position (x2, y2) on an infinite chessboard. You need to return the minimum moves required.",
    "topic": "Graph",
    "subtopic": "BFS",
    "tags": [
      "Graph",
      "BFS",
      "Knight's Moves",
      "Shortest Path"
    ],
    "input_format": "Four integers x1, y1, x2, y2 representing the starting and target positions on the chessboard.",
    "output_format": "An integer representing the minimum number of moves needed.",
    "constraints": [
      "-10^4 <= x1, y1, x2, y2 <= 10^4"
    ],
    "examples": [
      {
        "input": "x1 = 0, y1 = 0, x2 = 1, y2 = 2",
        "output": "1",
        "explanation": "The knight can move directly from (0, 0) to (1, 2) in one move."
      },
      {
        "input": "x1 = 0, y1 = 0, x2 = 2, y2 = 1",
        "output": "1",
        "explanation": "The knight can move directly from (0, 0) to (2, 1) in one move."
      },
      {
        "input": "x1 = 0, y1 = 0, x2 = 3, y2 = 3",
        "output": "2",
        "explanation": "The knight can move from (0, 0) to (1, 2) and then to (3, 3) in two moves."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about all possible moves a knight can make from a position.",
      "Consider using a BFS approach to ensure you find the shortest path."
    ],
    "company": "Waymo"
  },
  {
    "question_id": "",
    "title": "Possible Bipartition",
    "description": "Given a set of N people and a list of dislikes pairs, determine whether it is possible to bipartition the set into two groups such that no two people in the same group dislike each other. A bipartition of the set means dividing the set into two non-empty subsets where both subsets contain no pairs of people who dislike each other.",
    "topic": "Graph",
    "subtopic": "Graph Traversal",
    "tags": [
      "Graph",
      "Bipartition",
      "DFS",
      "BFS"
    ],
    "input_format": "An integer N representing the number of people and an array of dislike pairs, where each pair contains two integers representing a dislike relationship between two individuals.",
    "output_format": "Return true if the set can be bipartitioned; otherwise false.",
    "constraints": [
      "1 <= N <= 2000",
      "0 <= dislikes.length <= 10^4",
      "dislikes[i] contains two distinct integers which are valid indices of the set."
    ],
    "examples": [
      {
        "input": "N = 4, dislikes = [[1, 2], [1, 3], [2, 4]]",
        "output": "true",
        "explanation": "We can separate them into Group 1: {1, 4} and Group 2: {2, 3}."
      },
      {
        "input": "N = 3, dislikes = [[1, 2], [1, 3], [2, 3]]",
        "output": "false",
        "explanation": "It's impossible to separate them into two groups without conflicts."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using DFS or BFS to explore the graph.",
      "Use a color array to mark the groups."
    ],
    "company": "Waymo"
  },
  {
    "question_id": "",
    "title": "Valid Sudoku",
    "description": "Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: Each row must contain the digits 1-9 without repetition; each column must contain the digits 1-9 without repetition; and each of the nine 3x3 sub-boxes must contain the digits 1-9 without repetition. Empty cells are represented by the character '.'",
    "topic": "Array",
    "subtopic": "2D Matrix",
    "tags": [
      "Matrix",
      "Validation",
      "Sudoku"
    ],
    "input_format": "A 2D array of characters representing the Sudoku board.",
    "output_format": "A boolean value indicating whether the Sudoku board is valid.",
    "constraints": [
      "board.length == 9",
      "board[i].length == 9",
      "board[i][j] is either a digit '1' to '9' or '.'"
    ],
    "examples": [
      {
        "input": [
          [
            "5",
            "3",
            ".",
            ".",
            "7",
            ".",
            ".",
            ".",
            "."
          ],
          [
            "6",
            ".",
            ".",
            "1",
            "9",
            "5",
            ".",
            ".",
            "."
          ],
          [
            ".",
            "9",
            "8",
            ".",
            ".",
            ".",
            ".",
            "6",
            "."
          ],
          [
            "8",
            ".",
            ".",
            ".",
            "6",
            ".",
            ".",
            ".",
            "3"
          ],
          [
            "4",
            ".",
            ".",
            "8",
            ".",
            "3",
            ".",
            ".",
            "1"
          ],
          [
            "7",
            ".",
            ".",
            ".",
            "2",
            ".",
            ".",
            ".",
            "6"
          ],
          [
            ".",
            "6",
            ".",
            ".",
            ".",
            ".",
            "2",
            "8",
            "."
          ],
          [
            ".",
            ".",
            ".",
            "4",
            "1",
            "9",
            ".",
            ".",
            "5"
          ],
          [
            ".",
            ".",
            ".",
            ".",
            "8",
            ".",
            ".",
            "7",
            "9"
          ]
        ],
        "output": "true",
        "explanation": "The given Sudoku board adheres to all the rules."
      },
      {
        "input": [
          [
            "8",
            "3",
            ".",
            ".",
            "7",
            ".",
            ".",
            ".",
            "."
          ],
          [
            "6",
            ".",
            ".",
            "1",
            "9",
            "5",
            ".",
            ".",
            "."
          ],
          [
            ".",
            "9",
            "8",
            ".",
            ".",
            ".",
            ".",
            "6",
            "."
          ],
          [
            "8",
            ".",
            ".",
            ".",
            "6",
            ".",
            ".",
            ".",
            "3"
          ],
          [
            "4",
            ".",
            ".",
            "8",
            ".",
            "3",
            ".",
            ".",
            "1"
          ],
          [
            "7",
            ".",
            ".",
            ".",
            "2",
            ".",
            ".",
            ".",
            "6"
          ],
          [
            ".",
            "6",
            ".",
            ".",
            ".",
            ".",
            "2",
            "8",
            "."
          ],
          [
            ".",
            ".",
            ".",
            "4",
            "1",
            "9",
            ".",
            ".",
            "5"
          ],
          [
            ".",
            ".",
            ".",
            ".",
            "8",
            ".",
            ".",
            "7",
            "9"
          ]
        ],
        "output": "false",
        "explanation": "The number '8' is repeated in the first column."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using sets to track the numbers in rows, columns, and boxes.",
      "Check for duplicates in each row while iterating through the elements.",
      "Use integer division to determine which 3x3 sub-box a cell belongs to."
    ],
    "company": "Waymo"
  },
  {
    "question_id": "",
    "title": "Divide Array in Sets of K Consecutive Numbers",
    "description": "Given an array of integers, you need to determine if it can be divided into several sets of K consecutive numbers. Each set must contain exactly K integers, and these integers must be consecutive. The function should return true if the array can be divided into such sets, and false otherwise.",
    "topic": "Array",
    "subtopic": "Sorting and Grouping",
    "tags": [
      "Array",
      "Sorting",
      "Group"
    ],
    "input_format": "An integer array nums and an integer k (1 <= k <= nums.length).",
    "output_format": "Boolean value indicating whether the array can be divided into sets of K consecutive numbers.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^9",
      "k must be greater than 0"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 3, 4, 4, 5, 6], k = 4",
        "output": "true",
        "explanation": "The array can be divided into sets: {1, 2, 3, 4} and {4, 5, 6}."
      },
      {
        "input": "nums = [3, 3, 2, 2, 1, 1], k = 3",
        "output": "true",
        "explanation": "The array can be divided into one set: {1, 2, 3}."
      },
      {
        "input": "nums = [1, 2, 3, 4], k = 3",
        "output": "false",
        "explanation": "Cannot form a complete set of size K with these numbers."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a frequency map to count occurrences of each number.",
      "Sort the array and iterate to form sets of consecutive numbers.",
      "Ensure all elements can be grouped together based on their counts."
    ],
    "company": "Waymo"
  },
  {
    "question_id": "",
    "title": "Design Tic-Tac-Toe",
    "description": "Design a Tic-Tac-Toe game that supports players, checks for a win state, and reports the game status. The game board is a 3x3 grid, and players take turns marking a cell in the grid. The first player to align three symbols in a row, column, or diagonal wins the game. If all cells are filled and there is no winner, declare the game a draw.",
    "topic": "Game Theory",
    "subtopic": "Data Structure Design",
    "tags": [
      "Design",
      "Game Theory",
      "Data Structures"
    ],
    "input_format": "N/A",
    "output_format": "N/A",
    "constraints": [
      "The game board is always 3x3.",
      "Players can only use 'X' or 'O' as their symbols.",
      "Players must take turns; no two players can play in the same turn."
    ],
    "examples": [
      {
        "input": "Player X plays at (0, 0), Player O plays at (1, 1), Player X plays at (0, 1), Player O plays at (1, 0), Player X plays at (0, 2)",
        "output": "Player X wins",
        "explanation": "Player X aligns three 'X's in the first row."
      },
      {
        "input": "Player X plays at (0, 0), Player O plays at (0, 1), Player X plays at (0, 2), Player O plays at (1, 0), Player X plays at (2, 0), Player O plays at (1, 1), Player X plays at (2, 1), Player O plays at (1, 2), Player X plays at (2, 2)",
        "output": "Draw",
        "explanation": "All cells are filled without any player winning."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a 2D array to represent the game board.",
      "Check for winning conditions after every move.",
      "Keep track of whose turn it is using a simple toggle."
    ],
    "company": "Waymo"
  },
  {
    "question_id": "",
    "title": "Find Peak Element",
    "description": "A peak element in an array is an element that is greater than its neighbors. Given an input array of integers, you need to find one peak element and return its index. If the array contains multiple peaks, return the index of any one of them. You may assume that the input array is non-empty.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Peak Element"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the index of one peak element.",
    "constraints": [
      "1 <= nums.length <= 1000",
      "1 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "[1, 2, 3, 1]",
        "output": "2",
        "explanation": "The peak element is 3 at index 2, which is greater than its neighbors 2 and 1."
      },
      {
        "input": "[1, 2, 1, 3, 5, 6, 4]",
        "output": "1 or 5",
        "explanation": "Both 2 at index 1 and 6 at index 5 are peak elements."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a binary search approach.",
      "A peak element could be at either end of the array.",
      "If nums[mid] is not peak, move toward the direction of the greater neighbor."
    ],
    "company": "Waymo"
  }
]