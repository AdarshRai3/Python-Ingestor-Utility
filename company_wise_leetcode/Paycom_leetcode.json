[
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "String",
      "Hash Table"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A list of lists, where each sublist contains grouped anagrams.",
    "constraints": [
      "1 <= strs.length <= 1000",
      "0 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "explanation": "The words 'eat', 'tea', and 'ate' are anagrams of each other; likewise, 'nat' and 'tan'. 'bat' does not have any anagrams."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "The input contains only an empty string which is trivially an anagram of itself."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "The input contains one character which is an anagram of itself."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dictionary to map sorted characters to their anagrams.",
      "You can use the sorted() function to generate a key for the dictionary."
    ],
    "company": "Paycom"
  },
  {
    "question_id": "",
    "title": "Degree of an Array",
    "description": "Given an array of integers, find the degree of the array and return its smallest subarray that has the same degree. The degree of an array is defined as the maximum frequency of any element in the array. A subarray is defined by its starting and ending index, inclusive.",
    "topic": "Array",
    "subtopic": "Subarrays",
    "tags": [
      "Array",
      "Frequency",
      "Subarrays"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the smallest subarray that has the same degree as the input array.",
    "constraints": [
      "1 <= nums.length <= 50,000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 2, 3, 1]",
        "output": "2",
        "explanation": "The degree of the array is 2 (the number 2 appears twice). The smallest subarray with the same degree is [2, 2] which has a length of 2."
      },
      {
        "input": "nums = [1, 2, 2, 3, 1, 4, 2]",
        "output": "6",
        "explanation": "The degree of the array is 3 (the number 2 appears three times). The smallest subarray with the same degree is [2, 3, 1, 4, 2] which has a length of 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hashmap to count the frequency of elements.",
      "Track the first and last position of each number.",
      "Find the number(s) with the highest frequency, then get the smallest subarray."
    ],
    "company": "Paycom"
  },
  {
    "question_id": "",
    "title": "Contains Duplicate",
    "description": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "HashSet",
      "Searching"
    ],
    "input_format": "An integer array nums.",
    "output_format": "A boolean value indicating whether any integer appears more than once.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "true",
        "explanation": "The number 1 appears twice in the array."
      },
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "false",
        "explanation": "All numbers are distinct."
      },
      {
        "input": "nums = [1, 0, 1, 1]",
        "output": "true",
        "explanation": "The number 1 appears three times in the array."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a set to track the numbers you've seen.",
      "If a number is already in the set, it means there is a duplicate."
    ],
    "company": "Paycom"
  }
]