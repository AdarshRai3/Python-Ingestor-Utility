[
  {
    "question_id": "",
    "title": "Largest Number After Digit Swaps by Parity",
    "description": "You are given a non-negative integer num. You can swap its digits to create the largest possible number, but you can only swap even digits with even digits and odd digits with odd digits. Return the largest number you can create after performing these swaps.",
    "topic": "Sorting",
    "subtopic": "Digit Manipulation",
    "tags": [
      "Sorting",
      "Greedy",
      "Array"
    ],
    "input_format": "A non-negative integer num.",
    "output_format": "A non-negative integer representing the largest number formed by swapping digits based on their parity.",
    "constraints": [
      "0 <= num <= 10^6"
    ],
    "examples": [
      {
        "input": "num = 2736",
        "output": "7632",
        "explanation": "Swapping 2 with 6 and 3 with 7 gives the largest number: 7632."
      },
      {
        "input": "num = 4215",
        "output": "5241",
        "explanation": "Swapping 2 with 4 and 1 with 5 gives the largest number: 5241."
      },
      {
        "input": "num = 6589",
        "output": "9865",
        "explanation": "Swapping 6 with 8 and 5 with 9 gives the largest number: 9865."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider separating the digits based on parity.",
      "Sort the even digits and the odd digits separately to find the largest arrangement."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Day of the Year",
    "description": "Given a date string in the format YYYY-MM-DD, you need to determine the day of the year for that date. The year can be a leap year or a non-leap year. Leap years are defined as years that are divisible by 4, unless they are divisible by 100. However, leap years divisible by 400 are still considered leap years.",
    "topic": "Date and Time",
    "subtopic": "Date Manipulation",
    "tags": [
      "Date",
      "Leap Year",
      "Mathematics"
    ],
    "input_format": "A string date in the format 'YYYY-MM-DD'.",
    "output_format": "An integer representing the day of the year.",
    "constraints": [
      "The date string is always valid.",
      "Year will be between 1900 and 2100."
    ],
    "examples": [
      {
        "input": "date = '2019-01-09'",
        "output": "9",
        "explanation": "January 9 is the 9th day of the year."
      },
      {
        "input": "date = '2020-05-15'",
        "output": "136",
        "explanation": "2020 is a leap year, and May 15 is the 136th day of the year."
      },
      {
        "input": "date = '2000-02-29'",
        "output": "60",
        "explanation": "2000 is a leap year; February 29 is the 60th day of the year."
      },
      {
        "input": "date = '1900-02-28'",
        "output": "59",
        "explanation": "1900 is not a leap year; February 28 is the 59th day of the year."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how many days each month has, especially during a leap year."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Apply Operations to Make Sum of Array Greater Than or Equal to k",
    "description": "You are given an array of integers and a target integer k. Your task is to perform a series of operations on the array elements, where each operation consists of incrementing any element of the array by 1. Determine the minimum number of operations needed to make the sum of the array greater than or equal to k. If it is not possible to achieve this, return -1.",
    "topic": "Array",
    "subtopic": "Prefix Sum",
    "tags": [
      "Array",
      "Prefix Sum",
      "Greedy"
    ],
    "input_format": "An integer array nums and an integer k.",
    "output_format": "An integer representing the minimum number of operations needed, or -1 if it's not possible.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i] <= 10^5",
      "1 <= k <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3] and k = 10",
        "output": "4",
        "explanation": "The initial sum is 6. We need to perform 4 operations to make the sum at least 10 (1 + 1 + 1 + 1)."
      },
      {
        "input": "nums = [5, 5, 5] and k = 20",
        "output": "5",
        "explanation": "The initial sum is 15. We need to perform 5 operations to reach a sum of at least 20."
      },
      {
        "input": "nums = [1, 1, 1] and k = 5",
        "output": "2",
        "explanation": "The initial sum is 3. We need to perform 2 operations to reach a sum of at least 5."
      },
      {
        "input": "nums = [1, 1, 1] and k = 4",
        "output": "3",
        "explanation": "The initial sum is 3 which is less than 4. We need to perform 3 operations to reach a sum of at least 4."
      },
      {
        "input": "nums = [1] and k = 1",
        "output": "0",
        "explanation": "The initial sum is already 1, which is equal to k."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Calculate the initial sum of the array.",
      "Determine how many more units are needed to reach k.",
      "Each operation increments the sum by 1."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Maximum Strong Pair XOR I",
    "description": "Given an integer array nums, a strong pair is defined as a pair of indices (i, j) such that i < j and nums[i] XOR nums[j] is maximized. Your task is to find the maximum XOR value of any strong pair in the array.",
    "topic": "Array",
    "subtopic": "Bit Manipulation",
    "tags": [
      "Array",
      "Bit Manipulation",
      "XOR"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum XOR value of any strong pair.",
    "constraints": [
      "2 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [3, 5, 2, 10]",
        "output": "15",
        "explanation": "The strong pair (5, 10) produces the maximum XOR value: 5 XOR 10 = 15."
      },
      {
        "input": "nums = [1, 2, 3, 4, 5]",
        "output": "7",
        "explanation": "The strong pair (3, 4) produces the maximum XOR value: 3 XOR 4 = 7."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider the properties of the XOR operation.",
      "Brute force through all pairs if necessary."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Maximum Strong Pair XOR II",
    "description": "You are given an array of integers. A strong pair is defined as a pair of integers (a, b) in the array such that the XOR of a and b is maximized. Your task is to find the maximum XOR value that can be obtained from any strong pair in the array and return that value. If no strong pairs exist, return -1.",
    "topic": "Bit Manipulation",
    "subtopic": "XOR Operations",
    "tags": [
      "Bit Manipulation",
      "XOR",
      "Maximal Pair"
    ],
    "input_format": "An array of integers nums, where 1 <= nums.length <= 10^4 and -10^5 <= nums[i] <= 10^5.",
    "output_format": "An integer representing the maximum XOR value from a strong pair. Return -1 if no strong pair exists.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [3, 10, 5, 25, 2, 8]",
        "output": "28",
        "explanation": "The maximum XOR is obtained from the pair (5, 25) since 5 ^ 25 = 28."
      },
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "7",
        "explanation": "The maximum XOR is obtained from the pair (3, 4) since 3 ^ 4 = 7."
      },
      {
        "input": "nums = [1, 1, 1, 1]",
        "output": "-1",
        "explanation": "All numbers are the same, so no strong pair exists. The result is -1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the properties of XOR and how they can be maximized by varying the bits.",
      "You may need to explore pairs efficiently rather than brute force."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Optimal Account Balancing",
    "description": "You are given a list of transactions between several accounts. Each transaction is represented by a triplet (debtor, creditor, amount), meaning that the debtor owes the creditor a specified amount of money. Your goal is to minimize the number of transactions needed to settle all debts. Each account starts with a balance of zero, and you can assume that the debts can be settled without involving any third parties. Return the minimum number of transactions required to settle all debts.",
    "topic": "Graph",
    "subtopic": "Debt Settlement",
    "tags": [
      "Graph",
      "Greedy",
      "Transaction",
      "Minimization"
    ],
    "input_format": "A list of transactions, where each transaction is a triplet of strings and a positive integer: [(debtor, creditor, amount), ...].",
    "output_format": "An integer representing the minimum number of transactions required to settle all debts.",
    "constraints": [
      "1 <= transactions.length <= 10^5",
      "0 <= amount <= 10^4",
      "debtor and creditor are strings with a maximum length of 20 characters"
    ],
    "examples": [
      {
        "input": "[['Alice', 'Bob', 10], ['Bob', 'Charlie', 5], ['Charlie', 'Alice', 15]]",
        "output": "2",
        "explanation": "Alice pays Bob 10, and then Bob pays Charlie 5, effectively settling all debts with 2 transactions."
      },
      {
        "input": "[['Alice', 'Bob', 50], ['Bob', 'Charlie', 25], ['Charlie', 'Alice', 25]]",
        "output": "1",
        "explanation": "Alice can pay Charlie directly 25, which settles all debts with just 1 transaction."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a hashmap to track the net balance for each account.",
      "Think about how to group transactions to minimize the total numbers."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Robot Bounded In Circle",
    "description": "A robot is initially standing at the origin (0, 0) and facing north. The robot can receive four types of commands: 'G' (go straight), 'L' (turn left), and 'R' (turn right). The commands are given as a string which we can assume only contains these three characters. After executing the commands, you need to determine if the robot will end up in a bounded circle or not. A bounded circle is defined as the robot ending up within a circle of radius 1 centered at the origin.",
    "topic": "Geometry",
    "subtopic": "Simulation",
    "tags": [
      "Simulation",
      "Geometry",
      "Math"
    ],
    "input_format": "A string of commands consisting of 'G', 'L', and 'R'.",
    "output_format": "Return true if the robot is bounded in a circle, otherwise return false.",
    "constraints": [
      "1 <= commands.length <= 100"
    ],
    "examples": [
      {
        "input": "commands = 'GGLLGG'",
        "output": "true",
        "explanation": "The robot moves to (0, 2), then makes a left turn and moves to (0, 0), which is within the circle."
      },
      {
        "input": "commands = 'GLGLGLG'",
        "output": "true",
        "explanation": "The robot moves in a cycle and returns to its initial position after every four commands."
      },
      {
        "input": "commands = 'GGRGGRGGR'",
        "output": "false",
        "explanation": "The robot moves outside the circle after executing the commands."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "After executing the commands, check the robot's final position relative to the origin.",
      "The robot's direction resets after four turns (360 degrees)."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Find the Smallest Divisor Given a Threshold",
    "description": "Given an array of positive integers nums and an integer threshold, you need to find the smallest divisor such that the sum of the quotients of all elements in nums when divided by the divisor is less than or equal to the threshold. A quotient is the result of integer division.",
    "topic": "Binary Search",
    "subtopic": "Searching",
    "tags": [
      "Binary Search",
      "Math",
      "Greedy"
    ],
    "input_format": "The input consists of two parts: an array of integers nums and an integer threshold.",
    "output_format": "An integer representing the smallest divisor.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i] <= 10^6",
      "1 <= threshold <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 5, 9], threshold = 6",
        "output": "5",
        "explanation": "The sum of quotients with divisor 5 would be 1 + 0 + 1 + 1 = 3, which is less than or equal to 6."
      },
      {
        "input": "nums = [44, 22, 33, 11, 1], threshold = 5",
        "output": "44",
        "explanation": "The sum of quotients with divisor 44 would be 1 + 0 + 0 + 0 + 0 = 1, which is less than or equal to 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to optimize the search for the smallest divisor.",
      "Check how the sum of quotients behaves as the divisor changes."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An integer array nums of length n followed by an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers that add up to target.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "Each input would have exactly one solution."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "The numbers at indices 0 and 1 are 2 and 7, which add up to 9."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "The numbers at indices 1 and 2 are 2 and 4, which add up to 6."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "The numbers at indices 0 and 1 are both 3, which add up to 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash table to store the numbers and their indices.",
      "Check if the complement of the current number exists in the hash table."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Jump Game",
    "description": "You are given an integer array nums. You are initially positioned at the first index, and each element in the array represents your maximum jump length at that position. Your goal is to determine if you can reach the last index starting from the first index.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers nums where nums[i] represents the maximum jump length at index i.",
    "output_format": "A boolean value representing whether you can reach the last index from the first index.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, 1, 1, 4]",
        "output": "true",
        "explanation": "From index 0, you can jump to index 1 (3) and then jump to the last index (4)."
      },
      {
        "input": "nums = [3, 2, 1, 0, 4]",
        "output": "false",
        "explanation": "From index 0, you can jump to index 1 (2), and from there, you can't reach the last index."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to keep track of the farthest index you can reach at each step.",
      "If at any index you cannot progress, check the last reachable index."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Rotate Image",
    "description": "You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). You have to rotate the matrix in place, which means you have to modify the input 2D matrix directly. Do not allocate another 2D matrix and do the rotation.",
    "topic": "Matrix",
    "subtopic": "In-place Operations",
    "tags": [
      "Matrix",
      "Rotation",
      "In-place"
    ],
    "input_format": "A 2D matrix represented as a list of lists, where each inner list is of equal length.",
    "output_format": "The input 2D matrix after being rotated 90 degrees clockwise.",
    "constraints": [
      "1 <= n <= 20",
      "0 <= matrix[i][j] <= 100"
    ],
    "examples": [
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[[7,4,1],[8,5,2],[9,6,3]]",
        "explanation": "Rotating the input matrix 90 degrees clockwise results in the output."
      },
      {
        "input": "matrix = [[5]]",
        "output": "[[5]]",
        "explanation": "A single element matrix remains unchanged after rotation."
      },
      {
        "input": "matrix = [[1,2],[3,4]]",
        "output": "[[3,1],[4,2]]",
        "explanation": "The rotated matrix after 90 degrees clockwise is [[3,1],[4,2]]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using layers to rotate the matrix.",
      "You can rotate the elements layer by layer."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Degree of an Array",
    "description": "Given an integer array nums, return the degree of the array. The degree of an array is defined as the maximum frequency of any one of its elements. If multiple elements have the same maximum frequency, the degree is still valid. Additionally, you need to find the minimum length of a subarray that has the same degree as the entire array.",
    "topic": "Array",
    "subtopic": "Frequency Count",
    "tags": [
      "Array",
      "HashMap",
      "Frequency"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the minimum length of a subarray that has the same degree as the entire array.",
    "constraints": [
      "1 <= nums.length <= 50,000",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 2, 3, 1]",
        "output": "2",
        "explanation": "The degree of the array is 2 (the number 2 appears twice). The shortest subarray that has the same degree is [2, 2]."
      },
      {
        "input": "nums = [1, 2, 2, 3, 1, 4, 2]",
        "output": "6",
        "explanation": "The degree of the array is 3 (the number 2 appears three times). The shortest subarray that has the same degree is [2, 2, 3, 1, 4, 2]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to count the frequency of each element.",
      "Track the first and last position of each element for subarray length."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Linked List Cycle",
    "description": "Given a linked list, determine if it has a cycle in it. A linked list is said to have a cycle if there is a node in the list that can be reached again by continuously following the next pointer. Do not modify the linked list.",
    "topic": "Linked List",
    "subtopic": "Cycle Detection",
    "tags": [
      "Linked List",
      "Cycle",
      "Pointer"
    ],
    "input_format": "The function receives the head of a linked list.",
    "output_format": "Return true if there is a cycle in the linked list, otherwise return false.",
    "constraints": [
      "The number of nodes in the linked list is in the range [0, 10^4].",
      "The values of the nodes are not relevant to the cycle detection."
    ],
    "examples": [
      {
        "input": "head = [3,2,0,-4], pos = 1",
        "output": "true",
        "explanation": "The tail connects to the second node, creating a cycle."
      },
      {
        "input": "head = [1,2], pos = 0",
        "output": "true",
        "explanation": "The tail connects to the first node, creating a cycle."
      },
      {
        "input": "head = [1], pos = -1",
        "output": "false",
        "explanation": "There are no cycles, as there is only one node with no connections."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using two-pointer technique: a slow pointer and a fast pointer."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within a string.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A single string s consisting of English letters, digits, symbols, and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 5 * 10^4",
      "s consists of English letters, digits, symbols and spaces."
    ],
    "examples": [
      {
        "input": "s = 'abcabcbb'",
        "output": "3",
        "explanation": "The longest substring without repeating is 'abc', with the length of 3."
      },
      {
        "input": "s = 'bbbbb'",
        "output": "1",
        "explanation": "The longest substring without repeating is 'b', with the length of 1."
      },
      {
        "input": "s = 'pwwkew'",
        "output": "3",
        "explanation": "The longest substring without repeating is 'wke', with the length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window technique to keep track of characters you've seen.",
      "Use a HashMap to store the last index of each character."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Moving Average from Data Stream",
    "description": "Implement a class MovingAverage that keeps track of the moving average of a stream of integers. The class should have the following methods: \n- `MovingAverage(int size)`: Initializes the moving average with a specified size. \n- `double next(int val)`: Adds the next value to the stream and returns the moving average of the last 'size' values.\nThe moving average is the sum of the last 'size' values divided by 'size'. If less than 'size' values have been added, return the average of the values that have been added.",
    "topic": "Design",
    "subtopic": "Data Stream",
    "tags": [
      "Design",
      "Data Stream",
      "Sliding Window"
    ],
    "input_format": "The `next(int val)` method will be called with integers in a stream.",
    "output_format": "The `next(int val)` method returns a double representing the current moving average.",
    "constraints": [
      "1 <= size <= 1000",
      "-10^5 <= val <= 10^5"
    ],
    "examples": [
      {
        "input": "MovingAverage m = new MovingAverage(3);\nm.next(1);\nm.next(10);\nm.next(3);\nm.next(5);",
        "output": "3.66667",
        "explanation": "The moving averages after adding 1, 10, and 3 are 1.0, 5.5, and 4.66667. After adding 5, the moving average of the last three values [10, 3, 5] is (10 + 3 + 5) / 3 = 6.0."
      },
      {
        "input": "MovingAverage m = new MovingAverage(1);\nm.next(5);\nm.next(10);",
        "output": "10.0",
        "explanation": "With size 1, the moving average only considers the latest value added, which is 10 after adding 5 and then 10."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a queue to keep track of the last 'size' values.",
      "To calculate the moving average, maintain a running sum."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Remove Duplicates from Sorted Array",
    "description": "Given a sorted array of integers, you need to implement a function that removes the duplicates in-place such that each element appears only once and returns the new length of the array. Do not allocate extra space for another array to hold the results.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "In-Place"
    ],
    "input_format": "A sorted array of integers nums.",
    "output_format": "An integer representing the new length of the array after removing duplicates.",
    "constraints": [
      "0 <= nums.length <= 3 * 10^4",
      "-10^4 <= nums[i] <= 10^4",
      "The input array is sorted in non-decreasing order."
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 2]",
        "output": "2",
        "explanation": "After removing duplicates, the array is now [1, 2], and its new length is 2."
      },
      {
        "input": "nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]",
        "output": "5",
        "explanation": "After removing duplicates, the array becomes [0, 1, 2, 3, 4], with a new length of 5."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to track the unique elements.",
      "Only move the second pointer when you find a new unique element."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Longest Common Prefix",
    "description": "Write a function to find the longest common prefix string among an array of strings. If there is no common prefix, return an empty string. A common prefix is defined as a string that appears as a prefix in all given strings.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Prefix",
      "Manipulation"
    ],
    "input_format": "An array of strings `strs` where 1 <= strs.length <= 200 and 0 <= strs[i].length <= 200.",
    "output_format": "A string representing the longest common prefix.",
    "constraints": [
      "1 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "All strings in the input are lowercase letters."
    ],
    "examples": [
      {
        "input": "strs = [\"flower\", \"flow\", \"flight\"]",
        "output": "\"fl\"",
        "explanation": "The common prefix among the strings is 'fl'."
      },
      {
        "input": "strs = [\"dog\", \"racecar\", \"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the strings."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Compare the characters from the beginning of the strings.",
      "Stop when a mismatch is found.",
      "Start with the first string and iterate through the rest."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Search in Rotated Sorted Array",
    "description": "You are given an integer array nums sorted in ascending order, which is then rotated at some pivot unknown to you beforehand. Write a function to search for a target value in the rotated array. If the target exists in the array, return its index. Otherwise, return -1. You must write an algorithm with O(log n) runtime complexity.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Search"
    ],
    "input_format": "An integer array nums and an integer target.",
    "output_format": "An integer representing the index of the target in the array or -1 if not found.",
    "constraints": [
      "1 <= nums.length <= 5000",
      "\u221210^4 <= nums[i] <= 10^4",
      "All integers in nums are unique.",
      "It is guaranteed that the array is rotated at some pivot."
    ],
    "examples": [
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 0",
        "output": "4",
        "explanation": "The target 0 is found at index 4."
      },
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 3",
        "output": "-1",
        "explanation": "The target 3 does not exist in the array."
      },
      {
        "input": "nums = [1], target = 0",
        "output": "-1",
        "explanation": "The target 0 does not exist in the array."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a modified binary search approach.",
      "Identify whether the pivot is on the left or right of mid.",
      "Decide to which half to search next based on the target value."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Contains Duplicate",
    "description": "Given an integer array, determine if any value appears at least twice in the array. Your solution should have a linear runtime complexity.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Duplicate"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A boolean value, true if any integer appears at least twice, otherwise false.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "true",
        "explanation": "The number 1 appears twice in the array."
      },
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "false",
        "explanation": "No numbers appear more than once."
      },
      {
        "input": "nums = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]",
        "output": "true",
        "explanation": "The number 1 appears three times, and 3 appears three times."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Think about using a set to track the numbers you have seen."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Palindrome Linked List",
    "description": "Given a singly linked list, determine if it is a palindrome. A palindrome is a sequence that reads the same backward as forward. You need to implement a function that checks if the linked list is a palindrome.",
    "topic": "Linked List",
    "subtopic": "Two Pointers",
    "tags": [
      "Linked List",
      "Palindrome",
      "Two Pointers"
    ],
    "input_format": "The head of a singly linked list.",
    "output_format": "A boolean value, true if the linked list is a palindrome, false otherwise.",
    "constraints": [
      "The number of nodes in the linked list is in the range [1, 10^5].",
      "Node.val is a digit."
    ],
    "examples": [
      {
        "input": "head = [1, 2, 2, 1]",
        "output": "true",
        "explanation": "The linked list reads the same forward and backward."
      },
      {
        "input": "head = [1, 2]",
        "output": "false",
        "explanation": "The linked list does not read the same forward and backward."
      },
      {
        "input": "head = [1, 2, 3, 2, 1]",
        "output": "true",
        "explanation": "The linked list reads the same forward and backward."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a fast and slow pointer to find the midpoint of the linked list.",
      "Reverse the second half of the linked list and compare it with the first half."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Number of Divisible Triplet Sums",
    "description": "Given an array of integers, determine the number of unique triplets (i, j, k) such that the sum nums[i] + nums[j] + nums[k] is divisible by a given integer d. A triplet is formed by three different indices satisfying 0 <= i < j < k < n.",
    "topic": "Array",
    "subtopic": "Combination",
    "tags": [
      "Array",
      "Combination",
      "Divisibility"
    ],
    "input_format": "An array of integers nums followed by an integer d.",
    "output_format": "An integer representing the number of unique triplets whose sum is divisible by d.",
    "constraints": [
      "1 <= nums.length <= 1000",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= d <= 100"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5], d = 3",
        "output": "4",
        "explanation": "The valid triplets are (1, 2, 3), (1, 4, 5), (2, 4, 5), and (3, 4, 5), which all sum to values divisible by 3."
      },
      {
        "input": "nums = [0, 1, 2, 3, 4, 5], d = 6",
        "output": "10",
        "explanation": "All combinations of indices yield sums of 6 or more, particularly sums like (1, 2, 3) and etc. that are divisible by 6."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a nested loop to find all triplet combinations.",
      "Check the modulo condition after calculating the sum of each triplet.",
      "Using a set can help in ensuring uniqueness of triplets."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for a Least Recently Used (LRU) cache. It should support the following operations: get and put. The 'get' operation should return the value of the key if the key exists in the cache, otherwise return -1. The 'put' operation should update or insert the key-value pair. If the number of keys exceeds the capacity, it should invalidate the least recently used key before inserting a new key-value pair.",
    "topic": "Data Structures",
    "subtopic": "Cache",
    "tags": [
      "Hash Map",
      "Linked List",
      "Design"
    ],
    "input_format": "The cache should be initialized with a positive capacity.",
    "output_format": "Return the value of the key if the key exists, or -1 if it does not. For the put operation, there is no return value.",
    "constraints": [
      "The capacity of the cache is between 1 and 1000.",
      "The keys and values are both integers.",
      "The operations will be called at most 10^4 times."
    ],
    "examples": [
      {
        "input": "cache = LRUCache(2);\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);",
        "output": "1",
        "explanation": "Return 1 because the key 1 was found."
      },
      {
        "input": "cache.put(3, 3);\ncache.get(2);",
        "output": "-1",
        "explanation": "Return -1 because the key 2 was evicted."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a combination of a doubly linked list and a hash map.",
      "Always keep track of the least recently used item."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Minimum Increment to Make Array Unique",
    "description": "Given an array of integers, you need to make the elements of the array unique by incrementing some elements. Your goal is to find the minimum number of increments required to make all elements unique. An increment consists of adding 1 to any element in the array.",
    "topic": "Array",
    "subtopic": "Greedy",
    "tags": [
      "Array",
      "Greedy",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the minimum number of increments required to make the array unique.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 1, 2, 1, 0]",
        "output": "6",
        "explanation": "After making all elements unique: [3, 4, 5, 6, 7, 8], the total increments are (3\u21923) + (2\u21924) + (1\u21925) + (2\u21926) + (1\u21927) + (0\u21928) = 6."
      },
      {
        "input": "nums = [1, 2, 2]",
        "output": "1",
        "explanation": "After making all elements unique: [1, 2, 3], the total increments needed are (2\u21923) = 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the array first to simplify the problem of finding duplicates.",
      "Keep track of the last unique number as you iterate."
    ],
    "company": "ZScaler"
  },
  {
    "question_id": "",
    "title": "Word Ladder",
    "description": "Given two words, beginWord and endWord, and a dictionary's word list, find the length of the shortest transformation sequence from beginWord to endWord. The transformation sequence must consist of words from the dictionary, changing only one letter at a time. Each transformed word must exist in the dictionary. Return 0 if there is no such transformation sequence.",
    "topic": "Graph",
    "subtopic": "Breadth-First Search",
    "tags": [
      "Graph",
      "BFS",
      "String"
    ],
    "input_format": "Two strings beginWord and endWord, and a list of strings wordList, representing the dictionary.",
    "output_format": "An integer representing the length of the shortest transformation sequence.",
    "constraints": [
      "1 <= beginWord.length <= 10",
      "1 <= endWord.length <= 10",
      "1 <= wordList.length <= 5000",
      "beginWord, endWord and every word in wordList consist of lowercase alphabetic characters.",
      "beginWord != endWord"
    ],
    "examples": [
      {
        "input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]",
        "output": "5",
        "explanation": "The shortest transformation sequence is: \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\", which is 5 words long."
      },
      {
        "input": "beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]",
        "output": "0",
        "explanation": "Since \"cog\" is not in the wordList, there is no possible transformation."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using BFS for the shortest path.",
      "Use a queue to explore each transformation level."
    ],
    "company": "ZScaler"
  }
]