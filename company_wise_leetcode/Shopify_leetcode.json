[
  {
    "question_id": "",
    "title": "Walking Robot Simulation",
    "description": "A robot is located at the origin (0, 0) of a 2D grid and can move in four directions: north (up), south (down), east (right), and west (left). Given a sequence of commands, you need to simulate the movement of the robot. Each command is either a direction (N, S, E, W) or an integer which represents the number of steps the robot should take in the last perceived direction.\n\nYour task is to determine the final coordinates of the robot after executing all the commands. The robot cannot go outside the grid limits. The commands may include 'R' for right, 'L' for left, and 'M' for move forward a step. The grid is bound by a defined width and height. If the robot tries to move outside these limits, it will not move and stay in the same position. \n\nReturn the final coordinates of the robot after executing all the commands.",
    "topic": "Simulation",
    "subtopic": "Movement Simulation",
    "tags": [
      "Simulation",
      "Grid",
      "Robot"
    ],
    "input_format": "A string commands representing the sequence of commands followed by integers that indicate the grid's width and height.",
    "output_format": "A string representing the final coordinates in the format '(x, y)'.",
    "constraints": [
      "1 <= commands.length <= 1000",
      "1 <= width, height <= 100"
    ],
    "examples": [
      {
        "input": "commands = 'N2 E1 S1 M3', width = 5, height = 5",
        "output": "(2, 1)",
        "explanation": "The robot starts at (0,0), moves north to (0,2), east to (1,2), south to (1,1) and tries to move 3 times in the facing direction but is limited by the grid bounds."
      },
      {
        "input": "commands = 'M1 R M1', width = 4, height = 4",
        "output": "(1, 0)",
        "explanation": "The robot only moves right and doesn't go out of bounds."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Keep track of the last direction the robot faced.",
      "Ensure to implement the bounds check after every move."
    ],
    "company": "Shopify"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for a Least Recently Used (LRU) cache. It should support the following operations: get and put. The get operation retrieves the value of the key if the key exists in the cache, otherwise returns -1. The put operation will update the value of the key if the key exists. If the key does not exist, it will add the key-value pair to the cache. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Data Structure",
    "subtopic": "Cache",
    "tags": [
      "Cache",
      "Linked List",
      "Design"
    ],
    "input_format": "The cache will be initialized with a positive integer capacity, followed by operations in the form of (operation, key, value), where operation can be 'get' or 'put'.",
    "output_format": "Return the result of each 'get' operation as an integer. For 'put' operations, return nothing.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10^4",
      "0 <= value <= 10^4",
      "At most 10^4 calls will be made to get and put."
    ],
    "examples": [
      {
        "input": "cache = LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1, -1, -1, 4]",
        "explanation": "1 is returned because it is in the cache. -1 is returned as 2 was evicted. -1 for 1 being evicted, 4 is returned as it is in the cache."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to store the key-value pairs.",
      "A doubly linked list can help to maintain the order of usage."
    ],
    "company": "Shopify"
  },
  {
    "question_id": "",
    "title": "Design In-Memory File System",
    "description": "Implement an in-memory file system that supports the following operations: create a file, read a file, write to a file, and list the contents of a directory. Each file should have a unique name and support basic read/write operations. The file system should allow for nested directories, and operations should handle invalid paths gracefully.",
    "topic": "Design",
    "subtopic": "File System",
    "tags": [
      "Design",
      "File System",
      "Data Structure"
    ],
    "input_format": "Class methods that can create, read, write, and list files/directories.",
    "output_format": "The return values from the methods that provide results of operations.",
    "constraints": [
      "The maximum depth of directories is 100.",
      "A file name or directory name is guaranteed to be unique within its parent directory.",
      "Each file can have a content of up to 10^6 characters."
    ],
    "examples": [
      {
        "input": "fs = FileSystem(); fs.create('/a/b/c.txt', 'Hello World'); fs.read('/a/b/c.txt')",
        "output": "'Hello World'",
        "explanation": "The file '/a/b/c.txt' is created with the content 'Hello World'."
      },
      {
        "input": "fs.create('/a/b/d.txt', 'Goodbye') fs.list('/a/b')",
        "output": "['c.txt', 'd.txt']",
        "explanation": "Listing the contents of directory '/a/b' shows files 'c.txt' and 'd.txt'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a tree structure for directories.",
      "Use a hashmap to store file contents against their paths."
    ],
    "company": "Shopify"
  },
  {
    "question_id": "",
    "title": "Encode and Decode TinyURL",
    "description": "TinyURL is a URL shortening service that converts a long URL into a short and memorable one. You need to implement a class that provides methods to encode a given long URL to a short URL and decode a short URL back to the original long URL. Each encoded URL should be unique and should be reversible.",
    "topic": "Design",
    "subtopic": "Data Structures",
    "tags": [
      "Design",
      "Data Structures",
      "Hashing"
    ],
    "input_format": "A string representing a long URL that needs to be encoded.",
    "output_format": "A string representing the encoded short URL. Upon decoding, it should return the original long URL.",
    "constraints": [
      "The long URL is guaranteed to be a valid URL.",
      "The output of encoding will be a unique short URL.",
      "The maximum length of the long URL will not exceed 10^4 characters."
    ],
    "examples": [
      {
        "input": "longUrl = \"https://leetcode.com/problems/design-tinyurl\"",
        "output": "shortUrl = \"http://tinyurl.com/abcd1234\"",
        "explanation": "The long URL is shortened to a unique short URL."
      },
      {
        "input": "shortUrl = \"http://tinyurl.com/abcd1234\"",
        "output": "longUrl = \"https://leetcode.com/problems/design-tinyurl\"",
        "explanation": "The short URL is decoded back to the original long URL."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a mapping from short URLs to long URLs.",
      "A randomized string generation can help in unique URL creation."
    ],
    "company": "Shopify"
  },
  {
    "question_id": "",
    "title": "Design a Text Editor",
    "description": "You are tasked with creating a basic text editor that can perform a series of operations. The editor should support the following commands: 'add', 'delete', 'undo', and 'redo'. The 'add' command will insert a character at the end of the current text. The 'delete' command will remove the last character from the text. The 'undo' command will reverse the last action, while the 'redo' command will revert back to the undone action. Your implementation must handle a sequence of operations efficiently.",
    "topic": "String Manipulation",
    "subtopic": "Text Editor Simulation",
    "tags": [
      "String",
      "Simulation",
      "Undo/Redo"
    ],
    "input_format": "A list of operations, where each operation is a dictionary with a 'type' key (either 'add', 'delete', 'undo', or 'redo') and an optional 'char' key for 'add' type operations.",
    "output_format": "The final content of the text editor after performing all operations.",
    "constraints": [
      "1 <= operations.length <= 10^5",
      "Each character is a lowercase English letter."
    ],
    "examples": [
      {
        "input": "[{'type': 'add', 'char': 'a'}, {'type': 'add', 'char': 'b'}, {'type': 'delete'}, {'type': 'undo'}, {'type': 'redo'}]",
        "output": "ab",
        "explanation": "First, 'a' and 'b' are added. Then, 'b' is deleted. Undo reverses the delete, resulting in 'ab' again."
      },
      {
        "input": "[{'type': 'add', 'char': 'x'}, {'type': 'delete'}, {'type': 'delete'}, {'type': 'undo'}]",
        "output": "x",
        "explanation": "Adding 'x' then deleting twice results in an empty text. The undo restores 'x'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a stack to implement the undo and redo functionality efficiently.",
      "Keep track of executed operations to revert when necessary."
    ],
    "company": "Shopify"
  },
  {
    "question_id": "",
    "title": "Find Users With Valid E-Mails",
    "description": "Given a list of user emails, determine which emails are valid according to standard email formatting rules. An email is considered valid if it has the form 'local-part@domain', where the local-part can contain letters, numbers, and special characters, and the domain must contain at least one dot and cannot start or end with a dot.",
    "topic": "String",
    "subtopic": "Validation",
    "tags": [
      "String",
      "Validation",
      "Email"
    ],
    "input_format": "A list of strings, where each string represents a user email.",
    "output_format": "A list of valid emails extracted from the input list.",
    "constraints": [
      "1 <= emails.length <= 10^4",
      "1 <= emails[i].length <= 100"
    ],
    "examples": [
      {
        "input": "emails = [\"test.email@gmail.com\", \"invalid..email@domain.com\", \"user@domain.co\"]",
        "output": "[\"test.email@gmail.com\", \"user@domain.co\"]",
        "explanation": "The valid emails are 'test.email@gmail.com' and 'user@domain.co'. 'invalid..email@domain.com' is invalid because it has consecutive dots."
      },
      {
        "input": "emails = [\"username@.com\", \"user@domain.com\", \"user@domain.co.in\"]",
        "output": "[\"user@domain.com\", \"user@domain.co.in\"]",
        "explanation": "'username@.com' is invalid because the domain starts with a dot."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Regular expressions can simplify the validation of email formats.",
      "Consider edge cases such as multiple dots in the local-part or domain."
    ],
    "company": "Shopify"
  },
  {
    "question_id": "",
    "title": "Design Tic-Tac-Toe",
    "description": "Implement the Tic-Tac-Toe game using a class that provides a way to play the game on a 3x3 grid. The game should allow two players to alternate turns placing their markers (X or O) and determine if there is a winner or if the game is a draw after each move.",
    "topic": "Design",
    "subtopic": "Object-Oriented Design",
    "tags": [
      "Design",
      "Game",
      "Matrix"
    ],
    "input_format": "The game will receive a method call with two parameters: player and position. Player will be either 1 (for 'X') or 2 (for 'O'), and position will be an integer in the range from 0 to 8, indicating the position on the 3x3 grid (0 = top-left, 8 = bottom-right).",
    "output_format": "After each move, return '1' if player 1 wins, '2' if player 2 wins, '0' for a draw, or '-1' if the game is still ongoing.",
    "constraints": [
      "The input parameters for each move will be valid.",
      "Players alternate their moves, starting with player 1.",
      "A player cannot move to an already occupied position."
    ],
    "examples": [
      {
        "input": "move(1, 0), move(2, 1), move(1, 4), move(2, 2), move(1, 8)",
        "output": "0",
        "explanation": "The game ended in a draw since all positions are filled with no winner."
      },
      {
        "input": "move(1, 0), move(2, 1), move(1, 3), move(2, 2), move(1, 6)",
        "output": "1",
        "explanation": "Player 1 wins by placing 'X' in positions 0, 3, and 6, completing the first column."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a 2D array or a 1D array to represent the Tic-Tac-Toe board.",
      "Check for winning conditions after every move."
    ],
    "company": "Shopify"
  },
  {
    "question_id": "",
    "title": "Walls and Gates",
    "description": "You are given a 2D grid of integers where each cell can be either a wall, a gate, or an empty room. A wall is represented by -1, a gate by 0, and an empty room by Infinity (represented by 2147483647). You need to fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, the distance should remain as Infinity.",
    "topic": "Graph",
    "subtopic": "Breadth-First Search",
    "tags": [
      "Graph",
      "BFS",
      "Grid"
    ],
    "input_format": "A 2D grid of integers (list of lists) where the entries are -1, 0, or 2147483647.",
    "output_format": "The same 2D grid with the distances to the nearest gate filled in.",
    "constraints": [
      "The grid dimensions will not exceed 100 x 100.",
      "There will be at least one gate (0) in the grid.",
      "The grid will contain only walls (-1), gates (0), and empty rooms (2147483647)."
    ],
    "examples": [
      {
        "input": "[[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]",
        "output": "[[3,-1,0,1],[2,1,2,-1],[1,-1,3,-1],[0,-1,4,5]]",
        "explanation": "The distances to the nearest gates are filled in for each empty room."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a breadth-first search to explore the grid.",
      "Start from all gates simultaneously.",
      "Keep track of distances as you explore."
    ],
    "company": "Shopify"
  }
]