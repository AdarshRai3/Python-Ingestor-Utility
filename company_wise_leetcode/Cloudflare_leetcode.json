[
  {
    "question_id": "",
    "title": "Design Circular Queue",
    "description": "Implement a Circular Queue data structure that supports the following operations: enqueue, dequeue, front, rear, isEmpty, and isFull. The Circular Queue should have a fixed size. When you reach the end of the queue while adding elements, it should wrap around to the beginning if there is space available.",
    "topic": "Data Structures",
    "subtopic": "Queue",
    "tags": [
      "Queue",
      "Data Structure",
      "Design"
    ],
    "input_format": "The Circular Queue should be initialized with a fixed size 'k'. Methods enqueue(value), dequeue(), front(), rear(), isEmpty(), and isFull() should be implemented.",
    "output_format": "The methods should return appropriate values based on their operations.",
    "constraints": [
      "1 <= k <= 1000",
      "enqueue and dequeue operations must not exceed O(1) time complexity."
    ],
    "examples": [
      {
        "input": "CircularQueue circularQueue = new CircularQueue(3);\ncircularQueue.enqueue(1);\ncircularQueue.enqueue(2);\ncircularQueue.enqueue(3);\ncircularQueue.enqueue(4);",
        "output": "false",
        "explanation": "Queue is full after adding 3 elements, so adding a fourth should return false."
      },
      {
        "input": "circularQueue.dequeue();",
        "output": "1",
        "explanation": "The first element '1' is dequeued from the queue."
      },
      {
        "input": "circularQueue.enqueue(4);",
        "output": "true",
        "explanation": "After dequeueing, space is available for one more element (4), so it should return true."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about using an array to hold elements and two pointers for head and tail.",
      "Handling the wrap-around condition correctly is key."
    ],
    "company": "Cloudflare"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an array of integers, nums, return all the unique triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Note that the solution set must not contain duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Hash Table"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of lists containing unique triplets that sum up to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The triplets [-1, -1, 2] and [-1, 0, 1] are the only unique triplets that sum to zero."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "There are no numbers in the input, so there are no triplets that can be formed."
      },
      {
        "input": "nums = [0, 1, 1]",
        "output": "[]",
        "explanation": "There are not enough numbers to form a triplet."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the array to make it easier to find triplets.",
      "Use a for loop to fix one element and two pointers to find the other two.",
      "Skip duplicate values to avoid duplicate triplets."
    ],
    "company": "Cloudflare"
  },
  {
    "question_id": "",
    "title": "4Sum",
    "description": "Given an array of integers 'nums' and an integer 'target', return all unique quadruplets (a, b, c, d) such that a + b + c + d = target. You may return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "A list of lists, where each list contains four integers representing a quadruplet.",
    "constraints": [
      "0 <= nums.length <= 200",
      "-10^9 <= nums[i] <= 10^9",
      "The solution set must not contain duplicate quadruplets."
    ],
    "examples": [
      {
        "input": "nums = [1, 0, -1, 0, -2, 2], target = 0",
        "output": "[[-2, -1, 0, 1], [-2, 0, 0, 2], [-1, 0, 0, 1]]",
        "explanation": "The quadruplets that sum up to zero are [-2, -1, 0, 1], [-2, 0, 0, 2], and [-1, 0, 0, 1]."
      },
      {
        "input": "nums = [2, 2, 2, 2, 2], target = 8",
        "output": "[[2, 2, 2, 2]]",
        "explanation": "Only one unique quadruplet exists which is [2, 2, 2, 2] that sums to eight."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to account for potential duplicates.",
      "Sort the array to make it easier to avoid duplicates.",
      "Use a nested loop for the first two numbers and apply two pointers for the last two."
    ],
    "company": "Cloudflare"
  },
  {
    "question_id": "",
    "title": "Design a Stack With Increment Operation",
    "description": "Implement a stack that supports the standard stack operations: push, pop, and retrieving the top element of the stack. Additionally, implement an increment operation that increments the bottom k elements of the stack by a given value. Your implementation should not use any additional data structures other than the stack itself.",
    "topic": "Design",
    "subtopic": "Stack",
    "tags": [
      "Stack",
      "Design",
      "Data Structure"
    ],
    "input_format": "The input consists of a series of commands. Each command is either: 'push(x)', 'pop()', 'top()', or 'increment(k, val)'.",
    "output_format": "Return the result of the 'top()' command or 'pop()' command when invoked, according to the commands issued.",
    "constraints": [
      "The number of commands will be between 1 and 1000.",
      "0 <= x <= 1000 for push commands.",
      "1 <= k <= number of elements in the stack for increment commands."
    ],
    "examples": [
      {
        "input": "stack = MyStack(); stack.push(1); stack.push(2); stack.increment(2, 100); stack.pop(); stack.top();",
        "output": "102",
        "explanation": "After pushing 1 and 2, the stack is [1, 2]. Incrementing the bottom 2 elements by 100 changes the stack to [101, 102]. Popping the last element returns 102, and calling top() returns 102."
      },
      {
        "input": "stack.push(5); stack.push(3); stack.increment(1, 2); stack.top();",
        "output": "5",
        "explanation": "The stack after push operations is [5, 3]. Incrementing the bottom 1 element by 2 changes the stack to [7, 3]. The top element is now 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how to efficiently maintain the order of elements while supporting the increment operation.",
      "You can keep track of how much to increment at each level of the stack."
    ],
    "company": "Cloudflare"
  },
  {
    "question_id": "",
    "title": "Reaching Points",
    "description": "You are given two positive integers sx and sy, representing the starting point (sx, sy) in a grid. You can only move to the right or upward from a point (x, y) to (x + y, y) or (x, y + x). Your goal is to reach the point (tx, ty) starting from (sx, sy). Determine if it is possible to reach (tx, ty) from (sx, sy) using any number of valid moves.",
    "topic": "Math",
    "subtopic": "Geometry",
    "tags": [
      "Math",
      "Grid",
      "Geometry"
    ],
    "input_format": "Four integers sx, sy, tx, ty representing the starting and target points.",
    "output_format": "A boolean value indicating whether it is possible to reach (tx, ty) from (sx, sy).",
    "constraints": [
      "1 <= sx, sy, tx, ty <= 10^9"
    ],
    "examples": [
      {
        "input": "sx = 1, sy = 1, tx = 3, ty = 5",
        "output": "true",
        "explanation": "Starting from (1, 1), you can move to (1, 2) -> (1, 3) -> (2, 3) -> (3, 5)."
      },
      {
        "input": "sx = 1, sy = 1, tx = 2, ty = 2",
        "output": "false",
        "explanation": "You cannot reach (2, 2) from (1, 1) using allowed moves."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the relationship between the starting and target points.",
      "Think about how the coordinates change with each move.",
      "Backtrack from the target point to the starting point instead."
    ],
    "company": "Cloudflare"
  },
  {
    "question_id": "",
    "title": "Design Hit Counter",
    "description": "Design a hit counter that counts the number of hits received in the past 5 minutes (300 seconds). Your system should be able to record a hit every time it is called with a timestamp (in seconds) as an argument. The function should also return the number of hits in the past 5 minutes from the current timestamp when requested.\n\nImplement the HitCounter class:\n\n- `HitCounter()` Initializes the hit counter object.\n- `hit(timestamp: int)`: Records a hit at `timestamp` (in seconds).\n- `getHits(timestamp: int) -> int`: Returns the number of hits in the past 5 minutes (300 seconds) from `timestamp` (including the timestamp).",
    "topic": "Design",
    "subtopic": "Data Structure",
    "tags": [
      "Design",
      "Data Structure",
      "Queue"
    ],
    "input_format": "A timestamp, a non-negative integer representing a specific time in seconds.",
    "output_format": "An integer representing the number of hits in the past 5 minutes from the current timestamp.",
    "constraints": [
      "Each timestamp will be between 0 and 10^9.",
      "At most 10^4 calls will be made to the hit and getHits functions."
    ],
    "examples": [
      {
        "input": "HitCounter counter = new HitCounter(); counter.hit(1); counter.hit(2); counter.hit(3); counter.getHits(4);",
        "output": "3",
        "explanation": "Hits at timestamps 1, 2, and 3 are in the past 5 minutes, so the count is 3."
      },
      {
        "input": "counter.hit(300); counter.getHits(300); counter.hit(300); counter.getHits(300); counter.hit(301); counter.getHits(301);",
        "output": "3",
        "explanation": "After the hits at 300, there are 3 hits in the window for timestamp 300."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach to maintain the hits.",
      "Think about how to remove old hits that are outside the 5-minute window."
    ],
    "company": "Cloudflare"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "Depth-First Search",
      "DFS",
      "Matrix"
    ],
    "input_format": "A 2D grid represented as a list of lists, where each element is either '1' or '0'.",
    "output_format": "An integer representing the number of islands.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]",
        "output": "3",
        "explanation": "There are three islands: one formed by the first two rows' '1's, one isolated '1' in the third row, and two '1's in the last row."
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]",
        "output": "0",
        "explanation": "There are no islands since all cells are '0'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth-First or Breadth-First Search to explore each island.",
      "Mark visited cells to avoid counting them again."
    ],
    "company": "Cloudflare"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a Least Recently Used (LRU) Cache. The cache should support the following operations: get and put.\n\n- get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.\n- put(key, value) - Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the cache reached its capacity, it should invalidate the least recently used key before inserting a new key-value pair.",
    "topic": "Design",
    "subtopic": "Cache",
    "tags": [
      "Cache",
      "Design",
      "Linked List",
      "HashMap"
    ],
    "input_format": "The cache is initialized with a positive capacity. The get and put functions are called thereafter with appropriate parameters.",
    "output_format": "Return the value retrieved by the get function. The put function does not return a value.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10^4",
      "0 <= value <= 10^4",
      "At most 2 * 10^5 calls will be made to get and put."
    ],
    "examples": [
      {
        "input": "cache = LRUCache(2);\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);",
        "output": "1",
        "explanation": "Cache is {1=1, 2=2}. Returns 1."
      },
      {
        "input": "cache.put(3, 3);\ncache.get(2);",
        "output": "-1",
        "explanation": "Cache capacity is 2, evicts key 2. Returns -1."
      },
      {
        "input": "cache.put(4, 4);\ncache.get(1);",
        "output": "-1",
        "explanation": "Cache evicts key 1. Returns -1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a combination of a HashMap and a Doubly Linked List.",
      "The most recently used items should be moved to the front of the list."
    ],
    "company": "Cloudflare"
  },
  {
    "question_id": "",
    "title": "Game of Life",
    "description": "The 'Game of Life' is a cellular automaton devised by the mathematician John Conway. The Game is played on a 2D grid where each cell can be alive (1) or dead (0). Based on the following rules, the state of the cells will be updated simultaneously in one generation: \n\n1. Any live cell with fewer than two live neighbors dies as if caused by under-population. \n2. Any live cell with two or three live neighbors lives on to the next generation. \n3. Any live cell with more than three live neighbors dies, as if by over-population. \n4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. \n\nYou need to write a function that takes the current state of the grid and updates it to the next generation according to the aforementioned rules.",
    "topic": "Array",
    "subtopic": "Matrix",
    "tags": [
      "Array",
      "Simulation",
      "Matrix"
    ],
    "input_format": "A 2D binary array representing the current state of the grid.",
    "output_format": "The updated state of the grid after applying the rules.",
    "constraints": [
      "1 <= rows, cols <= 25",
      "grid[i][j] is 0 or 1."
    ],
    "examples": [
      {
        "input": "grid = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]",
        "output": "[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]",
        "explanation": "The next generation of the grid is obtained based on the rules of the Game."
      },
      {
        "input": "grid = [[1,1],[1,0]]",
        "output": "[[1,1],[1,1]]",
        "explanation": "In the second generation, the live cells remain alive according to the rules."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how to manage the state of cells without using extra space.",
      "You might want to use a technique to encode the next state in the same grid."
    ],
    "company": "Cloudflare"
  },
  {
    "question_id": "",
    "title": "Fizz Buzz",
    "description": "Write a program that prints the numbers from 1 to n. But for multiples of three, print 'Fizz' instead of the number, and for the multiples of five, print 'Buzz'. For numbers which are multiples of both three and five, print 'FizzBuzz'.",
    "topic": "Math",
    "subtopic": "Divisibility",
    "tags": [
      "Math",
      "Divisibility",
      "String Manipulation"
    ],
    "input_format": "An integer n, the upper limit of the range.",
    "output_format": "A list of strings representing the Fizz Buzz results.",
    "constraints": [
      "1 <= n <= 10^4"
    ],
    "examples": [
      {
        "input": "n = 15",
        "output": "[\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\", \"14\", \"FizzBuzz\"]",
        "explanation": "The output corresponds to numbers 1 to 15, replacing multiples of 3 with 'Fizz', multiples of 5 with 'Buzz', and multiples of both with 'FizzBuzz'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a loop to iterate from 1 to n.",
      "Use conditional statements to check for multiples."
    ],
    "company": "Cloudflare"
  }
]