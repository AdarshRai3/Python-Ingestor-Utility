[
  {
    "question_id": "",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "topic": "Dynamic Programming",
    "subtopic": "Fibonacci Sequence",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Mathematics"
    ],
    "input_format": "An integer n (1 <= n <= 45), representing the number of steps in the staircase.",
    "output_format": "An integer representing the number of distinct ways to reach the top.",
    "constraints": [
      "1 <= n <= 45"
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step or 2 steps."
      },
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "There are three ways to climb to the top: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a dynamic programming approach.",
      "The problem can be broken down into smaller subproblems."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Spiral Matrix",
    "description": "Given an m x n matrix, return all elements of the matrix in spiral order. Starting from the top-left corner, traverse the matrix edge in a spiral fashion and collect the elements in the order they are encountered.",
    "topic": "Matrix",
    "subtopic": "Traversal",
    "tags": [
      "Matrix",
      "Traversal",
      "Spiral"
    ],
    "input_format": "A 2D array of integers matrix.",
    "output_format": "A list of integers representing the elements in spiral order.",
    "constraints": [
      "1 <= m, n <= 10^4",
      "1 <= m * n <= 10^6",
      "-10^5 <= matrix[i][j] <= 10^5"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "[1, 2, 3, 6, 9, 8, 7, 4, 5]",
        "explanation": "The elements in spiral order are: 1, 2, 3, 6, 9, 8, 7, 4, 5."
      },
      {
        "input": "matrix = [[1, 2], [3, 4]]",
        "output": "[1, 2, 4, 3]",
        "explanation": "The elements in spiral order are: 1, 2, 4, 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Keep track of the boundaries for the spiral traversal.",
      "Use a direction vector to help navigate right, down, left, and up."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array where the ith element is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "Array Manipulation",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy",
      "Stock"
    ],
    "input_format": "An array of integers prices representing the stock prices on consecutive days.",
    "output_format": "An integer representing the maximum profit that can be achieved.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price encountered so far.",
      "Calculate potential profit at each step and update maximum profit accordingly."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A palindromic string is one that reads the same forwards and backwards.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A single string s where 1 <= s.length <= 1000.",
    "output_format": "A string representing the longest palindromic substring in s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consist of only digits and English letters."
    ],
    "examples": [
      {
        "input": "babad",
        "output": "bab",
        "explanation": "Both 'bab' and 'aba' are valid longest palindromic substrings."
      },
      {
        "input": "cbbd",
        "output": "bb",
        "explanation": "'bb' is the longest palindromic substring."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Expand around the center for potential palindromes.",
      "Check for both odd and even length palindromes."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within a string. You must optimize your solution to run in O(n) time complexity.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A string s consisting of English letters, digits, symbols and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s consists of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"abc\", which has a length of 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The longest substring without repeating characters is \"b\", with a length of 1."
      },
      {
        "input": "s = \"pwwkew\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"wke\", which has a length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window approach.",
      "Maintain a set to track characters in the current substring.",
      "Expand the window by moving the right pointer and contract it by moving the left pointer when duplicates are found."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given a list of strings, you need to group the anagrams together. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. You should return a list of groups of anagrams, where each group is a list of strings that are anagrams of each other.",
    "topic": "Hash Table",
    "subtopic": "Grouping",
    "tags": [
      "Hash Table",
      "String",
      "Sorting"
    ],
    "input_format": "A list of strings `strs` where 1 <= strs.length <= 10^4 and 0 <= strs[i].length <= 100.",
    "output_format": "A list of lists, where each sublist contains strings that are anagrams of each other.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "0 <= strs[i].length <= 100"
    ],
    "examples": [
      {
        "input": "[\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "explanation": "The strings 'eat', 'tea', and 'ate' are anagrams of each other. Similarly, 'nat' and 'tan' are anagrams. 'bat' has no anagrams."
      },
      {
        "input": "[\"dry\", \"djr\", \"jrd\", \"rdy\", \"yrd\"]",
        "output": "[[\"dry\",\"djr\",\"jrd\",\"rdy\",\"yrd\"]]",
        "explanation": "All the provided strings are anagrams of one another."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hashmap to group the strings.",
      "Sorting the characters in each string can help to identify anagrams.",
      "Think about the properties of anagrams to optimize your solution."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Every opening bracket must have a corresponding closing bracket of the same type.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s consisting of characters '(', ')', '{', '}', '[' and ']'.",
    "output_format": "A boolean value indicating whether the input string is valid.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The string contains a pair of valid parentheses."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "The brackets are closed in the correct order."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The brackets are not matched correctly."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The order of the brackets is incorrect."
      },
      {
        "input": "s = '{[]}'",
        "output": "true",
        "explanation": "The brackets are properly nested and closed."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Check if the closing bracket matches the top of the stack."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Decode String",
    "description": "Given an encoded string, return its decoded version. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. For example, the string '3[abc]' will decode to 'abcabcabc'. The input string is guaranteed to be a valid encoded string with no extra characters and square brackets always balanced. You need to handle nested encoded strings as well, for example, '2[2[ab]c]' will decode to 'ababcababc'.",
    "topic": "String",
    "subtopic": "Decoding",
    "tags": [
      "String",
      "Decoding",
      "Recursion"
    ],
    "input_format": "A single encoded string s, where 1 <= s.length <= 10^4.",
    "output_format": "A single decoded string that represents the output.",
    "constraints": [
      "The input string contains only digits, lowercase English letters, and square brackets.",
      "The input string is non-empty."
    ],
    "examples": [
      {
        "input": "s = \"3[abc]\"",
        "output": "abcabcabc",
        "explanation": "The encoded string '3[abc]' decodes to 'abc' repeated 3 times."
      },
      {
        "input": "s = \"2[2[ab]c]\"",
        "output": "ababcababc",
        "explanation": "First decode '2[ab]' to 'abab', then repeat it 2 times followed by 'c'."
      },
      {
        "input": "s = \"3[a2[c]]\"",
        "output": "acccacccaccc",
        "explanation": "First decode '2[c]' to 'cc', then repeat 'a' and 'cc' together 3 times."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a stack to help with nested patterns.",
      "Remember to handle digits that may be more than one character long."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "DFS",
      "Matrix"
    ],
    "input_format": "A 2D grid (list of lists) containing '0's and '1's.",
    "output_format": "An integer representing the number of islands.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "[['1','1','1','1','0'], ['1','1','0','1','0'], ['1','1','0','0','0'], ['0','0','0','0','0']]",
        "output": "1",
        "explanation": "There is one island formed by connecting '1's."
      },
      {
        "input": "[['1','1','0','0','0'], ['1','0','0','1','1'], ['0','0','0','1','0'], ['0','1','0','0','0']]",
        "output": "3",
        "explanation": "Three islands are present in the grid: one in the top left, one in the middle right, and one at the bottom."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth-First Search (DFS) or Breadth-First Search (BFS) to explore the islands.",
      "Use a visited structure to keep track of the land that has already been explored."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Move Zeroes",
    "description": "Given an array of integers, move all the zeroes to the end of it while maintaining the relative order of the non-zero elements. Modify the input array in-place.",
    "topic": "Array",
    "subtopic": "In-place Manipulation",
    "tags": [
      "Array",
      "In-place",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "The modified input array with all zeroes moved to the end.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [0, 1, 0, 3, 12]",
        "output": "[1, 3, 12, 0, 0]",
        "explanation": "The non-zero elements 1, 3, and 12 maintain their order and all zeroes are moved to the end."
      },
      {
        "input": "nums = [0, 0, 1]",
        "output": "[1, 0, 0]",
        "explanation": "The array contains two zeroes and one non-zero (1). After moving the zeroes, non-zero remains at front."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using two pointers to solve this problem efficiently.",
      "You can iterate through the array and track the position to place non-zero elements."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the height of walls, compute how much water can be trapped after raining. The water trapped at any position can be calculated by finding the minimum of the maximum height of walls on both sides minus the height of the wall at that position.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Water Trapping"
    ],
    "input_format": "An integer array `height` where height[i] represents the height of the ith wall.",
    "output_format": "An integer representing the total amount of water that can be trapped.",
    "constraints": [
      "0 <= height.length <= 2 * 10^4",
      "0 <= height[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The water trapped between the walls forms 6 units of water."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The water trapped forms 9 units of water between the walls."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a two-pointer approach to solve the problem efficiently.",
      "Think about how to calculate the maximum height on the left and right for each position."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers, return the indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] == 2 + 7 == 9, so the output is [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] == 2 + 4 == 6, so the output is [1, 2]."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] == 3 + 3 == 6, so the output is [0, 1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the numbers and their indices.",
      "Check if the complement of the current number exists in the hash map."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Sort Even and Odd Indices Independently",
    "description": "Given an array of integers, you need to sort the elements at even indices in ascending order and the elements at odd indices in descending order. Return the modified array after sorting.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Even Odd"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An array of integers representing the sorted array with even indices sorted in ascending order and odd indices sorted in descending order.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [5, 3, 2, 8, 1, 4]",
        "output": "[1, 8, 2, 5, 3, 4]",
        "explanation": "Even indices (0, 2, 4) are sorted to [1, 2, 5], Odd indices (1, 3, 5) are sorted to [8, 4, 3]."
      },
      {
        "input": "nums = [2, 1, 3, 4, 6, 5]",
        "output": "[2, 6, 3, 4, 5, 1]",
        "explanation": "Even indices (0, 2, 4) are sorted to [2, 3, 5], Odd indices (1, 3, 5) are sorted to [6, 4, 1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two separate lists to collect even and odd indexed elements.",
      "Sort the even list in ascending and the odd list in descending order.",
      "Merge the sorted lists back into the original indices."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. For example, if you have intervals [[1,3],[2,6],[8,10],[15,18]], you should return [[1,6],[8,10],[15,18]]. The intervals [1,3] and [2,6] overlap, so they can be merged into [1,6].",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Interval"
    ],
    "input_format": "A 2D list of integers intervals where each interval consists of two integers [start, end].",
    "output_format": "A 2D list of merged intervals.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "The intervals [1,3] and [2,6] overlap, so they can be merged into [1,6]."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] touch at 4, so they can be merged into [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals by the start time.",
      "Use a loop to check for overlaps and merge where necessary."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Compare Version Numbers",
    "description": "You are tasked with comparing two version numbers in the format 'X.Y.Z', where X, Y, and Z are non-negative integers. Each version number consists of several components separated by dots. You need to determine which version number is greater. Return '1' if version1 is greater than version2, '-1' if version1 is less than version2, and '0' if they are equal.",
    "topic": "String",
    "subtopic": "Parsing",
    "tags": [
      "String",
      "Comparison",
      "Parsing"
    ],
    "input_format": "Two strings version1 and version2 representing the version numbers.",
    "output_format": "An integer: 1 if version1 > version2, -1 if version1 < version2, 0 if they are equal.",
    "constraints": [
      "1 <= version1.length, version2.length <= 500",
      "version1 and version2 only contain digits and '.'"
    ],
    "examples": [
      {
        "input": "version1 = '1.0.1', version2 = '1.0.0'",
        "output": "1",
        "explanation": "Version 1.0.1 is greater than version 1.0.0."
      },
      {
        "input": "version1 = '1.01', version2 = '1.001'",
        "output": "0",
        "explanation": "Both versions are equivalent as they represent the same version."
      },
      {
        "input": "version1 = '1.0', version2 = '1.0.0'",
        "output": "0",
        "explanation": "Both versions are considered equal."
      },
      {
        "input": "version1 = '1.1', version2 = '1.2'",
        "output": "-1",
        "explanation": "Version 1.1 is less than version 1.2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider splitting the version strings by the '.' character.",
      "Convert the split components into integers for comparison."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Rotate Image",
    "description": "You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). You have to rotate the image in place, which means you have to modify the input 2D matrix directly. You cannot use an extra 2D matrix.",
    "topic": "Matrix",
    "subtopic": "In-Place Rotation",
    "tags": [
      "Matrix",
      "Rotation",
      "In-Place"
    ],
    "input_format": "An n x n 2D matrix, where 1 <= n <= 20.",
    "output_format": "Rotate the input matrix in-place.",
    "constraints": [
      "The matrix is a square matrix (n x n).",
      "1 <= n <= 20",
      "-1000 <= matrix[i][j] <= 1000"
    ],
    "examples": [
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[[7,4,1],[8,5,2],[9,6,3]]",
        "explanation": "Rotating the image by 90 degrees clockwise results in the output matrix."
      },
      {
        "input": "matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]",
        "output": "[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,10,7,11]]",
        "explanation": "After rotating the given matrix 90 degrees clockwise, this is the resulting matrix."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using layers to rotate the matrix.",
      "Use a temporary variable to assist in rotating elements."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Find Winner on a Tic Tac Toe Game",
    "description": "You are given a 3x3 Tic Tac Toe board, represented by a 2D array. Each cell contains either 'X', 'O', or an empty string. The task is to determine the winner of the game, if there is one. The winner is the player who first gets three of their marks in a row, either horizontally, vertically, or diagonally. If the game is not finished, return 'Pending'. If the game ended in a draw, return 'Draw'.",
    "topic": "Game Theory",
    "subtopic": "Tic Tac Toe",
    "tags": [
      "Game",
      "Board",
      "Tic Tac Toe",
      "2D Array"
    ],
    "input_format": "A 2D array of size 3x3 representing the Tic Tac Toe board.",
    "output_format": "A string indicating the result: 'X' if player X wins, 'O' if player O wins, 'Draw' if it's a draw, or 'Pending' if the game is not finished.",
    "constraints": [
      "board is a 2D array with exactly 3 rows and 3 columns.",
      "Each cell contains either 'X', 'O', or an empty string."
    ],
    "examples": [
      {
        "input": "[['X', 'O', 'X'], ['O', 'X', 'O'], ['O', 'X', '']]",
        "output": "'X'",
        "explanation": "Player X has three marks in the last column."
      },
      {
        "input": "[['X', 'O', 'O'], ['O', 'X', 'X'], ['X', 'O', '']]",
        "output": "'Pending'",
        "explanation": "The game is not finished as there are still empty cells."
      },
      {
        "input": "[['X', 'O', 'X'], ['X', 'O', 'O'], ['O', 'X', 'X']]",
        "output": "'Draw'",
        "explanation": "The board is full and no player has three marks in a row."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Check each row, column, and diagonal for a winner.",
      "Keep track of empty cells to determine if the game is still pending."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Largest Number",
    "description": "Given a list of non-negative integers, you are to arrange them such that they form the largest possible number. The resulting number should be returned as a string. For example, given the numbers [3, 30, 34, 5, 9], the largest number formed is '9534330'.",
    "topic": "Sorting",
    "subtopic": "Custom Sorting",
    "tags": [
      "Sorting",
      "Greedy",
      "String Manipulation"
    ],
    "input_format": "A list of non-negative integers.",
    "output_format": "A string representing the largest number formed.",
    "constraints": [
      "0 <= nums.length <= 100",
      "0 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [10, 2]",
        "output": "210",
        "explanation": "The largest number formed is '210' by concatenating 2 and 10."
      },
      {
        "input": "nums = [3, 30, 34, 5, 9]",
        "output": "9534330",
        "explanation": "The largest number formed is '9534330' by arranging the numbers in the specified order."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to compare two numbers by concatenating them in both possible orders.",
      "Use a custom comparator for sorting the numbers."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Remove All Occurrences of a Substring",
    "description": "Given a string `s` and a substring `part`, remove all occurrences of `part` from `s` until it cannot be found anymore. You need to return the final string after all occurrences have been removed.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Substring",
      "Manipulation"
    ],
    "input_format": "A string `s` and a string `part` where 1 <= s.length <= 10000 and 1 <= part.length <= 100.",
    "output_format": "A string representing the final result after removing all occurrences of `part`.",
    "constraints": [
      "1 <= s.length <= 10000",
      "1 <= part.length <= 100",
      "s and part consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'daabcbaabcbc', part = 'abc'",
        "output": "'dab'",
        "explanation": "Removing 'abc' twice results in 'dab'."
      },
      {
        "input": "s = 'axxxxyyyyb', part = 'xy'",
        "output": "'ab'",
        "explanation": "Removing 'xy' results in 'axxxxb', then removing 'xxx' results in 'ab'."
      },
      {
        "input": "s = 'hello', part = 'lo'",
        "output": "'he'",
        "explanation": "Removing 'lo' gives 'he'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using string replacement methods.",
      "Iterate until no more occurrences are found."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Zigzag Conversion",
    "description": "The string should be written in a zigzag pattern on a given number of rows, and then read line by line. Given a string s and an integer numRows, you need to convert the string into a zigzag pattern on numRows rows and then return it read line by line. For example, if numRows is 3, the string 'PAYPALISHIRING' is converted to:\n\nP   A   H   N\nA P L S I I G\nY   I   \n\nAnd reading line by line gives 'PAHNAPLSIIGY'.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Matrix",
      "Zigzag"
    ],
    "input_format": "A string s and an integer numRows indicating the number of rows for the zigzag conversion.",
    "output_format": "A string representing the characters in the zigzag pattern read line by line.",
    "constraints": [
      "0 <= s.length <= 1000",
      "1 <= numRows <= 1000"
    ],
    "examples": [
      {
        "input": "s = 'PAYPALISHIRING', numRows = 3",
        "output": "PAHNAPLSIIGY",
        "explanation": "The zigzag pattern of the string is 'P   A   H   N\nA P L S I I G\nY   I   '. Reading line by line gives 'PAHNAPLSIIGY'."
      },
      {
        "input": "s = 'A', numRows = 1",
        "output": "A",
        "explanation": "With only one character, the output is the same as input."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the cycle of rows during conversion.",
      "Use a variable to track the current row index."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with the x-axis forms a container, such that the container contains the most water. Return the maximum amount of water a container can store.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy"
    ],
    "input_format": "An array of integers height representing the height of each vertical line.",
    "output_format": "An integer representing the maximum amount of water that can be contained.",
    "constraints": [
      "2 <= height.length <= 3 * 10^4",
      "0 <= height[i] <= 3 * 10^4"
    ],
    "examples": [
      {
        "input": "height = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The lines at indices 1 and 8 (heights 8 and 7) form the container, which can hold 49 units of water."
      },
      {
        "input": "height = [1,1]",
        "output": "1",
        "explanation": "The only possible container is between the two lines, which is 1 unit of water."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using two pointers to find the maximum area efficiently.",
      "The area between two lines depends on the shorter line."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Rotate Array",
    "description": "Given an array of integers nums and an integer k, rotate the array to the right by k steps, where k is non-negative. It is guaranteed that the number of rotations will not exceed the size of the array.",
    "topic": "Array",
    "subtopic": "Rotation",
    "tags": [
      "Array",
      "Rotation",
      "In-place"
    ],
    "input_format": "An array of integers nums followed by an integer k.",
    "output_format": "The modified array after rotation.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= k <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7], k = 3",
        "output": "[5, 6, 7, 1, 2, 3, 4]",
        "explanation": "After rotating the array 3 steps to the right, the array becomes [5, 6, 7, 1, 2, 3, 4]."
      },
      {
        "input": "nums = [-1, -100, 3, 99], k = 2",
        "output": "[3, 99, -1, -100]",
        "explanation": "After rotating the array 2 steps to the right, the array becomes [3, 99, -1, -100]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the modulo operator to handle cases where k is greater than the length of the array.",
      "In-place rotation can be tricky; think about reversing parts of the array."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Generate Parentheses",
    "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
    "topic": "Backtracking",
    "subtopic": "Combinatorial Generation",
    "tags": [
      "Backtracking",
      "String",
      "Combinatorics"
    ],
    "input_format": "An integer n representing the number of pairs of parentheses.",
    "output_format": "A list of strings representing all combinations of well-formed parentheses.",
    "constraints": [
      "1 <= n <= 8"
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\"]",
        "explanation": "These are all the possible combinations of 3 pairs of well-formed parentheses."
      },
      {
        "input": "n = 1",
        "output": "[\"()\"]",
        "explanation": "There is only one way to arrange 1 pair of parentheses."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how you can use recursion to build the combinations.",
      "Keep track of how many opening and closing parentheses you have used."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Longest Common Prefix",
    "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string. A common prefix is defined as a substring that is present at the beginning of each string in the array.",
    "topic": "String",
    "subtopic": "Prefix",
    "tags": [
      "String",
      "Prefix",
      "Array"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A string representing the longest common prefix.",
    "constraints": [
      "0 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "All strings consist of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"flower\", \"flow\", \"flight\"]",
        "output": "\"fl\"",
        "explanation": "The longest common prefix is 'fl'."
      },
      {
        "input": "strs = [\"dog\", \"racecar\", \"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the input strings."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Compare characters one by one from the start of each string.",
      "Use a vertical scanning approach to check each character across the strings."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Excel Sheet Column Number",
    "description": "Given a column title as it appears in an Excel sheet, return its corresponding column number. For example, 'A' corresponds to 1, 'B' corresponds to 2, ... , 'Z' corresponds to 26. It is guaranteed that the input is a valid column title consisting of uppercase English letters, and there are no leading zeros.",
    "topic": "Math",
    "subtopic": "Base Conversion",
    "tags": [
      "Math",
      "String",
      "Base Conversion"
    ],
    "input_format": "A string representing the column title.",
    "output_format": "An integer representing the column number corresponding to the given title.",
    "constraints": [
      "1 <= columnTitle.length <= 7",
      "columnTitle consists only of uppercase English letters.",
      "columnTitle is a valid column title in Excel."
    ],
    "examples": [
      {
        "input": "columnTitle = 'A'",
        "output": "1",
        "explanation": "'A' corresponds to 1."
      },
      {
        "input": "columnTitle = 'Z'",
        "output": "26",
        "explanation": "'Z' corresponds to 26."
      },
      {
        "input": "columnTitle = 'AA'",
        "output": "27",
        "explanation": "'AA' corresponds to 1*26 + 1 = 27."
      },
      {
        "input": "columnTitle = 'AB'",
        "output": "28",
        "explanation": "'AB' corresponds to 1*26 + 2 = 28."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how to convert the string from a base-26 system to a decimal number."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Regular Expression Matching",
    "description": "Implement support for regular expressions in string matching. Given an input string s and a pattern p, implement a function that checks if the input string matches the pattern. The pattern may contain the characters '.' which matches any single character, and '*' which matches zero or more of the preceding element.",
    "topic": "String",
    "subtopic": "Regular Expressions",
    "tags": [
      "String",
      "Regular Expressions",
      "Dynamic Programming"
    ],
    "input_format": "Two strings, s and p, where |s| <= 20 and |p| <= 30.",
    "output_format": "A boolean value indicating if the string matches the pattern.",
    "constraints": [
      "The input strings are composed of lowercase English letters and the characters '.' and '*'",
      "The pattern is guaranteed to be a valid regular expression."
    ],
    "examples": [
      {
        "input": "s = 'aab', p = 'c*a*b'",
        "output": "true",
        "explanation": "'c*' can be ignored, 'a' must match 'a', and 'b' must match 'b'. The entire string matches."
      },
      {
        "input": "s = 'mississippi', p = 'mis*is*p*.'",
        "output": "false",
        "explanation": "The pattern does not match the entire input string."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using dynamic programming to store intermediate results.",
      "Think about how to handle the '*' character and its implications."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Roman to Integer",
    "description": "Given a string representing a Roman numeral, convert it to an integer. The input is guaranteed to be a valid Roman numeral in the range from 1 to 3999.",
    "topic": "String",
    "subtopic": "Conversion",
    "tags": [
      "String",
      "Conversion",
      "Math"
    ],
    "input_format": "A string s representing a Roman numeral.",
    "output_format": "An integer representing the equivalent value of the Roman numeral.",
    "constraints": [
      "1 <= s.length <= 15",
      "s consists of valid Roman numeral characters: I, V, X, L, C, D, M"
    ],
    "examples": [
      {
        "input": "s = 'III'",
        "output": "3",
        "explanation": "The Roman numeral III represents the value 3."
      },
      {
        "input": "s = 'IV'",
        "output": "4",
        "explanation": "The Roman numeral IV represents the value 4."
      },
      {
        "input": "s = 'IX'",
        "output": "9",
        "explanation": "The Roman numeral IX represents the value 9."
      },
      {
        "input": "s = 'LVIII'",
        "output": "58",
        "explanation": "The Roman numeral LVIII is composed of L(50), V(5), and I(1), thus equaling 58."
      },
      {
        "input": "s = 'MCMXCIV'",
        "output": "1994",
        "explanation": "The Roman numeral MCMXCIV translates to 1000 + (1000 - 100) + (100 - 10) + (5 - 1) = 1994."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Utilize a mapping of Roman numerals to their integer values.",
      "When a smaller numeral appears before a larger one, subtract it from the total."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Text Justification",
    "description": "Given an array of words and a length maxWidth, format the text such that each line has exactly maxWidth characters and is fully justified. You should pack your words in such a way that they fit within the specified width and should fill in the spaces evenly. If the last line cannot be fully justified, it should be aligned to the left.",
    "topic": "String Manipulation",
    "subtopic": "Text Formatting",
    "tags": [
      "String",
      "Justification",
      "Formatting"
    ],
    "input_format": "An array of strings words, and an integer maxWidth.",
    "output_format": "An array of strings representing the justified text lines.",
    "constraints": [
      "1 <= words.length <= 3000",
      "1 <= words[i].length <= 100",
      "1 <= maxWidth <= 100"
    ],
    "examples": [
      {
        "input": "words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16",
        "output": "[\"This    is    an\", \"example  of text\", \"justification.  \"]",
        "explanation": "The words are packed such that each line is justified to the maxWidth of 16 characters."
      },
      {
        "input": "words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16",
        "output": "[\"What   must   be\", \"acknowledgment  \", \"shall be        \"]",
        "explanation": "Each line is justified and left-aligned appropriately."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how to distribute spaces evenly.",
      "Remember to handle the last line separately.",
      "Think about edge cases with varying word lengths."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Median of Two Sorted Arrays",
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log(min(m,n))). You may assume nums1 and nums2 cannot be both empty.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Median"
    ],
    "input_format": "Two sorted arrays nums1 and nums2.",
    "output_format": "A float representing the median of the two sorted arrays.",
    "constraints": [
      "0 <= nums1.length <= 1000",
      "0 <= nums2.length <= 1000",
      "Both nums1 and nums2 are sorted in non-decreasing order."
    ],
    "examples": [
      {
        "input": "nums1 = [1, 3], nums2 = [2]",
        "output": "2.0",
        "explanation": "The combined sorted array is [1, 2, 3], and the median is 2."
      },
      {
        "input": "nums1 = [1, 2], nums2 = [3, 4]",
        "output": "2.5",
        "explanation": "The combined sorted array is [1, 2, 3, 4], and the median is (2 + 3) / 2 = 2.5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using binary search on the shorter array.",
      "Identify partitions in both arrays that could result in the median."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Wildcard Matching",
    "description": "Implement a function that matches a given string against a wildcard pattern. The wildcard characters include '*' which can match any sequence of characters (including an empty sequence) and '?' which can match any single character. The function should return true if the string matches the pattern, false otherwise.",
    "topic": "String",
    "subtopic": "Pattern Matching",
    "tags": [
      "String",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "A string `s` and a wildcard pattern `p`.",
    "output_format": "A boolean value indicating whether the string matches the wildcard pattern.",
    "constraints": [
      "0 <= s.length <= 100",
      "0 <= p.length <= 100"
    ],
    "examples": [
      {
        "input": {
          "s": "adceb",
          "p": "*a*b"
        },
        "output": "true",
        "explanation": "The '*' can match 'dce' in 'adceb', and then 'a' can match 'a', and 'b' can match 'b'."
      },
      {
        "input": {
          "s": "acdcb",
          "p": "a*c?b"
        },
        "output": "false",
        "explanation": "The '?' can only match one character, and 'd' does not match 'c'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using dynamic programming to build the solution.",
      "Think of how you can break down the problem into simpler subproblems."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Word Pattern",
    "description": "Given a string pattern and a string s, determine if s follows the same pattern. Here, a string follows a pattern if there is a bijection between a letter in pattern and a non-empty word in s. That is, the same letter must represent the same word, and different letters must represent different words. You may assume the input strings are case-sensitive.",
    "topic": "String",
    "subtopic": "Pattern Matching",
    "tags": [
      "String",
      "Pattern Matching",
      "Hash Table"
    ],
    "input_format": "A string pattern and a string s, separated by a space.",
    "output_format": "Return true if s follows the given pattern, otherwise return false.",
    "constraints": [
      "1 <= pattern.length <= 300",
      "1 <= s.length <= 3000",
      "s contains only lowercase English letters and spaces."
    ],
    "examples": [
      {
        "input": "pattern = \"abba\", s = \"dog cat cat dog\"",
        "output": "true",
        "explanation": "The pattern 'a' is represented by 'dog' and 'b' is represented by 'cat'."
      },
      {
        "input": "pattern = \"abba\", s = \"dog cat cat fish\"",
        "output": "false",
        "explanation": "The pattern 'a' is represented by 'dog', 'b' by 'cat', but 'f' cannot correspond to 'b'."
      },
      {
        "input": "pattern = \"aaaa\", s = \"dog dog dog dog\"",
        "output": "true",
        "explanation": "All characters in the pattern map to the same word 'dog'."
      },
      {
        "input": "pattern = \"abb\", s = \"dog dog dog cat\"",
        "output": "false",
        "explanation": "The first character 'a' cannot be mapped to more than one word."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a hash map to track the mapping of characters to words.",
      "You may need to check if a character has already been mapped to a different word."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "You are given two integer arrays, nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively. You should merge nums2 into nums1 as one sorted array. Note that nums1 has enough space to hold additional elements from nums2. The final merged array should be sorted.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Merge",
      "Sorting"
    ],
    "input_format": "Two integer arrays nums1 and nums2, and two integers m and n.",
    "output_format": "The merged array nums1, sorted in non-decreasing order.",
    "constraints": [
      "0 <= m, n <= 200",
      "1 <= m + n <= 200",
      "-10^9 <= nums1[i], nums2[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1, 2, 3, 0, 0, 0], m = 3, nums2 = [2, 5, 6], n = 3",
        "output": "[1, 2, 2, 3, 5, 6]",
        "explanation": "After merging, nums1 will become [1, 2, 2, 3, 5, 6]."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "Since nums2 is empty, no elements will be added to nums1."
      },
      {
        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "output": "[1]",
        "explanation": "There are no elements in nums1, so nums2 will be copied to nums1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using two pointers to track the position in nums1 and nums2.",
      "Start merging from the end of nums1 to avoid overwriting elements."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Search in Rotated Sorted Array",
    "description": "You are given an integer array 'nums' sorted in ascending order, which is then rotated at some pivot unknown to you beforehand. Write a function to search for a target value in the rotated array. If the target exists, return its index. Otherwise, return -1. You must write an algorithm with a time complexity of O(log n).",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Searching"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An integer representing the index of target in nums or -1 if target is not found.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^4 <= nums[i] <= 10^4",
      "nums is guaranteed to be rotated at some pivot."
    ],
    "examples": [
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 0",
        "output": "4",
        "explanation": "The index of target 0 in the rotated array is 4."
      },
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 3",
        "output": "-1",
        "explanation": "The target 3 does not exist in the array."
      },
      {
        "input": "nums = [1], target = 0",
        "output": "-1",
        "explanation": "The target 0 does not exist in the single-element array."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to optimize your search.",
      "Identify which part of the array is sorted.",
      "Decide which half to search based on the sorted part."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Edit Distance",
    "description": "Given two strings source and target, return the minimum number of operations required to convert source into target. The allowed operations are insertion, deletion, and substitution of a single character.",
    "topic": "Dynamic Programming",
    "subtopic": "String Manipulation",
    "tags": [
      "Dynamic Programming",
      "String",
      "Edit Distance"
    ],
    "input_format": "Two strings source and target.",
    "output_format": "An integer representing the minimum number of operations required.",
    "constraints": [
      "1 <= source.length, target.length <= 1000",
      "source and target consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "source = 'horse', target = 'ros'",
        "output": "3",
        "explanation": "horse -> rorse (substitution), rorse -> rose (deletion), rose -> ros (deletion)."
      },
      {
        "input": "source = 'intention', target = 'execution'",
        "output": "5",
        "explanation": "intention -> inention (deletion), inention -> enention (substitution), enention -> exention (substitution), exention -> exection (substitution), exection -> execution (insertion)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a 2D array to store the edit distances.",
      "Calculate the costs based on the last characters of the strings."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Longest Valid Parentheses",
    "description": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Stack"
    ],
    "input_format": "A single string s consisting of '(' and ')'.",
    "output_format": "An integer representing the length of the longest valid parentheses substring.",
    "constraints": [
      "0 <= s.length <= 10^4",
      "s[i] is either '(' or ')'."
    ],
    "examples": [
      {
        "input": "s = \"(()\"",
        "output": "2",
        "explanation": "The longest valid parentheses substring is \"()\" which has a length of 2."
      },
      {
        "input": "s = \")()())\"",
        "output": "4",
        "explanation": "The longest valid parentheses substring is \"()()\" which has a length of 4."
      },
      {
        "input": "s = \"\"",
        "output": "0",
        "explanation": "An empty string has no valid parentheses."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a stack to keep track of the indices of characters.",
      "You can also utilize dynamic programming to store lengths of valid substrings.",
      "Keep track of the last unmatched parenthesis index."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Sort Colors",
    "description": "Given an array nums consisting of n objects colored red, white, or blue, sort them in place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. We will use the integer 0 to represent red, 1 to represent white, and 2 to represent blue. You must solve this problem without using the library's sort function and with a single pass.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Sorting",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums where each element is either 0, 1, or 2.",
    "output_format": "You should not return anything; instead, modify nums in-place.",
    "constraints": [
      "n == nums.length",
      "1 <= n <= 300",
      "nums[i] is either 0, 1, or 2."
    ],
    "examples": [
      {
        "input": "nums = [2,0,2,1,1,0]",
        "output": "[0,0,1,1,2,2]",
        "explanation": "After sorting, the colors are arranged as red, white, and blue."
      },
      {
        "input": "nums = [2,0,1]",
        "output": "[0,1,2]",
        "explanation": "In this case, all colors are sorted correctly in one pass."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use three pointers to track the positions of red, white, and blue.",
      "Consider handling each color sequentially."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Happy Number",
    "description": "A happy number is defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. Those numbers for which this process ends in 1 are happy numbers. Write a function to determine if a number n is a happy number.",
    "topic": "Mathematics",
    "subtopic": "Number Theory",
    "tags": [
      "Math",
      "Simulation",
      "Number Theory"
    ],
    "input_format": "An integer n where 1 <= n <= 2^31 - 1.",
    "output_format": "Return true if n is a happy number, and false if it is not.",
    "constraints": [
      "1 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "n = 19",
        "output": "true",
        "explanation": "1^2 + 9^2 = 82; 8^2 + 2^2 = 68; 6^2 + 8^2 = 100; 1^2 + 0^2 + 0^2 = 1."
      },
      {
        "input": "n = 2",
        "output": "false",
        "explanation": "2 is not a happy number as it forms a cycle without reaching 1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Look for cycles in the sequence of numbers generated."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Valid Sudoku",
    "description": "Determine if a 9x9 Sudoku board is valid according to the rules of Sudoku. The board is represented by a 2D array containing digits from '1' to '9' and '.' for empty cells. You must ensure that each row, each column, and each of the nine 3x3 sub-boxes contain no duplicate digits.",
    "topic": "Array",
    "subtopic": "2D Array",
    "tags": [
      "Array",
      "Validation",
      "Sudoku"
    ],
    "input_format": "A 2D array of characters representing the Sudoku board.",
    "output_format": "Return true if the board is valid, otherwise return false.",
    "constraints": [
      "The board is a 9x9 array.",
      "Each cell contains either a digit from '1' to '9' or '.'"
    ],
    "examples": [
      {
        "input": "[['5', '3', '.', '.', '7', '.', '.', '.', '.'], ['6', '.', '.', '1', '9', '5', '.', '.', '.'], ['.', '9', '8', '.', '.', '.', '.', '6', '.'], ['8', '.', '.', '.', '6', '.', '.', '.', '3'], ['4', '.', '.', '8', '.', '3', '.', '.', '1'], ['7', '.', '.', '.', '2', '.', '.', '.', '6'], ['.', '6', '.', '.', '.', '.', '2', '8', '.'], ['.', '.', '.', '4', '1', '9', '.', '.', '5'], ['.', '.', '.', '.', '8', '.', '.', '7', '9']]",
        "output": "true",
        "explanation": "The Sudoku board is valid as there are no duplicate numbers in any rows, columns, or 3x3 sub-boxes."
      },
      {
        "input": "[['8', '3', '.', '.', '7', '.', '.', '.', '.'], ['6', '.', '.', '1', '9', '5', '.', '.', '.'], ['.', '9', '8', '.', '.', '.', '.', '6', '.'], ['8', '.', '.', '.', '6', '.', '.', '.', '3'], ['4', '.', '.', '8', '.', '3', '.', '.', '1'], ['7', '.', '.', '.', '2', '.', '.', '.', '6'], ['.', '6', '.', '.', '.', '.', '2', '8', '.'], ['.', '.', '.', '4', '1', '9', '.', '.', '5'], ['.', '.', '.', '.', '8', '.', '.', '7', '9']]",
        "output": "false",
        "explanation": "The Sudoku board is invalid because the number '8' appears twice in the first column."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use sets to track already seen numbers in rows, columns, and boxes.",
      "Iterate through each cell and add numbers to the corresponding sets."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Letter Combinations of a Phone Number",
    "description": "Given a string containing digits from 2 to 9 inclusive, return all possible letter combinations that the number could represent. Each digit maps to a set of letters as follows: 2 -> 'abc', 3 -> 'def', 4 -> 'ghi', 5 -> 'jkl', 6 -> 'mno', 7 -> 'pqrs', 8 -> 'tuv', 9 -> 'wxyz'. The combinations should be returned in lexicographical order.",
    "topic": "Backtracking",
    "subtopic": "Combinations",
    "tags": [
      "Backtracking",
      "String",
      "Combinations"
    ],
    "input_format": "A string digits representing the input phone number containing digits from 2 to 9.",
    "output_format": "A list of strings representing all possible letter combinations.",
    "constraints": [
      "0 <= digits.length <= 4",
      "digits[i] is a digit from '2' to '9'."
    ],
    "examples": [
      {
        "input": "digits = '23'",
        "output": "['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']",
        "explanation": "For '2', the mapping is ['a', 'b', 'c'] and for '3', the mapping is ['d', 'e', 'f']. Therefore, the combinations are formed by combining each letter from '2' with each letter from '3'."
      },
      {
        "input": "digits = ''",
        "output": "[]",
        "explanation": "An empty input should return an empty list as there are no digits to process."
      },
      {
        "input": "digits = '2'",
        "output": "['a', 'b', 'c']",
        "explanation": "Since there's only one digit '2', the combinations will consist of the letters it maps to."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a mapping of digits to letters.",
      "Consider using backtracking for generating combinations.",
      "Start building combinations recursively."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an array of integers nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A 2D array of triplets, where each triplet sums up to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1,0,1,2,-1,-4]",
        "output": "[[-1,-1,2],[-1,0,1]]",
        "explanation": "The triplets that sum up to zero are [-1,-1,2] and [-1,0,1]."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "There are no elements, so there can't be any triplets."
      },
      {
        "input": "nums = [0,1,1]",
        "output": "[]",
        "explanation": "The only possible triplet with these numbers does not sum to zero."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the array to facilitate finding triplets.",
      "Use a loop and two pointers to find the triplets efficiently."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Basic Calculator II",
    "description": "Implement a basic calculator to evaluate a simple expression string containing non-negative integers, '+', '-', '*', and '/' operators. The expression should be evaluated following the order of operations (multiplication and division before addition and subtraction). You must also handle spaces in the input string.",
    "topic": "Math",
    "subtopic": "Expression Evaluation",
    "tags": [
      "Math",
      "Calculator",
      "String"
    ],
    "input_format": "A string expression containing non-negative integers and operators.",
    "output_format": "An integer representing the result of the evaluated expression.",
    "constraints": [
      "The expression is guaranteed to be valid.",
      "The length of the expression does not exceed 10^5.",
      "The integers in the expression are non-negative and can be as large as 2^31 - 1."
    ],
    "examples": [
      {
        "input": "s = \"3+2*2\"",
        "output": "7",
        "explanation": "First, evaluate 2*2 which is 4, then add 3. Hence, 3 + 4 = 7."
      },
      {
        "input": "s = \" 3/2 \"",
        "output": "1",
        "explanation": "The division 3/2 is evaluated to 1 with integer division."
      },
      {
        "input": "s = \" 3+5 / 2 \"",
        "output": "5",
        "explanation": "First, evaluate 5/2 giving 2 (using integer division), then add 3. Hence, 3 + 2 = 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a stack to evaluate the expresssion.",
      "Pay attention to operator precedence."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Largest Rectangle in Histogram",
    "description": "Given an array of integers heights representing the heights of bars in a histogram, return the area of the largest rectangle that can be formed within it. The rectangle can be made up of one or more contiguous bars. The width of each bar is `1`.",
    "topic": "Stack",
    "subtopic": "Monotonic Stack",
    "tags": [
      "Stack",
      "Array",
      "Histogram"
    ],
    "input_format": "An array of integers heights where heights[i] is the height of the i-th bar.",
    "output_format": "An integer representing the area of the largest rectangle that can be formed in the histogram.",
    "constraints": [
      "1 <= heights.length <= 10^5",
      "0 <= heights[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "heights = [2, 1, 5, 6, 2, 3]",
        "output": "10",
        "explanation": "The largest rectangle can be formed with height 5 and width 2, yielding an area of 5 * 2 = 10."
      },
      {
        "input": "heights = [2, 4]",
        "output": "4",
        "explanation": "The largest rectangle can be formed with height 4 and width 1, yielding an area of 4."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a stack to keep track of the indices of the bars.",
      "Calculate area when you find a bar that is shorter than the bar at the top of the stack.",
      "The width of the rectangle can be found using the indices from the stack."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Combination Sum",
    "description": "Given an array of distinct integers and a target integer, find all unique combinations of numbers from the array that add up to the target. The same number can be used multiple times in the combination. The solution set must not contain duplicate combinations.",
    "topic": "Backtracking",
    "subtopic": "Combination Generation",
    "tags": [
      "Backtracking",
      "Combination",
      "Recursion"
    ],
    "input_format": "An array of distinct integers candidates and an integer target.",
    "output_format": "A list of lists, where each list contains a unique combination of numbers that sum up to the target.",
    "constraints": [
      "1 <= candidates.length <= 30",
      "1 <= candidates[i] <= 200",
      "Each element in candidates is unique."
    ],
    "examples": [
      {
        "input": "candidates = [2, 3, 6, 7], target = 7",
        "output": "[[7], [2, 2, 3]]",
        "explanation": "The combinations that sum to 7 are [7] and [2, 2, 3]."
      },
      {
        "input": "candidates = [2, 3, 5], target = 8",
        "output": "[[2, 2, 2, 2], [2, 3, 3], [3, 5]]",
        "explanation": "The combinations that sum to 8 are [2, 2, 2, 2], [2, 3, 3], and [3, 5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a backtracking approach to explore combinations.",
      "Start from a candidate and explore further until the target is met or exceeded.",
      "Avoid duplicates by managing how candidates are chosen."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Non-overlapping Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals and return the resulting list of non-overlapping intervals. This is a common problem in dealing with ranges, where you need to group or summarize overlapping intervals in a meaningful way.",
    "topic": "Array",
    "subtopic": "Sorting & Merging",
    "tags": [
      "Array",
      "Sorting",
      "Intervals",
      "Merging"
    ],
    "input_format": "A list of intervals, where each interval is represented as a pair of integers [start, end].",
    "output_format": "A list of merged, non-overlapping intervals, each represented as a pair of integers.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "Intervals [1,3] and [2,6] overlap, so they are merged into [1,6]. The other intervals do not overlap."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] touch at the end point, so they are merged into [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on the start time.",
      "Use a variable to track the last merged interval.",
      "Only add the current interval to the merged list if it does not overlap with the last interval."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Partition Equal Subset Sum",
    "description": "Given a positive integer array nums, you need to determine if you can partition it into two subsets such that the sum of the elements in both subsets is equal. You should return true if such a partition is possible; otherwise, return false.",
    "topic": "Dynamic Programming",
    "subtopic": "Subset Sum Problem",
    "tags": [
      "Dynamic Programming",
      "Subset Sum",
      "Array"
    ],
    "input_format": "An array of positive integers nums.",
    "output_format": "A boolean value indicating whether the array can be partitioned into two equal sum subsets.",
    "constraints": [
      "1 <= nums.length <= 200",
      "0 < nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [1, 5, 11, 5]",
        "output": "true",
        "explanation": "The array can be partitioned into two subsets [1, 5, 5] and [11] which both sum up to 11."
      },
      {
        "input": "nums = [1, 2, 3, 5]",
        "output": "false",
        "explanation": "The array cannot be partitioned into two subsets with equal sum."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the total sum of the array and check if it is even.",
      "Use a dynamic programming approach to solve the subset sum problem."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Reverse Vowels of a String",
    "description": "Given a string s, reverse only the vowels of the string and return it. The vowels are 'a', 'e', 'i', 'o', 'u' and they can be both upper and lower case.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Two Pointers",
      "In-place"
    ],
    "input_format": "A string s, with a length of n (1 <= n <= 10^5).",
    "output_format": "A string with the vowels reversed.",
    "constraints": [
      "1 <= s.length <= 10^5"
    ],
    "examples": [
      {
        "input": "hello",
        "output": "holle",
        "explanation": "The vowels 'e' and 'o' are reversed in the string."
      },
      {
        "input": "leetcode",
        "output": "leotcede",
        "explanation": "The vowels 'e', 'e', and 'o' are reversed."
      },
      {
        "input": "A man, a plan, a canal: Panama",
        "output": "A man, a plan, a canal: Panama",
        "explanation": "The string remains the same as the vowels 'a' remain in their original position."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to swap the vowels in the string.",
      "Keep a set of vowels for quick lookup."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Product of Array Except Self",
    "description": "Given an integer array `nums` of length n, return an array output such that output[i] is equal to the product of all the elements of `nums` except `nums[i]`. You must solve it without using division and in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Product Calculation",
    "tags": [
      "Array",
      "Product",
      "O(n) Time"
    ],
    "input_format": "An array of integers `nums` where 2 <= nums.length <= 10^5.",
    "output_format": "An array of integers representing the product of the array except self.",
    "constraints": [
      "2 <= nums.length <= 10^5",
      "-30 <= nums[i] <= 30"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "[24, 12, 8, 6]",
        "explanation": "The product of all elements except for the first element is 2 * 3 * 4 = 24; for the second element, it is 1 * 3 * 4 = 12; and so on."
      },
      {
        "input": "nums = [-1, 1, 0, -3, 3]",
        "output": "[0, 0, 9, 0, 0]",
        "explanation": "The product of all elements except for the first element is 1 * 0 * -3 * 3 = 0; similarly for the rest."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using two passes to calculate the products.",
      "Utilize an additional output array to store intermediate results."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Replace Elements with Greatest Element on Right Side",
    "description": "Given an integer array arr, replace each element in the array with the greatest element on its right side. After the last element is replaced, replace it with -1. Return the modified array.",
    "topic": "Array",
    "subtopic": "Transforming Array",
    "tags": [
      "Array",
      "Transformation",
      "Greedy"
    ],
    "input_format": "An array of integers arr.",
    "output_format": "An integer array representing the transformed array.",
    "constraints": [
      "1 <= arr.length <= 10^4",
      "1 <= arr[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "arr = [17, 18, 5, 4, 6, 1]",
        "output": "[18, 6, 6, 6, 1, -1]",
        "explanation": "The greatest elements to the right of each element are 18, 6, 6, 6, 1, and -1."
      },
      {
        "input": "arr = [400]",
        "output": "[-1]",
        "explanation": "There are no elements to the right of 400, so we replace it with -1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider iterating through the array from the end to the beginning.",
      "Keep track of the maximum value seen so far while you traverse."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Find the Duplicate Number",
    "description": "Given an array of integers nums containing n + 1 integers where each integer is between 1 and n (inclusive), at least one duplicate number is guaranteed to exist. You must not modify the array and do not use extra space for another data structure. Find and return the duplicate number.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Duplicate"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the duplicate number.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i] <= n",
      "Each integer in nums appears at least once."
    ],
    "examples": [
      {
        "input": "nums = [3, 1, 3, 4, 2]",
        "output": "3",
        "explanation": "The number 3 appears twice in the array."
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 5]",
        "output": "5",
        "explanation": "The number 5 is the duplicate in this case."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the Floyd's Tortoise and Hare (Cycle Detection) algorithm.",
      "Think about how you can use the input values to indicate the index."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Decode Ways",
    "description": "A message containing letters from A-Z can be encoded into numbers using the following mapping: 'A' -> '1', 'B' -> '2', ..., 'Z' -> '26'. For example, the encoded message '111' may represent: 'AAA' (1 1 1), 'AK' (1 11), and 'AA' (11). Given a string s consisting of digits, return the total number of ways to decode it. The decoding is valid however long as it doesn't include leading zeros or on its own doesn't map to any letter.",
    "topic": "Dynamic Programming",
    "subtopic": "String Decoding",
    "tags": [
      "Dynamic Programming",
      "String",
      "Decoding"
    ],
    "input_format": "A string s representing the encoded message, consisting of digits.",
    "output_format": "An integer representing the total number of ways to decode the message.",
    "constraints": [
      "1 <= s.length <= 100",
      "s consists of digits and may contain leading zeros."
    ],
    "examples": [
      {
        "input": "s = '12'",
        "output": "2",
        "explanation": "'12' can be decoded as 'AB' (1 2) or 'L' (12), resulting in 2 ways."
      },
      {
        "input": "s = '226'",
        "output": "3",
        "explanation": "'226' can be decoded as 'BZ' (2 26), 'VF' (22 6), or 'BBF' (2 2 6), resulting in 3 ways."
      },
      {
        "input": "s = '0'",
        "output": "0",
        "explanation": "The string '0' doesn't map to any letter and therefore cannot be decoded."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how previous characters can contribute to decoding current positions.",
      "Dynamic programming can help in storing intermediate results."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock II",
    "description": "You are given an array where the ith element is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. However, you are allowed to buy and sell the stock multiple times; you can take the profit from one transaction and use it for the next one. Write a function to calculate the maximum profit you can achieve.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithm",
    "tags": [
      "Greedy",
      "Dynamic Programming",
      "Array"
    ],
    "input_format": "An array of integers prices where 0 <= prices.length <= 10^4.",
    "output_format": "An integer representing the maximum profit that can be achieved.",
    "constraints": [
      "0 <= prices.length <= 10^4",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "7",
        "explanation": "Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5 - 1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6 - 3 = 3. Total profit = 4 + 3 = 7."
      },
      {
        "input": "prices = [1, 2, 3, 4, 5]",
        "output": "4",
        "explanation": "Buy on day 1 (price = 1) and sell on day 5 (price = 5). Total profit = 5 - 1 = 4."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "No transactions are done because prices are declining."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Track the local minima and maxima.",
      "Iterate through the prices and add profit whenever a price increase is observed."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Restore IP Addresses",
    "description": "Given a string containing only digits, restore it by returning all possible valid IP address combinations. An IP address consists of four integers (each between 0 and 255) separated by single dots. The integers cannot have leading zeros unless they are exactly '0'.",
    "topic": "Backtracking",
    "subtopic": "String Manipulation",
    "tags": [
      "Backtracking",
      "String",
      "IP Address"
    ],
    "input_format": "A string s consisting of digits with length between 1 and 20.",
    "output_format": "A list of strings representing all possible valid IP address combinations.",
    "constraints": [
      "1 <= s.length <= 20",
      "s consists of digits only."
    ],
    "examples": [
      {
        "input": "s = '25525511135'",
        "output": "[\"255.255.11.135\", \"255.255.111.35\"]",
        "explanation": "The valid IP addresses are formed by splitting the string into four parts: 255, 255, 11, 135 and 255, 255, 111, 35."
      },
      {
        "input": "s = '0000'",
        "output": "[\"0.0.0.0\"]",
        "explanation": "The only valid IP address here is '0.0.0.0' as it is formed by four zeroes."
      },
      {
        "input": "s = '1111'",
        "output": "[\"1.1.1.1\"]",
        "explanation": "The only valid IP address here is '1.1.1.1' by splitting each digit."
      },
      {
        "input": "s = '010010'",
        "output": "[\"0.10.0.10\", \"0.100.1.0\"]",
        "explanation": "The valid IP addresses are formed by the combinations that do not have leading zeros."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to split the string into four segments.",
      "Each segment should be a valid number between 0 and 255.",
      "Be mindful of segments with leading zeros."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Longest Consecutive Sequence",
    "description": "Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your algorithm should run in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest consecutive sequence.",
    "constraints": [
      "0 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [100, 4, 200, 1, 3, 2]",
        "output": "4",
        "explanation": "The longest consecutive sequence is [1, 2, 3, 4], with the length of 4."
      },
      {
        "input": "nums = [0, -1]",
        "output": "2",
        "explanation": "The longest consecutive sequence is [-1, 0], with the length of 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a set to track numbers for O(1) lookups.",
      "For each number, start a new sequence if it's the beginning of a sequence."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Integer to English Words",
    "description": "Convert a non-negative integer to its English words representation. The function should handle numbers up to 2^31 - 1 (2,147,483,647). For example, the number 123 should be converted to 'One Hundred Twenty Three'. Note that the output should not contain any extra spaces.",
    "topic": "Mathematics",
    "subtopic": "String Manipulation",
    "tags": [
      "Math",
      "String",
      "Conversion"
    ],
    "input_format": "A single non-negative integer n.",
    "output_format": "A string representing the English words for the number.",
    "constraints": [
      "0 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "n = 123",
        "output": "One Hundred Twenty Three",
        "explanation": "The number 123 can be translated into English as 'One Hundred Twenty Three'."
      },
      {
        "input": "n = 1000",
        "output": "One Thousand",
        "explanation": "The number 1000 is represented as 'One Thousand' in English."
      },
      {
        "input": "n = 12345",
        "output": "Twelve Thousand Three Hundred Forty Five",
        "explanation": "The number 12345 converts to 'Twelve Thousand Three Hundred Forty Five'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Break down the number into groups of thousands, millions, etc.",
      "Use a mapping for numbers below 20 and for tens (20, 30, ...)."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Word Search II",
    "description": "Given a 2D board of characters and a list of strings words, return all words on the board. Each word can be constructed from letters of sequentially adjacent cells, where 'adjacent' cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word. A word must be at least 3 characters long and can appear in any direction.",
    "topic": "Backtracking",
    "subtopic": "Trie",
    "tags": [
      "Backtracking",
      "Trie",
      "Search"
    ],
    "input_format": "A 2D board represented as a list of lists of characters and a list of strings representing the words.",
    "output_format": "A list of strings representing all words found on the board.",
    "constraints": [
      "1 <= board.length <= 12",
      "1 <= board[i].length <= 12",
      "board[i][j] is a lowercase English letter.",
      "1 <= words.length <= 10^4",
      "1 <= words[i].length <= 10"
    ],
    "examples": [
      {
        "input": {
          "board": [
            [
              "o",
              "a",
              "a",
              "n"
            ],
            [
              "e",
              "t",
              "a",
              "e"
            ],
            [
              "i",
              "h",
              "k",
              "r"
            ],
            [
              "i",
              "f",
              "l",
              "v"
            ]
          ],
          "words": [
            "oath",
            "pea",
            "eat",
            "rain"
          ]
        },
        "output": [
          "oath",
          "eat"
        ],
        "explanation": "The words 'oath' and 'eat' are found on the board. 'oath' can be formed by the path from (0,0) to (0,1) to (0,2) to (1,2), and 'eat' can be formed from (1,1) to (1,0) to (1,2)."
      },
      {
        "input": {
          "board": [
            [
              "a",
              "b"
            ],
            [
              "c",
              "d"
            ]
          ],
          "words": [
            "ab",
            "cd",
            "acdb"
          ]
        },
        "output": [],
        "explanation": "None of the words are present in the board."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a Trie for efficient searching.",
      "Explore possible directions from each cell.",
      "Use a backtracking approach to build words."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Word Search",
    "description": "Given a 2D board and a word, find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cells, where 'adjacent' cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.",
    "topic": "Backtracking",
    "subtopic": "Depth-First Search",
    "tags": [
      "Backtracking",
      "DFS",
      "Matrix"
    ],
    "input_format": "A 2D board of characters and a string word.",
    "output_format": "A boolean indicating whether the word exists in the board.",
    "constraints": [
      "1 <= board.length, board[i].length <= 200",
      "board[i][j] is a lowercase English letter.",
      "1 <= word.length <= 10^6"
    ],
    "examples": [
      {
        "input": "board = [['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E']], word = 'ABCCED'",
        "output": "true",
        "explanation": "The word 'ABCCED' can be found in the board as follows: Start from A(0,0) -> B(0,1) -> C(0,2) -> C(1,2) -> E(2,2) -> D(2,1)."
      },
      {
        "input": "board = [['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E']], word = 'SEE'",
        "output": "true",
        "explanation": "The word 'SEE' can be constructed using the cells: S(1,0) -> E(2,0) -> E(2,1)."
      },
      {
        "input": "board = [['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E']], word = 'ABCB'",
        "output": "false",
        "explanation": "The word 'ABCB' cannot be constructed as the letter B at position (0,1) cannot be reused."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how to implement a search mechanism to navigate the grid.",
      "Use a visited structure to keep track of the cells you've already used."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Spiral Matrix II",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n*n in spiral order.",
    "topic": "Matrix",
    "subtopic": "Matrix Traversal",
    "tags": [
      "Matrix",
      "Spiral",
      "Traversal"
    ],
    "input_format": "An integer n representing the size of the matrix.",
    "output_format": "An n x n matrix filled with integers from 1 to n*n in spiral order.",
    "constraints": [
      "1 <= n <= 20"
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[[1, 2, 3], [8, 9, 4], [7, 6, 5]]",
        "explanation": "The numbers are filled in spiral order starting from 1 to 9 as shown."
      },
      {
        "input": "n = 1",
        "output": "[[1]]",
        "explanation": "For a single element, the matrix is just [[1]]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Visualize the spiral movement: right, down, left, and up.",
      "Use four boundaries to keep track of where to fill the matrix."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Merge Strings Alternately",
    "description": "You are given two strings, word1 and word2. You need to merge the two strings by alternating characters from both strings. If one string is longer than the other, append the additional characters of the longer string to the end of the merged string.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Merging"
    ],
    "input_format": "Two strings word1 and word2 with lengths between 0 and 100.",
    "output_format": "A single merged string.",
    "constraints": [
      "0 <= word1.length, word2.length <= 100",
      "word1 and word2 consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "word1 = 'abc', word2 = 'pqr'",
        "output": "apbqcr",
        "explanation": "Characters are merged as follows: 'a' from word1, 'p' from word2, 'b' from word1, 'q' from word2, 'c' from word1, and finally 'r' from word2."
      },
      {
        "input": "word1 = 'ab', word2 = 'pqrs'",
        "output": "apbqrs",
        "explanation": "First, alternate between 'a' and 'p', then 'b' and 'q'; finally append the remaining characters 'r' and 's' from word2."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers for each string.",
      "Iterate until reaching the end of both strings."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Shuffle the Array",
    "description": "Given a shuffled array of integers, return the array after performing a specific shuffle operation. Each element at an even index is moved to the start of the new array, followed by the elements at odd indices.",
    "topic": "Array",
    "subtopic": "Array Manipulation",
    "tags": [
      "Array",
      "Shuffling",
      "Manipulation"
    ],
    "input_format": "An array of integers nums where nums.length is even.",
    "output_format": "An array of integers representing the shuffled arrangement.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "1 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [2, 5, 1, 3, 4, 7]",
        "output": "[2, 1, 4, 5, 3, 7]",
        "explanation": "The elements at even indices [2, 1, 4] are placed at the start, followed by elements at odd indices [5, 3, 7]."
      },
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "[1, 3, 2, 4]",
        "explanation": "The elements at even indices [1, 3] are placed at the start, followed by elements at odd indices [2, 4]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Separate elements based on their indices.",
      "Utilize two arrays or list operations to combine results."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Diagonal Traverse",
    "description": "Given a matrix of integers, return all elements of the matrix in diagonal order, starting from the top left element. The traversal continues in a zigzag manner, alternating between moving upwards and moving downwards along the diagonal lines.",
    "topic": "Array",
    "subtopic": "Matrix Traversal",
    "tags": [
      "Array",
      "Matrix",
      "Traversal"
    ],
    "input_format": "A 2D array of integers matrix.",
    "output_format": "A list of integers representing the matrix elements in diagonal order.",
    "constraints": [
      "1 <= matrix.length <= 100",
      "1 <= matrix[i].length <= 100",
      "-10^5 <= matrix[i][j] <= 10^5"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "[1, 2, 4, 7, 5, 3, 6, 8, 9]",
        "explanation": "The diagonals are: [1], [2, 4], [7, 5, 3], [6, 8], [9]. Concatenating these gives the final result."
      },
      {
        "input": "matrix = [[1]]",
        "output": "[1]",
        "explanation": "Only one element exists."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a variable to track the direction of traversal.",
      "Handle the boundary cases when moving up or down the matrix."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Count and Say",
    "description": "The 'Count and Say' sequence is a sequence of digit strings defined by a recursive formula. The first few terms are: 1, 11, 21, 1211, 111221, and so on. Given an integer n, generate the n-th term of the 'Count and Say' sequence. The generation of the sequence works as follows: Starting with '1', read off the digits of the previous term, counting the number of digits in groups of the same digit. For example, the previous term '1211' is read as 'one 1, one 2, two 1s' which translates to '111221'.",
    "topic": "String",
    "subtopic": "Generation",
    "tags": [
      "String",
      "Recursion",
      "Count and Say"
    ],
    "input_format": "An integer n (1 <= n <= 30) representing the term of the 'Count and Say' sequence to generate.",
    "output_format": "A string that represents the n-th term of the 'Count and Say' sequence.",
    "constraints": [
      "1 <= n <= 30"
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "1",
        "explanation": "The first term in the sequence is '1'."
      },
      {
        "input": "n = 4",
        "output": "1211",
        "explanation": "The third term is '21', which is read as 'one 2, one 1'."
      },
      {
        "input": "n = 5",
        "output": "111221",
        "explanation": "The fourth term is '1211', which is read as 'one 1, one 2, two 1s'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a loop to generate each term based on the previous one.",
      "You can keep track of the count of each digit as you iterate through the string."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Find the Index of the First Occurrence in a String",
    "description": "Given a haystack string and a needle string, write a function that finds the first occurrence of the needle in the haystack, and returns the index of the first character of the first occurrence. If the needle is not part of the haystack, return -1.",
    "topic": "String",
    "subtopic": "Searching",
    "tags": [
      "String",
      "Searching",
      "Index"
    ],
    "input_format": "Two strings: haystack and needle, where 1 <= haystack.length <= 10^4 and 0 <= needle.length <= 10^4.",
    "output_format": "An integer representing the index of the first occurrence of the needle in the haystack, or -1 if not found.",
    "constraints": [
      "1 <= haystack.length <= 10^4",
      "0 <= needle.length <= 10^4"
    ],
    "examples": [
      {
        "input": "haystack = 'hello', needle = 'll'",
        "output": "2",
        "explanation": "The string 'll' first appears at index 2 in 'hello'."
      },
      {
        "input": "haystack = 'aaaaa', needle = 'bba'",
        "output": "-1",
        "explanation": "The string 'bba' is not found in 'aaaaa'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using the built-in functions for string searching.",
      "Think about how you can iterate through the haystack efficiently."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Add to Array-Form of Integer",
    "description": "The array-form of an integer is an array representing its digits in left-to-right order. For example, if the integer is 123, the array-form is [1, 2, 3]. Given an integer K and an array A representing the array-form of an integer, return the array-form of the integer A + K.",
    "topic": "Array",
    "subtopic": "Mathematics",
    "tags": [
      "Array",
      "Math",
      "Addition"
    ],
    "input_format": "An array A of non-negative integers and a non-negative integer K.",
    "output_format": "An array representing the sum of the integer formed by A and K.",
    "constraints": [
      "1 <= A.length <= 10000",
      "0 <= A[i] <= 9",
      "0 <= K <= 10^4"
    ],
    "examples": [
      {
        "input": "A = [1, 2, 0, 0], K = 34",
        "output": "[1, 2, 0, 3, 4]",
        "explanation": "The integer formed by A is 1200. Adding 34 gives 1234, represented by the array [1, 2, 0, 3, 4]."
      },
      {
        "input": "A = [2, 7, 4], K = 181",
        "output": "[4, 5, 5]",
        "explanation": "The integer formed by A is 274. Adding 181 gives 455, represented by the array [4, 5, 5]."
      },
      {
        "input": "A = [2, 1, 5], K = 806",
        "output": "[1, 0, 2, 1]",
        "explanation": "The integer formed by A is 215. Adding 806 gives 1021, represented by the array [1, 0, 2, 1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider the addition from the rightmost digit to the leftmost digit.",
      "You may need to handle carry-over in the addition."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Remove Duplicates from Sorted Array",
    "description": "Given a sorted array of integers, you need to modify the array in-place such that each element appears only once and returns the new length of the array. Do not allocate extra space for another array. The relative order of elements should be kept the same.",
    "topic": "Array",
    "subtopic": "In-Place Modification",
    "tags": [
      "Array",
      "Two Pointers",
      "In-Place"
    ],
    "input_format": "An array of sorted integers nums.",
    "output_format": "An integer representing the new length of the array after duplicates have been removed.",
    "constraints": [
      "1 <= nums.length <= 3 * 10^4",
      "-100 <= nums[i] <= 100",
      "nums is sorted in non-decreasing order."
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 2]",
        "output": "2",
        "explanation": "After removing duplicates, the array becomes [1, 2]. The length is 2."
      },
      {
        "input": "nums = [0,0,1,1,1,2,2,3,3,4]",
        "output": "5",
        "explanation": "After removing duplicates, the array becomes [0, 1, 2, 3, 4]. The length is 5."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to keep track of the unique elements.",
      "Consider what condition to move the first pointer."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Palindrome Number",
    "description": "Given an integer x, return true if x is a palindrome, and false otherwise. A palindrome is a number that reads the same backward as forward. For example, 121 is a palindrome, but 123 is not.",
    "topic": "Mathematics",
    "subtopic": "Number Theory",
    "tags": [
      "Palindrome",
      "Number",
      "Mathematics"
    ],
    "input_format": "An integer x.",
    "output_format": "A boolean indicating whether the integer is a palindrome.",
    "constraints": [
      "-2^31 <= x <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "121",
        "output": "true",
        "explanation": "121 reads the same backward as forward."
      },
      {
        "input": "-121",
        "output": "false",
        "explanation": "-121 reads as 121- which is not a palindrome."
      },
      {
        "input": "10",
        "output": "false",
        "explanation": "10 reads as 01 which is not the same as 10."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "You can convert the number to a string and check if it is equal to its reverse.",
      "Consider how to handle negative numbers."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Single Number",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Hashing",
      "Bit Manipulation"
    ],
    "input_format": "An array of integers nums where each integer appears twice except for one.",
    "output_format": "An integer which is the single number in the array.",
    "constraints": [
      "1 <= nums.length <= 3 * 10^4",
      "-3 * 10^4 <= nums[i] <= 3 * 10^4",
      "Each element in the array appears twice except for one element."
    ],
    "examples": [
      {
        "input": "nums = [2, 2, 1]",
        "output": "1",
        "explanation": "The number 1 appears only once, while the number 2 appears twice."
      },
      {
        "input": "nums = [4, 1, 2, 1, 2]",
        "output": "4",
        "explanation": "The number 4 appears only once, while the numbers 1 and 2 appear twice."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to use XOR to find the single number.",
      "If you XOR two same numbers, the result is 0."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "3Sum Closest",
    "description": "Given an array of integers nums and an integer target, return the integer sum of three integers from nums such that the sum is closest to target. You may assume that each input would have exactly one solution. You are allowed to use the same element multiple times in the sum. The problem can be solved in linear time.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An integer representing the sum of three integers from nums closest to the target.",
    "constraints": [
      "3 <= nums.length <= 10^3",
      "-1000 <= nums[i] <= 1000",
      "-10^4 <= target <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-1, 2, 1, -4], target = 1",
        "output": "2",
        "explanation": "The closest sum is 2 which is formed by nums[0] + nums[1] + nums[2]."
      },
      {
        "input": "nums = [0, 0, 0], target = 1",
        "output": "0",
        "explanation": "The closest sum is 0 since all elements are 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the array to use two pointers effectively.",
      "Keep track of the closest sum while iterating.",
      "Consider both increasing and decreasing the pointers based on the current sum."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Jump Game",
    "description": "You are given an integer array nums. You are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Your goal is to determine if you can reach the last index. You can jump from index i to any index j where i < j <= i + nums[i]. If you can reach the last index, return true; otherwise, return false.",
    "topic": "Array",
    "subtopic": "Greedy",
    "tags": [
      "Array",
      "Greedy",
      "DP"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A boolean value indicating whether you can reach the last index.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, 1, 1, 4]",
        "output": "true",
        "explanation": "Jump 1 step from index 0 to 1, then 3 steps to the last index."
      },
      {
        "input": "nums = [3, 2, 1, 0, 4]",
        "output": "false",
        "explanation": "You will always reach index 3 and can't jump to the last index."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how far you can jump from each position.",
      "Keep track of the farthest index you can reach.",
      "If at any point the current index is greater than the farthest reachable index, you cannot reach the end."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Kadane's Algorithm"
    ],
    "input_format": "An integer array nums of size n.",
    "output_format": "An integer representing the largest sum of a contiguous subarray.",
    "constraints": [
      "1 <= n <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The contiguous subarray [4,-1,2,1] has the largest sum 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The only element is 1, which is the largest sum."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The contiguous subarray [5,4,-1,7,8] has the largest sum 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to keep track of the maximum sum while iterating through the array.",
      "Look for a way to reset your sum when it becomes negative."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "House Robber",
    "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money hidden, but adjacent houses have security systems connected. If two adjacent houses are robbed in the same night, the security system will automatically contact the police. Given an array of integers representing the amount of money of each house, determine the maximum amount of money you can rob without alerting the police.",
    "topic": "Dynamic Programming",
    "subtopic": "Robbery Problem",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Greedy"
    ],
    "input_format": "An array of non-negative integers nums where nums[i] represents the amount of money at the i-th house.",
    "output_format": "An integer representing the maximum amount of money that can be robbed.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 400"
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 9, 3, 1]",
        "output": "12",
        "explanation": "Robbing the houses with 2, 9, and 1 gives the maximum amount of 12."
      },
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "4",
        "explanation": "Robbing the first and fourth houses (1 + 3) gives the maximum amount of 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider dynamic programming to keep track of maximum amounts at each house.",
      "You can decide whether to rob the current house or not based on previous calculations."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Subsets",
    "description": "Given an integer array nums of unique elements, return all possible subsets (the power set). The solution set must not contain duplicate subsets. You may return the solution in any order.",
    "topic": "Backtracking",
    "subtopic": "Combinatorial Generation",
    "tags": [
      "Backtracking",
      "Array",
      "Combinatorics"
    ],
    "input_format": "An array of unique integers nums.",
    "output_format": "A list of lists containing all possible subsets.",
    "constraints": [
      "0 <= nums.length <= 10",
      "-10 <= nums[i] <= 10",
      "All elements of nums are unique."
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]",
        "explanation": "The subsets are: [], [1], [2], [3], [1,2], [1,3], [2,3], [1,2,3]."
      },
      {
        "input": "nums = [0]",
        "output": "[[], [0]]",
        "explanation": "The subsets are: [], [0]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how you might build subsets incrementally.",
      "Using a backtracking approach can be effective."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Minimum Time Difference",
    "description": "Given a list of 24-hour formatted time strings, find the minimum time difference between any two time points in the list. The time format is 'HH:MM'. If the list contains only one time point, return 0.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Time",
      "Sorting"
    ],
    "input_format": "A list of strings times, where each string represents a time in 'HH:MM' format.",
    "output_format": "An integer representing the minimum time difference in minutes.",
    "constraints": [
      "1 <= times.length <= 2 * 10^4",
      "times[i] is a valid time format 'HH:MM'.",
      "The input times may not be unique."
    ],
    "examples": [
      {
        "input": "times = ['23:59', '00:00']",
        "output": "1",
        "explanation": "The times are '23:59' and '00:00'. The difference is 1 minute."
      },
      {
        "input": "times = ['00:00', '05:30', '23:15', '12:45']",
        "output": "15",
        "explanation": "The minimum time difference is between '23:15' and '00:00', which is 15 minutes."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the times first to find the minimum difference easily.",
      "Don't forget to check the time difference across midnight."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Word Break",
    "description": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words.",
    "topic": "Dynamic Programming",
    "subtopic": "String Manipulation",
    "tags": [
      "Dynamic Programming",
      "String",
      "Backtracking"
    ],
    "input_format": "A string s followed by a list of strings wordDict.",
    "output_format": "A boolean value indicating whether the string can be segmented.",
    "constraints": [
      "1 <= s.length <= 300",
      "1 <= wordDict.length <= 1000",
      "1 <= wordDict[i].length <= 20",
      "All strings in wordDict are lowercase.",
      "s and wordDict[i] consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'leetcode', wordDict = ['leet', 'code']",
        "output": "true",
        "explanation": "'leetcode' can be segmented as 'leet code'."
      },
      {
        "input": "s = 'applepenapple', wordDict = ['apple', 'pen']",
        "output": "true",
        "explanation": "'applepenapple' can be segmented as 'apple pen apple'."
      },
      {
        "input": "s = 'catsandog', wordDict = ['cats', 'dog', 'sand', 'and', 'cat']",
        "output": "false",
        "explanation": "'catsandog' cannot be segmented into words from the dictionary."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to solve the problem.",
      "Think about how to store results of subproblems.",
      "Use a boolean array to keep track of segmented indices."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Reverse Words in a String",
    "description": "Given a string s, you need to reverse the order of the words in the string. A word is defined as a sequence of non-space characters. The string can contain leading or trailing spaces or multiple spaces between words, which should be ignored. After reversing, you should return the resulting string without any leading or trailing spaces.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Reverse"
    ],
    "input_format": "A single string s.",
    "output_format": "A string representing the words in reverse order.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of English letters (upper-case and lower-case), digits, and space characters.",
      "The words are separated by at least one space."
    ],
    "examples": [
      {
        "input": "s = '   Hello World! This is LeetCode  '",
        "output": "'LeetCode is This World! Hello'",
        "explanation": "Removing leading and trailing spaces, the words are 'Hello', 'World!', 'This', 'is', 'LeetCode'. Reversing the order gives 'LeetCode is This World! Hello'."
      },
      {
        "input": "s = '  a good   example '",
        "output": "'example good a'",
        "explanation": "The words after trimming are 'a', 'good', 'example'. Reversing them results in 'example good a'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use split() to break the string into words and trim unnecessary spaces.",
      "Consider using reverse on the list of words."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Maximum Population Year",
    "description": "You are given a list of birth and death years of people in a certain country. Your task is to determine the year with the maximum population. If there are multiple years with the same maximum population, return the earliest year among them.",
    "topic": "Array",
    "subtopic": "Counting Frequency",
    "tags": [
      "Array",
      "Count",
      "Frequency"
    ],
    "input_format": "An array of pairs of integers, where each pair [birth, death] represents the birth and death year of a person.",
    "output_format": "An integer representing the year with the maximum population.",
    "constraints": [
      "1 <= records.length <= 10^4",
      "0 <= birth <= death <= 10^9"
    ],
    "examples": [
      {
        "input": "[[1950, 1961], [1960, 1971], [1970, 1980], [1980, 1990]]",
        "output": "1960",
        "explanation": "In the year 1960, the population reaches its peak with 2 births and no deaths."
      },
      {
        "input": "[[1990, 2000], [1985, 1995], [1995, 2005], [2000, 2010]]",
        "output": "1995",
        "explanation": "Both 1995 and 2000 have the same maximum population, but 1995 is the earliest."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider maintaining a count of people alive during each year.",
      "Use a hashmap to track population changes."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Reverse Only Letters",
    "description": "Given a string s, reverse the order of letters in the string while keeping all non-letter characters in their original positions. Letters are defined as the characters 'a' to 'z' and 'A' to 'Z'. This means that, for example, if the input string is 'a-bC-dEf-ghIj', the output should be 'j-Ih-gfE-dCba'.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Two Pointers",
      "Reversal"
    ],
    "input_format": "A string s consisting of English letters, digits, and symbols.",
    "output_format": "A string where letters are reversed and other characters remain in their original positions.",
    "constraints": [
      "1 <= s.length <= 100",
      "s consists of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "a-bC-dEf-ghIj",
        "output": "j-Ih-gfE-dCba",
        "explanation": "The letters are reversed and the non-letter characters remain in their original places."
      },
      {
        "input": "1a2",
        "output": "1a2",
        "explanation": "There is only one letter to reverse, and the output remains unchanged."
      },
      {
        "input": "Test1ng-Leet=code-Q!",
        "output": "!Qedo1ct-eeLg=TsT",
        "explanation": "Letters 'T', 'e', 's', 't', 'n', 'g', 'L', 'e', 'e', 't', 'c', 'o', 'd' are reversed while maintaining non-letter characters."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to track the current letter positions.",
      "Consider using a stack to store letters.",
      "You can iterate through the string and collect letters for reversal."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Find the Winner of the Circular Game",
    "description": "There are n players standing in a circle, numbered from 1 to n. A game begins with the first player. Starting from player 1, you count the number of players in each round. In each round, you eliminate the player who is at position k after counting starts from the last eliminated player. This continues until only one player remains. Write a function to determine the winner of this game.",
    "topic": "Mathematics",
    "subtopic": "Simulation",
    "tags": [
      "Simulation",
      "Game Theory",
      "Circular Queue"
    ],
    "input_format": "Two integers n and k, where n is the number of players and k is the count which determines the elimination.",
    "output_format": "An integer representing the position of the winning player.",
    "constraints": [
      "1 <= n <= 10^5",
      "1 <= k <= n"
    ],
    "examples": [
      {
        "input": "n = 5, k = 2",
        "output": "3",
        "explanation": "The order of elimination is: 2, 4, 1, 5. Player 3 is the last remaining."
      },
      {
        "input": "n = 6, k = 5",
        "output": "1",
        "explanation": "The order of elimination is: 5, 4, 3, 2, 6. Player 1 is the last remaining."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a mathematical approach instead of simulating the entire game.",
      "Look into the properties of circular elimination sequences."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Asteroid Collision",
    "description": "We have an array of integers representing asteroids in a row. For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). When two asteroids collide, the smaller one will explode. If they are the same size, both will explode. The process continues until no more collisions are possible. Return the final state of the asteroids after all collisions have been processed.",
    "topic": "Stack",
    "subtopic": "Collision Handling",
    "tags": [
      "Stack",
      "Greedy",
      "Simulation"
    ],
    "input_format": "An array of integers asteroids, where each integer represents an asteroid's size and direction.",
    "output_format": "An array of integers representing the final state of the asteroids.",
    "constraints": [
      "1 <= asteroids.length <= 10^4",
      "-1000 <= asteroids[i] <= 1000",
      "asteroids[i] != 0"
    ],
    "examples": [
      {
        "input": "asteroids = [5, 10, -5]",
        "output": "[5, 10]",
        "explanation": "The -5 asteroid collides with 10. 10 survives, and 5 remains."
      },
      {
        "input": "asteroids = [8, -8]",
        "output": "[]",
        "explanation": "Both asteroids collide and destroy each other."
      },
      {
        "input": "asteroids = [10, 2, -5]",
        "output": "[10]",
        "explanation": "The 2 collides with -5 and is destroyed; 10 survives."
      },
      {
        "input": "asteroids = [-2, -1, 1, 2]",
        "output": "[-2, -1, 1, 2]",
        "explanation": "No collisions occur as they are moving in the same direction."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the states of asteroids.",
      "When an asteroid moving left encounters one moving right, check their absolute sizes.",
      "Continue processing until all collisions are resolved."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Find Triangular Sum of an Array",
    "description": "Given an array of integers, calculate the triangular sum of the array. The triangular sum is defined as follows: Start with the given array and repeatedly replace the array with an array of sums of adjacent elements until there is only one element left. The final element left in the array is the triangular sum.",
    "topic": "Array",
    "subtopic": "Prefix Sums",
    "tags": [
      "Array",
      "Summation",
      "Prefix Sums"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the triangular sum of the array.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [2, 5, 3]",
        "output": "11",
        "explanation": "First, calculate the sums of adjacent elements: [2 + 5, 5 + 3] => [7, 8]. Then do it again: [7 + 8] => [15]. Resulting in triangular sum = 15."
      },
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "20",
        "explanation": "First iteration: [1 + 2, 2 + 3, 3 + 4] => [3, 5, 7]. Second iteration: [3 + 5, 5 + 7] => [8, 12]. Final iteration: [8 + 12] => [20]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Keep reducing the array until one element remains.",
      "Think about how to efficiently calculate the sums."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Permutations",
    "description": "Given an array of distinct integers, return all the possible permutations. You can return the answer in any order.",
    "topic": "Backtracking",
    "subtopic": "Permutations",
    "tags": [
      "Backtracking",
      "Recursion",
      "Permutations"
    ],
    "input_format": "An array of distinct integers nums.",
    "output_format": "A list of lists containing all possible permutations of the input array.",
    "constraints": [
      "1 <= nums.length <= 6",
      "-10 <= nums[i] <= 10"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        "explanation": "The possible permutations of the array [1, 2, 3] are all the different arrangements of these numbers."
      },
      {
        "input": "nums = [0, 1]",
        "output": "[[0,1],[1,0]]",
        "explanation": "The only permutations of the array [0, 1] are [0, 1] and [1, 0]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using recursion to generate the permutations.",
      "Try swapping elements to create new permutations."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Integer to Roman",
    "description": "Given an integer, convert it to a Roman numeral. The input is guaranteed to be within the range from 1 to 3999.",
    "topic": "Math",
    "subtopic": "Conversion",
    "tags": [
      "Math",
      "Conversion",
      "String"
    ],
    "input_format": "An integer num (1 <= num <= 3999).",
    "output_format": "A string representing the Roman numeral equivalent of the integer.",
    "constraints": [
      "1 <= num <= 3999"
    ],
    "examples": [
      {
        "input": "num = 3",
        "output": "III",
        "explanation": "The integer 3 is represented as 'III' in Roman numerals."
      },
      {
        "input": "num = 58",
        "output": "LVIII",
        "explanation": "The integer 58 is represented as 'LVIII' in Roman numerals, which is composed of 'L' (50), 'V' (5), and 'III' (3)."
      },
      {
        "input": "num = 1994",
        "output": "MCMXCIV",
        "explanation": "The integer 1994 is represented as 'MCMXCIV' in Roman numerals, which is composed of 'M' (1000), 'CM' (900), 'XC' (90), and 'IV' (4)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Create a mapping of integers to their corresponding Roman numerals.",
      "Start from the largest value and work your way down."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Longest Increasing Subsequence",
    "description": "Given an integer array nums, return the length of the longest strictly increasing subsequence. A subsequence is obtained by deleting some elements of the array without changing the order of the remaining elements. For example, given the array [10, 9, 2, 5, 3, 7, 101, 18], the longest increasing subsequence is [2, 3, 7, 101], which has a length of 4.",
    "topic": "Dynamic Programming",
    "subtopic": "Longest Increasing Subsequence",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Binary Search"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest increasing subsequence.",
    "constraints": [
      "1 <= nums.length <= 2500",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [10, 9, 2, 5, 3, 7, 101, 18]",
        "output": "4",
        "explanation": "The longest increasing subsequence is [2, 3, 7, 101], which has a length of 4."
      },
      {
        "input": "nums = [0, 1, 0, 3, 2, 3]",
        "output": "4",
        "explanation": "The longest increasing subsequence is [0, 1, 2, 3], which has a length of 4."
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7]",
        "output": "1",
        "explanation": "The longest increasing subsequence is [7], which has a length of 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to build up the solution incrementally.",
      "Try to maintain an array that represents the smallest tail value of all increasing subsequences of varying lengths."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Search Insert Position",
    "description": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You must write an algorithm with O(log n) runtime complexity.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Search"
    ],
    "input_format": "A sorted array of distinct integers 'nums' and an integer 'target'.",
    "output_format": "An integer representing the index of 'target' in 'nums' or where it should be inserted.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^4 <= nums[i] <= 10^4",
      "All elements of nums are distinct."
    ],
    "examples": [
      {
        "input": "nums = [1, 3, 5, 6], target = 5",
        "output": "2",
        "explanation": "The target value 5 is found at index 2."
      },
      {
        "input": "nums = [1, 3, 5, 6], target = 2",
        "output": "1",
        "explanation": "The target value 2 is not found, and it should be inserted at index 1."
      },
      {
        "input": "nums = [1, 3, 5, 6], target = 7",
        "output": "4",
        "explanation": "The target value 7 is not found, and it should be inserted at the end, index 4."
      },
      {
        "input": "nums = [1, 3, 5, 6], target = 0",
        "output": "0",
        "explanation": "The target value 0 is not found, and it should be inserted at the beginning, index 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using binary search to achieve O(log n) complexity.",
      "Check the midpoint values to decide which half to continue searching."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Maximum Sum of an Hourglass",
    "description": "In a 2D grid of integers, an hourglass is a subset of values with the following pattern: \n\n```\nA B C\n  D  \nE F G\n```\n\nGiven a 6x6 2D array, you need to find the maximum hourglass sum in the array. Return the maximum hourglass sum or 0 if there are no hourglasses found.",
    "topic": "Array",
    "subtopic": "2D Array",
    "tags": [
      "Array",
      "2D Array",
      "Dynamic Programming"
    ],
    "input_format": "A 2D list of integers with dimensions 6x6.",
    "output_format": "An integer representing the maximum hourglass sum.",
    "constraints": [
      "The input grid must always have dimensions 6x6.",
      "-9 <= grid[i][j] <= 9"
    ],
    "examples": [
      {
        "input": "grid = [[1, 1, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0], [0, 0, 2, 4, 4, 0], [0, 0, 1, 2, 4, 0], [0, 0, 2, 4, 4, 0]]",
        "output": "19",
        "explanation": "The hourglass with the maximum sum is: \n 2 4 4\n   1\n 2 4 4\nThe sum is 2 + 4 + 4 + 1 + 2 + 4 = 19."
      },
      {
        "input": "grid = [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]",
        "output": "0",
        "explanation": "There are no hourglass sums since all values are zero."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Iterate through all possible hourglass positions in the 6x6 grid.",
      "Compute the sum for each hourglass structure."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Remove Duplicates from Sorted Array II",
    "description": "Given a sorted array of integers, you need to modify the array in-place such that each element appears at most twice and return the new length of the array. Do not allocate extra space for another array. The relative order of the elements should be kept the same.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "In-place"
    ],
    "input_format": "An integer array nums sorted in non-decreasing order.",
    "output_format": "An integer representing the new length of the modified array.",
    "constraints": [
      "0 <= nums.length <= 3 * 10^4",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [1,1,1,2,2,3]",
        "output": "5",
        "explanation": "After removing duplicates, nums will be modified to [1,1,2,2,3] with a new length of 5."
      },
      {
        "input": "nums = [0,0,1,1,1,1,2,3,3]",
        "output": "7",
        "explanation": "After removing duplicates, nums will be modified to [0,0,1,1,2,3,3] with a new length of 7."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a two-pointer approach.",
      "Count the occurrences of each number as you traverse the array."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Next Permutation",
    "description": "Implement the function nextPermutation that takes an array of integers nums and modifies it in-place to be the next lexicographical permutation of its integers. If such arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order). The replacement must be done using only constant extra memory.",
    "topic": "Array",
    "subtopic": "Permutation",
    "tags": [
      "Array",
      "Permutations",
      "In-Place"
    ],
    "input_format": "An array of integers nums of size n.",
    "output_format": "The array nums should be modified in-place to its next permutation.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 100"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "[1, 3, 2]",
        "explanation": "The next permutation of [1, 2, 3] is [1, 3, 2]."
      },
      {
        "input": "nums = [3, 2, 1]",
        "output": "[1, 2, 3]",
        "explanation": "The input is the highest permutation; the next permutation is the lowest: [1, 2, 3]."
      },
      {
        "input": "nums = [1, 1, 5]",
        "output": "[1, 5, 1]",
        "explanation": "The next permutation of [1, 1, 5] is [1, 5, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Look for the longest non-increasing suffix.",
      "Find the pivot just before the suffix.",
      "Swap the pivot with the smallest number in the suffix that is larger than the pivot.",
      "Reverse the suffix."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Palindrome Linked List",
    "description": "Given a singly linked list, determine if it is a palindrome. A linked list is considered a palindrome if it reads the same forward and backward. You need to implement a function that checks if the linked list is a palindrome without using additional data structures.",
    "topic": "Linked List",
    "subtopic": "Two Pointers",
    "tags": [
      "Linked List",
      "Palindrome",
      "Two Pointers"
    ],
    "input_format": "The head of the singly linked list.",
    "output_format": "A boolean indicating whether the linked list is a palindrome.",
    "constraints": [
      "The number of nodes in the linked list is in the range [1, 10^5].",
      "The value of each node is an integer in the range [-10^5, 10^5]."
    ],
    "examples": [
      {
        "input": "head = [1, 2, 2, 1]",
        "output": "true",
        "explanation": "The linked list reads the same forward and backward."
      },
      {
        "input": "head = [1, 2]",
        "output": "false",
        "explanation": "The linked list does not read the same forward and backward."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using two pointers to find the middle of the linked list.",
      "Reverse the second half of the linked list and compare it to the first half."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Remove All Adjacent Duplicates In String",
    "description": "Given a string s, remove all adjacent duplicates in the string iteratively, until no two adjacent characters are the same. Return the resulting string after all such removals.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Simulation"
    ],
    "input_format": "A string s consisting of lowercase English letters.",
    "output_format": "A string representing the final result after removing all adjacent duplicates.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"abbaca\"",
        "output": "ca",
        "explanation": "Removing 'bb' from 'abbaca' results in 'aaca'. Removing 'aa' results in 'ca'."
      },
      {
        "input": "s = \"azxxzy\"",
        "output": "ay",
        "explanation": "Removing 'xx' from 'azxxzy' results in 'azzy'. Then removing 'zz' results in 'ay'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Think about using a stack to keep track of characters."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Middle of the Linked List",
    "description": "Given a non-empty, singly linked list with head node head, return a middle node of linked list. If there are two middle nodes, return the second middle node.",
    "topic": "Linked List",
    "subtopic": "Traversal",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Fast and Slow Pointers"
    ],
    "input_format": "The input consists of a single linked list represented by its head node.",
    "output_format": "A node representing the middle of the linked list.",
    "constraints": [
      "The number of nodes in the linked list is in the range [1, 100]",
      "1 <= Node.val <= 100"
    ],
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5]",
        "output": "[3, 4, 5]",
        "explanation": "The middle node of the linked list is 3."
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6]",
        "output": "[4, 5, 6]",
        "explanation": "The linked list has two middle nodes, 3 and 4. Since we have to return the second one, the output is 4."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using two pointers, one fast and one slow.",
      "When the fast pointer reaches the end, the slow pointer will be at the middle."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Coin Change",
    "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. You need to return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.",
    "topic": "Dynamic Programming",
    "subtopic": "Coin Change Problem",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An integer array coins and an integer amount.",
    "output_format": "An integer representing the fewest number of coins needed to make up the amount, or -1 if it is not possible.",
    "constraints": [
      "1 <= coins.length <= 12",
      "1 <= coins[i] <= 2^31 - 1",
      "0 <= amount <= 10^4"
    ],
    "examples": [
      {
        "input": "coins = [1, 2, 5], amount = 11",
        "output": "3",
        "explanation": "11 can be made up of 5 + 5 + 1."
      },
      {
        "input": "coins = [2], amount = 3",
        "output": "-1",
        "explanation": "3 cannot be formed using 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to keep track of the minimum coins needed.",
      "Initialize a dp array where dp[i] represents the minimum coins needed to make amount i."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Isomorphic Strings",
    "description": "Given two strings s and t, determine if they are isomorphic. Two strings s and t are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.",
    "topic": "String",
    "subtopic": "String Matching",
    "tags": [
      "String",
      "Hash Map",
      "Mapping"
    ],
    "input_format": "Two strings s and t, both of length n.",
    "output_format": "Return true if s and t are isomorphic, otherwise return false.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s and t consist of any printable ascii characters."
    ],
    "examples": [
      {
        "input": "s = \"egg\", t = \"add\"",
        "output": "true",
        "explanation": "The character 'e' maps to 'a', and 'g' maps to 'd'."
      },
      {
        "input": "s = \"foo\", t = \"add\"",
        "output": "false",
        "explanation": "The character 'f' maps to 'a', 'o' maps to 'd', but 'o' cannot map to two different characters."
      },
      {
        "input": "s = \"paper\", t = \"title\"",
        "output": "true",
        "explanation": "The character 'p' maps to 't', 'a' maps to 'i', 'e' maps to 'l', and 'r' maps to 'e'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to keep track of character mappings.",
      "Check that each character in one string consistently maps to the same character in another."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Cinema Seat Allocation",
    "description": "You are tasked with allocating seats in a cinema such that a group of friends can sit together. The cinema has a fixed number of rows and seats in each row. Given the total number of seats, you need to determine how many configurations of seat allocations allow the friends to sit together, such that they have at least one empty seat between each group, ensuring maximum comfort. Write a function that returns the number of valid seat configurations.",
    "topic": "Dynamic Programming",
    "subtopic": "Combinatorics",
    "tags": [
      "Dynamic Programming",
      "Combinatorics",
      "Greedy"
    ],
    "input_format": "An integer n (1 <= n <= 1000), representing the total number of seats in the cinema.",
    "output_format": "An integer representing the number of valid configurations for seating.",
    "constraints": [
      "1 <= n <= 1000"
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "1",
        "explanation": "With 3 seats, there is only one configuration: 'X_X'."
      },
      {
        "input": "n = 5",
        "output": "2",
        "explanation": "With 5 seats, the valid configurations are 'X_X__' and 'XX___."
      },
      {
        "input": "n = 7",
        "output": "3",
        "explanation": "The valid configurations are 'X_X___', 'XX____', and 'X__X__'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how many friends are allocated and how seating arrangements are structured.",
      "Think about using dynamic programming to build from smaller solutions.",
      "Explore combinatorial placement of groups with constraints."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "The Latest Time to Catch a Bus",
    "description": "You are given a bus schedule consisting of several bus times. Each bus departs at a specific time, and you want to catch the latest bus possible without being late. Given a list of bus departure times and your arrival time, return the latest possible time you can catch a bus, ensuring you arrive at or before the bus departure time. If you can\u2019t catch any bus, return the time that is your arrival time.",
    "topic": "Greedy",
    "subtopic": "Sorting",
    "tags": [
      "Greedy",
      "Sorting",
      "Time"
    ],
    "input_format": "An array of strings representing bus departure times in 24-hour format and a string representing your arrival time in 24-hour format.",
    "output_format": "A string representing the latest time you can catch a bus in 24-hour format.",
    "constraints": [
      "1 <= buses.length <= 100",
      "buses[i] is a valid time in 24-hour format and is unique.",
      "arrival is a valid time in 24-hour format."
    ],
    "examples": [
      {
        "input": "buses = [\"10:00\", \"10:15\", \"10:30\"], arrival = \"10:20\"",
        "output": "\"10:15\"",
        "explanation": "You can catch the bus at 10:15, which is the latest bus before your arrival time of 10:20."
      },
      {
        "input": "buses = [\"09:00\", \"09:30\", \"10:00\"], arrival = \"09:15\"",
        "output": "\"09:00\"",
        "explanation": "You can catch the bus at 09:00, which is the latest bus before your arrival time of 09:15."
      },
      {
        "input": "buses = [\"09:00\", \"09:30\", \"10:00\"], arrival = \"10:05\"",
        "output": "\"10:00\"",
        "explanation": "You can catch the bus at 10:00, which is the latest bus that you can catch before your arrival time."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the bus times for easier comparison.",
      "Use string comparison to determine the latest time."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "First Unique Character in a String",
    "description": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.",
    "topic": "String",
    "subtopic": "Character Counting",
    "tags": [
      "String",
      "Hash Table",
      "Counting"
    ],
    "input_format": "A string s consisting of lowercase English letters.",
    "output_format": "An integer representing the index of the first non-repeating character, or -1 if it does not exist.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'leetcode'",
        "output": "0",
        "explanation": "The first non-repeating character is 'l' at index 0."
      },
      {
        "input": "s = 'loveleetcode'",
        "output": "2",
        "explanation": "The first non-repeating character is 'v' at index 2."
      },
      {
        "input": "s = 'aabb'",
        "output": "-1",
        "explanation": "There are no non-repeating characters."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to count the frequency of each character.",
      "Iterate through the string again to find the first character with a count of 1."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Excel Sheet Column Title",
    "description": "Given an integer 'n', return its corresponding column title as it appears in an Excel sheet. For example, A = 1, B = 2, ..., Z = 26, AA = 27, AB = 28, ... and so on. You must convert the given integer to the column title following the Excel column naming convention.",
    "topic": "Math",
    "subtopic": "Conversion",
    "tags": [
      "Math",
      "Conversion",
      "Excel"
    ],
    "input_format": "An integer n (1 <= n <= 2^31 - 1) representing the column number.",
    "output_format": "A string representing the corresponding column title.",
    "constraints": [
      "1 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "A",
        "explanation": "Column number 1 corresponds to title A."
      },
      {
        "input": "n = 28",
        "output": "AB",
        "explanation": "Column number 28 corresponds to title AB."
      },
      {
        "input": "n = 701",
        "output": "ZY",
        "explanation": "Column number 701 corresponds to title ZY."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how the column titles progress and use division and modulo operations.",
      "Think about converting the column index to a base-26 representation."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Binary Search",
    "description": "Implement a function that performs a binary search on a sorted array of integers. Given a sorted array of integers and a target integer, return the index of the target if it is present in the array. If the target is not found, return -1.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Binary Search"
    ],
    "input_format": "A sorted array of integers nums and an integer target.",
    "output_format": "An integer representing the index of the target if found, otherwise -1.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5",
      "nums is sorted in ascending order."
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5, 6], target = 4",
        "output": "3",
        "explanation": "The target 4 is present in the array at index 3."
      },
      {
        "input": "nums = [1, 2, 3, 4, 5, 6], target = 7",
        "output": "-1",
        "explanation": "The target 7 is not present in the array."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider the middle element of the array in each step.",
      "If the middle element is less than the target, search the right half.",
      "If the middle element is greater than the target, search the left half."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Remove K Digits",
    "description": "Given a string num representing a non-negative integer and an integer k, return the smallest possible integer after removing k digits from num. You must make sure to remove k digits such that the resulting number is as small as possible. Leading zeros are not allowed, and if the result is empty, return '0'.",
    "topic": "String",
    "subtopic": "Greedy",
    "tags": [
      "String",
      "Greedy",
      "Stack"
    ],
    "input_format": "A string num representing a non-negative integer, and an integer k (0 <= k <= len(num)).",
    "output_format": "A string representing the smallest possible integer after removing k digits.",
    "constraints": [
      "1 <= num.length <= 10^5",
      "num consists of digits and does not contain any leading zeros apart from the number 0 itself."
    ],
    "examples": [
      {
        "input": "num = '1432219', k = 3",
        "output": "1219",
        "explanation": "Removing the digits 4, 3, and 2 gives the smallest number 1219."
      },
      {
        "input": "num = '10200', k = 1",
        "output": "200",
        "explanation": "Removing 1 gives the number 200, which is the smallest."
      },
      {
        "input": "num = '10', k = 2",
        "output": "0",
        "explanation": "Removing both digits results in an empty string, which is interpreted as 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a greedy approach to decide which digits to remove.",
      "Consider using a stack to keep track of the digits.",
      "Leading zeros should be handled after processing the digits."
    ],
    "company": "Zoho"
  },
  {
    "question_id": "",
    "title": "Reverse Linked List II",
    "description": "Given a linked list and two integers left and right where left <= right, reverse the nodes of the linked list from position left to position right. Do it in one-pass and without altering the nodes outside the specified range.",
    "topic": "Linked List",
    "subtopic": "Reversing Linked List",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Reversal"
    ],
    "input_format": "The head of a singly linked list and two integers left and right.",
    "output_format": "The head of the modified linked list after reversing the specified section.",
    "constraints": [
      "The number of nodes in the list is n.",
      "1 <= left <= right <= n",
      "1 <= n <= 500"
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4,5], left = 2, right = 4",
        "output": "[1,4,3,2,5]",
        "explanation": "Reversing the section from position 2 to 4 gives us the modified list, where the nodes 2, 3, and 4 are reversed."
      },
      {
        "input": "head = [1,2,3,4,5], left = 1, right = 1",
        "output": "[1,2,3,4,5]",
        "explanation": "Since left and right are the same, the list remains unchanged."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dummy node to simplify pointer manipulation.",
      "You may need to track the previous node before the left position."
    ],
    "company": "Zoho"
  }
]