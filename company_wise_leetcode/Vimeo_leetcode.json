[
  {
    "question_id": "",
    "title": "Count Pairs With XOR in a Range",
    "description": "Given an array of integers, and two integers low and high, count the number of pairs (i, j) such that i < j and low <= nums[i] XOR nums[j] <= high. The XOR value is defined as the binary operation applied between two integers, which outputs a binary number with bits set to 1 where the corresponding bits of the operands differ.",
    "topic": "Array",
    "subtopic": "Bit Manipulation",
    "tags": [
      "Array",
      "Bit Manipulation",
      "XOR",
      "Count Pairs"
    ],
    "input_format": "An array of integers nums, followed by two integers low and high.",
    "output_format": "An integer representing the number of valid pairs (i, j).",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "0 <= low <= high <= 2 * 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4], low = 2, high = 4",
        "output": "3",
        "explanation": "The valid pairs are (0, 1) -> 1 XOR 2 = 3, (0, 2) -> 1 XOR 3 = 2, and (1, 2) -> 2 XOR 3 = 1. There are 3 pairs with XOR in the range [2, 4]."
      },
      {
        "input": "nums = [5, 6, 7], low = 1, high = 10",
        "output": "3",
        "explanation": "The valid pairs are (0, 1) -> 5 XOR 6 = 3, (0, 2) -> 5 XOR 7 = 2, and (1, 2) -> 6 XOR 7 = 1. There are 3 pairs with XOR in the range [1, 10]."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Utilize properties of XOR operation to optimize pair counting.",
      "Consider using a sorting technique for better range queries."
    ],
    "company": "Vimeo"
  },
  {
    "question_id": "",
    "title": "Flower Planting With No Adjacent",
    "description": "You have a flowerbed represented as an array where flowers can be planted. The goal is to plant flowers in such a way that no two flowers are adjacent to each other. Given an integer array flowerbed, where flowerbed[i] is 0 if the i-th plot is empty and 1 if it contains a flower, along with an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.",
    "topic": "Array",
    "subtopic": "Greedy",
    "tags": [
      "Array",
      "Greedy",
      "Simulation"
    ],
    "input_format": "An integer array flowerbed followed by an integer n.",
    "output_format": "A boolean value true if n new flowers can be planted, otherwise false.",
    "constraints": [
      "1 <= flowerbed.length <= 2 * 10^4",
      "flowerbed[i] is 0 or 1",
      "0 <= n <= flowerbed.length"
    ],
    "examples": [
      {
        "input": "flowerbed = [1, 0, 0, 0, 1], n = 1",
        "output": "true",
        "explanation": "We can plant one flower in the middle empty plot making it [1, 0, 1, 0, 1]."
      },
      {
        "input": "flowerbed = [1, 0, 0, 0, 1], n = 2",
        "output": "false",
        "explanation": "We cannot plant two flowers as it will violate the no-adjacent-flowers rule."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the empty plots and their neighbors.",
      "Try to count how many flowers can fit without violating the rule."
    ],
    "company": "Vimeo"
  },
  {
    "question_id": "",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Subarray"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum sum of the contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum of 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The only subarray is [1]."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The contiguous subarray [5,4,-1,7,8] has the largest sum of 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a variable to track the current subarray sum.",
      "If the current subarray sum becomes negative, reset it to 0."
    ],
    "company": "Vimeo"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an array of integers, find all unique triplets (a, b, c) in the array such that a + b + c = 0. Your solution should not include duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of lists, where each inner list contains three integers representing a unique triplet that sums to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The unique triplets that sum to zero are [-1, -1, 2] and [-1, 0, 1]."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "There are no numbers in the array, so there are no triplets."
      },
      {
        "input": "nums = [0, 0, 0]",
        "output": "[[0, 0, 0]]",
        "explanation": "The only triplet that sums to zero is [0, 0, 0]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the array to facilitate finding triplets.",
      "Use a fixed element and then apply a two-pointer technique for the remaining elements.",
      "Skip duplicate elements to avoid duplicate triplets in the output."
    ],
    "company": "Vimeo"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for Least Recently Used (LRU) Cache. It should support the following operations: get and put. The get operation retrieves the value of the key if the key exists in the cache. Otherwise, it returns -1. The put operation updates the value of the key if the key exists. If the key does not exist, it inserts the key-value pair. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Design",
    "subtopic": "Cache",
    "tags": [
      "Design",
      "Cache",
      "Data Structure"
    ],
    "input_format": "The cache is initialized with a positive capacity. The get and put operations are called with appropriate arguments.",
    "output_format": "The output for the get operation is the value associated with the key, or -1 if the key does not exist.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10^4",
      "0 <= value <= 10^4",
      "At most 2 * 10^5 calls will be made to get and put."
    ],
    "examples": [
      {
        "input": "LRUCache cache = new LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1,-1,3,4]",
        "explanation": "The sequence of operations leads to the following outcomes: cache.get(1) returns 1, cache.get(2) returns -1 (2 is evicted), cache.get(3) returns 3, cache.get(4) returns 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a combination of a hashmap and a doubly linked list to maintain the order of elements.",
      "Make sure to update the order upon accessing elements."
    ],
    "company": "Vimeo"
  },
  {
    "question_id": "",
    "title": "Min Stack",
    "description": "Design a stack that supports the following operations: push, pop, top, and retrieve the minimum element in constant time.\n\nImplement a class `MinStack` that has the following methods:\n1. `void push(int x)` - Pushes the element x onto the stack.\n2. `void pop()` - Removes the element on the top of the stack.\n3. `int top()` - Get the top element without removing it.\n4. `int getMin()` - Retrieve the minimum element in the stack.\n\nYour solution should support the mentioned operations in O(1) time complexity for each operation.",
    "topic": "Design",
    "subtopic": "Data Structure",
    "tags": [
      "Stack",
      "Data Structure",
      "Design"
    ],
    "input_format": "This is a class-based problem. You are required to implement the `MinStack` class with the methods described above.",
    "output_format": "The output will be the results of calling the functions on an instance of the MinStack class.",
    "constraints": [
      "All operation inputs are integers in the range [-10^5, 10^5].",
      "The push, pop, top, and getMin operations are called at most 3 * 10^4 times."
    ],
    "examples": [
      {
        "input": "MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();\nminStack.pop();\nminStack.top();\nminStack.getMin();",
        "output": "[-3, 0, -2]",
        "explanation": "Firstly, the stack contains -2, 0, -3. The minimum is -3.\nAfter popping -3, the top becomes 0 and the minimum is now -2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to keep track of the minimum element efficiently.",
      "You can use two stacks to solve this problem."
    ],
    "company": "Vimeo"
  }
]