[
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for Least Recently Used (LRU) Cache. It should support the following operations: get and put.\n\n- Get the value of the key if the key exists in the cache. Otherwise, return -1.\n- Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n\nThe functions should operate in O(1) average time complexity.",
    "topic": "Design",
    "subtopic": "Data Structures",
    "tags": [
      "Cache",
      "Design",
      "Data Structures"
    ],
    "input_format": "Initialize the LRUCache with a positive capacity. Then, you will be given queries to perform get and put operations.",
    "output_format": "Return the value for get operations, and return nothing for put operations.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10^4",
      "0 <= value <= 10^5",
      "The solution will be tested with at most 10^4 operations."
    ],
    "examples": [
      {
        "input": "LRUCache cache = new LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1, -1, 3, 4]",
        "explanation": "After the operations:\n- get(1) returns 1\n- get(2) returns -1, as 2 was evicted\n- get(3) returns 3\n- get(4) returns 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to keep track of keys and their corresponding node values.",
      "Use a doubly linked list to maintain the order of use for the cache."
    ],
    "company": "Cohesity"
  },
  {
    "question_id": "",
    "title": "Path With Minimum Effort",
    "description": "You are given a 2D array of integers heights where heights[i][j] represents the height of a cell in a grid. You can move from cell to cell in the four cardinal directions (up, down, left, right). The effort of traversing from a cell (x1, y1) to a cell (x2, y2) is the absolute difference in heights: |heights[x2][y2] - heights[x1][y1]|. Your goal is to find the path from the top-left corner to the bottom-right corner of the grid such that the maximum effort along this path is minimized. Return the minimum effort required to traverse from the top-left to the bottom-right cell.",
    "topic": "Graph",
    "subtopic": "Pathfinding",
    "tags": [
      "Graph",
      "Pathfinding",
      "Dijkstra's Algorithm"
    ],
    "input_format": "A 2D array of integers heights representing the grid.",
    "output_format": "An integer representing the minimum effort required to traverse from the top-left to the bottom-right cell.",
    "constraints": [
      "1 <= heights.length, heights[i].length <= 100",
      "0 <= heights[i][j] <= 10^6"
    ],
    "examples": [
      {
        "input": "heights = [[1,2,3],[3,8,4],[5,3,5]]",
        "output": "1",
        "explanation": "The optimal path is to move from (0,0) to (0,1) to (1,1) to (2,1) to (2,2). The maximum effort is max(|2-1|, |3-2|, |3-4|, |5-3|) = 1."
      },
      {
        "input": "heights = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "6",
        "explanation": "The only path from (0,0) to (2,2) visits each cell once, yielding a maximum effort of 6 between adjacent heights 1 and 7."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a priority queue to manage your traversal.",
      "You may want to perform a modified Dijkstra's algorithm.",
      "Think about how to keep track of the maximum effort along the path."
    ],
    "company": "Cohesity"
  },
  {
    "question_id": "",
    "title": "Find Median from Data Stream",
    "description": "Design a data structure that supports the following two operations: adding a number from the data stream and finding the median of all added numbers. Implement the MedianFinder class: - MedianFinder(): Initializes the MedianFinder object. - void addNum(int num): Adds the integer num from the data stream to the data structure. - double findMedian(): Returns the median of all elements in the data structure. The median is the middle value when the data is sorted. If there are an even number of elements, return the average of the two middle values.",
    "topic": "Design",
    "subtopic": "Data Structures",
    "tags": [
      "Design",
      "Heap",
      "Median"
    ],
    "input_format": "Each `addNum(int num)` operation will be followed by a `findMedian()` operation.",
    "output_format": "Return the median value as a double.",
    "constraints": [
      "1 <= num <= 10^5",
      "There will be at most 10^5 operations performed (addNum and findMedian)."
    ],
    "examples": [
      {
        "input": "MedianFinder obj = new MedianFinder();\nobj.addNum(1);\ndouble median1 = obj.findMedian();\nobj.addNum(2);\ndouble median2 = obj.findMedian();\nobj.addNum(3);\ndouble median3 = obj.findMedian();",
        "output": "[1.0, 1.5, 2.0]",
        "explanation": "After adding 1, the median is 1. After adding 2, the median is (1 + 2) / 2 = 1.5. After adding 3, the median is 2."
      },
      {
        "input": "MedianFinder obj = new MedianFinder();\nobj.addNum(10);\nobj.addNum(5);\nobj.addNum(1);\ndouble median = obj.findMedian();",
        "output": "5.0",
        "explanation": "The elements are [10, 5, 1]. After adding them, sorting gives [1, 5, 10], and the median is 5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using two heaps to keep track of the two halves of the data.",
      "The max heap will store the lower half of the numbers, and the min heap will store the upper half.",
      "Ensure you maintain the size property of the heaps to calculate the median."
    ],
    "company": "Cohesity"
  }
]