[
  {
    "question_id": "",
    "title": "Apply Operations to Make String Empty",
    "description": "You are given a string 's' that consists of lowercase letters and '/' characters. You need to perform a series of operations to make the string empty. Each operation consists of deleting one '/' character and the adjacent characters before and after it (if they exist). Your goal is to determine if it is possible to perform operations to make the string empty by removing '/' characters and their adjacent characters. If it is possible, return true; otherwise, return false.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Greedy"
    ],
    "input_format": "A string 's' consisting of lowercase letters and '/' characters.",
    "output_format": "A boolean value indicating whether it's possible to make the string empty.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists only of lowercase letters and '/' characters."
    ],
    "examples": [
      {
        "input": "s = 'a/b/c/'",
        "output": "true",
        "explanation": "Remove '/' and its adjacent characters in sequence, making the string empty."
      },
      {
        "input": "s = 'abc/'",
        "output": "false",
        "explanation": "No '/' to remove and still have characters left."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a stack to help track the characters.",
      "Think about how you can iteratively remove characters from the ends."
    ],
    "company": "Virtusa"
  },
  {
    "question_id": "",
    "title": "Pascal's Triangle",
    "description": "Given an integer numRows, return the first numRows of Pascal's Triangle. In Pascal's Triangle, each number is the sum of the two numbers directly above it. The first row is considered to be 'row 0'.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Triangle"
    ],
    "input_format": "An integer numRows representing the number of rows of Pascal's Triangle to generate.",
    "output_format": "A 2D list representing the first numRows of Pascal's Triangle.",
    "constraints": [
      "1 <= numRows <= 30"
    ],
    "examples": [
      {
        "input": "numRows = 5",
        "output": "[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
        "explanation": "The first five rows of Pascal's Triangle are shown, beginning with row 0 containing just [1]."
      },
      {
        "input": "numRows = 1",
        "output": "[[1]]",
        "explanation": "The first row of Pascal's Triangle contains just [1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how each row can be built from the previous row.",
      "Use a list to keep track of the current row's values."
    ],
    "company": "Virtusa"
  },
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "You are given two sorted integer arrays nums1 and nums2, where nums1 has a size of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a size of n. Write a function that merges nums2 into nums1 in a sorted order.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "Two integer arrays nums1 and nums2, along with two integers m and n.",
    "output_format": "The modified array nums1, which is merged and sorted.",
    "constraints": [
      "0 <= m, n <= 200",
      "1 <= m + n <= 200",
      "-10^9 <= nums1[i], nums2[j] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
        "output": "[1,2,2,3,5,6]",
        "explanation": "After merging, the array nums1 is [1,2,2,3,5,6]."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "Since nums2 is empty, nums1 remains unchanged."
      },
      {
        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "output": "[1]",
        "explanation": "The nums1 has no elements, so it is replaced by the elements of nums2."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to keep track of the current index in nums1 and nums2.",
      "Compare elements from the end to avoid overwriting values in nums1."
    ],
    "company": "Virtusa"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string. Your task is to return the length of the substring that meets the criteria.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Hash Map"
    ],
    "input_format": "A single string s, where 1 <= s.length <= 10^5.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of English letters, digits, symbols, and spaces."
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"abc\", which has a length of 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The longest substring without repeating characters is \"b\", with a length of 1."
      },
      {
        "input": "s = \"pwwkew\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"wke\", which has a length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to store the last indices of characters.",
      "Utilize two pointers to represent the current substring."
    ],
    "company": "Virtusa"
  }
]