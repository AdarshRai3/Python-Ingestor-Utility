[
  {
    "question_id": "",
    "title": "Maximum Product Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest product, and return that product. It is guaranteed that the answer will fit in a 32-bit integer.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Product"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum product of a contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "-10 <= nums[i] <= 10"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, -2, 4]",
        "output": "6",
        "explanation": "The subarray [2, 3] has the maximum product 6."
      },
      {
        "input": "nums = [-2, 0, -1]",
        "output": "0",
        "explanation": "The subarray [0] has the maximum product 0."
      },
      {
        "input": "nums = [-1, -2, -9, -6]",
        "output": "108",
        "explanation": "The subarray [-9, -6] has the maximum product 54, but [-1, -2, -9] gives 108."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Keep track of the maximum and minimum products at each position.",
      "Negative numbers can change the sign of the product."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Largest Magic Square",
    "description": "Given a 2D matrix filled with integers, find the size of the largest magic square within it. A magic square is a square where the sums of every row, every column, and both main diagonals are all the same.",
    "topic": "Matrix",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Matrix",
      "Dynamic Programming",
      "Magic Square"
    ],
    "input_format": "A 2D list of integers representing the matrix.",
    "output_format": "An integer representing the size of the largest magic square.",
    "constraints": [
      "1 <= matrix.length <= 100",
      "1 <= matrix[i].length <= 100",
      "-1000 <= matrix[i][j] <= 1000"
    ],
    "examples": [
      {
        "input": "[[7, 14, 15, 22], [7, 14, 15, 22], [1, 2, 3, 4], [0, 0, 0, 0]]",
        "output": "2",
        "explanation": "The largest magic square is a 2x2 square containing the elements 7, 14, and 15, with equal sums."
      },
      {
        "input": "[[1, 2], [3, 4]]",
        "output": "1",
        "explanation": "The only magic square in this 2x2 matrix is a 1x1 square with any individual number."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Check for all possible square sizes starting from the largest.",
      "Use a helper function to calculate the sum of rows, columns, and diagonals."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Minimum Moves to Reach Target Score",
    "description": "You are playing a game where you start with a score of 0. In one move, you can increase your score by either 1 or 2. Your objective is to reach a given target score with the minimum number of moves possible. Write a function that returns the minimum number of moves required to reach the target score.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithms",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Score"
    ],
    "input_format": "An integer target representing the target score.",
    "output_format": "An integer representing the minimum number of moves to reach the target score.",
    "constraints": [
      "1 <= target <= 10^6"
    ],
    "examples": [
      {
        "input": "target = 5",
        "output": "3",
        "explanation": "You can reach 5 by making the moves: 2 -> 4 -> 5 (which takes 3 moves)."
      },
      {
        "input": "target = 10",
        "output": "5",
        "explanation": "You can reach 10 by making the moves: 2 -> 4 -> 6 -> 8 -> 10 (which takes 5 moves)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the optimal moves as you approach the target from zero.",
      "Think about how you can use both increments wisely to minimize the total moves."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Team Scores in Football Tournament",
    "description": "In a football tournament, each team plays against every other team exactly once. The points for a match are awarded as follows: a win earns a team 3 points, a draw earns both teams 1 point, and a loss earns no points. Given the results of the matches as a list of strings formatted as 'TeamA TeamB Result', where 'Result' can either be 'A' (indicating TeamA wins), 'B' (indicating TeamB wins), or 'D' (indicating a draw), return a list of teams sorted by their total points, with ties broken lexicographically by team name.",
    "topic": "Hash Table",
    "subtopic": "Counting",
    "tags": [
      "Hash Table",
      "Sorting",
      "Counting"
    ],
    "input_format": "An array of strings results representing the match outcomes.",
    "output_format": "A sorted list of team names based on their points.",
    "constraints": [
      "1 <= results.length <= 10^4",
      "Each match involves two unique teams."
    ],
    "examples": [
      {
        "input": "results = ['TeamA TeamB A', 'TeamC TeamA D', 'TeamB TeamC B']",
        "output": "['TeamA', 'TeamB', 'TeamC']",
        "explanation": "TeamA: 4 points (3 for win against TeamB, 1 for draw against TeamC); TeamB: 3 points (3 for win against TeamC, 0 against TeamA); TeamC: 1 point (1 for draw with TeamA)."
      },
      {
        "input": "results = ['TeamX TeamY D', 'TeamY TeamZ A', 'TeamZ TeamX B']",
        "output": "['TeamX', 'TeamY', 'TeamZ']",
        "explanation": "All teams have equal points after considering wins, draws, and losses."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a dictionary to track points for each team.",
      "Remember to handle tied scores alphabetically."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Tournament Winners",
    "description": "In a tournament with several players, each player competes against every other player exactly once. The match's outcome is recorded as a pair consisting of the winner's name and the loser's name. Given a list of match results, your task is to determine the player(s) with the highest number of wins. If there are multiple players with the same highest wins, return them in alphabetical order.",
    "topic": "Graph",
    "subtopic": "Graph Traversal",
    "tags": [
      "Graph",
      "Traversal",
      "Sorting"
    ],
    "input_format": "A list of strings, where each string is formatted as \"Winner Loser\".",
    "output_format": "A list of strings representing the names of the players with the most wins, sorted alphabetically.",
    "constraints": [
      "1 <= matches.length <= 10^4",
      "Each player's name consists of only uppercase or lowercase English letters and has a length between 1 and 50."
    ],
    "examples": [
      {
        "input": "matches = [\"Alice Bob\", \"Bob Charlie\", \"Alice Charlie\", \"Charlie Alice\"]",
        "output": "[\"Alice\"]",
        "explanation": "Alice has 2 wins, Bob has 1 win, and Charlie has 1 win. Hence, Alice is the winner."
      },
      {
        "input": "matches = [\"Alice Bob\", \"Charlie Alice\", \"Bob Charlie\", \"Charlie Bob\"]",
        "output": "[\"Bob\", \"Charlie\"]",
        "explanation": "Bob and Charlie both have 2 wins, while Alice has 1 win."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a dictionary to count the wins for each player.",
      "Consider edge cases where multiple players have the highest number of wins."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Best Sightseeing Pair",
    "description": "You are given an array of integers where each integer represents the score of a sightseeing spot. The score of a sightseeing pair is defined as the sum of their scores plus the distance between them. Specifically, if the scores of the two sightseeing spots are A[i] and A[j] (with i < j), the score of the sightseeing pair is A[i] + A[j] + (j - i). Your task is to find the maximum score of any sightseeing pair.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Maximization"
    ],
    "input_format": "An array of integers A where 1 <= A.length <= 10^5 and 1 <= A[i] <= 1000.",
    "output_format": "An integer representing the maximum score of any sightseeing pair.",
    "constraints": [
      "1 <= A.length <= 10^5",
      "1 <= A[i] <= 1000"
    ],
    "examples": [
      {
        "input": "A = [8, 1, 5, 2, 6]",
        "output": "11",
        "explanation": "The best sightseeing pair is (5, 6) with indices (2, 4). Score = 5 + 6 + (4 - 2) = 11."
      },
      {
        "input": "A = [1, 2]",
        "output": "2",
        "explanation": "The best sightseeing pair is (1, 2) with indices (0, 1). Score = 1 + 2 + (1 - 0) = 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how the distance affects the overall score.",
      "Try a single pass to maintain a running maximum."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Design A Leaderboard",
    "description": "You are tasked with designing a leaderboard for a competitive game. Each player has an associated score, and the leaderboard displays the top scores in descending order. Implement a class `Leaderboard` that supports the following operations: \n1. `addScore(playerId: str, score: int)`: Adds the score to the player's current score. If the player is not already on the leaderboard, they should be added. \n2. `getTop(K: int)`: Returns the sum of the top K scores. \n3. `reset(playerId: str)`: Resets the score of the specified player to zero. Implement the leaderboard with the goal of optimizing for both score additions and retrieval of top scores.",
    "topic": "Design",
    "subtopic": "Data Structures",
    "tags": [
      "Design",
      "Data Structures",
      "Hash Table",
      "Sorting"
    ],
    "input_format": "The input consists of a list of operations to perform on the leaderboard.",
    "output_format": "Return the result of `getTop(K)` calls as a list of integers representing the top K scores.",
    "constraints": [
      "1 <= playerId <= 1000 (Unique identifier for each player)",
      "1 <= score <= 10^6 (Each score is a positive integer)",
      "1 <= K <= 100 (Number of top scores to retrieve)"
    ],
    "examples": [
      {
        "input": [
          "addScore('player1', 50)",
          "addScore('player2', 30)",
          "addScore('player1', 20)",
          "getTop(1)",
          "getTop(2)",
          "reset('player1')",
          "getTop(1)"
        ],
        "output": [
          70,
          50,
          30
        ],
        "explanation": "After adding player1's scores, their total is 70, and player2 has 30. The top score is 70, the second top is 50. After resetting player1, only player2's score remains."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash table to store scores for fast access.",
      "Consider a max heap or a sorted list for efficient top K retrieval."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
    "description": "You are given a list of key card usage records where each record consists of a key card ID and a timestamp indicating when the card was used. Your task is to identify if any card was used three or more times within any one hour period. If so, return the ID of the card that was used excessively; if no such card exists, return an empty string.",
    "topic": "Hash Table",
    "subtopic": "Frequency Count",
    "tags": [
      "Hash Table",
      "String",
      "Timestamp"
    ],
    "input_format": "A list of records, where each record is a tuple of a key card ID (string) and a timestamp (ISO 8601 format).",
    "output_format": "A string representing the key card ID that was used frequently; return an empty string if none was found.",
    "constraints": [
      "1 <= records.length <= 1000",
      "Each key card ID is a non-empty string.",
      "Timestamps are in the format 'YYYY-MM-DDTHH:MM:SS'."
    ],
    "examples": [
      {
        "input": "[('card1', '2023-10-10T10:00:00'), ('card1', '2023-10-10T10:05:00'), ('card1', '2023-10-10T10:30:00'), ('card2', '2023-10-10T10:15:00')]",
        "output": "'card1'",
        "explanation": "Card 'card1' was used three times within an hour period."
      },
      {
        "input": "[('card2', '2023-10-10T10:00:00'), ('card3', '2023-10-10T10:01:00'), ('card2', '2023-10-10T10:02:00')]",
        "output": "''",
        "explanation": "No card was used three times within an hour period."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash table to track counts.",
      "Sort the timestamps to check for hourly limits.",
      "Sliding window technique may help in analyzing time frames."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Maximum Number of Balloons",
    "description": "Given a string text, you need to return the maximum number of instances of the word 'balloon' that can be formed using the letters from the string. Each letter can be used only as many times as it appears in the string. The word 'balloon' consists of the letters: b, a, l, o, n. Note that the letter 'l' appears twice and the letter 'o' appears twice in the word.",
    "topic": "String",
    "subtopic": "Counting Characters",
    "tags": [
      "String",
      "Counting",
      "HashMap"
    ],
    "input_format": "A single string text containing lowercase letters.",
    "output_format": "An integer representing the maximum number of times 'balloon' can be formed from the string.",
    "constraints": [
      "1 <= text.length <= 10^4",
      "text consists of lowercase letters only."
    ],
    "examples": [
      {
        "input": "nlaebolko",
        "output": "1",
        "explanation": "The letters in 'nlaebolko' can form one instance of 'balloon'."
      },
      {
        "input": "loonbalxballpoon",
        "output": "2",
        "explanation": "The letters in 'loonbalxballpoon' can form two instances of 'balloon'."
      },
      {
        "input": "leetcode",
        "output": "0",
        "explanation": "'leetcode' does not contain enough letters to form 'balloon'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count each letter in the string.",
      "Keep in mind that 'balloon' requires two 'l's and two 'o's."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Delete Characters to Make Fancy String",
    "description": "Given a string s, you need to delete some characters from s such that no three consecutive characters are the same. Return the resulting string after performing all necessary deletions. The returned string should be the smallest lexicographically among all possible results.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Greedy"
    ],
    "input_format": "A single string s consisting of lowercase English letters.",
    "output_format": "A string representing the modified string after deletions.",
    "constraints": [
      "1 <= s.length <= 100",
      "s consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "leeetcode",
        "output": "leeetcode",
        "explanation": "No three consecutive characters are the same, so return the same string."
      },
      {
        "input": "aaabaaaa",
        "output": "aabaa",
        "explanation": "After deleting the third 'a', we get 'aabaa', which has no three consecutive same characters."
      },
      {
        "input": "aab",
        "output": "aab",
        "explanation": "The string 'aab' already does not have three consecutive same characters."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how many times each character appears consecutively.",
      "You may need to iterate through the string and make deletions conditionally."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Longest Happy String",
    "description": "A 'happy string' is a string that does not have any subsequence of 'aaa', 'bbb', or 'ccc'. Given the integers a, b, and c, representing the number of times the characters 'a', 'b', and 'c' can be used respectively, your task is to find the longest happy string you can create. If there are multiple longest strings, return any of them. If it's impossible to create a happy string, return an empty string.",
    "topic": "String",
    "subtopic": "Greedy",
    "tags": [
      "String",
      "Greedy",
      "Backtracking"
    ],
    "input_format": "Three integers a, b, and c representing available characters 'a', 'b', and 'c'.",
    "output_format": "A string representing the longest happy string that can be constructed.",
    "constraints": [
      "0 <= a, b, c <= 100",
      "a + b + c > 0"
    ],
    "examples": [
      {
        "input": "a = 1, b = 1, c = 7",
        "output": "ccbccacc",
        "explanation": "One possible longest happy string with the given counts is 'ccbccacc'."
      },
      {
        "input": "a = 7, b = 1, c = 0",
        "output": "aabaa",
        "explanation": "The longest happy string is 'aabaa'."
      },
      {
        "input": "a = 2, b = 2, c = 1",
        "output": "abccba",
        "explanation": "One possible longest happy string with the given counts is 'abccba'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a greedy approach to build the string.",
      "Make sure to avoid creating subsequences of three identical characters.",
      "Track the counts carefully to maximize the length of the string."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Add Strings",
    "description": "Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2 as a string. You must not use any built-in BigInteger library or convert the inputs to integer directly.",
    "topic": "Strings",
    "subtopic": "Mathematical Operations",
    "tags": [
      "Strings",
      "Mathematical Operations",
      "Addition"
    ],
    "input_format": "Two strings num1 and num2 representing non-negative integers.",
    "output_format": "A string representing the sum of num1 and num2.",
    "constraints": [
      "1 <= num1.length, num2.length <= 10^4",
      "num1 and num2 consist of digits only and do not have leading zeros."
    ],
    "examples": [
      {
        "input": "num1 = \"11\", num2 = \"123\"",
        "output": "\"134\"",
        "explanation": "Adding the string \"11\" and \"123\" gives us \"134\"."
      },
      {
        "input": "num1 = \"456\", num2 = \"77\"",
        "output": "\"533\"",
        "explanation": "Adding the string \"456\" and \"77\" gives us \"533\"."
      },
      {
        "input": "num1 = \"0\", num2 = \"0\"",
        "output": "\"0\"",
        "explanation": "Adding two zeros results in zero."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider adding digits from the end of both strings and account for carry."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Number of Divisible Substrings",
    "description": "Given a string of digits and an integer k, return the number of non-empty substrings that are divisible by k. A substring is defined as a contiguous sequence of characters within the string.",
    "topic": "String",
    "subtopic": "Substring Manipulation",
    "tags": [
      "String",
      "Substring",
      "Divisibility"
    ],
    "input_format": "A string s consisting of digits and an integer k.",
    "output_format": "An integer representing the number of non-empty substrings that are divisible by k.",
    "constraints": [
      "1 <= s.length <= 100",
      "1 <= k <= 100",
      "s consists of digits (0-9) only."
    ],
    "examples": [
      {
        "input": "s = '123456', k = 3",
        "output": "10",
        "explanation": "The divisible substrings are: '3', '12', '15', '6', '123', '234', '345', '456', '1234', '2345'."
      },
      {
        "input": "s = '000', k = 2",
        "output": "6",
        "explanation": "Every non-empty substring is '0' which is divisible by 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider generating all possible substrings.",
      "Check each substring for divisibility by k."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A palindromic substring is a substring that reads the same backward as forward.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A single string s of length n.",
    "output_format": "A string representing the longest palindromic substring of s.",
    "constraints": [
      "1 <= n <= 1000",
      "s consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "babad",
        "output": "bab",
        "explanation": "The longest palindromic substrings are 'bab' or 'aba'."
      },
      {
        "input": "cbbd",
        "output": "bb",
        "explanation": "The longest palindromic substring is 'bb'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around potential centers of the palindrome.",
      "Use dynamic programming to store results of subproblems."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Return a list of groups of anagrams where each group is represented as a list of strings.",
    "topic": "Hash Table",
    "subtopic": "Grouping",
    "tags": [
      "Hash Table",
      "String",
      "Grouping"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A list of lists, where each sublist contains anagrams grouped together.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "1 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
        "output": "[[\"eat\",\"tea\",\"ate\"],[\"tan\",\"nat\"],[\"bat\"]]",
        "explanation": "The words \"eat\", \"tea\", and \"ate\" are anagrams of each other. Similarly, \"tan\" and \"nat\" are anagrams, while \"bat\" stands alone."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "The input contains only an empty string, which forms its own group."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "The input contains only one character, which forms its own group."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort each word to find anagrams easily.",
      "Use a dictionary to group sorted words."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Reaching Points",
    "description": "You are at point (0, 0) on a Cartesian plane, and you want to reach a target point (tx, ty) using the following operations: you can move either to the right or up. You can reach a point (x, y) from (x - y, y) or (x, y - x). Given the target coordinates (tx, ty), determine if you can reach this point from (0, 0) using any sequence of the allowed operations.",
    "topic": "Geometry",
    "subtopic": "Mathematical Operations",
    "tags": [
      "Geometry",
      "Math",
      "Search"
    ],
    "input_format": "Two integers tx, ty representing the target coordinates.",
    "output_format": "Return true if you can reach the target point, otherwise return false.",
    "constraints": [
      "1 <= tx, ty <= 10^9"
    ],
    "examples": [
      {
        "input": "tx = 2, ty = 3",
        "output": "true",
        "explanation": "Start at (0, 0). Move to (1, 0), then (1, 1), and finally reach (2, 3)."
      },
      {
        "input": "tx = 1, ty = 1",
        "output": "false",
        "explanation": "No sequence of moves can lead to (1, 1) from (0, 0)."
      },
      {
        "input": "tx = 5, ty = 5",
        "output": "true",
        "explanation": "Can reach (5, 5) moving upwards and right. Multiple possible sequences exist."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Think about the properties of the operations you can perform.",
      "Consider working backwards from the target point.",
      "GCD may play a role in determining reachability."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Valid Palindrome",
    "description": "Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring case. A palindrome is a string that reads the same backward as forward.",
    "topic": "String",
    "subtopic": "Two Pointers",
    "tags": [
      "String",
      "Palindrome",
      "Two Pointers"
    ],
    "input_format": "A single string s consisting of alphanumeric characters and spaces.",
    "output_format": "A boolean value indicating whether the string is a valid palindrome.",
    "constraints": [
      "1 <= s.length <= 2 * 10^5",
      "s consists only of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"A man, a plan, a canal: Panama\"",
        "output": "true",
        "explanation": "Ignoring non-alphanumeric characters and case, the string reads 'amanaplanacanalpanama', which is a palindrome."
      },
      {
        "input": "s = \"race a car\"",
        "output": "false",
        "explanation": "Ignoring non-alphanumeric characters and case, the string reads 'raceacar', which is not a palindrome."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers: one starting at the beginning and one at the end.",
      "Skip non-alphanumeric characters while comparing."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Longest Increasing Subsequence",
    "description": "Given an integer array nums, return the length of the longest strictly increasing subsequence.",
    "topic": "Dynamic Programming",
    "subtopic": "Subsequence Problems",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Binary Search"
    ],
    "input_format": "An array of distinct integers nums.",
    "output_format": "An integer representing the length of the longest increasing subsequence.",
    "constraints": [
      "1 <= nums.length <= 2500",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [10, 9, 2, 5, 3, 7, 101, 18]",
        "output": "4",
        "explanation": "The longest increasing subsequence is [2, 3, 7, 101], which has a length of 4."
      },
      {
        "input": "nums = [0, 1, 0, 3, 2, 3]",
        "output": "4",
        "explanation": "The longest increasing subsequence is [0, 1, 2, 3], which has a length of 4."
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7]",
        "output": "1",
        "explanation": "The longest increasing subsequence contains only a single element (any of the 7s), hence the length is 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming or binary search to optimize the approach.",
      "Maintain an array to keep track of the current longest subsequence."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Maximum Number of Vowels in a Substring of Given Length",
    "description": "Given a string `s` and an integer `k`, return the maximum number of vowels in any substring of length `k` in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u'.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Counting"
    ],
    "input_format": "A string `s` consisting of lowercase English letters and an integer `k`.",
    "output_format": "An integer representing the maximum number of vowels in any substring of length `k`.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "1 <= k <= s.length"
    ],
    "examples": [
      {
        "input": "s = 'abciiidef', k = 3",
        "output": "3",
        "explanation": "The substring 'iii' contains 3 vowels."
      },
      {
        "input": "s = 'aeiou', k = 2",
        "output": "2",
        "explanation": "The maximum vowels are found in substrings 'ae', 'ei', 'iu', or 'ou'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window approach to track the number of vowels."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Palindromic Substrings",
    "description": "Given a string, return the number of substrings that are palindromes. A substring is a contiguous sequence of characters within a string. A palindrome is a string that reads the same forwards and backwards.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A single string s, where 1 <= s.length <= 1000.",
    "output_format": "An integer representing the number of palindromic substrings in s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"abc\"",
        "output": "3",
        "explanation": "The palindromic substrings are: \"a\", \"b\", \"c\"."
      },
      {
        "input": "s = \"aaa\"",
        "output": "6",
        "explanation": "The palindromic substrings are: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around the center of each potential palindrome.",
      "Keep track of counts in a systematic way.",
      "Use dynamic programming to optimize your solution."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Backspace String Compare",
    "description": "Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character. Note that after backspacing an empty text, the text will remain empty.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Backspace",
      "Two Pointers"
    ],
    "input_format": "Two strings s and t.",
    "output_format": "A boolean value indicating whether the processed strings are equal.",
    "constraints": [
      "1 <= s.length, t.length <= 200",
      "s and t contain only lowercase letters and '#' characters."
    ],
    "examples": [
      {
        "input": "s = 'ab#c', t = 'ad#c'",
        "output": "true",
        "explanation": "Both strings become 'ac' after processing backspaces."
      },
      {
        "input": "s = 'ab##', t = 'c#d#'",
        "output": "true",
        "explanation": "Both strings become '' (empty) after processing backspaces."
      },
      {
        "input": "s = 'a#c', t = 'b'",
        "output": "false",
        "explanation": "s becomes 'c', while t is 'b'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of characters.",
      "Process the backspaces while iterating through the strings."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Reverse Words in a String",
    "description": "Given an input string, reverse the order of the words. A word is defined as a sequence of non-space characters. The spaces between the words should be reduced to a single space, and there should be no leading or trailing spaces in the final answer.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "In-place",
      "Algorithm"
    ],
    "input_format": "A string s consisting of words and spaces.",
    "output_format": "A string with the words in reverse order.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of English letters, digits, and spaces.",
      "There are no leading or trailing spaces."
    ],
    "examples": [
      {
        "input": "s = 'the sky is blue'",
        "output": "'blue is sky the'",
        "explanation": "Reversing the sequence of words gives us 'blue is sky the'."
      },
      {
        "input": "s = 'hello world'",
        "output": "'world hello'",
        "explanation": "The words are reversed to become 'world hello'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using two pointers to help with word detection.",
      "Trim the input to handle any extra spaces efficiently."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Last Person to Fit in the Bus",
    "description": "A bus can hold a maximum of `capacity` passengers at a time. Given an array representing the arrival times of passengers and their boarding times, determine the last person who can fit in the bus before it leaves. Passengers arrive at different times and can board only after their arrival. If the bus is already full before a passenger arrives, that passenger will not be able to board. If all passengers can fit, return -1.",
    "topic": "Greedy",
    "subtopic": "Simulation",
    "tags": [
      "Greedy",
      "Simulation",
      "Queues"
    ],
    "input_format": "An integer `capacity` representing the bus capacity, followed by two arrays: an array `arrival` containing the arrival times of passengers, and an array `boarding` containing the boarding durations.",
    "output_format": "An integer representing the index of the last person who can board the bus, or -1 if the bus departs with all passengers fit.",
    "constraints": [
      "1 <= capacity <= 100",
      "1 <= arrival.length, boarding.length <= 1000",
      "arrival[i] >= 0",
      "boarding[i] >= 0"
    ],
    "examples": [
      {
        "input": "capacity = 2, arrival = [0, 1, 2], boarding = [1, 1, 1]",
        "output": "1",
        "explanation": "The first two passengers arrive at times 0 and 1, and they can board the bus before time 2, allowing only the first two to fit on board."
      },
      {
        "input": "capacity = 3, arrival = [0, 3, 3], boarding = [1, 1, 1]",
        "output": "2",
        "explanation": "All three can board sequentially: the first at time 0, the second at time 3. The bus can take 3 passengers total."
      },
      {
        "input": "capacity = 2, arrival = [1, 3, 5], boarding = [2, 1, 2]",
        "output": "-1",
        "explanation": "Passengers arrive at 1, 3, and 5. The first two cannot board together, making it impossible for them to fit before departure."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about the order of passenger arrivals and their respective boarding times.",
      "Simulate the boarding process iteratively."
    ],
    "company": "Wayfair"
  },
  {
    "question_id": "",
    "title": "Sliding Window Maximum",
    "description": "You are given an integer array nums and an integer k. You need to find the maximum value in each sliding window of size k as the window moves from the left to the right across the array. Your result should be in the form of an array containing these maximum values.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Maximum"
    ],
    "input_format": "An integer array nums of length n followed by an integer k (1 <= k <= n).",
    "output_format": "An integer array representing the maximum values of each sliding window of size k.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, -1, -3, 5, 3, 6, 7], k = 3",
        "output": "[3, 3, 5, 5, 6, 7]",
        "explanation": "The first window is [1, 3, -1] with maximum 3. The second window is [3, -1, -3] with maximum 3. The third window is [-1, -3, 5] with maximum 5, and so on."
      },
      {
        "input": "nums = [1, -1], k = 1",
        "output": "[1, -1]",
        "explanation": "The windows are [1] and [-1], which gives maximums of 1 and -1 respectively."
      },
      {
        "input": "nums = [9, 10, 9, -7, -4, -8, 6, 0, 9, 1], k = 4",
        "output": "[10, 10, 9, 6, 9]",
        "explanation": "The windows yield maximums of 10 for the first two windows, then 9 for the next, and finally 6 and 9."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a deque to maintain the indices of the useful elements in the current window.",
      "Make sure to remove elements that are out of the bounds of the sliding window."
    ],
    "company": "Wayfair"
  }
]