[
  {
    "question_id": "",
    "title": "Categorize Box According to Criteria",
    "description": "You are given a list of boxes, where each box is represented by a tuple consisting of three integers: width, length, and height. Your task is to categorize each box based on its dimensions: small, medium, or large. A box is categorized as: 'small' if its dimensions are all less than or equal to 1, 'medium' if any of its dimensions is greater than 1 but less than or equal to 2, and 'large' if any dimension is greater than 2. Return a list of strings representing the categories of the boxes.",
    "topic": "Array",
    "subtopic": "Classification",
    "tags": [
      "Array",
      "Classification",
      "Dimensions"
    ],
    "input_format": "A list of tuples, where each tuple contains three integers representing width, length, and height.",
    "output_format": "A list of strings representing the categories of the boxes.",
    "constraints": [
      "1 <= boxes.length <= 1000",
      "1 <= width, length, height <= 100"
    ],
    "examples": [
      {
        "input": "boxes = [(1, 1, 1), (2, 2, 2), (0.5, 0.5, 0.5)]",
        "output": "['small', 'medium', 'small']",
        "explanation": "The first box is small (1 <= 1), the second box is medium (2 > 1), and the third box is small (0.5 <= 1)."
      },
      {
        "input": "boxes = [(3, 2, 1), (1, 2, 3), (1, 1, 1)]",
        "output": "['large', 'medium', 'small']",
        "explanation": "The first box is large (3 > 2), the second box is medium (2 > 1), and the third box is small (1 <= 1)."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider each dimension of the box individually when categorizing.",
      "Use conditional statements to determine the category based on the dimensions."
    ],
    "company": "Zendesk"
  },
  {
    "question_id": "",
    "title": "Distribute Money to Maximum Children",
    "description": "You are given an integer array 'money' where each element represents the amount of money each child has received. You want to distribute the money among the children such that the number of children receiving some money is maximized. Each child can receive a maximum of 1 unit of money. Return the maximum number of children that can receive money.",
    "topic": "Greedy",
    "subtopic": "Sorting",
    "tags": [
      "Greedy",
      "Sorting",
      "Array"
    ],
    "input_format": "An array of integers money, where 0 <= money[i] <= 100.",
    "output_format": "An integer representing the maximum number of children that can receive money.",
    "constraints": [
      "1 <= money.length <= 10^4",
      "0 <= money[i] <= 100"
    ],
    "examples": [
      {
        "input": "money = [1, 2, 3, 4, 5]",
        "output": "5",
        "explanation": "All children can receive 1 unit of money."
      },
      {
        "input": "money = [0, 0, 1, 1, 2]",
        "output": "4",
        "explanation": "Four children can receive 1 unit of money each."
      },
      {
        "input": "money = [0, 2, 2, 3, 3, 4]",
        "output": "5",
        "explanation": "Five children can receive money while maximizing the distribution."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Sort the money array to facilitate maximum distribution.",
      "Use a greedy approach to count how many unique amounts can be distributed."
    ],
    "company": "Zendesk"
  },
  {
    "question_id": "",
    "title": "Evaluate Reverse Polish Notation",
    "description": "You are given an array of strings tokens that represent an arithmetic expression in Reverse Polish Notation (RPN). Convert the expression into an integer. Valid operators are '+', '-', '*', and '/'. Each operand may be an integer, while the result of the division should be truncated toward zero.",
    "topic": "Stack",
    "subtopic": "Reverse Polish Notation",
    "tags": [
      "Stack",
      "Math",
      "Evaluation"
    ],
    "input_format": "An array of strings tokens, representing the RPN expression.",
    "output_format": "An integer resulting from the evaluated RPN expression.",
    "constraints": [
      "1 <= tokens.length <= 10^4",
      "-1000 <= tokens[i] <= 1000",
      "tokens[i] is either an operator or an operand."
    ],
    "examples": [
      {
        "input": "tokens = [\"2\", \"1\", \"+\", \"3\", \"*\"]",
        "output": "9",
        "explanation": "The expression evaluates to (2 + 1) * 3 = 3 * 3 = 9."
      },
      {
        "input": "tokens = [\"4\", \"13\", \"5\", \"/\", \"+\"]",
        "output": "6",
        "explanation": "The expression evaluates to 4 + (13 / 5) = 4 + 2 = 6."
      },
      {
        "input": "tokens = [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]",
        "output": "22",
        "explanation": "The expression evaluates to (((10 * ((6 / ((9 + 3) * -11))) + 17) + 5) = 22."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to evaluate the expression.",
      "Perform operations as soon as you encounter an operator."
    ],
    "company": "Zendesk"
  }
]