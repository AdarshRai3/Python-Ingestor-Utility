[
  {
    "question_id": "",
    "title": "Minimum Number of Visited Cells in a Grid",
    "description": "You are given a 2D grid of dimensions m x n, where each cell (i, j) contains a positive integer representing the cost to enter that cell. Your task is to find the minimum number of unique cells visited, starting from the top-left corner (0, 0) and moving to the bottom-right corner (m-1, n-1). You can only move either down or right at any point in time. Calculate the minimum number of unique cells you will visit.",
    "topic": "Dynamic Programming",
    "subtopic": "Grid Traversal",
    "tags": [
      "Dynamic Programming",
      "Grid",
      "Minimum Path"
    ],
    "input_format": "A 2D array of integers grid where grid[i][j] (1 <= grid[i][j] <= 10^9) represents the cost to enter cell (i, j).",
    "output_format": "An integer representing the minimum number of unique cells visited.",
    "constraints": [
      "1 <= m, n <= 100",
      "1 <= grid[i][j] <= 10^9"
    ],
    "examples": [
      {
        "input": "grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "5",
        "explanation": "The path visits cells (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2), resulting in 5 unique cells."
      },
      {
        "input": "grid = [[1, 1, 1], [1, 1, 1]]",
        "output": "4",
        "explanation": "The path can visit cells in a straight line down or to the right, resulting in 4 unique cells."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a BFS or DFS approach to explore unique paths.",
      "Keep track of visited cells to avoid counting duplicates."
    ],
    "company": "Huawei"
  },
  {
    "question_id": "",
    "title": "Maximum Binary String After Change",
    "description": "You are given a binary string `s` of length `n`. You can perform the following operation on `s`: choose any two indices `i` and `j` (0 <= i < j < n) such that `s[i] = '0'` and `s[j] = '1'`, and flip both bits (i.e., '0' becomes '1' and '1' becomes '0'). Your task is to find the maximum lexicographical binary string you can obtain after performing any number of such operations any number of times. Return the maximum binary string possible after these operations.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Binary",
      "Greedy"
    ],
    "input_format": "A string `s` consisting of only characters '0' and '1'.",
    "output_format": "A string representing the maximum lexicographical binary string.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of '0' and '1' only."
    ],
    "examples": [
      {
        "input": "s = '000110'",
        "output": "111000",
        "explanation": "By flipping the bits at indices 0 and 4, and then indices 1 and 5, we can obtain '111000'."
      },
      {
        "input": "s = '1001'",
        "output": "1110",
        "explanation": "Flipping bits at indices 0 and 1 results in '0110', then flipping 0 and 2 yields '1110'."
      },
      {
        "input": "s = '111'",
        "output": "111",
        "explanation": "No flipping can be done as there are no '0's."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how you can rearrange the zeros and ones to form a maximum value.",
      "Focus on the first occurrence of '0' from the left."
    ],
    "company": "Huawei"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers 'nums' and an integer 'target', return the indices of the two numbers such that they add up to 'target'. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums followed by an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers that add up to target.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9, so the indices are 0 and 1."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6, so the indices are 1 and 2."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6, so the indices are 0 and 1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the complement of each number.",
      "Check if the complement exists in the hash map as you iterate through the array."
    ],
    "company": "Huawei"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string s consisting of parentheses, determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Each opening bracket must have a corresponding closing bracket of the same type.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s consisting only of characters '(', ')', '{', '}', '[' and ']'.",
    "output_format": "A boolean value: true if the string is valid, otherwise false.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The parentheses are closed in the correct order."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "All the brackets are closed in the correct order."
      },
      {
        "input": "s = '(]')",
        "output": "false",
        "explanation": "The brackets are not closed in the correct order."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The brackets are not closed in the correct order."
      },
      {
        "input": "s = '{[()()]}'",
        "output": "true",
        "explanation": "All the brackets are closed correctly in the corresponding order."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Check if the closing bracket matches the top of the stack.",
      "An empty stack at the end indicates that all brackets are matched."
    ],
    "company": "Huawei"
  },
  {
    "question_id": "",
    "title": "Decode String",
    "description": "Given an encoded string, return its decoded form. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. You may assume that the input string is always valid. The integer k will be a positive integer. The input string contains no digits and consists of lowercase English letters, square brackets '[]', and positive integers.",
    "topic": "String",
    "subtopic": "Decoding",
    "tags": [
      "String",
      "Decoding",
      "Parsing"
    ],
    "input_format": "A single string s representing the encoded string.",
    "output_format": "A string representing the decoded result.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of lowercase English letters, digits, and square brackets."
    ],
    "examples": [
      {
        "input": "s = \"3[a2[c]]\"",
        "output": "accaccacc",
        "explanation": "The substring a2[c] means 'cc' repeated 2 times, resulting in 'acc' repeated 3 times gives 'accaccacc'."
      },
      {
        "input": "s = \"2[abc]3[cd]ef\"",
        "output": "abcabccdcdcdef",
        "explanation": "2[abc] results in 'abcabc' and 3[cd] results in 'cdcdcd', concatenated with 'ef' gives 'abcabccdcdcdef'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the counts and strings.",
      "Consider how to handle nested brackets."
    ],
    "company": "Huawei"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid of '1's (land) and '0's (water), determine the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth First Search",
    "tags": [
      "DFS",
      "BFS",
      "Grid"
    ],
    "input_format": "A 2D grid represented as a list of lists, where each element is either '1' or '0'.",
    "output_format": "An integer representing the number of islands.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "[['1','1','1','1','0'], ['1','1','0','1','0'], ['1','1','0','0','0'], ['0','0','0','0','0']]",
        "output": "1",
        "explanation": "There is only one island in the grid."
      },
      {
        "input": "[['1','1','0','0','0'], ['1','1','0','0','0'], ['0','0','1','0','0'], ['0','0','0','1','1']]",
        "output": "3",
        "explanation": "There are three islands in the grid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use Depth First Search (DFS) or Breadth First Search (BFS) to explore the islands.",
      "You can modify the grid in place by marking visited lands."
    ],
    "company": "Huawei"
  },
  {
    "question_id": "",
    "title": "Generate Parentheses",
    "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. The generated parentheses should be balanced, meaning each opening parenthesis must have a corresponding closing parenthesis.",
    "topic": "String",
    "subtopic": "Backtracking",
    "tags": [
      "String",
      "Backtracking",
      "recursion"
    ],
    "input_format": "An integer n representing the number of pairs of parentheses.",
    "output_format": "A list of strings representing all combinations of well-formed parentheses.",
    "constraints": [
      "0 <= n <= 8"
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\"]",
        "explanation": "The valid combinations of 3 pairs of parentheses are generated."
      },
      {
        "input": "n = 1",
        "output": "[\"()\"]",
        "explanation": "The only valid combination with 1 pair of parentheses is ()"
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use backtracking to explore all possibilities.",
      "Keep track of the count of opening and closing parentheses used."
    ],
    "company": "Huawei"
  },
  {
    "question_id": "",
    "title": "Combination Sum",
    "description": "Given an array of distinct integers candidates and a target integer target, return all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order. The same number may be chosen from candidates an unlimited number of times. It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.",
    "topic": "Backtracking",
    "subtopic": "Combination Sum",
    "tags": [
      "Backtracking",
      "Combination",
      "Sum"
    ],
    "input_format": "An array of distinct integers candidates followed by an integer target.",
    "output_format": "A list of lists, with each list containing a unique combination of numbers that sum to target.",
    "constraints": [
      "1 <= candidates.length <= 30",
      "1 <= candidates[i] <= 200",
      "All elements of candidates are distinct.",
      "0 <= target <= 500"
    ],
    "examples": [
      {
        "input": {
          "candidates": [
            2,
            3,
            6,
            7
          ],
          "target": 7
        },
        "output": [
          [
            2,
            2,
            3
          ],
          [
            7
          ]
        ],
        "explanation": "The combination [2, 2, 3] can be chosen because 2 + 2 + 3 = 7. The number 7 can also be chosen as a combination on its own."
      },
      {
        "input": {
          "candidates": [
            1
          ],
          "target": 2
        },
        "output": [
          [
            1,
            1
          ]
        ],
        "explanation": "The combination [1, 1] is chosen because 1 + 1 = 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using backtracking for generating combinations.",
      "Keep track of the current combination and its sum."
    ],
    "company": "Huawei"
  },
  {
    "question_id": "",
    "title": "Merge Two Sorted Lists",
    "description": "You are given two linked lists, each representing a sorted sequence of integers. Your task is to merge these two linked lists into a single sorted linked list and return it. The resultant linked list should be made by splicing together the nodes of the first two lists.",
    "topic": "Linked List",
    "subtopic": "Merging Linked Lists",
    "tags": [
      "LinkedList",
      "Merge",
      "Sorting"
    ],
    "input_format": "The input consists of two linked lists represented by their head nodes.",
    "output_format": "A linked list that represents the merged sorted list.",
    "constraints": [
      "The number of nodes in each list is in the range [0, 1000].",
      "-10^4 <= Node.val <= 10^4",
      "Both lists are already sorted in non-decreasing order."
    ],
    "examples": [
      {
        "input": "l1 = [1, 2, 4], l2 = [1, 3, 4]",
        "output": "[1, 1, 2, 3, 4, 4]",
        "explanation": "Merging the two lists yields: 1 -> 1 -> 2 -> 3 -> 4 -> 4."
      },
      {
        "input": "l1 = [], l2 = [0]",
        "output": "[0]",
        "explanation": "Since the first list is empty, the merged list is just the second list."
      },
      {
        "input": "l1 = [], l2 = []",
        "output": "[]",
        "explanation": "Both lists are empty; thus, the result is also an empty list."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a dummy node to simplify the merging process.",
      "Iterate through both lists and compare the current nodes."
    ],
    "company": "Huawei"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest substring of s that is a palindrome. A string is considered a palindrome if it reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A string s (1 <= s.length <= 1000).",
    "output_format": "A string representing the longest palindromic substring.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only digits and English letters."
    ],
    "examples": [
      {
        "input": "s = \"babad\"",
        "output": "\"bab\"",
        "explanation": "The longest palindromic substring is \"bab\" or \"aba\"."
      },
      {
        "input": "s = \"cbbd\"",
        "output": "\"bb\"",
        "explanation": "The longest palindromic substring is \"bb\"."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding from the center of potential palindromes.",
      "Check both even and odd length palindromes.",
      "Use dynamic programming to keep track of palindromic substrings."
    ],
    "company": "Huawei"
  },
  {
    "question_id": "",
    "title": "24 Game",
    "description": "You are given four integers in an array and you are required to use each integer exactly once, along with the operations of addition, subtraction, multiplication, and division, to form the value 24. You need to return true if it's possible to generate 24; otherwise, return false. The operations must follow the order of precedence, and you can utilize parentheses to group operations and enforce output preferences.",
    "topic": "Math",
    "subtopic": "Backtracking",
    "tags": [
      "Math",
      "Backtracking",
      "Recursion"
    ],
    "input_format": "An array of four integers, each ranging from 1 to 9.",
    "output_format": "A boolean indicating whether it is possible to obtain the value 24.",
    "constraints": [
      "The input array will always contain exactly four integers.",
      "1 <= nums[i] <= 9"
    ],
    "examples": [
      {
        "input": "nums = [8, 1, 6, 6]",
        "output": "true",
        "explanation": "One possible way to obtain 24 is (6 / (1 - (8 / 6))) = 24."
      },
      {
        "input": "nums = [1, 3, 4, 6]",
        "output": "true",
        "explanation": "One possible way is (6 - (3 / 1)) * 4 = 24."
      },
      {
        "input": "nums = [1, 1, 1, 1]",
        "output": "false",
        "explanation": "It's impossible to reach 24 with just ones."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider all possible combinations of the numbers.",
      "Explore different permutations to find the right operations."
    ],
    "company": "Huawei"
  },
  {
    "question_id": "",
    "title": "Largest Number",
    "description": "Given a list of non-negative integers, arrange them such that they form the largest possible number. The resulting number should be returned as a string. If the largest number is 0, return '0'.",
    "topic": "String",
    "subtopic": "Sorting",
    "tags": [
      "String",
      "Sorting",
      "Greedy"
    ],
    "input_format": "An array of non-negative integers nums.",
    "output_format": "A string representing the largest number that can be formed.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [10, 2]",
        "output": "210",
        "explanation": "By arranging '2' before '10', we achieve the largest number '210'."
      },
      {
        "input": "nums = [3, 30, 34, 5, 9]",
        "output": "9534330",
        "explanation": "The largest number formed is '9534330' by arranging '9', '5', '34', '3', '30'."
      },
      {
        "input": "nums = [0, 0]",
        "output": "0",
        "explanation": "The only arrangement is '0', hence the result is '0'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to compare two numbers to determine their order.",
      "You may need to convert numbers to strings for comparison.",
      "Use custom sorting based on concatenation results."
    ],
    "company": "Huawei"
  },
  {
    "question_id": "",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. A subarray is a contiguous part of an array.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Subarray"
    ],
    "input_format": "An integer array nums of length n.",
    "output_format": "An integer representing the maximum sum of the contiguous subarray.",
    "constraints": [
      "1 <= n <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The contiguous subarray [4,-1,2,1] has the largest sum 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The array contains only one element, which is the maximum subarray."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The contiguous subarray [5,4,-1,7,8] has the largest sum 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to keep track of the maximum sum at each position.",
      "If the current sum becomes negative, start a new subarray."
    ],
    "company": "Huawei"
  },
  {
    "question_id": "",
    "title": "Daily Temperatures",
    "description": "Given an array of integers representing temperatures, return an array such that, for each day in the input array, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "input_format": "An array of integers temperatures where 1 <= temperatures.length <= 30000 and 30 <= temperatures[i] <= 100.",
    "output_format": "An array of integers representing the number of days until a warmer temperature for each day.",
    "constraints": [
      "1 <= temperatures.length <= 30000",
      "30 <= temperatures[i] <= 100"
    ],
    "examples": [
      {
        "input": "temperatures = [73, 74, 75, 71, 69, 72, 76, 73]",
        "output": "[1, 1, 4, 2, 1, 1, 0, 0]",
        "explanation": "The output array is explained as follows: For day 0, we wait 1 day for a warmer temperature (74). For day 1, we wait 1 day (75), and so on. Lastly, for the last two days, there are no future warmer days."
      },
      {
        "input": "temperatures = [30, 40, 50, 60]",
        "output": "[1, 1, 1, 0]",
        "explanation": "For day 0, we wait 1 day (40), for day 1 we wait 1 day (50), and for day 2 we wait 1 day (60). There is no warmer temperature for day 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of indices.",
      "Iterate through the temperatures from the end to the beginning.",
      "Calculate the difference in indices when a warmer temperature is found."
    ],
    "company": "Huawei"
  }
]