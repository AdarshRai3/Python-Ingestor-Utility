[
  {
    "question_id": "",
    "title": "Longest Common Prefix",
    "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \"\".",
    "topic": "String",
    "subtopic": "Prefix",
    "tags": [
      "String",
      "Prefix",
      "Array"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A string representing the longest common prefix.",
    "constraints": [
      "0 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "strs[i] consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"flower\", \"flow\", \"flight\"]",
        "output": "\"fl\"",
        "explanation": "The longest common prefix is \"fl\"."
      },
      {
        "input": "strs = [\"dog\", \"racecar\", \"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the strings."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Compare characters one by one from the start of each string.",
      "Use a loop until you find a mismatch."
    ],
    "company": "PubMatic"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the height of barriers, compute how much rainwater can be trapped after it rains. The volume of trapped water is determined by the space between the barriers, where a lower barrier can trap water on top of it, with barriers on both sides determining the amount of water that can be held.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers height representing the elevation map, where the width of each bar is 1.",
    "output_format": "An integer representing the total volume of trapped rainwater.",
    "constraints": [
      "0 <= height.length <= 2 * 10^4",
      "0 <= height[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The four 1-unit tall walls and two 2-unit tall walls form a container that traps 6 units of rainwater."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The 4-unit barrier can trap water above the 0, 2, and 3-unit walls for a total of 9 units."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use two pointers to find the maximum height on both sides of the current index.",
      "Calculate the trapped water based on the minimum of the maximum heights."
    ],
    "company": "PubMatic"
  },
  {
    "question_id": "",
    "title": "Meeting Rooms II",
    "description": "Given an array of meeting time intervals where each interval is represented as a pair of integers [start, end], determine the minimum number of conference rooms required to hold all meetings, ensuring that no two meetings overlap.",
    "topic": "Greedy",
    "subtopic": "Interval Scheduling",
    "tags": [
      "Greedy",
      "Intervals",
      "Sorting"
    ],
    "input_format": "An array of intervals, where each interval is represented as a pair of integers [start, end].",
    "output_format": "An integer representing the minimum number of conference rooms required.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "0 <= intervals[i][0] < intervals[i][1] <= 10^6"
    ],
    "examples": [
      {
        "input": "intervals = [[0,30],[5,10],[15,20]]",
        "output": "2",
        "explanation": "The first two meetings (from 0 to 30 and from 5 to 10) overlap, so we need two rooms."
      },
      {
        "input": "intervals = [[7,10],[2,4]]",
        "output": "1",
        "explanation": "The meetings do not overlap; therefore, only one room is needed."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on start time.",
      "Use a min-heap to track the end times of meetings."
    ],
    "company": "PubMatic"
  }
]