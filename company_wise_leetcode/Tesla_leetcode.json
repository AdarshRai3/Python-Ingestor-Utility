[
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A string s containing lowercase and uppercase letters, digits, and symbols.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s consists of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = 'abcabcbb'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'abc', which has a length of 3."
      },
      {
        "input": "s = 'bbbbb'",
        "output": "1",
        "explanation": "The longest substring without repeating characters is 'b', which has a length of 1."
      },
      {
        "input": "s = 'pwwkew'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'wke', which has a length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window to keep track of the substring.",
      "Maintain a set to check for repeating characters efficiently."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Minimum Changes To Make Alternating Binary String",
    "description": "You are given a binary string 's' consisting of only '0's and '1's. Your task is to determine the minimum number of changes required to make the string alternate between '0' and '1'. An alternating string means that no two adjacent characters are the same. For example, '01010' and '10101' are alternating strings. You need to return the minimum number of changes needed to achieve this.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Binary",
      "Alternating"
    ],
    "input_format": "A binary string s (1 <= s.length <= 100).",
    "output_format": "An integer representing the minimum number of changes required.",
    "constraints": [
      "1 <= s.length <= 100",
      "s consists only of '0's and '1's"
    ],
    "examples": [
      {
        "input": "s = '0000'",
        "output": "2",
        "explanation": "We can change the string to '0101' or '1010'. Both require 2 changes."
      },
      {
        "input": "s = '101010'",
        "output": "0",
        "explanation": "The string is already alternating, so no changes are needed."
      },
      {
        "input": "s = '111000'",
        "output": "3",
        "explanation": "We can change the string to '101010' or '010101', requiring 3 changes."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the number of characters that need to change based on the expected pattern."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Find Followers Count",
    "description": "Given a list of social media user profiles, each represented by a unique user ID and a list of their followers, determine the number of followers for each user. The output should be a list where the i-th element represents the number of followers for the user with ID i.",
    "topic": "Graph",
    "subtopic": "Graph Traversal",
    "tags": [
      "Graph",
      "Traversal",
      "Counting"
    ],
    "input_format": "An integer n representing the number of users followed by a list of lists, where each inner list contains integers representing followers for each user.",
    "output_format": "A list of integers where the i-th element is the count of followers for user i.",
    "constraints": [
      "1 <= n <= 10^5",
      "0 <= followers[i] <= n"
    ],
    "examples": [
      {
        "input": "n = 5, followers = [[1, 2], [2, 3], [3, 4], [], [1]]",
        "output": "[2, 1, 1, 1, 0]",
        "explanation": "User 0 has followers 1 and 2 (2 followers), user 1 has follower 2 (1 follower), user 2 has follower 3 (1 follower), user 3 has follower 4 (1 follower), and user 4 has follower 1 (0 followers)."
      },
      {
        "input": "n = 3, followers = [[1, 2], [2], []]",
        "output": "[2, 1, 0]",
        "explanation": "User 0 has followers 1 and 2 (2 followers), user 1 has follower 2 (1 follower), and user 2 has no followers (0 followers)."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using an array to store the count of followers for each user.",
      "You can increment the count for each follower in the list."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Basic Calculator II",
    "description": "Implement a basic calculator to evaluate a string expression consisting of non-negative integers, '+', '-', '*', and '/' operators. The integer division should truncate toward zero.",
    "topic": "String",
    "subtopic": "Parsing Expressions",
    "tags": [
      "String",
      "Calculator",
      "Parsing"
    ],
    "input_format": "A string expression s representing the calculation. The string is guaranteed to be a valid expression.",
    "output_format": "An integer representing the result of the evaluation.",
    "constraints": [
      "1 <= s.length <= 3 * 10^5",
      "s consists of digits, '+', '-', '*', and '/' with spaces.",
      "The expression is guaranteed to be a valid mathematical expression."
    ],
    "examples": [
      {
        "input": "s = '3+2*2'",
        "output": "7",
        "explanation": "The expression evaluates to 3 + (2 * 2) = 3 + 4 = 7."
      },
      {
        "input": "s = ' 3/2 '",
        "output": "1",
        "explanation": "The expression evaluates to floor(3 / 2) = 1."
      },
      {
        "input": "s = ' 3 + 5 / 2 '",
        "output": "5",
        "explanation": "The expression evaluates to 3 + floor(5 / 2) = 3 + 2 = 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a stack to handle the order of operations.",
      "You may want to handle each operator one at a time while keeping track of the last operator."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given an m x n 2D binary grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth-first Search",
    "tags": [
      "Graph",
      "DFS",
      "Matrix",
      "BFS"
    ],
    "input_format": "A 2D binary grid represented as a list of lists.",
    "output_format": "An integer representing the number of islands.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]",
        "output": "3",
        "explanation": "The islands are: (1,1) - (1,0) forms one island; (2,2) is isolated; (3,3)-(3,4) forms another island."
      },
      {
        "input": "grid = [[1,1,1,1,0],[1,1,0,1,0],[1,1,0,0,0],[0,0,0,0,0]]",
        "output": "1",
        "explanation": "The entire grid forms one big island."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use DFS or BFS to traverse the grid.",
      "Change the '1's to '0's during traversal to avoid counting the same island multiple times."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Letter Combinations of a Phone Number",
    "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order. A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.",
    "topic": "Backtracking",
    "subtopic": "Combination Generation",
    "tags": [
      "Backtracking",
      "String",
      "Combination"
    ],
    "input_format": "A string digits where 0 <= digits.length <= 4.",
    "output_format": "A list of strings containing all possible letter combinations.",
    "constraints": [
      "digits will not contain any digits 1 or 0.",
      "2 <= digits.length <= 4"
    ],
    "examples": [
      {
        "input": "digits = '23'",
        "output": "['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']",
        "explanation": "The mapping is '2' -> 'abc' and '3' -> 'def'. The combinations are formed by combining the letters corresponding to these digits."
      },
      {
        "input": "digits = '2'",
        "output": "['a', 'b', 'c']",
        "explanation": "The mapping for '2' is 'abc', hence the output is a list of those letters."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a backtracking approach to explore all letter combinations.",
      "Consider maintaining a mapping of digits to their corresponding letters."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. An interval is defined by a pair of integers [start, end]. If two intervals overlap, they can be merged into a single interval that covers both. Return the resulting list of merged intervals sorted by their start times.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Intervals"
    ],
    "input_format": "A list of intervals, where each interval is represented as a list of two integers [start, end].",
    "output_format": "A list of merged intervals, where each merged interval is a list of two integers [start, end].",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1, 3], [2, 6], [8, 10], [15, 18]]",
        "output": "[[1, 6], [8, 10], [15, 18]]",
        "explanation": "The intervals [1, 3] and [2, 6] overlap, so they are merged into [1, 6]. The other intervals do not overlap."
      },
      {
        "input": "intervals = [[1, 4], [4, 5]]",
        "output": "[[1, 5]]",
        "explanation": "The intervals [1, 4] and [4, 5] touch at 4, so they are also considered overlapping and can be merged into [1, 5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on the starting time.",
      "Use a list to keep track of the merged intervals.",
      "If the current interval overlaps with the last merged interval, merge them."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Building H2O",
    "description": "In a chemical reaction, you can produce water (H2O) by combining hydrogen (H) and oxygen (O). Every molecule of water requires 2 hydrogen atoms and 1 oxygen atom. Given the number of hydrogen and oxygen atoms available, determine how many water molecules can be created.",
    "topic": "Math",
    "subtopic": "Computation",
    "tags": [
      "Math",
      "Computation",
      "Chemistry"
    ],
    "input_format": "Two integers, hydrogen and oxygen, representing the number of hydrogen and oxygen atoms available.",
    "output_format": "An integer representing the maximum number of water molecules that can be formed.",
    "constraints": [
      "0 <= hydrogen, oxygen <= 1000"
    ],
    "examples": [
      {
        "input": "hydrogen = 4, oxygen = 2",
        "output": "2",
        "explanation": "You can use 4 hydrogen atoms and 2 oxygen atoms to form 2 water molecules (2 H2O)."
      },
      {
        "input": "hydrogen = 2, oxygen = 1",
        "output": "1",
        "explanation": "You can use 2 hydrogen atoms and 1 oxygen atom to form 1 water molecule (1 H2O)."
      },
      {
        "input": "hydrogen = 0, oxygen = 3",
        "output": "0",
        "explanation": "You cannot form any water molecules without hydrogen atoms."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Remember that 2 hydrogen atoms are needed for each water molecule.",
      "The limiting factor will determine the number of water molecules."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Design Circular Queue",
    "description": "Design and implement a circular queue data structure, which should support the following operations: `enqueue`, `dequeue`, `front`, `rear`, and `isEmpty`. The circular queue should have a fixed size and should utilize an array to store its elements. When the queue reaches its maximum capacity, further enqueue operations should be rejected until space becomes available. The queue should behave as expected even when items are removed, allowing new items to be added in the freed-up space.",
    "topic": "Data Structures",
    "subtopic": "Queue",
    "tags": [
      "Queue",
      "Data Structure",
      "Circular Queue"
    ],
    "input_format": "Operations will be given as a list of commands where each command is either 'enqueue x', 'dequeue', 'front', 'rear', or 'isEmpty'.",
    "output_format": "For 'dequeue', return the dequeued value. For 'front' and 'rear', return the respective values. For 'isEmpty', return a boolean value: true or false.",
    "constraints": [
      "1 <= capacity <= 1000",
      "All integer values in the enqueue command are between -10^5 and 10^5."
    ],
    "examples": [
      {
        "input": "['enqueue 1', 'enqueue 2', 'rear', 'front', 'dequeue', 'enqueue 3', 'isEmpty']",
        "output": "[2, 1, 1, false]",
        "explanation": "After enqueuing 1 and 2, rear returns 2 and front returns 1. Dequeuing removes 1, and enqueuing 3 adds it to the queue. The queue is not empty at the end."
      },
      {
        "input": "['enqueue 1', 'enqueue 2', 'enqueue 3', 'enqueue 4', 'dequeue', 'enqueue 5', 'rear']",
        "output": "[1, 5]",
        "explanation": "Initially, we enqueue 1 to 4. Dequeuing removes 1. Then, enqueueing 5 results in 5 being the last element in the queue."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using two pointers to track the head and tail of the queue.",
      "Think about how to manage the wrap around using modulo operator."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Top K Frequent Elements",
    "description": "Given a non-empty array of integers, return the k most frequent elements. You may return the answer in any order. For example, given the input [1,1,1,2,2,3] and k = 2, return [1,2].",
    "topic": "Hash Table",
    "subtopic": "Frequency Count",
    "tags": [
      "Hash Table",
      "Sorting",
      "Heap"
    ],
    "input_format": "An array of integers 'nums' and an integer 'k'.",
    "output_format": "A list of the k most frequent elements.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^4",
      "k is always valid, 1 <= k <= number of unique elements"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 1, 2, 2, 3], k = 2",
        "output": "[1, 2]",
        "explanation": "1 is the most frequent element, occurring 3 times, while 2 occurs 2 times."
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]",
        "explanation": "Only one element is present, which is 1."
      },
      {
        "input": "nums = [1, 2], k = 2",
        "output": "[1, 2]",
        "explanation": "Both elements are unique and equally frequent."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hashmap to count the frequencies of each element.",
      "Consider using a min-heap to efficiently retrieve the top k elements."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order and each type of bracket is closed by the corresponding matching bracket.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s consisting of parentheses characters.",
    "output_format": "A boolean value: true if the string is valid, false otherwise.",
    "constraints": [
      "0 <= s.length <= 10^4",
      "s consists of parentheses only '(){}[]'."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The brackets are matched and closed in the correct order."
      },
      {
        "input": "s = '({[]})'",
        "output": "true",
        "explanation": "All brackets are correctly matched and nested."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The brackets are closed in the wrong order."
      },
      {
        "input": "s = '{[()]}{}'",
        "output": "true",
        "explanation": "The brackets are matched and closed correctly."
      },
      {
        "input": "s = '{[(])}'",
        "output": "false",
        "explanation": "The brackets are in the wrong order."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Pop from the stack when you encounter a closing bracket."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the i-th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "One-Dimensional Dynamic Programming",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Greedy"
    ],
    "input_format": "An array of integers prices where 1 <= prices.length <= 10^5 and 0 <= prices[i] <= 10^4.",
    "output_format": "An integer representing the maximum profit possible.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price seen so far.",
      "Calculate the profit at each step and update the maximum profit when a higher profit is found."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Container With Most Water",
    "description": "Given 'n' non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). 'n' vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which together with the x-axis forms a container, such that the container contains the most water. Note that the water is limited by the shorter line.",
    "topic": "Two Pointers",
    "subtopic": "Array",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy"
    ],
    "input_format": "An integer array height of length n where 2 <= n <= 10^5.",
    "output_format": "An integer representing the maximum area of water that can be contained.",
    "constraints": [
      "2 <= height.length <= 10^5",
      "0 <= height[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "height = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The maximum area is formed between the lines at indices 1 and 8: the height is min(8, 7) = 7 and the width is 8 - 1 = 7, so area = 7 * 7 = 49."
      },
      {
        "input": "height = [1,1]",
        "output": "1",
        "explanation": "The area between the two lines is min(1, 1) * (1 - 0) = 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using two pointers starting from both ends of the array.",
      "Always move the pointer pointing to the shorter line inward to maximize area."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of unique triplets that sum up to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The triplets [-1, -1, 2] and [-1, 0, 1] are the only unique triplets that sum up to zero."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "There are no triplets in an empty array."
      },
      {
        "input": "nums = [0, 1, 1]",
        "output": "[]",
        "explanation": "No triplets can be formed that sum up to zero."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using sorting to simplify finding the triplets.",
      "Use two pointers to find the pairs after fixing one element."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. It should support the following operations: `get(key)` - Retrieves the value of the key if the key exists in the cache, otherwise returns -1. `put(key, value)` - Updates or inserts the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Design",
    "subtopic": "Cache Implementation",
    "tags": [
      "Design",
      "Cache",
      "LRU"
    ],
    "input_format": "You are required to implement the LRUCache class with the following methods: LRUCache(int capacity), int get(int key), void put(int key, int value).",
    "output_format": "The output for `get` method is an integer value for the retrieved key or -1 if the key doesn't exist. The `put` method does not return anything.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10^4",
      "0 <= value <= 10^5",
      "The maximum number of calls to `get` and `put` will not exceed 2 * 10^5."
    ],
    "examples": [
      {
        "input": "LRUCache cache = new LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1,-1,3,4]",
        "explanation": "The cache now contains values with keys 3 and 4. Key 2 was evicted."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a doubly linked list along with a hashmap.",
      "Maintain the order of recently used keys."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Reverse Nodes in k-Group",
    "description": "Given a linked list, reverse the nodes of a linked list k at a time and return its modified list. k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as they are. You may not alter the values in the nodes, only nodes themselves may be changed.",
    "topic": "Linked List",
    "subtopic": "Reversal",
    "tags": [
      "Linked List",
      "Reversal",
      "Pointer Manipulation"
    ],
    "input_format": "A linked list represented by its head node and an integer k.",
    "output_format": "The head node of the modified linked list.",
    "constraints": [
      "The number of nodes in the linked list is in the range [1, 5000].",
      "0 <= Node.val <= 1000",
      "k is a positive integer that is less than or equal to the length of the linked list."
    ],
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5], k = 2",
        "output": "[2, 1, 4, 3, 5]",
        "explanation": "The first two elements are reversed: [2, 1], then the next two: [4, 3], and 5 stays as it is."
      },
      {
        "input": "head = [1, 2, 3, 4, 5], k = 3",
        "output": "[3, 2, 1, 4, 5]",
        "explanation": "The first three elements are reversed: [3, 2, 1], then 4 and 5 are left in place."
      },
      {
        "input": "head = [1], k = 1",
        "output": "[1]",
        "explanation": "Only one node, remains unchanged."
      },
      {
        "input": "head = [1, 2], k = 3",
        "output": "[1, 2]",
        "explanation": "Not enough nodes to reverse, remains unchanged."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a loop to traverse k nodes at a time.",
      "Consider using a dummy node to simplify edge cases.",
      "Think about how to connect the reversed segments."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Maximum Number of Balloons",
    "description": "Given a string, you need to find the maximum number of instances of the word 'balloon' that can be formed using the letters from this string. Each letter can be used only as many times as it appears in the string. For example, to form the word 'balloon', you need the letters 'b', 'a', 'l', 'o', 'n' with specific counts.",
    "topic": "String",
    "subtopic": "Counting Characters",
    "tags": [
      "String",
      "Counting",
      "HashMap"
    ],
    "input_format": "A single string representing the available letters.",
    "output_format": "An integer representing the maximum number of times 'balloon' can be formed.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of lowercase English letters only."
    ],
    "examples": [
      {
        "input": "nlaebolko",
        "output": "1",
        "explanation": "'balloon' can be formed once with the letters available."
      },
      {
        "input": "loonbalxballpoon",
        "output": "2",
        "explanation": "'balloon' can be formed twice."
      },
      {
        "input": "leetcode",
        "output": "0",
        "explanation": "'balloon' cannot be formed with the letters in 'leetcode'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the frequency of each letter in the input string.",
      "Determine the limiting letter based on the occurrence in the word 'balloon'.",
      "Use integer division to find how many complete words can be formed."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Move Zeroes",
    "description": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements. Modify the array in-place and return the array. Note that you must do this without allocating extra space for another array.",
    "topic": "Array",
    "subtopic": "In-Place Algorithm",
    "tags": [
      "Array",
      "Two Pointers",
      "In-Place"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "The modified array with all zeros moved to the end.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [0, 1, 0, 3, 12]",
        "output": "[1, 3, 12, 0, 0]",
        "explanation": "The non-zero elements are 1, 3, and 12. After moving all zeros to the end, we get [1, 3, 12, 0, 0]."
      },
      {
        "input": "nums = [0]",
        "output": "[0]",
        "explanation": "The array contains a single zero."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to track the position of non-zero elements."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Subarray Sum Equals K",
    "description": "Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.",
    "topic": "Array",
    "subtopic": "Prefix Sum",
    "tags": [
      "Array",
      "Prefix Sum",
      "Hash Table"
    ],
    "input_format": "An integer array nums and an integer k.",
    "output_format": "An integer representing the total number of subarrays whose sum equals to k.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "-10^4 <= nums[i] <= 10^4",
      "-10^7 <= k <= 10^7"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 1], k = 2",
        "output": "2",
        "explanation": "There are two subarrays that sum to 2: [1, 1] (first and second element) and [1, 1] (second and third element)."
      },
      {
        "input": "nums = [1, 2, 3], k = 3",
        "output": "2",
        "explanation": "The subarrays are [3] and [1, 2]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to store the prefix sums.",
      "Think about how to calculate the sum of different subarrays efficiently."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Decode the Message",
    "description": "You are given a string 'message' which contains lowercase letters and spaces. Each character is encoded by its position in the alphabet, where 'a' is 1, 'b' is 2, ..., 'z' is 26. Your task is to decode the message and return a string that reveals the original characters. Spaces in the message should remain unchanged. If a number is not valid (e.g., greater than 26 or less than 1), decode it to a question mark '?'.",
    "topic": "String",
    "subtopic": "Decoding",
    "tags": [
      "String",
      "Decoding",
      "Alphabet"
    ],
    "input_format": "A string 'message' of encoded characters.",
    "output_format": "A decoded string revealing the original characters.",
    "constraints": [
      "1 <= message.length <= 10^4",
      "message consists of lowercase letters and spaces."
    ],
    "examples": [
      {
        "input": "1 2 3",
        "output": "a b c",
        "explanation": "1 corresponds to 'a', 2 corresponds to 'b', and 3 corresponds to 'c'."
      },
      {
        "input": "27 28",
        "output": "? ?",
        "explanation": "27 and 28 are not valid positions in the alphabet, thus decoded to '?'."
      },
      {
        "input": "8 5 12 12 15",
        "output": "h e l l o",
        "explanation": "Each number corresponds to its respective letter; 8 is 'h', 5 is 'e', 12 is 'l', and 15 is 'o'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a mapping of numbers to characters.",
      "Remember to handle spaces appropriately."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, return true if t is an anagram of s and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Anagram",
      "Hash Table"
    ],
    "input_format": "Two strings s and t.",
    "output_format": "A boolean value indicating whether t is an anagram of s.",
    "constraints": [
      "1 <= s.length, t.length <= 5 * 10^4",
      "s and t consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'anagram', t = 'nagaram'",
        "output": "true",
        "explanation": "Both strings have the same characters: 'a', 'a', 'g', 'm', 'n', 'r'."
      },
      {
        "input": "s = 'rat', t = 'car'",
        "output": "false",
        "explanation": "The strings have different characters."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the frequency of each character in both strings.",
      "You can utilize a hash map or an array to keep track of character counts."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Generate Parentheses",
    "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
    "topic": "Backtracking",
    "subtopic": "Combinatorial Generation",
    "tags": [
      "Backtracking",
      "Recursion",
      "String Generation"
    ],
    "input_format": "An integer n representing the number of pairs of parentheses.",
    "output_format": "A list of strings representing all combinations of well-formed parentheses.",
    "constraints": [
      "1 <= n <= 8"
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\" ]",
        "explanation": "The different combinations of well-formed parentheses for n = 3 are listed above."
      },
      {
        "input": "n = 1",
        "output": "[\"()\"]",
        "explanation": "The single pair of parentheses forms one possible combination."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a recursive function to build the combinations.",
      "Keep track of the number of open and closed parentheses used."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Reorganize String",
    "description": "Given a string s, rearrange the characters of s so that no two adjacent characters are the same. If it is not possible to rearrange the string, return an empty string. You may return the answer in any order.",
    "topic": "String",
    "subtopic": "Rearrangement",
    "tags": [
      "String",
      "Greedy",
      "Heap"
    ],
    "input_format": "A single string s consisting of lowercase English letters.",
    "output_format": "A rearranged string where no two adjacent characters are the same, or an empty string if it's not possible.",
    "constraints": [
      "1 <= s.length <= 500",
      "s consists of only lowercase letters."
    ],
    "examples": [
      {
        "input": "aabbcc",
        "output": "abcabc",
        "explanation": "The string can be rearranged to 'abcabc', where no two adjacent characters are the same."
      },
      {
        "input": "aaab",
        "output": "",
        "explanation": "It is not possible to rearrange the string such that no two adjacent characters are the same."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Count the frequency of each character.",
      "Use a max heap to insert characters based on their frequency.",
      "Always ensure the most frequent character can be placed next."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Max Area of Island",
    "description": "You are given a 2D grid of '1's (land) and '0's (water). An island is formed by connecting adjacent lands horizontally or vertically. Your task is to find the maximum area of an island in the given grid. An island is considered to be the largest connected region of '1's.",
    "topic": "Graph",
    "subtopic": "DFS/BFS",
    "tags": [
      "Graph",
      "DFS",
      "BFS",
      "Matrix"
    ],
    "input_format": "A 2D grid represented by a list of lists, where each element is either 0 or 1.",
    "output_format": "An integer representing the maximum area of an island.",
    "constraints": [
      "1 <= grid.length, grid[0].length <= 50",
      "grid[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "grid = [[0,0,0,0,0,0],[0,1,1,0,0,0],[0,1,0,0,1,1],[0,0,0,0,0,0]]",
        "output": "4",
        "explanation": "The largest island has an area of 4 formed by the two '1's."
      },
      {
        "input": "grid = [[1,1,0,0,0],[1,0,0,1,1],[0,0,0,0,0],[0,1,1,1,0]]",
        "output": "5",
        "explanation": "The largest island has an area of 5 formed by the connecting '1's."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "You can use Depth-First Search or Breadth-First Search to explore the islands.",
      "Keep track of visited nodes to avoid counting the same island multiple times.",
      "Consider using a helper function to calculate the area of the island."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Design Tic-Tac-Toe",
    "description": "You are tasked with designing a Tic-Tac-Toe game. The game is played on a 3x3 grid where two players take turns placing their marks (either 'X' or 'O') in an empty cell. Implement a TicTacToe class that supports the following operations: `__init__`, `move`, and `check_winner`. The class should maintain the state of the game and determine when a player wins or if the game ends in a draw.",
    "topic": "Design",
    "subtopic": "Game Design",
    "tags": [
      "Design",
      "Game",
      "Implementation"
    ],
    "input_format": "The 'move' function takes an integer row and an integer col representing the row and column to place the current player's mark.",
    "output_format": "The function returns 'X' if player X wins, 'O' if player O wins, 'Draw' if the game ends in a draw, or an empty string if the game is still ongoing.",
    "constraints": [
      "The game board is 3x3.",
      "Players alternate turns, and moves are made in valid empty cells only.",
      "The game continues until there is a winner or a draw."
    ],
    "examples": [
      {
        "input": [
          [
            "move",
            0,
            0
          ],
          [
            "move",
            0,
            1
          ],
          [
            "move",
            0,
            2
          ],
          [
            "move",
            1,
            0
          ],
          [
            "move",
            1,
            1
          ],
          [
            "move",
            2,
            0
          ],
          [
            "move",
            2,
            1
          ],
          [
            "move",
            2,
            2
          ],
          [
            "move",
            1,
            2
          ]
        ],
        "output": [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "Draw"
        ],
        "explanation": "The moves result in a draw as the board is full without any winners."
      },
      {
        "input": [
          [
            "move",
            0,
            0
          ],
          [
            "move",
            1,
            1
          ],
          [
            "move",
            0,
            1
          ],
          [
            "move",
            2,
            1
          ],
          [
            "move",
            0,
            2
          ]
        ],
        "output": [
          "",
          "",
          "",
          "",
          "X"
        ],
        "explanation": "Player X wins after the last move forming a line in the top row."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a 2D array to represent the game board.",
      "You can check for winning conditions after each move."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Flatten Nested List Iterator",
    "description": "You are given a nested list of integers, which might be deeply nested. Implement a flattened iterator to traverse this list sequentially. The iterator should support the next() and hasNext() methods to allow for a simple interface to iterate through all the elements in the flattened list. Your implementation should be efficient in both time and space.",
    "topic": "Design",
    "subtopic": "Iterator",
    "tags": [
      "Design",
      "Iterator",
      "Nested List"
    ],
    "input_format": "A nested list structure containing integers and other nested lists.",
    "output_format": "Boolean from hasNext(), and integers from next().",
    "constraints": [
      "The nested list can contain integers and other nested lists.",
      "The size of the nested list can go up to 10^4.",
      "An integer can be in the range of -10^6 to 10^6."
    ],
    "examples": [
      {
        "input": "nestedList = [[1, 1], 2, [1, 1]]",
        "output": "1, 1, 2, 1, 1",
        "explanation": "The elements are flattened in the order they appear: [1, 1], 2, [1, 1] becomes 1, 1, 2, 1, 1."
      },
      {
        "input": "nestedList = [1, [4, [6]]]",
        "output": "1, 4, 6",
        "explanation": "After flattening [1, [4, [6]]] yields: 1, 4, 6."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the current position in the nested list.",
      "Flattening can be done recursively or iteratively."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "First Missing Positive",
    "description": "Given an unsorted integer array nums, find the smallest missing positive integer.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Sorting"
    ],
    "input_format": "An unsorted integer array nums.",
    "output_format": "An integer representing the smallest missing positive integer.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [3, 4, -1, 1]",
        "output": "2",
        "explanation": "The smallest missing positive integer is 2."
      },
      {
        "input": "nums = [1, 2, 0]",
        "output": "3",
        "explanation": "The smallest missing positive integer is 3."
      },
      {
        "input": "nums = [7, 8, 9, 11, 12]",
        "output": "1",
        "explanation": "The smallest missing positive integer is 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a hashing approach to track the presence of positive integers.",
      "Consider the range of numbers you need to check."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Repeated DNA Sequences",
    "description": "A DNA sequence is represented by a string consisting of the letters 'A', 'C', 'G', and 'T'. Given a string s that represents a DNA sequence, return all the 10-letter-long substrings (subsequences) that occur more than once in a DNA molecule. You may return the answer in any order.",
    "topic": "String",
    "subtopic": "Hashing",
    "tags": [
      "String",
      "HashMap",
      "Sliding Window"
    ],
    "input_format": "A string s representing the DNA sequence. The length of s will be between 1 and 10^5.",
    "output_format": "A list of substrings that are repeated more than once.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of 'A', 'C', 'G', and 'T' characters only."
    ],
    "examples": [
      {
        "input": "s = 'AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT'",
        "output": "[\"AAAAACCCCC\", \"CCCCCAAAAA\"]",
        "explanation": "The substrings 'AAAAACCCCC' and 'CCCCCAAAAA' occur more than once in the given DNA sequence."
      },
      {
        "input": "s = 'AAAAAAAAAAAAA'",
        "output": "[\"AAAAAAAAAA\"]",
        "explanation": "The substring 'AAAAAAAAAA' occurs multiple times in the given DNA sequence."
      },
      {
        "input": "s = 'A'",
        "output": "[]",
        "explanation": "There are no 10-letter-long substrings in a single character."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to count occurrences of substrings.",
      "Consider sliding window technique to extract 10-letter-long substrings.",
      "Check for substrings with a count greater than one."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Moving Average from Data Stream",
    "description": "Design a class that calculates the moving average of a streaming data. The class should have a method `next(val: float) -> float` that takes a new number as input and returns the moving average of the last 'size' numbers. If there are fewer than 'size' numbers, it should return the average of all available numbers.",
    "topic": "Design",
    "subtopic": "Data Stream",
    "tags": [
      "Design",
      "Queue",
      "Array"
    ],
    "input_format": "An integer size, and a float value val for the next method call.",
    "output_format": "A float representing the moving average of the last 'size' numbers.",
    "constraints": [
      "1 <= size <= 1000",
      "-10^5 <= val <= 10^5"
    ],
    "examples": [
      {
        "input": "MovingAverage movingAverage = new MovingAverage(3); movingAverage.next(1); movingAverage.next(10); movingAverage.next(3); movingAverage.next(5);",
        "output": "6.0",
        "explanation": "The first three numbers are 1, 10, and 3. The moving average is (1 + 10 + 3) / 3 = 4.67. Adding 5 gives (10 + 3 + 5) / 3 = 6."
      },
      {
        "input": "MovingAverage movingAverage = new MovingAverage(5); movingAverage.next(1); movingAverage.next(2); movingAverage.next(3);",
        "output": "2.0",
        "explanation": "The first three numbers are 1, 2, and 3. The moving average is (1 + 2 + 3) / 3 = 2."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a queue to maintain the last 'size' numbers.",
      "Keep track of the sum to calculate the average efficiently."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Find Minimum in Rotated Sorted Array",
    "description": "Given a rotated sorted array, find the minimum element in the array. The array is guaranteed to be non-empty and contains unique elements.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Searching"
    ],
    "input_format": "An integer array nums, where 1 <= nums.length <= 5000 and 0 <= nums[i] <= 10^4.",
    "output_format": "An integer representing the minimum element in the array.",
    "constraints": [
      "1 <= nums.length <= 5000",
      "The array may contain duplicates."
    ],
    "examples": [
      {
        "input": "nums = [3, 4, 5, 1, 2]",
        "output": "1",
        "explanation": "The minimum element in the array is 1."
      },
      {
        "input": "nums = [4, 5, 6, 7, 0, 1, 2]",
        "output": "0",
        "explanation": "The minimum element in the array is 0."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The only element present is the minimum: 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to efficiently find the minimum.",
      "If the middle element is greater than the rightmost element, the minimum must be in the right half.",
      "If the middle element is less than or equal to the rightmost element, the minimum is in the left half."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A palindromic substring is a string that reads the same backward as forward.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Palindrome",
      "Dynamic Programming"
    ],
    "input_format": "A string s of length n where 1 <= n <= 1000.",
    "output_format": "A string representing the longest palindromic substring in s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consist of only digits and English letters."
    ],
    "examples": [
      {
        "input": "s = \"babad\"",
        "output": "\"bab\" or \"aba\"",
        "explanation": "Both 'bab' and 'aba' are valid longest palindromic substrings."
      },
      {
        "input": "s = \"cbbd\"",
        "output": "\"bb\"",
        "explanation": "'bb' is the longest palindromic substring in 'cbbd'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider checking for palindromes of different lengths.",
      "Use a center-expansion approach to find the longest palindromic substring."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Design Bounded Blocking Queue",
    "description": "Implement a bounded blocking queue that supports the following operations: push, pop, and size. This queue should be thread-safe and should block when the queue is full (for push) and block when the queue is empty (for pop). The maximum size of the queue should be defined during the initialization.",
    "topic": "Concurrency",
    "subtopic": "Thread Safety",
    "tags": [
      "Concurrency",
      "Blocking Queue",
      "Thread Safety"
    ],
    "input_format": "An integer maxSize representing the maximum size of the queue during instantiation.",
    "output_format": "The methods should return appropriate values as per the operations: push and pop.",
    "constraints": [
      "1 <= maxSize <= 1000"
    ],
    "examples": [
      {
        "input": "Queue queue = new Queue(2);\nqueue.push(1);\nqueue.push(2);\nint firstPop = queue.pop();\nint secondPop = queue.pop();",
        "output": "[1, 2]",
        "explanation": "After pushing 1 and 2, popping from the queue should return them in the order they were added."
      },
      {
        "input": "Queue queue = new Queue(1);\nqueue.push(1);\nint firstPop = queue.pop();\nqueue.push(2);\nint secondPop = queue.pop();",
        "output": "[1, 2]",
        "explanation": "The first pop will return 1, and after pushing 2, the second pop will return 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using locks or semaphores to manage access.",
      "Use conditions to wait for the queue to become non-full or non-empty."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Largest Perimeter Triangle",
    "description": "You are given an integer array 'nums' representing the side lengths of a triangle. Your task is to return the largest perimeter of a triangle that can be formed with any three side lengths from the array. If no such triangle can be formed, return 0.",
    "topic": "Array",
    "subtopic": "Sorting and Greedy",
    "tags": [
      "Array",
      "Sorting",
      "Greedy"
    ],
    "input_format": "An array of integers nums representing the lengths of the sides.",
    "output_format": "An integer representing the largest perimeter of a triangle, or 0 if no triangle can be formed.",
    "constraints": [
      "3 <= nums.length <= 100",
      "1 <= nums[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [2, 1, 2]",
        "output": "5",
        "explanation": "The sides 2, 2, and 1 can form a triangle with a perimeter of 5."
      },
      {
        "input": "nums = [1, 2, 1]",
        "output": "0",
        "explanation": "No combination can form a triangle, so the output is 0."
      },
      {
        "input": "nums = [3, 2, 3, 4]",
        "output": "10",
        "explanation": "The sides 3, 3, and 4 can form a triangle with a perimeter of 10."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider sorting the array first.",
      "Use the triangle inequality theorem."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Missing Number",
    "description": "Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one number that is missing from the array.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Bit Manipulation"
    ],
    "input_format": "An array of integers nums of length n, where 0 \u2264 nums[i] \u2264 n.",
    "output_format": "An integer representing the missing number in the array.",
    "constraints": [
      "1 <= n <= 10^4",
      "nums.length == n",
      "All elements in nums are unique."
    ],
    "examples": [
      {
        "input": "nums = [3, 0, 1]",
        "output": "2",
        "explanation": "The numbers in the array are 0, 1, and 3. The missing number is 2."
      },
      {
        "input": "nums = [0]",
        "output": "1",
        "explanation": "The only number in the array is 0. The missing number is 1."
      },
      {
        "input": "nums = [9,6,4,2,3,5,7,0,1]",
        "output": "8",
        "explanation": "The numbers in the array are from 0 to 9 except for 8. The missing number is 8."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to use mathematical properties to find the missing number.",
      "Consider the sum of the first n natural numbers."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "House Robber",
    "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected. If two adjacent houses are robbed on the same night, the alarm will automatically go off. Given an integer array 'nums' representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
    "topic": "Dynamic Programming",
    "subtopic": "Memoization",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Greedy"
    ],
    "input_format": "An array of non-negative integers nums where 1 <= nums.length <= 100 and 0 <= nums[i] <= 400.",
    "output_format": "An integer representing the maximum amount of money that can be robbed.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 400"
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 9, 3, 1]",
        "output": "12",
        "explanation": "Robbing house 1 (2), house 3 (9), and house 4 (1) gives 2 + 9 + 1 = 12."
      },
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "4",
        "explanation": "Robbing house 1 (1) and house 3 (3) gives 1 + 3 = 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about the maximum amount of money you can rob at each house.",
      "Use dynamic programming to store results of previously computed houses."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Is Subsequence",
    "description": "Given two strings s and t, return true if s is a subsequence of t, or false otherwise. A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., 'ace' is a subsequence of 'abcde' while 'aec' is not).",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Subsequence",
      "Two Pointers"
    ],
    "input_format": "Two strings s and t where 0 <= s.length <= 100 and 0 <= t.length <= 10^4.",
    "output_format": "A boolean value, true if s is a subsequence of t, otherwise false.",
    "constraints": [
      "0 <= s.length <= 100",
      "0 <= t.length <= 10^4",
      "s and t consist of only lowercase letters."
    ],
    "examples": [
      {
        "input": "s = \"abc\", t = \"ahbgdc\"",
        "output": "true",
        "explanation": "'abc' is a subsequence of 'ahbgdc'."
      },
      {
        "input": "s = \"axc\", t = \"ahbgdc\"",
        "output": "false",
        "explanation": "'axc' is not a subsequence of 'ahbgdc'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to check the characters in order."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Combination Sum II",
    "description": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the chosen numbers sum to target. Each number in candidates may only be used once in the combination. Note that the solution set must not contain duplicate combinations.",
    "topic": "Backtracking",
    "subtopic": "Combination Sum",
    "tags": [
      "Backtracking",
      "Combination",
      "Array"
    ],
    "input_format": "An array of distinct integers candidates and an integer target.",
    "output_format": "A list of lists representing all unique combinations that sum to target.",
    "constraints": [
      "1 <= candidates.length <= 100",
      "1 <= candidates[i] <= 50",
      "0 <= target <= 30"
    ],
    "examples": [
      {
        "input": "candidates = [10, 1, 2, 7, 6, 1, 5], target = 8",
        "output": "[[1, 1, 6], [1, 2, 5], [1, 7], [2, 6]]",
        "explanation": "Each combination sums up to 8 without repetition of numbers and avoiding duplicates."
      },
      {
        "input": "candidates = [2, 5, 2, 1, 2], target = 5",
        "output": "[[1, 2, 2], [5]]",
        "explanation": "These combinations sum up to 5 while adhering to the uniqueness constraint."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using backtracking to explore combinations.",
      "Sort the candidates to facilitate the elimination of duplicates."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Construct Binary Tree from Preorder and Inorder Traversal",
    "description": "Given two integer arrays, preorder and inorder, which represent the preorder and inorder traversal of a binary tree, construct the binary tree and return its root node. It is guaranteed that the given arrays represent a valid binary tree.",
    "topic": "Tree",
    "subtopic": "Binary Tree Construction",
    "tags": [
      "Tree",
      "Binary Tree",
      "Traversal"
    ],
    "input_format": "Two integer arrays, preorder and inorder, representing the preorder and inorder traversal of the tree.",
    "output_format": "A TreeNode representing the root of the constructed binary tree.",
    "constraints": [
      "1 <= preorder.length <= 3000",
      "inorder.length == preorder.length",
      "Both arrays have unique values.",
      "Each value of inorder is unique."
    ],
    "examples": [
      {
        "input": "preorder = [3, 9, 20, 15, 7], inorder = [9, 3, 15, 20, 7]",
        "output": "A binary tree with root node 3, left child 9, and right child 20 with respective children.",
        "explanation": "The constructed tree will have the following structure: \n    3 \n   / \\ \n  9  20 \n     / \\ \n    15  7"
      },
      {
        "input": "preorder = [1, 2], inorder = [2, 1]",
        "output": "A binary tree with root node 1 and left child 2.",
        "explanation": "The constructed tree will have the following structure: \n  1 \n / \n2"
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use the properties of preorder and inorder traversals to determine the root and its children.",
      "Consider using a hashmap to store the index of each value in inorder for quick access."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list and return the reversed list.",
    "topic": "Linked List",
    "subtopic": "Reversing a Linked List",
    "tags": [
      "Linked List",
      "Reversal",
      "Pointer Manipulation"
    ],
    "input_format": "A ListNode representing the head of the linked list.",
    "output_format": "A ListNode representing the head of the reversed linked list.",
    "constraints": [
      "The number of nodes in the list is in the range [0, 5000].",
      "-5000 <= Node.val <= 5000"
    ],
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5]",
        "output": "[5, 4, 3, 2, 1]",
        "explanation": "Reversing the linked list results in [5, 4, 3, 2, 1]."
      },
      {
        "input": "head = [1, 2]",
        "output": "[2, 1]",
        "explanation": "Reversing the linked list results in [2, 1]."
      },
      {
        "input": "head = []",
        "output": "[]",
        "explanation": "An empty list remains empty when reversed."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use three pointers: previous, current, and next.",
      "Iterate through the list and reverse the links.",
      "The last node will become the new head."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "Hash Table",
    "subtopic": "String Manipulation",
    "tags": [
      "Hash Table",
      "String",
      "Anagram"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A list of lists, where each sublist contains strings that are anagrams of each other.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "0 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"eat\",\"tea\",\"ate\"],[\"tan\",\"nat\"],[\"bat\"]]",
        "explanation": "The anagrams are grouped together. 'eat', 'tea', and 'ate' are anagrams of each other."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "The input contains only an empty string, which is trivially an anagram of itself."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "The input contains only one character 'a', which doesn't have any anagrams."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "You can use a hash table to group strings by the sorted version of their characters.",
      "Consider using a tuple of character counts to uniquely identify anagrams.",
      "Think about how you can transform each string into a common format for comparison."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Course Schedule II",
    "description": "You are given a number of courses and a list of prerequisite pairs where course A is a prerequisite of course B. Your task is to return the order in which you should take the courses to satisfy all prerequisites. If it is not possible to complete all courses, return an empty array.",
    "topic": "Graph",
    "subtopic": "Topological Sorting",
    "tags": [
      "Graph",
      "Topological Sort",
      "DFS",
      "BFS"
    ],
    "input_format": "Two integers numCourses and a list of prerequisite pairs.",
    "output_format": "A list of integers representing the course order, or an empty list if it's not possible to finish all courses.",
    "constraints": [
      "1 <= numCourses <= 2000",
      "0 <= prerequisites.length <= numCourses * (numCourses - 1)"
    ],
    "examples": [
      {
        "input": "numCourses = 4, prerequisites = [[2, 0], [1, 0], [3, 1], [3, 2]]",
        "output": "[0, 1, 2, 3] or [0, 2, 1, 3]",
        "explanation": "A possible order of taking courses is taking course 0 first, then taking course 1 or course 2, and finally course 3."
      },
      {
        "input": "numCourses = 2, prerequisites = [[1, 0], [0, 1]]",
        "output": "[]",
        "explanation": "It's impossible to finish the courses due to a circular dependency."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a graph representation for the courses.",
      "Look for cycles in the graph."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Maximal Network Rank",
    "description": "You are given a list of connections where each connection is represented as an edge between two nodes in an undirected graph. The 'network rank' of two nodes is defined as the number of unique direct connections to both nodes. Your task is to determine the maximum network rank achievable by any pair of nodes in the graph.",
    "topic": "Graph",
    "subtopic": "Network Rank",
    "tags": [
      "Graph",
      "Network",
      "DFS",
      "BFS"
    ],
    "input_format": "A list of pairs where each pair represents a connection between two nodes.",
    "output_format": "An integer representing the maximum network rank for any pair of nodes.",
    "constraints": [
      "1 <= connections.length <= 2000",
      "connections[i].length == 2",
      "0 <= connections[i][0], connections[i][1] <= 1000",
      "connections[i][0] != connections[i][1]"
    ],
    "examples": [
      {
        "input": "connections = [[1, 2], [2, 3], [1, 3]]",
        "output": "4",
        "explanation": "The pairs are (1, 2), (1, 3), and (2, 3). The maximal network rank is with nodes 1 and 2 or 1 and 3 with 4 unique connections."
      },
      {
        "input": "connections = [[1, 2], [1, 3], [2, 3], [2, 4], [3, 4]]",
        "output": "5",
        "explanation": "The maximum network rank is achieved with nodes 2 and 3 having 5 unique connections."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hashmap to store the degree of each node.",
      "Don't forget to count the shared connection between the two nodes."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Simplify Path",
    "description": "Given a string representing an absolute path for a file in a Unix-style file system, simplify it. The path may contain regular files or directories and can include '.', '..', and '/' to represent current directory, parent directory, and the root directory respectively. Your task is to return the simplified canonical path.",
    "topic": "String",
    "subtopic": "Path Manipulation",
    "tags": [
      "String",
      "Path",
      "Stack"
    ],
    "input_format": "A single string path representing an absolute path in a Unix-style format.",
    "output_format": "A string representing the simplified canonical path.",
    "constraints": [
      "The input path is guaranteed to be a valid absolute path.",
      "1 <= path.length <= 3000"
    ],
    "examples": [
      {
        "input": "/home/",
        "output": "/home",
        "explanation": "The input path is already simplified. Hence, the output is '/home'."
      },
      {
        "input": "/../",
        "output": "/",
        "explanation": "The '..' indicates to go to the parent directory from root, which still remains at root."
      },
      {
        "input": "/home//foo/",
        "output": "/home/foo",
        "explanation": "The multiple slashes between directories are ignored, simplifying to '/home/foo'."
      },
      {
        "input": "/a/./b/../../c/",
        "output": "/c",
        "explanation": "The '.' indicates the current directory which can be ignored. The path simplifies down to '/c'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to handle directory changes.",
      "Ignore empty strings and '.' while traversing.",
      "Handle '..' by popping from the stack if it's not empty."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Serialize and Deserialize Binary Tree",
    "description": "Design an algorithm to serialize and deserialize a binary tree. A binary tree can be represented as a string, and you need to implement two functions: one that serializes the tree into a string and another that deserializes the string back into a binary tree. Your solution should ensure that the serialized string uniquely represents the tree structure and can be used to reconstruct the original tree.",
    "topic": "Tree",
    "subtopic": "Serialization",
    "tags": [
      "Tree",
      "Serialization",
      "Deserialization"
    ],
    "input_format": "A binary tree is given through its root node.",
    "output_format": "A string that represents the serialized binary tree on serialization, and a root node of the binary tree on deserialization.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 10^4].",
      "Each node's value is in the range [-1000, 1000]."
    ],
    "examples": [
      {
        "input": "root = [1,2,3,null,null,4,5]",
        "output": "'1,2,#,#,3,4,#,#,5,#,#'",
        "explanation": "The tree structure is serialized to this string format, where '#' represents null nodes."
      },
      {
        "input": "data = '1,2,#,#,3,#,#'",
        "output": "root = [1,2,3]",
        "explanation": "The string is deserialized back into a binary tree with root value 1, and left-child 2, right-child 3."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using pre-order or level-order traversal for serialization.",
      "Keep track of null nodes while creating the serialized string."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Find Winner on a Tic Tac Toe Game",
    "description": "In a Tic Tac Toe game, players take turns placing their marks (either 'X' or 'O') on a 3x3 grid. Given an array of strings that represent the moves made by the two players, determine the winner of the game. If there is no winner, return 'Draw'. If the game is not finished yet, return 'Pending'. The first element of the array corresponds to player 'X', the second to player 'O', and so forth.",
    "topic": "Game Theory",
    "subtopic": "Tic Tac Toe",
    "tags": [
      "Tic Tac Toe",
      "Game Theory",
      "String Manipulation"
    ],
    "input_format": "An array of strings moves, where each string is either 'X' or 'O'.",
    "output_format": "A string that is either 'X', 'O', 'Draw', or 'Pending'.",
    "constraints": [
      "1 <= moves.length <= 9",
      "moves[i] is either 'X' or 'O'",
      "The moves are valid and alternate between 'X' and 'O'"
    ],
    "examples": [
      {
        "input": "moves = [\"X\", \"O\", \"X\", \"O\", \"X\", \"O\", \"X\"]",
        "output": "X",
        "explanation": "'X' completes the first column and wins."
      },
      {
        "input": "moves = [\"X\", \"O\", \"X\", \"O\", \"O\", \"X\"]",
        "output": "Draw",
        "explanation": "All cells are filled and there is no winner."
      },
      {
        "input": "moves = [\"X\", \"O\", \"X\"]",
        "output": "Pending",
        "explanation": "The game is still in progress."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Check all winning combinations for both players.",
      "Count the moves to determine if the game is still ongoing."
    ],
    "company": "Tesla"
  },
  {
    "question_id": "",
    "title": "Basic Calculator",
    "description": "Implement a basic calculator to evaluate a simple expression string containing non-negative integers, '+', '-', '*', and '/'. The expression should be evaluated using standard operator precedence rules. Additionally, your calculator should handle spaces and invalid inputs gracefully.",
    "topic": "Mathematics",
    "subtopic": "Expression Evaluation",
    "tags": [
      "Math",
      "Expression",
      "Calculator"
    ],
    "input_format": "A string s representing the expression to evaluate.",
    "output_format": "An integer representing the result of the evaluated expression.",
    "constraints": [
      "1 <= s.length <= 3 * 10^5",
      "The input string contains only non-negative integers, '+', '-', '*', '/' and spaces.",
      "The input will always be a valid expression."
    ],
    "examples": [
      {
        "input": "s = '3 + 5 - 2 * 4 / 2'",
        "output": "4",
        "explanation": "The expression evaluates to 3 + 5 = 8, 8 - 2 = 6, 2 * 4 = 8, 8 / 2 = 4, 6 - 4 = 2."
      },
      {
        "input": "s = '  2-1 + 2 '",
        "output": "3",
        "explanation": "The expression evaluates to 2 - 1 + 2 = 3."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a stack to handle operator precedence.",
      "Whitespace can be ignored, but you need to handle the operators correctly."
    ],
    "company": "Tesla"
  }
]