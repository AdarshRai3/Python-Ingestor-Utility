[
  {
    "question_id": "",
    "title": "Minimum Penalty for a Shop",
    "description": "You are given a list of shops, each with specific opening and closing times during which they sell their products. Each shop has a penalty associated with it, which will be incurred if you visit the shop outside of its opening hours. Your task is to find the minimum penalty you would incur for visiting a shop while taking into consideration the opening times of each shop. Each shop's hours are specified in a 24-hour format. You must select one shop to visit based on the minimum penalty incurred.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithm",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Time Management"
    ],
    "input_format": "A list of tuples, each containing two strings representing the opening and closing times of the shop in 'HH:MM' format, and an integer representing the penalty for visiting outside the shop hours.",
    "output_format": "An integer representing the minimum penalty incurred.",
    "constraints": [
      "1 <= shops.length <= 100",
      "Each shop's opening and closing times are valid and follow 'HH:MM' format.",
      "Penalty values are non-negative integers."
    ],
    "examples": [
      {
        "input": "[('09:00', '17:00', 10), ('11:00', '15:00', 20), ('10:00', '14:00', 30)]",
        "output": "10",
        "explanation": "Visiting the first shop incurs the least penalty of 10."
      },
      {
        "input": "[('08:00', '12:00', 15), ('12:00', '20:00', 5), ('09:00', '17:00', 10)]",
        "output": "5",
        "explanation": "Visiting the second shop incurs the minimum penalty of 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider iterations over the time slots of each shop.",
      "Sort shops based on opening time to minimize penalty."
    ],
    "company": "Stripe"
  },
  {
    "question_id": "",
    "title": "Evaluate Division",
    "description": "You are given a list of equations of the form 'A / B = k' where A and B are variables represented as strings, and k is a real number. You are also given a list of queries where each query is also a division of variables in the form 'C / D'. Your task is to evaluate the results of these queries based on the provided equations. If a query cannot be evaluated, return -1.0 for that query. You may assume that the input equations are always valid and that there's at least one equation provided to solve the queries.",
    "topic": "Graph",
    "subtopic": "DFS/BFS",
    "tags": [
      "Graph",
      "DFS",
      "Union-Find"
    ],
    "input_format": "A list of equations, where each equation is a pair of strings and a list of values representing the results. A list of queries to evaluate based on the equations given.",
    "output_format": "A list of results where each result corresponds to the answer of the provided queries.",
    "constraints": [
      "1 <= equations.length <= 20",
      "equations[i].length == 2",
      "1 <= queries.length <= 20",
      "-100.0 < values[i] < 100.0"
    ],
    "examples": [
      {
        "input": [
          [
            [
              "a",
              "b"
            ],
            [
              2.0
            ]
          ],
          [
            [
              "b",
              "c"
            ],
            [
              3.0
            ]
          ]
        ],
        "output": [
          6.0
        ],
        "explanation": "Using the equations: a / b = 2.0 and b / c = 3.0, we can deduce that a / c = a / b * b / c = 2.0 * 3.0 = 6.0."
      },
      {
        "input": [
          [
            [
              "a",
              "b"
            ],
            [
              2.0
            ]
          ],
          [
            [
              "b",
              "c"
            ],
            [
              3.0
            ]
          ]
        ],
        "output": [
          -1.0
        ],
        "explanation": "Querying for 'a / e' returns -1.0 because 'e' does not appear in any of the equations."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think of the equations as edges in a graph.",
      "Use a depth-first search or breadth-first search to explore the paths.",
      "Consider using a data structure to map the variables."
    ],
    "company": "Stripe"
  },
  {
    "question_id": "",
    "title": "Cheapest Flights Within K Stops",
    "description": "Given a list of flights represented by a matrix, where each row represents a flight from one city to another with a cost, find the cheapest price to travel from the source city to the destination city with at most K stops. If there is no such route, return -1.",
    "topic": "Graph",
    "subtopic": "Shortest Path",
    "tags": [
      "Graph",
      "Dynamic Programming",
      "BFS"
    ],
    "input_format": "An integer n representing the number of cities, a 2D array flights representing the flight connections, an integer src representing the starting city, an integer dst representing the destination city, and an integer k representing the maximum number of stops.",
    "output_format": "An integer representing the cheapest price to travel from src to dst with at most k stops, or -1 if it's not possible.",
    "constraints": [
      "1 <= n <= 100",
      "0 <= flights.length <= 600",
      "flights[i].length == 3",
      "0 <= flights[i][0], flights[i][1] < n",
      "1 <= flights[i][2] <= 10^4",
      "0 <= src, dst < n",
      "0 <= k <= 100"
    ],
    "examples": [
      {
        "input": "n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1",
        "output": "700",
        "explanation": "The cheapest way is to go from 0 to 1 to 3 with a total cost of 100 + 600 = 700."
      },
      {
        "input": "n = 3, flights = [[0,1,500],[1,2,1000],[0,2,2000]], src = 0, dst = 2, k = 1",
        "output": "2000",
        "explanation": "The only route is from 0 to 2 directly with a cost of 2000."
      },
      {
        "input": "n = 5, flights = [[0,1,100],[0,2,500],[1,3,200],[2,3,200],[1,4,300],[3,4,100]], src = 0, dst = 4, k = 2",
        "output": "600",
        "explanation": "The cheapest way is from 0 to 1 to 3 to 4 or from 0 to 2 to 3 to 4 both cost 600."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a priority queue to track the cheapest flights.",
      "Explore all possible paths but limit the number of stops."
    ],
    "company": "Stripe"
  },
  {
    "question_id": "",
    "title": "Optimal Account Balancing",
    "description": "You are given a list of transactions and the amounts that each person owes after a series of transactions. Your goal is to minimize the number of transactions needed to settle all debts. Each transaction can be seen as an amount being transferred from one person to another. The solution must ensure that all debts are settled with the fewest number of transactions possible.",
    "topic": "Greedy",
    "subtopic": "Graph Theory",
    "tags": [
      "Greedy",
      "Graph",
      "Transactions",
      "Optimization"
    ],
    "input_format": "A list of transactions, where each transaction is represented as a tuple (debtor, creditor, amount).",
    "output_format": "A list of transactions needed to settle the debts, each represented as a tuple (from, to, amount).",
    "constraints": [
      "1 <= transactions.length <= 10^4",
      "0 < amount <= 10^6",
      "The dimensions of the transactions should not exceed 100."
    ],
    "examples": [
      {
        "input": "[('A', 'B', 20), ('B', 'C', 30), ('C', 'A', 50)]",
        "output": "[('B', 'A', 20), ('C', 'B', 10)]",
        "explanation": "In the first transaction, B owes A 20. In the second transaction, C owes B a total of 30, but since B is now owed 20 from A, only 10 more is needed. Thus, the optimal transactions are B paying A 20 to settle the debt and C paying B 10."
      },
      {
        "input": "[('X', 'Y', 15), ('Y', 'Z', 25), ('Z', 'X', 10)]",
        "output": "[('X', 'Y', 5), ('Z', 'Y', 25)]",
        "explanation": "X owed Y 15, Y owed Z 25, and Z owed X 10. After optimal transactions, X only needs to pay 5 to Y while Z pays 25 directly to Y."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a balance sheet to keep track of how much each person owes.",
      "Leverage data structures to efficiently minimize transactions.",
      "Think of the problem as a graph where nodes represent people and edges represent debts."
    ],
    "company": "Stripe"
  },
  {
    "question_id": "",
    "title": "Parallel Courses III",
    "description": "You are given an integer n representing the total number of courses you have to take, labeled from 1 to n. You are also given a 2D integer array relations where relations[i] = [xi, yi] indicates that course xi must be completed before course yi. You want to find the minimum number of semesters required to finish all courses. You can take at most k courses at the same time, but you must complete prerequisites for a course before taking it. Return the minimum number of semesters to finish all courses. If it is impossible to finish all courses, return -1.",
    "topic": "Graph",
    "subtopic": "Topological Sorting",
    "tags": [
      "Graph",
      "Topological Sort",
      "DFS"
    ],
    "input_format": "Two integers n, k and a 2D array relations.",
    "output_format": "An integer representing the minimum number of semesters needed to finish all courses or -1 if not possible.",
    "constraints": [
      "1 <= n <= 15",
      "1 <= k <= n",
      "0 <= relations.length <= 10",
      "1 <= relations[i][0], relations[i][1] <= n",
      "relations[i][0] != relations[i][1]"
    ],
    "examples": [
      {
        "input": "n = 4, k = 2, relations = [[2, 1], [3, 1], [1, 4]]",
        "output": "3",
        "explanation": "In the first semester, you can take courses 2 and 3. In the second semester, you can take course 1, and in the third semester, take course 4."
      },
      {
        "input": "n = 5, k = 2, relations = [[2, 1], [3, 1], [4, 1], [1, 5]]",
        "output": "4",
        "explanation": "You can take courses 2 and 3 in the first semester, course 4 in the second semester, course 1 in the third semester, and course 5 in the fourth semester."
      },
      {
        "input": "n = 2, k = 1, relations = [[1, 2], [2, 1]]",
        "output": "-1",
        "explanation": "There is a cycle; hence it is impossible to finish all courses."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Think about how to represent the prerequisite relationships using a graph.",
      "Consider using topological sorting to determine the order of course completion.",
      "Keep track of courses that can be taken in each semester based on prerequisites."
    ],
    "company": "Stripe"
  }
]