[
  {
    "question_id": "",
    "title": "Redistribute Characters to Make All Strings Equal",
    "description": "Given an array of strings, you need to determine if it's possible to redistribute the characters of the strings such that all strings become equal. If it's possible, return true; otherwise, return false. The characters can be redistributed freely among the strings, but the total number of each character must remain the same.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Character Counting"
    ],
    "input_format": "An array of strings, each string consists of lowercase English letters.",
    "output_format": "A boolean value: true if all strings can be made equal after redistribution; otherwise, false.",
    "constraints": [
      "1 <= strings.length <= 100",
      "1 <= strings[i].length <= 100"
    ],
    "examples": [
      {
        "input": "strings = [\"abc\", \"aabc\", \"bc\"]",
        "output": "true",
        "explanation": "Although the strings are of different lengths, we can redistribute the characters to form \"abc\" in all strings."
      },
      {
        "input": "strings = [\"ab\", \"a\"]",
        "output": "false",
        "explanation": "It's impossible to make both strings equal because one has an extra character that cannot be matched."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the frequency of each character across all strings.",
      "Check if the total frequency of each character can be evenly distributed.",
      "Consider using a hashmap or array to keep track of character counts."
    ],
    "company": "Moengage"
  },
  {
    "question_id": "",
    "title": "Decode Ways",
    "description": "A message containing letters from A-Z can be encoded into numbers using the following mapping: 'A' -> '1', 'B' -> '2', ..., 'Z' -> '26'. Given a string s consisting of digits, return the total number of ways to decode it. An empty string is considered to have one way to decode it.",
    "topic": "Dynamic Programming",
    "subtopic": "String Decoding",
    "tags": [
      "Dynamic Programming",
      "String",
      "Recursion"
    ],
    "input_format": "A string s containing only digits (0-9).",
    "output_format": "An integer representing the total number of ways to decode the string.",
    "constraints": [
      "1 <= s.length <= 100",
      "s[i] is '0' or '1' or '2' or ... or '9'.",
      "The string cannot start with '0'."
    ],
    "examples": [
      {
        "input": "s = \"12\"",
        "output": "2",
        "explanation": "The string can be decoded as 'AB' (1 2) or 'L' (12)."
      },
      {
        "input": "s = \"226\"",
        "output": "3",
        "explanation": "The string can be decoded as 'BZ' (2 26), 'VF' (22 6), or 'BBF' (2 2 6)."
      },
      {
        "input": "s = \"0\"",
        "output": "0",
        "explanation": "The string cannot be decoded because it starts with '0'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the ways to decode the string based on its last one or two characters.",
      "Use dynamic programming to store the results of subproblems."
    ],
    "company": "Moengage"
  }
]