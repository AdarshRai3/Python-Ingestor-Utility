[
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "DFS",
      "BFS"
    ],
    "input_format": "A 2D grid represented as a list of lists of characters where each element is either '1' or '0'.",
    "output_format": "An integer representing the number of islands in the grid.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [['1', '1', '0', '0', '0'], ['1', '1', '0', '0', '0'], ['0', '0', '1', '0', '0'], ['0', '0', '0', '1', '1']]",
        "output": "3",
        "explanation": "There are three islands in the grid."
      },
      {
        "input": "grid = [['1', '0', '1', '1', '0'], ['0', '0', '0', '1', '0'], ['1', '1', '0', '0', '0']]",
        "output": "4",
        "explanation": "There are four islands in the grid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a DFS or BFS approach to explore connected components.",
      "Mark visited lands to prevent counting the same island multiple times."
    ],
    "company": "OKX"
  },
  {
    "question_id": "",
    "title": "Combination Sum IV",
    "description": "Given an integer array 'nums' and an integer 'target', return the number of possible combinations that add up to 'target'. You may use the same number from 'nums' an unlimited number of times. The order of numbers in the combination matters.",
    "topic": "Dynamic Programming",
    "subtopic": "Combinatorial Problems",
    "tags": [
      "Dynamic Programming",
      "Combinatorics",
      "Backtracking"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An integer representing the number of possible combinations that sum up to the target.",
    "constraints": [
      "1 <= nums.length <= 200",
      "1 <= nums[i] <= 1000",
      "0 <= target <= 1000",
      "All elements in nums are unique."
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3], target = 4",
        "output": "7",
        "explanation": "The combinations that sum up to 4 are: [1,1,1,1], [1,1,2], [1,2,1], [1,3], [2,1,1], [2,2], [3,1]."
      },
      {
        "input": "nums = [5], target = 5",
        "output": "1",
        "explanation": "The only combination that sums to 5 is [5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to store intermediate results.",
      "You can use a list to count combinations for all values from 0 to target.",
      "Think about the base case when target is 0."
    ],
    "company": "OKX"
  },
  {
    "question_id": "",
    "title": "Kth Smallest Element in a Sorted Matrix",
    "description": "Given an n x n matrix where each of the rows and columns is sorted in ascending order, find the kth smallest element in the matrix. Note that it is guaranteed that k is always valid, 1 <= k <= n^2.",
    "topic": "Binary Search",
    "subtopic": "Matrix",
    "tags": [
      "Binary Search",
      "Matrix",
      "Sorting"
    ],
    "input_format": "An n x n integer matrix and an integer k.",
    "output_format": "An integer representing the kth smallest element in the matrix.",
    "constraints": [
      "n == matrix.length",
      "n == matrix[i].length",
      "1 <= n <= 300",
      "-10^5 <= matrix[i][j] <= 10^5",
      "1 <= k <= n^2"
    ],
    "examples": [
      {
        "input": "matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8",
        "output": "13",
        "explanation": "The 8th smallest element in the sorted matrix is 13."
      },
      {
        "input": "matrix = [[-5]], k = 1",
        "output": "-5",
        "explanation": "The only element in the matrix is -5, which is also the 1st smallest."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search for efficiency.",
      "Utilize the properties of sorted rows and columns."
    ],
    "company": "OKX"
  },
  {
    "question_id": "",
    "title": "Count Subarrays With Fixed Bounds",
    "description": "Given an integer array nums and two integers minK and maxK, return the number of contiguous subarrays [nums[l], nums[l + 1], ..., nums[r]] such that: \n\n- The minimum value in the subarray is at least minK.\n- The maximum value in the subarray is at most maxK.\n\nA subarray is defined as a contiguous part of an array.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Counting"
    ],
    "input_format": "An integer array nums followed by two integers minK and maxK.",
    "output_format": "An integer representing the count of valid subarrays.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^5",
      "0 <= minK <= maxK <= 10^9",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, 5, 2, 7], minK = 1, maxK = 5",
        "output": "6",
        "explanation": "The valid subarrays are: [1], [1,3], [1,3,5], [3], [3,5], [5]."
      },
      {
        "input": "nums = [1, 1, 1, 1], minK = 1, maxK = 1",
        "output": "10",
        "explanation": "All subarrays contain only the value 1, which is valid."
      },
      {
        "input": "nums = [1, 2, 3, 4], minK = 2, maxK = 3",
        "output": "3",
        "explanation": "The valid subarrays are: [2], [2,3], [3]."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using the two-pointer technique to explore the subarrays.",
      "Track the last positions of minK and maxK to ensure they are in the range while counting."
    ],
    "company": "OKX"
  }
]