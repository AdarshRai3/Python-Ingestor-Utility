[
  {
    "question_id": "",
    "title": "Longest Unequal Adjacent Groups Subsequence II",
    "description": "Given an array of integers, you need to find the length of the longest subsequence such that no two adjacent elements in the subsequence are equal. A subsequence can be derived by deleting some elements of the array without changing the order of the remaining elements. Your goal is to maximize the length of this subsequence while ensuring that every two adjacent elements in the final subsequence are unequal.",
    "topic": "Dynamic Programming",
    "subtopic": "Subsequence",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Subsequence"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest unequal adjacent subsequence.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 2, 3, 4, 1, 1, 5]",
        "output": "5",
        "explanation": "The longest subsequence can be [1, 2, 3, 4, 5] or any variation that respects the unequal adjacent condition."
      },
      {
        "input": "nums = [1, 1, 1, 1]",
        "output": "1",
        "explanation": "The only possible subsequence is [1]. All elements are equal."
      },
      {
        "input": "nums = [1, 3, 2, 3, 1, 3, 2]",
        "output": "6",
        "explanation": "A valid subsequence is [1, 3, 2, 3, 1, 2]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to maintain a count of the last element added to the subsequence.",
      "Consider using a hash map to track the previous counts."
    ],
    "company": "fourkites"
  },
  {
    "question_id": "",
    "title": "Longest Subarray With Maximum Bitwise AND",
    "description": "Given an array of integers, find the length of the longest contiguous subarray where the maximum element in the subarray equals the bitwise AND of all its elements. The bitwise AND operation takes two bits and performs the logical AND operation on each pair of corresponding bits, producing a new bit. Your goal is to determine the length of the longest subarray that meets this criteria.",
    "topic": "Array",
    "subtopic": "Bitwise Operations",
    "tags": [
      "Array",
      "Bitwise",
      "Subarray"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest contiguous subarray with the maximum element equal to the bitwise AND of its elements.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5, 7]",
        "output": "3",
        "explanation": "The subarray [3, 4, 5] has a maximum element 5 and the bitwise AND of its elements is also 5."
      },
      {
        "input": "nums = [5, 5, 5, 5]",
        "output": "4",
        "explanation": "The entire array has the same element, thus the maximum is 5, which is also the result of the bitwise AND of all elements."
      },
      {
        "input": "nums = [7, 6, 5, 4, 3, 2, 1]",
        "output": "1",
        "explanation": "Every single element is a maximum itself when considered as a subarray of length 1, yielding the longest subarray length of 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "The maximum of a subarray can be found using a sliding window technique.",
      "Utilize properties of bitwise AND to evaluate conditions efficiently.",
      "Keep track of the current maximum and the length of the subarray while iterating."
    ],
    "company": "fourkites"
  },
  {
    "question_id": "",
    "title": "Longest Unequal Adjacent Groups Subsequence I",
    "description": "Given an array of integers, you need to find the length of the longest subsequence where no two adjacent integers are equal. A subsequence is defined as a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements. Your task is to return the maximum length of such a subsequence.",
    "topic": "Dynamic Programming",
    "subtopic": "Subsequence",
    "tags": [
      "Dynamic Programming",
      "Subsequence",
      "Array"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest unequal adjacent groups subsequence.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 2, 2, 3, 1, 4]",
        "output": "5",
        "explanation": "The longest subsequence is [1, 2, 3, 1, 4], which has a length of 5."
      },
      {
        "input": "nums = [1, 1, 1, 1]",
        "output": "1",
        "explanation": "In this case, since all elements are the same, the longest subsequence can only include one of them."
      },
      {
        "input": "nums = [1, 2, 3, 4, 5]",
        "output": "5",
        "explanation": "All numbers are different, so the entire array is the longest subsequence."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a two-pointer technique to find the subsequence.",
      "Look for distinct elements while iterating through the array."
    ],
    "company": "fourkites"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the height of walls, compute how much water can be trapped after raining. The walls are positioned at integer indices, and the amount of water that can be trapped at each index depends on the height of the walls to its left and right.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers height where height[i] represents the height of the wall at index i.",
    "output_format": "An integer representing the total amount of trapped water.",
    "constraints": [
      "0 <= height.length <= 2 * 10^4",
      "0 <= height[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The water can be trapped in volumes between the walls in the structure. Visually, the trapped water forms a pattern that results in a total of 6 units of water."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The heights create 9 units of trapped water as the walls on both the left and right of lower heights contain water."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the highest wall on the left and right as you traverse.",
      "Using two pointers can optimize your solution."
    ],
    "company": "fourkites"
  }
]