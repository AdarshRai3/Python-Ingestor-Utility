[
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "Array Manipulation",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices representing the stock prices on different days.",
    "output_format": "An integer representing the maximum profit possible from the transaction.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Maximum profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done, and the max profit is 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider maintaining a variable to track the minimum price observed so far.",
      "For each price, calculate the potential profit and update the maximum profit accordingly."
    ],
    "company": "Garmin"
  },
  {
    "question_id": "",
    "title": "Minimum Cost of Buying Candies With Discount",
    "description": "You are given an array of integers where each integer represents the cost of a candy. You can apply a discount to every third candy purchased, which means you will get the cheapest candy for free. Your task is to determine the minimum total cost of buying all the candies using the discount optimally.",
    "topic": "Greedy",
    "subtopic": "Optimization",
    "tags": [
      "Greedy",
      "Array",
      "Minimization"
    ],
    "input_format": "An integer array costs, where each element represents the cost of a candy.",
    "output_format": "An integer representing the minimum total cost after applying discounts.",
    "constraints": [
      "1 <= costs.length <= 10^5",
      "1 <= costs[i] <= 1000"
    ],
    "examples": [
      {
        "input": "costs = [1, 2, 3, 4, 5, 6]",
        "output": "14",
        "explanation": "The optimal purchase sequence could be (1, 2, 3), (4, 5, 6). The cheapest in each group of three (1 and 4) are free. Total cost = 2 + 3 + 5 + 6 = 14."
      },
      {
        "input": "costs = [10, 20, 30, 40]",
        "output": "60",
        "explanation": "You can buy 10, 20, and 30, getting 10 for free, then buy 40. Total cost = 20 + 30 + 40 = 60."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Sort the costs in descending order.",
      "Iterate through the costs and apply the discount for every third candy."
    ],
    "company": "Garmin"
  },
  {
    "question_id": "",
    "title": "Reverse String",
    "description": "Write a function that reverses the given string. The input string is given as an array of characters, and you must solve the problem in-place (i.e., you should not use an additional array).",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "In-place",
      "Array"
    ],
    "input_format": "An array of characters s representing the input string.",
    "output_format": "An array of characters representing the reversed string.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s[i] is a printable ascii character."
    ],
    "examples": [
      {
        "input": "s = ['h', 'e', 'l', 'l', 'o']",
        "output": "['o', 'l', 'l', 'e', 'h']",
        "explanation": "Reversing the string 'hello' results in 'olleh'."
      },
      {
        "input": "s = ['H', 'a', 'n', 'n', 'a', 'h']",
        "output": "['h', 'a', 'n', 'n', 'a', 'H']",
        "explanation": "Reversing the string 'Hannah' results in 'hannaH'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to use two-pointer technique.",
      "Swap characters in-place."
    ],
    "company": "Garmin"
  },
  {
    "question_id": "",
    "title": "Delete Columns to Make Sorted",
    "description": "Given an array of strings `strs`, you need to delete some columns that will make the remaining columns sorted in non-decreasing order. You need to return the number of columns that you will delete.",
    "topic": "String",
    "subtopic": "Sorting",
    "tags": [
      "String",
      "Sorting",
      "Greedy"
    ],
    "input_format": "An array of strings strs, where 1 <= strs.length <= 100 and 1 <= strs[i].length <= 100.",
    "output_format": "An integer representing the number of columns that need to be deleted.",
    "constraints": [
      "1 <= strs.length <= 100",
      "1 <= strs[i].length <= 100"
    ],
    "examples": [
      {
        "input": "strs = [\"cba\", \"daf\", \"ghi\"]",
        "output": "1",
        "explanation": "Deleting the column 0 (the first column) will result in ['ba', 'af', 'hi'], which is sorted."
      },
      {
        "input": "strs = [\"a\", \"b\"]",
        "output": "0",
        "explanation": "No columns need to be deleted as it is already sorted."
      },
      {
        "input": "strs = [\"zyx\", \"wvu\", \"tsr\"]",
        "output": "3",
        "explanation": "All columns are unsorted, thus all 3 columns need to be deleted."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider comparing the strings column-wise.",
      "You can use a greedy approach to determine which columns to keep."
    ],
    "company": "Garmin"
  },
  {
    "question_id": "",
    "title": "Palindrome Number",
    "description": "Determine if a given number is a palindrome. A palindrome number is a number that remains the same when its digits are reversed. For example, 121 is a palindrome while 123 is not.",
    "topic": "Math",
    "subtopic": "Number Theory",
    "tags": [
      "Palindrome",
      "Math",
      "Number Theory"
    ],
    "input_format": "An integer number x.",
    "output_format": "A boolean indicating whether the number is a palindrome (true) or not (false).",
    "constraints": [
      "-2^31 <= x <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "x = 121",
        "output": "true",
        "explanation": "121 reads the same backward as forward."
      },
      {
        "input": "x = -121",
        "output": "false",
        "explanation": "-121 reads differently backward (121-)."
      },
      {
        "input": "x = 10",
        "output": "false",
        "explanation": "10 reads as 01 backward, which is different."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how to reverse the digits of the number.",
      "Negative numbers cannot be palindromes."
    ],
    "company": "Garmin"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers 'nums' and an integer 'target', return the indices of the two numbers such that they add up to 'target'. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] equals target (2 + 7 = 9)."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] equals target (2 + 4 = 6)."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] equals target (3 + 3 = 6)."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the complements of each number.",
      "Check if the complement exists in the map while traversing the numbers."
    ],
    "company": "Garmin"
  }
]