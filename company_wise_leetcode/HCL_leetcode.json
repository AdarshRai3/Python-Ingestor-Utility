[
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: (1) Open brackets must be closed by the same type of brackets. (2) Open brackets must be closed in the correct order.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s consisting of parentheses.",
    "output_format": "A boolean value indicating if the string s is valid.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The string contains one pair of parentheses that is correctly matched."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "All brackets are closed in the correct order."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The parentheses are not matching."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The order of closing brackets is incorrect."
      },
      {
        "input": "s = '{([])}'",
        "output": "true",
        "explanation": "All brackets are matching and in the correct order."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Check if the closing bracket matches the top of the stack."
    ],
    "company": "HCL"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string 's', find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within a string. Your task is to identify the maximum length of such a substring and return it.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Hashing"
    ],
    "input_format": "A string s, where 1 <= s.length <= 10^5.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of English letters, digits, symbols, and spaces."
    ],
    "examples": [
      {
        "input": "s = 'abcabcbb'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'abc', which has a length of 3."
      },
      {
        "input": "s = 'bbbbb'",
        "output": "1",
        "explanation": "The longest substring without repeating characters is 'b', with a length of 1."
      },
      {
        "input": "s = 'pwwkew'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'wke', with a length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach to track characters.",
      "Use a hash map to remember the last index of each character."
    ],
    "company": "HCL"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers 'nums' and an integer 'target', return the indices of the two numbers such that they add up to 'target'. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers 'nums' and an integer 'target'.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9, so the output is [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6, so the output is [1, 2]."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6, so the output is [0, 1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash table to store the indices of elements.",
      "For each element, check if the complement (target - current element) exists in the hash table."
    ],
    "company": "HCL"
  },
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "You are given two sorted integer arrays nums1 and nums2. Your task is to merge nums2 into nums1 as one sorted array. The number of elements initialized in nums1 and nums2 are m and n respectively. You must do this without using extra space by modifying nums1 in-place.",
    "topic": "Array",
    "subtopic": "Merging Arrays",
    "tags": [
      "Array",
      "Sorting",
      "In-place"
    ],
    "input_format": "Two integer arrays nums1 and nums2, where nums1 has a size of m + n and is initialized with m elements followed by n zeros. nums2 has a size of n.",
    "output_format": "The merged array nums1 in sorted order.",
    "constraints": [
      "0 <= m, n <= 200",
      "1 <= m + n <= 200",
      "-10^9 <= nums1[i], nums2[j] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1, 2, 3, 0, 0, 0], m = 3, nums2 = [2, 5, 6], n = 3",
        "output": "[1, 2, 2, 3, 5, 6]",
        "explanation": "Merging the two arrays gives the sorted array [1, 2, 2, 3, 5, 6]."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "Since nums2 is empty, nums1 remains unchanged."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider filling the nums1 array from the end to avoid overwriting existing elements."
    ],
    "company": "HCL"
  },
  {
    "question_id": "",
    "title": "Longest Common Prefix",
    "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string.",
    "topic": "String",
    "subtopic": "Prefix Matching",
    "tags": [
      "String",
      "Prefix",
      "Array"
    ],
    "input_format": "An array of strings strs, where 1 <= strs.length <= 200 and 0 <= strs[i].length <= 200.",
    "output_format": "A string representing the longest common prefix.",
    "constraints": [
      "1 <= strs.length <= 200",
      "0 <= strs[i].length <= 200"
    ],
    "examples": [
      {
        "input": "strs = [\"flower\", \"flow\", \"flight\"]",
        "output": "\"fl\"",
        "explanation": "The common prefix among the strings is 'fl'."
      },
      {
        "input": "strs = [\"dog\", \"racecar\", \"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the strings."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider the first string as a reference for comparison.",
      "Use vertical scanning to compare characters of each string."
    ],
    "company": "HCL"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "Hash Table",
    "subtopic": "String Manipulation",
    "tags": [
      "Hash Table",
      "String",
      "Grouping"
    ],
    "input_format": "An array of strings strs, where 1 <= strs.length <= 100 and 0 <= strs[i].length <= 100.",
    "output_format": "A list of lists of strings, where each sublist contains words that are anagrams of each other.",
    "constraints": [
      "1 <= strs.length <= 100",
      "0 <= strs[i].length <= 100",
      "All input strings are in lowercase."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "explanation": "The words 'eat', 'tea', and 'ate' are anagrams of each other, and 'tan' and 'nat' are anagrams of each other."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "The empty string is considered an anagram of itself."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "The single character 'a' is an anagram of itself."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to group the strings by their sorted character sequence.",
      "Consider using tuples for the key in your hash map."
    ],
    "company": "HCL"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an array of integers nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Hash Table"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of unique triplets that sum up to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The triplets that sum up to zero are [-1, -1, 2] and [-1, 0, 1]."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "There are no numbers to form triplets."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the array first to simplify finding triplets.",
      "Use two pointers to find pairs that sum to the negative of a chosen number."
    ],
    "company": "HCL"
  },
  {
    "question_id": "",
    "title": "Palindrome Number",
    "description": "Given an integer x, return true if x is a palindrome, and false otherwise. A palindrome is a number that remains the same when its digits are reversed.",
    "topic": "Mathematics",
    "subtopic": "Number Theory",
    "tags": [
      "Palindrome",
      "Integer",
      "Mathematics"
    ],
    "input_format": "An integer x.",
    "output_format": "A boolean value indicating if x is a palindrome.",
    "constraints": [
      "-2^31 <= x <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "121",
        "output": "true",
        "explanation": "121 reversed is still 121, hence it is a palindrome."
      },
      {
        "input": "-121",
        "output": "false",
        "explanation": "-121 reversed is 121-, which is not equal to -121."
      },
      {
        "input": "10",
        "output": "false",
        "explanation": "10 reversed is 01, which is not equal to 10."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider converting the number to a string and compare it with its reverse.",
      "You can also think about the mathematical properties of palindromes."
    ],
    "company": "HCL"
  },
  {
    "question_id": "",
    "title": "Reverse String",
    "description": "Write a function that reverses a given string. The input string is given as an array of characters. You must do this by modifying the input array in-place with O(1) extra memory. Do not allocate extra space for another array.",
    "topic": "String",
    "subtopic": "Two Pointers",
    "tags": [
      "String",
      "In-place",
      "Two Pointers"
    ],
    "input_format": "An array of characters, represented as a list of single-character strings.",
    "output_format": "The same array of characters after reversing.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s[i] is a printable ascii character."
    ],
    "examples": [
      {
        "input": "s = ['h', 'e', 'l', 'l', 'o']",
        "output": "['o', 'l', 'l', 'e', 'h']",
        "explanation": "Reversing the input array results in ['o', 'l', 'l', 'e', 'h']."
      },
      {
        "input": "s = ['H', 'a', 'n', 'n', 'a', 'h']",
        "output": "['h', 'a', 'n', 'n', 'a', 'H']",
        "explanation": "Reversing the input array results in ['h', 'a', 'n', 'n', 'a', 'H']."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to swap characters from both ends towards the center.",
      "Think about how you can modify the input array without using additional space."
    ],
    "company": "HCL"
  }
]