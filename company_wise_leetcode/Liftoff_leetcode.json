[
  {
    "question_id": "",
    "title": "Diagonal Traverse",
    "description": "Given a 2D matrix of integers, return all elements of the matrix in a diagonal order, starting from the top-left element and moving towards the bottom-right element. You should traverse the matrix in such a way that you first go from the top-left to the bottom-right along the diagonals. If you reach the boundary of the matrix, you need to change direction to traverse in the opposite diagonal.",
    "topic": "Array",
    "subtopic": "Matrix Traversal",
    "tags": [
      "Array",
      "Matrix",
      "Traversal"
    ],
    "input_format": "A 2D integer matrix 'matrix' with dimensions m x n.",
    "output_format": "An array of integers representing the elements of the matrix traversed in diagonal order.",
    "constraints": [
      "1 <= m, n <= 100",
      "-10^5 <= matrix[i][j] <= 10^5"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "[1, 2, 4, 7, 5, 3, 6, 8, 9]",
        "explanation": "The diagonal traversal of the matrix goes: 1 -> 2 -> 4 -> 7 -> 5 -> 3 -> 6 -> 8 -> 9."
      },
      {
        "input": "matrix = [[1]]",
        "output": "[1]",
        "explanation": "The matrix consists of a single element 1."
      },
      {
        "input": "matrix = [[1, 2], [3, 4]]",
        "output": "[1, 2, 3, 4]",
        "explanation": "The traversal is: 1 -> 2 -> 3 -> 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how you can control the direction of traversal using row and column indices.",
      "You might want to utilize a variable to switch the direction at the edges of the matrix."
    ],
    "company": "Liftoff"
  },
  {
    "question_id": "",
    "title": "Random Pick with Weight",
    "description": "You are given a list of weights where each weight corresponds to an index. You need to implement a method that picks an index randomly, where the probability of picking an index is proportional to its weight. For example, if weights = [1, 3], the index 0 has a 1/4 chance of being picked, and index 1 has a 3/4 chance since 1 + 3 = 4. Your task is to create a RandomSelector class that supports the following method: \\n - pick(): returns a randomly selected index based on the weights.",
    "topic": "Random",
    "subtopic": "Weighted Random Selection",
    "tags": [
      "Random",
      "Probability",
      "Design"
    ],
    "input_format": "An array of integers representing weights.",
    "output_format": "An integer representing the randomly picked index.",
    "constraints": [
      "1 <= weights.length <= 10^4",
      "1 <= weights[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "weights = [1, 3, 5]",
        "output": "1",
        "explanation": "Index 1 has the highest weight and thus is more likely to be selected."
      },
      {
        "input": "weights = [1, 1, 1]",
        "output": "0",
        "explanation": "All indices have the same weight, so each index has an equal probability of being selected."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using prefix sums to optimize index selection.",
      "Randomly select a value between 0 and the sum of weights."
    ],
    "company": "Liftoff"
  },
  {
    "question_id": "",
    "title": "N-Queens II",
    "description": "The N-Queens II problem is a variant of the classic N-Queens problem. Given an integer n, return the number of distinct solutions to the n-queens puzzle, which asks how many ways you can place n queens on an n x n chessboard so that no two queens threaten each other. A queen can attack any piece in the same row, column, or diagonal.",
    "topic": "Backtracking",
    "subtopic": "N-Queens",
    "tags": [
      "Backtracking",
      "Recursion",
      "Chess"
    ],
    "input_format": "An integer n representing the size of the chessboard.",
    "output_format": "An integer representing the number of distinct solutions to the n-queens puzzle.",
    "constraints": [
      "1 <= n <= 15"
    ],
    "examples": [
      {
        "input": "n = 4",
        "output": "2",
        "explanation": "The two distinct solutions to the 4-queens puzzle are: 1.  .Q..  ...Q  Q...  ..Q.  2.  ..Q.  Q...  ...Q  .Q.."
      },
      {
        "input": "n = 1",
        "output": "1",
        "explanation": "There is only one way to place one queen on a 1x1 board."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a backtracking approach.",
      "Keep track of columns and diagonals occupied by the queens."
    ],
    "company": "Liftoff"
  },
  {
    "question_id": "",
    "title": "Diagonal Traverse II",
    "description": "Given a 2D matrix, return all elements of the matrix in diagonal order starting from the top-left corner and moving down to the bottom-right corner. You need to collect the elements in such a way that you traverse along diagonals from the top to the bottom of the matrix. Handle cases with varying row lengths accordingly.",
    "topic": "Matrix",
    "subtopic": "Diagonal Traversal",
    "tags": [
      "Matrix",
      "Traversal",
      "Diagonal"
    ],
    "input_format": "A 2D list of integers representing the matrix.",
    "output_format": "A list of integers representing the elements in diagonal order.",
    "constraints": [
      "1 <= matrix.length <= 100",
      "1 <= matrix[i].length <= 100",
      "-10^5 <= matrix[i][j] <= 10^5"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "[1, 2, 4, 7, 5, 3, 6, 8, 9]",
        "explanation": "The diagonals are: 1, 2, 4, 7 and 5; and then 3, 6, 8, 9."
      },
      {
        "input": "matrix = [[1, 2], [3, 4], [5, 6]]",
        "output": "[1, 2, 3, 5, 4, 6]",
        "explanation": "The diagonals are: 1, 2; then 3; and then 5, 4, 6."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a dictionary to store lists of diagonal elements.",
      "Keep track of the sum of indices to identify the correct diagonal."
    ],
    "company": "Liftoff"
  }
]