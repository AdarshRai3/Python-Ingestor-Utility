[
  {
    "question_id": "",
    "title": "Count Operations to Obtain Zero",
    "description": "You are given two integers, num1 and num2. In one operation, you can subtract the smaller number from the larger number. Your task is to count the total number of operations required to make either of the numbers zero. If both numbers are initially zero, return zero operations. Implement a function that returns this count.",
    "topic": "Math",
    "subtopic": "Basic Operations",
    "tags": [
      "Math",
      "Operations",
      "Count"
    ],
    "input_format": "Two integers num1 and num2.",
    "output_format": "An integer representing the total number of operations required to make either number zero.",
    "constraints": [
      "0 <= num1, num2 <= 10^4"
    ],
    "examples": [
      {
        "input": "num1 = 5, num2 = 3",
        "output": "5",
        "explanation": "Operations: (5, 3) -> (2, 3) -> (2, 1) -> (1, 1) -> (0, 1) -> (0, 0). Total operations: 5"
      },
      {
        "input": "num1 = 0, num2 = 0",
        "output": "0",
        "explanation": "Both numbers are already zero, so no operation is required."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the number of operations.",
      "Use a loop until one of the numbers is zero."
    ],
    "company": "PayU"
  },
  {
    "question_id": "",
    "title": "Longest Repeating Character Replacement",
    "description": "Given a string s that consists of only uppercase English letters, you can perform at most k replacement operations. A replacement operation means choosing any character in s and changing it to any other uppercase English letter. The goal is to maximize the length of the longest substring containing all the same letters after performing at most k replacements. Return the length of the longest substring after performing the operations.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Two Pointers"
    ],
    "input_format": "A string `s` consisting of uppercase English letters and an integer `k` representing the maximum number of replacements.",
    "output_format": "An integer representing the length of the longest substring after performing at most k replacements.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "0 <= k <= s.length"
    ],
    "examples": [
      {
        "input": "s = 'AABABBA', k = 1",
        "output": "4",
        "explanation": "You can replace one 'B' with an 'A', making the substring 'AAAA' which has length 4."
      },
      {
        "input": "s = 'ABBABABBA', k = 2",
        "output": "5",
        "explanation": "You can change two 'B's to 'A's, making the substring 'AAAAA' which has length 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider a sliding window approach to keep track of the character counts.",
      "Use a hashmap to store the frequency of characters in the current window."
    ],
    "company": "PayU"
  }
]