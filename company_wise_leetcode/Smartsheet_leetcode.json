[
  {
    "question_id": "",
    "title": "Top K Frequent Words",
    "description": "Given a list of strings 'words' and an integer 'k', return the 'k' most frequent words in the list. The answer should be ordered by frequency from highest to lowest. If two words have the same frequency, order them by their lexicographical order. You may assume 'k' is always valid, 1 \u2264 k \u2264 number of unique elements in the list.",
    "topic": "Hash Table",
    "subtopic": "Frequency Count",
    "tags": [
      "Hash Table",
      "Sorting",
      "Count"
    ],
    "input_format": "A list of strings words and an integer k.",
    "output_format": "A list of the k most frequent words, sorted by frequency and lexicographical order.",
    "constraints": [
      "1 <= words.length <= 10000",
      "1 <= k <= number of unique words in words",
      "Each word consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": {
          "words": [
            "i",
            "love",
            "leetcode",
            "i",
            "love",
            "coding"
          ],
          "k": 2
        },
        "output": [
          "i",
          "love"
        ],
        "explanation": "The word 'i' appears 2 times and 'love' appears 2 times. Both have the same frequency but 'i' comes before 'love' lexicographically."
      },
      {
        "input": {
          "words": [
            "the",
            "day",
            "is",
            "sunny",
            "the",
            "the",
            "sunny",
            "is",
            "is"
          ],
          "k": 4
        },
        "output": [
          "the",
          "is",
          "sunny",
          "day"
        ],
        "explanation": "The frequencies are: 'the' -> 3, 'is' -> 3, 'sunny' -> 2, 'day' -> 1. The top 4 are ['the', 'is', 'sunny', 'day']."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hashmap to count the frequency of each word.",
      "Consider using a heap or sorting mechanism to retrieve the top k elements efficiently."
    ],
    "company": "Smartsheet"
  },
  {
    "question_id": "",
    "title": "Max Area of Island",
    "description": "You are given a 2D grid of zeros and ones. The 1s form islands, and the 0s represent water. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. Your task is to find the maximum area of an island in the given grid. If there is no island, return 0.",
    "topic": "Matrix",
    "subtopic": "Depth-First Search",
    "tags": [
      "Matrix",
      "DFS",
      "Flood Fill"
    ],
    "input_format": "A 2D grid `grid` of size m x n.",
    "output_format": "An integer representing the maximum area of an island.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 50",
      "grid[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "grid = [[0,0,0,0,0],[0,1,1,0,0],[0,1,1,1,0],[0,0,0,0,0]]",
        "output": "5",
        "explanation": "The largest island has area 5."
      },
      {
        "input": "grid = [[0,0,0,0],[0,0,0,0],[0,0,0,0]]",
        "output": "0",
        "explanation": "There are no islands in this grid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a depth-first search to explore each island's area.",
      "Keep track of visited nodes to avoid counting the same island multiple times."
    ],
    "company": "Smartsheet"
  },
  {
    "question_id": "",
    "title": "Top K Frequent Elements",
    "description": "Given a non-empty array of integers, return the k most frequent elements. You may assume that the k is always valid, and that the answer is guaranteed to be unique. The order of output does not matter.",
    "topic": "Hash Table",
    "subtopic": "Frequency Counting",
    "tags": [
      "Hash Table",
      "Sorting",
      "Counting"
    ],
    "input_format": "An array of integers where length of the array is n and k is a positive integer less than or equal to n.",
    "output_format": "A list of the k most frequent elements in the array.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= nums[i] < 10^4",
      "1 <= k <= number of unique elements"
    ],
    "examples": [
      {
        "input": "nums = [1,1,1,2,2,3], k = 2",
        "output": "[1, 2]",
        "explanation": "1 is the most frequent element, appearing 3 times. 2 is the second most frequent, appearing 2 times."
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]",
        "explanation": "Since there is only one element, it is the most frequent."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to count frequencies.",
      "Use a heap or sorting to find the top k elements."
    ],
    "company": "Smartsheet"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "Hash Table",
    "subtopic": "Grouping",
    "tags": [
      "Hash Table",
      "String",
      "Sorting"
    ],
    "input_format": "An array of strings strs containing the words to be grouped.",
    "output_format": "A list of lists, where each sublist contains the grouped anagrams.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "0 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"ate\",\"eat\",\"tea\"],[\"nat\",\"tan\"],[\"bat\"]]",
        "explanation": "The anagrams grouped together are: ['eat', 'tea', 'ate'] and ['nat', 'tan'] and ['bat']."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "There's only one empty string which is an anagram of itself."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "The string 'a' is the only input, as it forms an anagram of itself."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the characters of each string.",
      "Use a hash map to group the sorted strings."
    ],
    "company": "Smartsheet"
  }
]