[
  {
    "question_id": "",
    "title": "Roman to Integer",
    "description": "Given a string representing a Roman numeral, convert it to an integer. Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M. For example, the numeral 'II' is 2, and 'XIII' is 13. The numeral 'IV' is 4 because the 'I' is before the 'V'. Symbol values are as follows: I=1, V=5, X=10, L=50, C=100, D=500, M=1000. For examples, 'MCMXCIV' is 1994.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Mathematics",
      "Conversion"
    ],
    "input_format": "A string representing a Roman numeral.",
    "output_format": "An integer representing the converted integer value.",
    "constraints": [
      "1 <= s.length <= 15",
      "s consists of the characters I, V, X, L, C, D, and M."
    ],
    "examples": [
      {
        "input": "s = 'III'",
        "output": "3",
        "explanation": "The numeral 'III' is 3."
      },
      {
        "input": "s = 'IV'",
        "output": "4",
        "explanation": "The numeral 'IV' is 4, as 'I' is before 'V'."
      },
      {
        "input": "s = 'MCMXCIV'",
        "output": "1994",
        "explanation": "'M' is 1000, 'CM' is 900, 'XC' is 90, 'IV' is 4. Thus, 1000 + 900 + 90 + 4 = 1994."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider iterating through the string from left to right.",
      "If a smaller numeral appears before a larger numeral, subtract its value."
    ],
    "company": "DeltaX"
  },
  {
    "question_id": "",
    "title": "Combination Sum II",
    "description": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. Each number in candidates may only be used once in the combination. The solution set must not contain duplicate combinations.",
    "topic": "Backtracking",
    "subtopic": "Combination Sum",
    "tags": [
      "Array",
      "Backtracking",
      "Combination"
    ],
    "input_format": "An array of integers candidates and an integer target.",
    "output_format": "A list of unique combinations where the sum of the numbers equals target.",
    "constraints": [
      "1 <= candidates.length <= 100",
      "10^0 <= candidates[i] <= 10^7",
      "target <= 10^7"
    ],
    "examples": [
      {
        "input": "candidates = [10, 1, 2, 7, 6, 1, 5], target = 8",
        "output": "[[1, 1, 6], [1, 2, 5], [2, 6], [1, 7]]",
        "explanation": "The combinations that sum to 8 are [1, 1, 6], [1, 2, 5], [2, 6], and [1, 7]."
      },
      {
        "input": "candidates = [2, 5, 2, 1, 2], target = 5",
        "output": "[[1, 2, 2], [5]]",
        "explanation": "The unique combinations that sum to 5 are [1, 2, 2] and [5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using backtracking to explore combinations.",
      "Make sure to skip duplicates to avoid repetitive combinations."
    ],
    "company": "DeltaX"
  },
  {
    "question_id": "",
    "title": "Longest Consecutive Sequence",
    "description": "Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your algorithm should run in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hash Map",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest consecutive elements sequence.",
    "constraints": [
      "0 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [100, 4, 200, 1, 3, 2]",
        "output": "4",
        "explanation": "The longest consecutive elements sequence is [1, 2, 3, 4] with length 4."
      },
      {
        "input": "nums = [0, 0, 1, 2, 2]",
        "output": "3",
        "explanation": "The longest consecutive elements sequence is [0, 1, 2] with length 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about using a hash set to store the elements.",
      "Iterate through the array and check for consecutive elements."
    ],
    "company": "DeltaX"
  },
  {
    "question_id": "",
    "title": "Different Ways to Add Parentheses",
    "description": "Given a string expression containing numbers and operators (+, -, *), you need to return all the possible results from evaluating all the different possible ways to add parentheses to the expression. The evaluation should follow the standard operator precedence (multiplication before addition and subtraction).",
    "topic": "Dynamic Programming",
    "subtopic": "Recursion and Memoization",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Mathematical Operations"
    ],
    "input_format": "A string expression, 'expression', consisting of numbers and operators.",
    "output_format": "A list of integers representing all the possible results from the evaluations.",
    "constraints": [
      "1 <= expression.length <= 20",
      "The expression contains digits and the operators +, -, *."
    ],
    "examples": [
      {
        "input": "expression = '2-1-1'",
        "output": "[0, 2]",
        "explanation": "The expression can be evaluated as (2 - 1) - 1 = 0 and as 2 - (1 - 1) = 2."
      },
      {
        "input": "expression = '2*3-4*5'",
        "output": "[-34, -14, -10, -10, 6]",
        "explanation": "Different parenthetical groupings lead to different results."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider breaking the expression at each operator to evaluate both sides.",
      "Use memoization to store results of sub-expressions to avoid redundant calculations."
    ],
    "company": "DeltaX"
  }
]