[
  {
    "question_id": "",
    "title": "Minimum Number of Steps to Make Two Strings Anagram",
    "description": "Given two strings s and t, return the minimum number of steps required to make s and t anagram of each other. In one step, you can delete exactly one character in either string.",
    "topic": "String",
    "subtopic": "Anagram",
    "tags": [
      "String",
      "Anagram",
      "Counting"
    ],
    "input_format": "Two strings s and t, where 1 <= s.length, t.length <= 10^5.",
    "output_format": "An integer representing the minimum number of steps required to make the two strings anagrams.",
    "constraints": [
      "1 <= s.length, t.length <= 10^5",
      "s and t consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"anagram\", t = \"manga\"",
        "output": "3",
        "explanation": "Remove 'a', 'n', and 'g' from 'anagram' to make it an anagram of 'manga'."
      },
      {
        "input": "s = \"xxy\", t = \"yyz\"",
        "output": "3",
        "explanation": "Remove 'x' from 'xxy' and one 'y' from 'yyz' to make them anagrams."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Count the frequency of each character in both strings.",
      "The difference in the count of each character will help determine deletions."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Minimum Window Substring",
    "description": "Given two strings s and t, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\". The answer is guaranteed to be unique.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Hash Map"
    ],
    "input_format": "A string s representing the larger string and a string t representing the target string.",
    "output_format": "A string representing the minimum window substring, or an empty string if no such substring exists.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "0 <= t.length <= 10^5",
      "s and t consist of uppercase and lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"ADOBECODEBANC\", t = \"ABC\"",
        "output": "\"BANC\"",
        "explanation": "The smallest window in s that contains all the characters of t is \"BANC\"."
      },
      {
        "input": "s = \"a\", t = \"a\"",
        "output": "\"a\"",
        "explanation": "The substring \"a\" is the smallest window containing the character 'a'."
      },
      {
        "input": "s = \"a\", t = \"aa\"",
        "output": "\"\"",
        "explanation": "There is no window in s that can cover all characters of t (two 'a's)."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a hash map to count characters in t.",
      "Expand and contract the window using two pointers.",
      "Keep track of matched characters and the minimum length."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Asteroid Collision",
    "description": "We have an array of integers representing asteroids in a row. Each asteroid is a positive or negative integer, where the absolute value represents its size, and the sign represents its direction (positive for right and negative for left). An asteroid crashes with another asteroid when they move toward each other. The smaller asteroid will explode, and the larger one will survive. If both asteroids are of the same size, both will explode. Write a function to determine the state of asteroids after all collisions.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Collision"
    ],
    "input_format": "An array of integers representing the asteroids.",
    "output_format": "An array of integers representing the remaining asteroids after all collisions.",
    "constraints": [
      "1 <= asteroids.length <= 10^4",
      "-10^4 <= asteroids[i] <= 10^4",
      "The input array does not contain more than one zero."
    ],
    "examples": [
      {
        "input": "[5, 10, -5]",
        "output": "[5, 10]",
        "explanation": "The -5 asteroid collides with the 10. Since 10 is larger, -5 explodes, leaving 5 and 10."
      },
      {
        "input": "[8, -8]",
        "output": "[]",
        "explanation": "Both asteroids are of the same size, thus both explode."
      },
      {
        "input": "[10, 2, -5]",
        "output": "[10]",
        "explanation": "2 collides with -5 and then explodes. Thus, only 10 remains."
      },
      {
        "input": "[1, 2, 3, -4]",
        "output": "[1, 2, 3]",
        "explanation": "The -4 collides with 3 and explodes, leaving the others."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about using a stack to keep track of the surviving asteroids.",
      "Consider the scenarios when a positive asteroid collides with a negative asteroid."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Longest Mountain in Array",
    "description": "Given an array of integers, you need to find the length of the longest mountain. A mountain is defined as a sequence of elements that first strictly increases to a peak, then strictly decreases. You can assume that the array has at least 3 elements.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Mountain",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums, where 1 <= nums.length <= 10^4.",
    "output_format": "An integer representing the length of the longest mountain.",
    "constraints": [
      "3 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [2, 1, 1, 5, 6, 2, 3, 1]",
        "output": "5",
        "explanation": "The longest mountain is [1, 5, 6, 2, 3]."
      },
      {
        "input": "nums = [2, 2, 2]",
        "output": "0",
        "explanation": "There are no mountains in this array."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a single pass to identify peaks.",
      "Remember to check that there are increasing then decreasing sequences."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Degree of an Array",
    "description": "Given a non-empty array of integers, the degree of an array is defined as the maximum frequency of any element in the array. You need to find the smallest size of a contiguous subarray that has the same degree as the entire array. If the array has multiple such subarrays, return the length of the shortest one.",
    "topic": "Array",
    "subtopic": "Frequency Count",
    "tags": [
      "Array",
      "Frequency",
      "Hashmap"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the smallest subarray with the same degree as the array.",
    "constraints": [
      "1 <= nums.length <= 50,000",
      "0 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 2, 3, 1]",
        "output": "2",
        "explanation": "The degree of the array is 2 (the number 2 appears twice). The shortest subarray that has the same degree is [2, 2]."
      },
      {
        "input": "nums = [1, 2, 2, 3, 1, 4, 2]",
        "output": "6",
        "explanation": "The degree of the array is 3 (the number 2 appears three times). The shortest subarray with the same degree is [2, 2, 3, 1, 4, 2]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the frequency of each element.",
      "Track the first and last position of each element."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Maximum Number of Non-overlapping Palindrome Substrings",
    "description": "Given a string s, return the maximum number of non-overlapping palindrome substrings. A substring is define as a contiguous sequence of characters within the string, and a palindrome is a string that reads the same backward as forward. You may consider each individual character as a palindrome substring.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A single string s consisting of lowercase English letters.",
    "output_format": "An integer representing the maximum number of non-overlapping palindrome substrings.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "ababa",
        "output": "3",
        "explanation": "The substrings 'a', 'b', 'aba', and 'bab' are palindromes. 'aba' and 'bab' can be chosen as non-overlapping, hence the maximum count is 3."
      },
      {
        "input": "aaa",
        "output": "1",
        "explanation": "The entire string 'aaa' is a palindrome, but we can only count it as one non-overlapping substring."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider dynamic programming approaches to find all palindromic substrings.",
      "Use a supporting array to track whether a substring is a palindrome."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Insert Delete GetRandom O(1)",
    "description": "Implement a data structure that supports the following operations: insert, delete, and getRandom. The operations should be done in O(1) average time complexity. The data structure should allow duplicates to be inserted, but during deletion, only a single instance should be removed. The getRandom function should return a random element from the current set of elements.",
    "topic": "Design",
    "subtopic": "Data Structures",
    "tags": [
      "Design",
      "Data Structure",
      "Randomness"
    ],
    "input_format": "The operations will be given as a list of tuples. Each tuple consists of an operation and the value (for insert and delete), or just the operation for getRandom.",
    "output_format": "Return a list of values for each getRandom operation.",
    "constraints": [
      "1 <= operations.length <= 10^4",
      "All values in the operations are integers."
    ],
    "examples": [
      {
        "input": "[('insert', 1), ('insert', 2), ('getRandom',), ('delete', 1), ('getRandom',)]",
        "output": "[2, 2]",
        "explanation": "After inserting 1 and 2, getRandom could return 1 or 2. After deleting 1, getRandom should return 2."
      },
      {
        "input": "[('insert', 1), ('insert', 1), ('getRandom',), ('delete', 1), ('getRandom',)]",
        "output": "[1, 1]",
        "explanation": "Inserting 1 twice allows getRandom to return 1 both times, even after deleting one 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to store the value with its indices.",
      "Using an array/list can help to return a random element quickly."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Roman to Integer",
    "description": "Given a string representing a Roman numeral, convert it to an integer. The input string is guaranteed to be a valid Roman numeral in the range from 1 to 3999.",
    "topic": "String",
    "subtopic": "Parsing",
    "tags": [
      "String",
      "Parsing",
      "Mathematics"
    ],
    "input_format": "A string s representing a Roman numeral.",
    "output_format": "An integer representing the converted value of the Roman numeral.",
    "constraints": [
      "1 <= s.length <= 15",
      "The input will only contain valid Roman numerals."
    ],
    "examples": [
      {
        "input": "s = 'III'",
        "output": "3",
        "explanation": "The Roman numeral 'III' is equal to 3."
      },
      {
        "input": "s = 'IV'",
        "output": "4",
        "explanation": "The Roman numeral 'IV' represents 4."
      },
      {
        "input": "s = 'IX'",
        "output": "9",
        "explanation": "The Roman numeral 'IX' equals 9."
      },
      {
        "input": "s = 'LVIII'",
        "output": "58",
        "explanation": "'L' is 50, 'V' is 5, 'III' is 3. Therefore, 50 + 5 + 3 = 58."
      },
      {
        "input": "s = 'MCMXCIV'",
        "output": "1994",
        "explanation": "'M' is 1000, 'CM' is 900, 'XC' is 90, and 'IV' is 4, which totals 1994."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a mapping of Roman numerals to their integer values.",
      "Consider subtraction rules for numerals like IV and IX."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers 'nums' and an integer 'target', return the indices of the two numbers such that they add up to 'target'. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An integer array 'nums' where 2 <= nums.length <= 10^4 and an integer 'target'.",
    "output_format": "An array of two integers representing the indices of the two numbers such that they add up to 'target'.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "The solution will always exist."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "Because nums[0] + nums[1] = 2 + 7 = 9, we return [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "Because nums[1] + nums[2] = 2 + 4 = 6, we return [1, 2]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash table to keep track of the indices of the numbers."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "DFS",
      "BFS"
    ],
    "input_format": "A 2D grid of size m x n where each cell is either '1' or '0'.",
    "output_format": "An integer representing the number of islands.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [['1','1','1','1','0'], ['1','1','0','1','0'], ['1','1','0','0','0'], ['0','0','0','0','0']]",
        "output": "1",
        "explanation": "All '1's are connected forming one island."
      },
      {
        "input": "grid = [['1','1','0','0','0'], ['1','1','0','0','0'], ['0','0','1','0','0'], ['0','0','0','1','1']]",
        "output": "3",
        "explanation": "There are three islands - one formed by the first two rows of '1's, another by the single '1' in the middle, and the last two '1's on the bottom right corner."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth-First Search (DFS) to explore the islands."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Flatten a Multilevel Doubly Linked List",
    "description": "You are given a pointer to the head of a multilevel doubly linked list, where each node has a next pointer, a previous pointer and a child pointer. The child pointer may point to a separate doubly linked list, which may have its own children, and so on. You need to flatten the list so that all the nodes appear in a single-level, doubly linked list. The flattened list should be in the same order as it appears in the multilevel list.",
    "topic": "Linked List",
    "subtopic": "Doubly Linked List",
    "tags": [
      "Linked List",
      "Doubly Linked List",
      "Flattening"
    ],
    "input_format": "A reference to the head node of a multilevel doubly linked list.",
    "output_format": "A reference to the head of the flattened doubly linked list.",
    "constraints": [
      "The number of nodes in the list is at most 2000.",
      "Each node has a unique value.",
      "Node value is between 1 and 10^5."
    ],
    "examples": [
      {
        "input": "List: 1 <-> 2 <-> 3  \n          |      |  \n          4      5 <-> 6  \n          |  \n          7",
        "output": "1 <-> 2 <-> 3 <-> 4 <-> 7 <-> 5 <-> 6",
        "explanation": "The nodes are flattened in the same order they appear, including child nodes."
      },
      {
        "input": "List: 1  \n          |  \n          2 <-> 3  \n              |  \n              4",
        "output": "1 <-> 2 <-> 3 <-> 4",
        "explanation": "All nodes are connected in a single level, maintaining order."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of nodes.",
      "Iterate through the list while pushing child nodes onto the stack."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Subarray Product Less Than K",
    "description": "Given an array of positive integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is less than k.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Product"
    ],
    "input_format": "An array of positive integers nums, and an integer k.",
    "output_format": "An integer representing the number of contiguous subarrays where the product of all elements is less than k.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "1 <= nums[i] <= 100",
      "0 <= k <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [10, 5, 2, 6], k = 100",
        "output": "8",
        "explanation": "The subarrays are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [10, 5, 2]. All products are less than 100."
      },
      {
        "input": "nums = [1, 2, 3], k = 0",
        "output": "0",
        "explanation": "No product of subarrays can be less than 0 since all elements are positive."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach.",
      "Keep track of the product as you expand or shrink the window."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Meeting Rooms II",
    "description": "Given an array of meeting time intervals where intervals[i] = [start_i, end_i], return the minimum number of conference rooms required to hold all the meetings. A conference room can only be occupied by one meeting at a time. If a meeting ends at the same time another starts, the room can be reused.",
    "topic": "Greedy",
    "subtopic": "Interval Scheduling",
    "tags": [
      "Greedy",
      "Interval",
      "Sorting"
    ],
    "input_format": "An array of arrays where each inner array contains two integers representing the start and end times of a meeting.",
    "output_format": "An integer representing the minimum number of conference rooms required.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "0 <= start_i < end_i <= 10^6"
    ],
    "examples": [
      {
        "input": "intervals = [[0, 30], [5, 10], [15, 20]]",
        "output": "2",
        "explanation": "At least two rooms are needed: one for the meeting [0, 30] and one for the meeting [5, 10]."
      },
      {
        "input": "intervals = [[7, 10], [2, 4]]",
        "output": "1",
        "explanation": "Only one room is needed for both meetings as they do not overlap."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a priority queue to manage the end times of meetings."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. It should support the following operations: get(key) and put(key, value). The get method retrieves the value of the key if the key exists in the cache. Otherwise, it returns -1. The put method will insert the key-value pair into the cache. If the number of keys exceeds the capacity of the cache, it should invalidate the least recently used key.",
    "topic": "Design",
    "subtopic": "Cache",
    "tags": [
      "Cache",
      "Data Structures",
      "Design"
    ],
    "input_format": "The cache is initialized with a positive capacity.",
    "output_format": "For the get operation, return the value associated with the key, or -1 if not found. For the put operation, there is no return value.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10000",
      "0 <= value <= 10000",
      "The functions get and put are called at most 2 * 10^4 times."
    ],
    "examples": [
      {
        "input": "LRUCache cache = new LRUCache(2);\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);\ncache.put(3, 3);\ncache.get(2);\ncache.put(4, 4);\ncache.get(1);\ncache.get(3);\ncache.get(4);",
        "output": "1,-1,3,4",
        "explanation": "In this example, the cache has a capacity of 2. After putting 1 and 2, calling get(1) returns 1. After putting 3, it evicts key 2. get(2) returns -1, and keys 1, 3, and 4 return their respective values."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a combination of a hash map and a doubly linked list.",
      "Consider how to efficiently track the order of recently used keys."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Merge k Sorted Lists",
    "description": "Given an array of k linked lists, each linked list is sorted in ascending order. Merge all the linked lists into one sorted linked list and return it. The linked list should be made by splicing together the nodes of the given lists.",
    "topic": "Linked List",
    "subtopic": "Merging",
    "tags": [
      "Linked List",
      "Merge",
      "Sorting"
    ],
    "input_format": "An array of k linked lists, where each linked list is represented by the head node.",
    "output_format": "A single linked list that contains all the nodes from the input lists, sorted in ascending order.",
    "constraints": [
      "0 <= k <= 10^4",
      "0 <= List[i].length <= 500",
      "-10^4 <= Node.val <= 10^4"
    ],
    "examples": [
      {
        "input": "[1->4->5, 1->3->4, 2->6]",
        "output": "1->1->2->3->4->4->5->6",
        "explanation": "The merged sorted linked list is formed by combining and sorting all elements from the given lists."
      },
      {
        "input": "[]",
        "output": "",
        "explanation": "An empty input leads to an empty output."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a priority queue to efficiently retrieve the next minimum node.",
      "Consider edge cases such as empty lists."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Palindromic Substrings",
    "description": "Given a string s, return the number of distinct palindromic substrings in the string. A substring is palindromic if it reads the same backward as forward. For example, 'aba' is a palindromic substring, while 'abc' is not.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A single string s where 1 <= s.length <= 1000.",
    "output_format": "An integer representing the count of distinct palindromic substrings.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"abc\"",
        "output": "3",
        "explanation": "The distinct palindromic substrings are 'a', 'b', and 'c'."
      },
      {
        "input": "s = \"aaa\"",
        "output": "6",
        "explanation": "The distinct palindromic substrings are 'a', 'aa', and 'aaa'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around potential centers of palindromes.",
      "Use a set to store distinct substrings."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Find the Winner of the Circular Game",
    "description": "In a circular game with n players (numbered from 1 to n), each player will eliminate the next player in line. The elimination process starts from the first player, and continues until only one player remains. Given the number of players n and a step k, return the index of the winner (1-indexed).",
    "topic": "Mathematics",
    "subtopic": "Simulation",
    "tags": [
      "Math",
      "Simulation",
      "Elimination"
    ],
    "input_format": "Two integers n and k, where 1 <= n <= 500 and 1 <= k <= n.",
    "output_format": "An integer representing the index of the winning player (1-indexed).",
    "constraints": [
      "1 <= n <= 500",
      "1 <= k <= n"
    ],
    "examples": [
      {
        "input": "n = 5, k = 2",
        "output": "3",
        "explanation": "Elimination order: 1->2->3->4->5->(recycle)->1->(recycle)->3. Player 3 wins."
      },
      {
        "input": "n = 6, k = 5",
        "output": "1",
        "explanation": "Elimination order: 1->2->3->4->5->6->(recycle)->1. Player 1 wins."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a circular linked list structure.",
      "Think about the mathematical formula for the Josephus problem."
    ],
    "company": "SoFi"
  },
  {
    "question_id": "",
    "title": "Top K Frequent Elements",
    "description": "Given a non-empty array of integers, return the k most frequent elements. You may return the answer in any order.",
    "topic": "Hash Table",
    "subtopic": "Frequency Counting",
    "tags": [
      "Hash Table",
      "Sorting",
      "Frequency"
    ],
    "input_format": "An array of integers nums and an integer k.",
    "output_format": "An array of the k most frequent elements.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "k is in the range [1, the number of unique elements in the array]"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 1, 2, 2, 3], k = 2",
        "output": "[1, 2]",
        "explanation": "The element 1 appears 3 times and 2 appears 2 times. The top 2 frequent elements are 1 and 2."
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]",
        "explanation": "There is only one element, which is 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to count the frequency of each element.",
      "Consider using a priority queue to get the top k elements."
    ],
    "company": "SoFi"
  }
]