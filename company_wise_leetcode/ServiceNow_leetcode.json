[
  {
    "question_id": "",
    "title": "Subarray Product Less Than K",
    "description": "Given an array of positive integers nums and a positive integer k, return the length of the longest contiguous subarray of which the product of its elements is less than k.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Product"
    ],
    "input_format": "An array of positive integers nums and a positive integer k.",
    "output_format": "An integer representing the length of the longest contiguous subarray with product less than k.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i] < k <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [10, 5, 2, 6], k = 100",
        "output": "4",
        "explanation": "The subarray [10, 5, 2, 6] has a product of 60, which is less than 100. The length is 4."
      },
      {
        "input": "nums = [1, 2, 3], k = 0",
        "output": "0",
        "explanation": "No subarray can have a product less than 0. Thus the output is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach.",
      "Keep track of the product of elements in the current window."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the height of bars in a histogram, calculate how much water can be trapped after raining. Each bar can hold water on top of it depending on the height of the bars to its left and right.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "input_format": "An array of non-negative integers `height` where height[i] is the height of the i-th bar.",
    "output_format": "An integer representing the total amount of water trapped.",
    "constraints": [
      "0 <= height.length <= 2 * 10^4",
      "0 <= height[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The trapped water can be visualized as '6' units between the height bars."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The water trapped is '9' units in total."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how much water each bar can hold based on the height of the tallest bars to its left and right.",
      "Use two pointers to keep track of the left and right boundaries."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. An anagram is a word that can be formed by rearranging the letters of another word. You can return the grouped anagrams in any order.",
    "topic": "String",
    "subtopic": "Sorting",
    "tags": [
      "String",
      "Sorting",
      "HashMap"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A list of lists of strings, where each inner list contains the grouped anagrams.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "0 <= strs[i].length <= 100",
      "All input strings are lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "explanation": "The anagrams are grouped together. 'eat', 'tea', and 'ate' are anagrams, and 'tan' and 'nat' are also anagrams."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "Only one empty string is present, hence it forms its own group."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "Only one single character string is present, hence it forms its own group."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort each string and use it as a key to group the anagrams.",
      "Consider using a HashMap to store lists of grouped anagrams."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Every opening bracket must have a corresponding closing bracket of the same type.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s consisting of '(' , ')' , '{' , '}' , '[' , ']' characters.",
    "output_format": "Return true if the input string is valid, otherwise return false.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The parentheses are correctly matched and closed."
      },
      {
        "input": "s = '([{}])'",
        "output": "true",
        "explanation": "All types of brackets are closed in the correct order."
      },
      {
        "input": "s = '(}'",
        "output": "false",
        "explanation": "The closing bracket does not match the opening bracket."
      },
      {
        "input": "s = '((()))'",
        "output": "true",
        "explanation": "The parentheses are correctly nested and closed."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to help keep track of opening brackets.",
      "Check for matching pairs when encountering closing brackets."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Number of Distinct Roll Sequences",
    "description": "You are given a total of n dice, and you need to determine how many distinct sequences can be rolled when n dice are tossed. A sequence is considered distinct if it contains different numbers in different positions. The dice are standard 6-sided dice labeled from 1 to 6. Your task is to compute the number of distinct roll sequences possible with the given n dice.",
    "topic": "Mathematics",
    "subtopic": "Combinatorics",
    "tags": [
      "Mathematics",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "input_format": "An integer n (1 <= n <= 100)",
    "output_format": "An integer representing the number of distinct roll sequences.",
    "constraints": [
      "1 <= n <= 100"
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "6",
        "explanation": "With 1 die, there are 6 possible sequences: [1], [2], [3], [4], [5], [6]."
      },
      {
        "input": "n = 2",
        "output": "36",
        "explanation": "With 2 dice, each die can show one of 6 numbers independently, giving us 6 * 6 = 36 distinct sequences."
      },
      {
        "input": "n = 3",
        "output": "216",
        "explanation": "With 3 dice, each die can show one of 6 numbers independently, resulting in 6 * 6 * 6 = 216 distinct sequences."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how to calculate the possibilities for each die.",
      "Use the pattern of sequences as n increases.",
      "Think about using dynamic programming."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Lexicographically Smallest String After Operations With Constraint",
    "description": "You are given a string s consisting of lowercase English letters and a list of indices representing a set of possible operations. Each operation allows you to swap two characters of the string s at the specified indices. Your task is to determine the lexicographically smallest string that can be obtained after performing any number of swaps represented by these indices. If no swaps can be performed, the original string is returned.",
    "topic": "String",
    "subtopic": "Graph",
    "tags": [
      "String",
      "Graph",
      "Sorting",
      "Union-Find"
    ],
    "input_format": "A string s and a 2D list of integers pairs, where pairs[i] = [a, b] indicates that you can swap the characters at indices a and b in s.",
    "output_format": "A string representing the lexicographically smallest string possible after performing the allowed swaps.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "0 <= pairs.length <= 10^5",
      "0 <= pairs[i][0], pairs[i][1] < s.length",
      "s consists of lowercase English letters"
    ],
    "examples": [
      {
        "input": "s = 'cba', pairs = [[0, 1], [1, 2]]",
        "output": "'abc'",
        "explanation": "We can swap indices 0 and 1, and then 1 and 2 to get 'abc', which is the lexicographically smallest string."
      },
      {
        "input": "s = 'dcab', pairs = [[0, 3], [1, 2]]",
        "output": "'abcd'",
        "explanation": "We can swap indices 0 and 3 to get 'bcad' and then swap indices 1 and 2 to get 'abcd'."
      },
      {
        "input": "s = 'edcba', pairs = [[0, 1], [1, 2], [2, 3], [3, 4]]",
        "output": "'abcde'",
        "explanation": "We can swap all adjacent indices to sort the string in ascending order."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a Union-Find data structure to group indices.",
      "After grouping, sort the characters in each group to form the smallest string.",
      "Remember to reconstruct the string based on the sorted groups."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Find Minimum Diameter After Merging Two Trees",
    "description": "You are given two binary trees. Your task is to merge these two trees into one. The merge operation is defined as follows: for each node in the resulting tree, the value will be the sum of values of the corresponding nodes from the two input trees. If one of the trees has a node, but the other does not, you will take the existing node's value. After merging, calculate the diameter of the resulting tree. The diameter is the longest path between any two nodes in the tree.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Diameter"
    ],
    "input_format": "Two binary trees represented as root nodes.",
    "output_format": "An integer representing the minimum diameter of the merged binary tree.",
    "constraints": [
      "The number of nodes in each tree will be in the range of [0, 10^4].",
      "-10^4 <= node.val <= 10^4"
    ],
    "examples": [
      {
        "input": "tree1: [1, 3, 2, 5], tree2: [2, 1, 3, null, 4]",
        "output": "4",
        "explanation": "The merged tree will have structure [3, 4, 5, 5]. The longest path is 5 -> 4 -> 3 -> 3, which gives a diameter of 4."
      },
      {
        "input": "tree1: [1, 2, 3], tree2: [1, 2]",
        "output": "2",
        "explanation": "The merged tree will have structure [2, 4, 3]. The longest path is 4 -> 3, which gives a diameter of 2."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using depth-first search (DFS) to find the diameter.",
      "Keep track of heights of subtrees when merging the trees."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) Cache. It should support the following operations: get(key) and put(key, value). The get operation retrieves the value of the key if the key exists in the cache, otherwise it returns -1. The put operation updates or inserts the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Data Structure",
    "subtopic": "Cache",
    "tags": [
      "Cache",
      "Data Structure",
      "Design"
    ],
    "input_format": "The cache will be initialized with a positive capacity. The put and get operations will take an integer key and a value for the put operation.",
    "output_format": "The output for the get operation should be an integer value corresponding to the key, or -1 if the key is not present in the cache.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10^4",
      "0 <= value <= 10^5"
    ],
    "examples": [
      {
        "input": "cache = LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1, -1, 3, 4]",
        "explanation": "The operations are executed as follows: cache.get(1) returns 1. cache.get(2) returns -1 since it was evicted. cache.get(3) returns 3 and cache.get(4) returns 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a linked list to track usage order.",
      "Use a hash map for O(1) access to cache items."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Generate Parentheses",
    "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
    "topic": "Backtracking",
    "subtopic": "Combination Generation",
    "tags": [
      "Backtracking",
      "String",
      "Combination"
    ],
    "input_format": "An integer n representing the number of pairs of parentheses.",
    "output_format": "A list of strings containing all valid combinations of parentheses.",
    "constraints": [
      "1 <= n <= 8"
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]",
        "explanation": "For n = 3, the valid combinations of well-formed parentheses are: '((()))', '(()())', '(())()', '()(())', and '()()()'."
      },
      {
        "input": "n = 1",
        "output": "[\"()\"]",
        "explanation": "For n = 1, the only valid combination is '()'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use backtracking to explore all possible combinations.",
      "Keep track of the number of open and close parentheses used."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Hash Map"
    ],
    "input_format": "A string s consisting of English letters, digits, symbols and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s consists of any valid ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"abc\" with length 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The longest substring without repeating characters is \"b\" with length 1."
      },
      {
        "input": "s = \"pwwkew\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"wke\" with length 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach.",
      "Use a hash map to track the last positions of the characters."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Design HashMap",
    "description": "Design and implement a HashMap without using built-in libraries. The HashMap should support the following operations: insert(key, value), get(key), and remove(key). Your implementation should handle collisions using chaining. Return 'null' when the key is not found during a get operation.",
    "topic": "Data Structures",
    "subtopic": "Hash Table",
    "tags": [
      "HashMap",
      "Data Structures",
      "Design"
    ],
    "input_format": "Each operation will be given as a string, either 'insert', 'get', or 'remove', followed by key-value pairs for insert or just a key for get and remove.",
    "output_format": "For 'get' operations, return the value associated with the key, or return 'null' if the key does not exist. For 'insert' and 'remove', the output should be standardized to indicate success.",
    "constraints": [
      "All keys are unique.",
      "The number of operations does not exceed 10^4.",
      "The key and value are strings of length up to 100 characters."
    ],
    "examples": [
      {
        "input": "insert('key1', 'value1')\nget('key1')\nremove('key1')\nget('key1')",
        "output": "'value1'\nnull",
        "explanation": "After inserting 'key1' with 'value1', retrieving 'key1' returns 'value1'. Removing 'key1' then results in 'null' when we try to get it again."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a list to handle collisions.",
      "Think about how to handle resizing of the hashmap."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Move Zeroes",
    "description": "Given an array of integers, move all the 0's to the end of it while maintaining the relative order of the non-zero elements. You must do this in-place without making a copy of the array.",
    "topic": "Array",
    "subtopic": "In-place Algorithm",
    "tags": [
      "Array",
      "In-place",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "The modified array where all zeros are moved to the end while keeping the order of non-zero elements.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [0, 1, 0, 3, 12]",
        "output": "[1, 3, 12, 0, 0]",
        "explanation": "After moving the zeroes, 1, 3, and 12 remain in the same order, followed by the zeroes."
      },
      {
        "input": "nums = [0, 0, 0, 0]",
        "output": "[0, 0, 0, 0]",
        "explanation": "All elements are zero, so the array remains unchanged."
      },
      {
        "input": "nums = [1, 2, 0, 0, 3, 4]",
        "output": "[1, 2, 3, 4, 0, 0]",
        "explanation": "The non-zero elements 1, 2, 3, and 4 are kept in order, followed by the zeroes."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a two-pointer technique to track the position of non-zero elements.",
      "Iterate through the array and swap non-zero elements with zero positions."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Zigzag Conversion",
    "description": "The string 'PAYPALISHIRING' is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better readability)\n\nP   A   H   N\nA P L S I I G\nY   I   R\n\nAnd then read line by line: 'PAHNAPLSIIGYIR'. Write the code that will take a string and make this conversion given a number of rows.\n\nThe conversion process is as follows: You start from the top and move diagonally downwards, then you move diagonally upwards. This continues until you reach the bottom row and then back to the top again. If the number of rows is 1, the output string is the same as the input string.",
    "topic": "String",
    "subtopic": "Conversion",
    "tags": [
      "String",
      "Zigzag",
      "Conversion"
    ],
    "input_format": "A string s to be converted and an integer numRows representing the number of rows.",
    "output_format": "A string representing the converted zigzag pattern.",
    "constraints": [
      "1 <= s.length <= 1000",
      "1 <= numRows <= 1000"
    ],
    "examples": [
      {
        "input": "s = 'PAYPALISHIRING', numRows = 3",
        "output": "'PAHNAPLSIIGYIR'",
        "explanation": "The zigzag pattern with 3 rows is:\nP   A   H   N\nA P L S I I G\nY   I   R\nWhen read line by line, the result is 'PAHNAPLSIIGYIR'."
      },
      {
        "input": "s = 'A', numRows = 1",
        "output": "'A'",
        "explanation": "When there is only one row, the output is the same as the input string."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using an array of strings to hold each row.",
      "Use a variable to track the current row while iterating through the characters."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "Array Manipulation",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Greedy"
    ],
    "input_format": "An array of integers prices representing the stock prices on different days.",
    "output_format": "An integer representing the maximum profit that can be achieved.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price seen so far.",
      "Calculate potential profits as you iterate through the prices."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Kth Largest Element in an Array",
    "description": "Given an array of integers, return the Kth largest element in the array. Note that it is the Kth largest element in the sorted order, not the Kth distinct element.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Heap"
    ],
    "input_format": "An integer array nums and an integer k.",
    "output_format": "An integer representing the Kth largest element.",
    "constraints": [
      "1 <= k <= nums.length",
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 1, 5, 6, 4], k = 2",
        "output": "5",
        "explanation": "The second largest element in the array is 5."
      },
      {
        "input": "nums = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4",
        "output": "4",
        "explanation": "The fourth largest element in the array is 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a max heap to keep track of the largest elements.",
      "Alternatively, use quickselect for an average O(n) time complexity."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Daily Temperatures",
    "description": "Given an array of integers representing daily temperatures, return an array such that for each day in the input, you determine how many days you have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. The output array should be of the same length as the input array.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Temperature",
      "Monotonic Stack"
    ],
    "input_format": "An array of integers temperatures where 1 <= temperatures.length <= 30000 and 0 <= temperatures[i] <= 100.",
    "output_format": "An array of integers representing the number of days until a warmer temperature for each day.",
    "constraints": [
      "1 <= temperatures.length <= 30000",
      "0 <= temperatures[i] <= 100"
    ],
    "examples": [
      {
        "input": "temperatures = [73, 74, 75, 71, 69, 72, 76, 73]",
        "output": "[1, 1, 4, 2, 1, 1, 0, 0]",
        "explanation": "On day 0, the next warmer day is day 1 (1 day). On day 1, the next warmer day is day 2 (1 day). On day 2, wait 4 days for day 6. On day 3, wait 2 days for day 5, etc."
      },
      {
        "input": "temperatures = [30, 40, 50, 60]",
        "output": "[1, 1, 1, 0]",
        "explanation": "Each day has a warmer day the next day, except for the last day."
      },
      {
        "input": "temperatures = [30, 60, 90]",
        "output": "[1, 1, 0]",
        "explanation": "Day 0 has a warmer day on Day 1, Day 1 on Day 2, and Day 2 has no warmer day."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a stack to keep track of indices of temperatures.",
      "You can iterate through the temperatures from the end to the beginning."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Maximal Square",
    "description": "Given a 2D binary matrix filled with '0's and '1's, find the largest square containing only '1's and return its area.",
    "topic": "Dynamic Programming",
    "subtopic": "2D Array",
    "tags": [
      "Dynamic Programming",
      "Matrix",
      "Binary"
    ],
    "input_format": "A 2D binary matrix represented as a list of lists, where each sublist contains '0's and '1's.",
    "output_format": "An integer representing the area of the largest square containing only '1's.",
    "constraints": [
      "1 <= matrix.length <= 300",
      "1 <= matrix[i].length <= 300",
      "matrix[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "[['1','0','1','0','0'], ['1','0','1','1','1'], ['1','1','1','1','1'], ['1','0','0','1','0']]",
        "output": "4",
        "explanation": "The largest square is formed by the '1's in the 3rd and 4th rows, which has a side length of 2, thus the area is 2 * 2 = 4."
      },
      {
        "input": "[['0','1'], ['1','0']]",
        "output": "1",
        "explanation": "The largest square consists of only one '1', thus its area is 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use dynamic programming to keep track of the size of the maximal square at each position.",
      "The size of the square at (i, j) can be determined by the minimum of the squares at (i-1, j), (i, j-1), and (i-1, j-1) plus one."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers, return the indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "The solution will always exist.",
      "You may not use the same element twice."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9, so return [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6, so return [1, 2]."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6, so return [0, 1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try using a hash map to store the difference needed for each number.",
      "Consider edge cases where you might have duplicate numbers."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. For example, if the input intervals are [[1,3],[2,6],[8,10],[15,18]], the merged intervals would be [[1,6],[8,10],[15,18]]. An interval is defined by a pair of integers [start, end], where start <= end.",
    "topic": "Sorting",
    "subtopic": "Intervals",
    "tags": [
      "Sorting",
      "Intervals",
      "Greedy"
    ],
    "input_format": "A list of intervals, where each interval is represented as a list of two integers [start, end].",
    "output_format": "A list of merged intervals, where each interval is represented as a list of two integers [start, end].",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^5"
    ],
    "examples": [
      {
        "input": "[[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "The intervals [1,3] and [2,6] overlap, hence they are merged to [1,6]. The intervals [8,10] and [15,18] do not overlap and are kept separate."
      },
      {
        "input": "[[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] touch at the point 4, hence they are merged into [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on the starting times.",
      "Use a stack or a list to hold the merged intervals."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis, forms a container, such that the container contains the most water. Note that you may not slant the container.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Water Container"
    ],
    "input_format": "An array of non-negative integers, where nums[i] represents the height of a vertical line at position i.",
    "output_format": "An integer representing the maximum amount of water that can be contained.",
    "constraints": [
      "2 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The maximum water is contained between the lines at index 1 and index 8, which is min(8, 7) * (8 - 1) = 49."
      },
      {
        "input": "nums = [1,1]",
        "output": "1",
        "explanation": "The maximum water is contained between the two lines at index 0 and index 1, which is min(1, 1) * (1 - 0) = 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using two pointers to optimize the search.",
      "The width of the container is determined by the distance between two lines."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Validate Binary Search Tree",
    "description": "Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is a binary tree in which for every node, the values of all the nodes in its left subtree are less than the node's value, and the values of all the nodes in its right subtree are greater than the node's value.",
    "topic": "Tree",
    "subtopic": "Binary Search Tree",
    "tags": [
      "Tree",
      "Binary Search Tree",
      "Recursion",
      "DFS"
    ],
    "input_format": "The input is the root node of a binary tree.",
    "output_format": "Return true if the tree is a valid BST, otherwise return false.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 10^4].",
      "Each node's value is unique.",
      "-10^4 <= Node.val <= 10^4"
    ],
    "examples": [
      {
        "input": "[2, 1, 3]",
        "output": "true",
        "explanation": "The tree is valid because 1 < 2 < 3."
      },
      {
        "input": "[5, 1, 4, null, null, 3, 6]",
        "output": "false",
        "explanation": "The tree is invalid because 3 is less than 5 but greater than 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use in-order traversal to check the sorted order of values.",
      "Keep track of the minimum and maximum values allowed at each node."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Search in Rotated Sorted Array",
    "description": "Given a rotated sorted array and a target value, search for the target in the array. If the target exists, return its index. If it does not exist, return -1. You must write an algorithm with O(log n) runtime complexity.",
    "topic": "Binary Search",
    "subtopic": "Searching in Rotated Arrays",
    "tags": [
      "Binary Search",
      "Array",
      "Search"
    ],
    "input_format": "An integer array nums which is sorted and then rotated, followed by an integer target.",
    "output_format": "An integer representing the index of target in nums, or -1 if target is not found.",
    "constraints": [
      "1 <= nums.length <= 5000",
      "-10^4 <= nums[i] <= 10^4",
      "All integers in nums are unique.",
      "nums is guaranteed to be rotated at some pivot."
    ],
    "examples": [
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 0",
        "output": "4",
        "explanation": "The target 0 is located at index 4 in the rotated array."
      },
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 3",
        "output": "-1",
        "explanation": "The target 3 does not exist in the array, hence -1 is returned."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider where the pivot point might be.",
      "Use binary search to narrow down the search range.",
      "Check if the left or right side is sorted."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "LFU Cache",
    "description": "Design and implement a data structure for a Least Frequently Used (LFU) Cache. It should support the following operations: get and put. The get function retrieves the value of the key if the key exists in the cache, otherwise returns -1. The put function should insert or update the value of the key. When the cache reaches its capacity, it should invalidate the least frequently used key before inserting a new key. The frequency of usage is defined by how often a key is accessed during the get or put operations.",
    "topic": "Design",
    "subtopic": "Cache",
    "tags": [
      "Design",
      "Cache",
      "Data Structure"
    ],
    "input_format": "The LFU Cache is initialized with a positive capacity. The put function takes a key-value pair while the get function takes a key.",
    "output_format": "Return the value of the key if it exists; otherwise return -1.",
    "constraints": [
      "The capacity of the cache is a positive integer.",
      "The operations put and get will be called at most 10^4 times."
    ],
    "examples": [
      {
        "input": "LFUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.get(3); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1,-1,3,4]",
        "explanation": "After performing the put and get operations in sequence, the output reflects the value retrieved from the cache or -1 if not found."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Think about how to keep track of key frequencies.",
      "Consider using a hashmap along with a doubly linked list."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Median of Two Sorted Arrays",
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Median",
      "Sorting"
    ],
    "input_format": "Two sorted integer arrays nums1 and nums2.",
    "output_format": "A float representing the median of the two sorted arrays.",
    "constraints": [
      "0 <= nums1.length, nums2.length <= 1000",
      "-10^6 <= nums1[i], nums2[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "nums1 = [1, 3], nums2 = [2]",
        "output": "2.0",
        "explanation": "The combined sorted array is [1, 2, 3], and the median is 2."
      },
      {
        "input": "nums1 = [1, 2], nums2 = [3, 4]",
        "output": "2.5",
        "explanation": "The combined sorted array is [1, 2, 3, 4], and the median is (2 + 3) / 2 = 2.5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using binary search to find the correct partitions."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A single string s, where 1 <= s.length <= 1000.",
    "output_format": "A string representing the longest palindromic substring.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only digits and English letters."
    ],
    "examples": [
      {
        "input": "babad",
        "output": "bab",
        "explanation": "Both 'bab' and 'aba' are valid longest palindromic substrings."
      },
      {
        "input": "cbbd",
        "output": "bb",
        "explanation": "'bb' is the longest palindromic substring."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding from the center of potential palindromes.",
      "Keep track of the longest palindrome found during the process."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "String Compression",
    "description": "Given a string s, compress it using the counts of consecutive repeating characters. The compressed string should be constructed as follows: for each group of consecutive identical characters, append the character followed by the number of occurrences. If the compressed string is not shorter than the original string, return the original string. Otherwise, return the compressed string.",
    "topic": "String",
    "subtopic": "Compression",
    "tags": [
      "String",
      "Compression",
      "Algorithm"
    ],
    "input_format": "A string s, where 1 <= s.length <= 1000.",
    "output_format": "A string representing the compressed version of the input string.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only uppercase and lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'aabcccccaaa'",
        "output": "a2b1c5a3",
        "explanation": "The character 'a' appears 2 times, 'b' appears 1 time, 'c' appears 5 times, and 'a' appears 3 times."
      },
      {
        "input": "s = 'abbccd'",
        "output": "abbccd",
        "explanation": "The compressed version 'a1b2c2d1' is longer than 'abbccd', so we return the original string."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a loop to iterate through the characters.",
      "Maintain a counter for consecutive characters."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "First Missing Positive",
    "description": "Given an unsorted integer array nums, return the smallest missing positive integer. You must implement an algorithm that runs in O(n) time and uses O(1) additional space.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Positive Numbers"
    ],
    "input_format": "An unsorted array of integers nums.",
    "output_format": "An integer representing the smallest missing positive integer.",
    "constraints": [
      "0 <= nums.length <= 30000",
      "-10^6 <= nums[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [3, 4, -1, 1]",
        "output": "2",
        "explanation": "The numbers 1 and 4 are present but 2 is the smallest missing positive integer."
      },
      {
        "input": "nums = [1, 2, 0]",
        "output": "3",
        "explanation": "The first positive integer missing in this case is 3."
      },
      {
        "input": "nums = [7, 8, 9, 11, 12]",
        "output": "1",
        "explanation": "The smallest missing positive integer is 1."
      },
      {
        "input": "nums = [1]",
        "output": "2",
        "explanation": "The first missing positive integer is 2."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using the indices of the array as a way to place values.",
      "Maintain the relationship between array index and value.",
      "Neglect non-positive numbers as they are not useful for this problem."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Pacific Atlantic Water Flow",
    "description": "Given an m x n matrix of non-negative integers representing the height of each unit cell in a continent, the ocean touches the left and right edges of the matrix and the top and bottom edges. Calculate the list of grid coordinates where water can flow to both the Pacific and Atlantic oceans. A cell can flow to another cell if the height of the current cell is greater than or equal to the height of the neighboring cell in the four cardinal directions (up, down, left, right).",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "DFS",
      "Graph",
      "Matrix"
    ],
    "input_format": "An m x n matrix of non-negative integers.",
    "output_format": "A list of coordinates (i, j) where water can flow to both oceans.",
    "constraints": [
      "1 <= m, n <= 200",
      "0 <= height[i][j] <= 10^5"
    ],
    "examples": [
      {
        "input": "[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]",
        "output": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]",
        "explanation": "These are the coordinates where water can flow to both the Pacific and Atlantic oceans."
      },
      {
        "input": "[[1]]",
        "output": "[[0,0]]",
        "explanation": "The only cell can flow to both oceans."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using DFS or BFS to explore water flow.",
      "Track which cells can reach the Pacific and Atlantic oceans separately."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Maximum Product Subarray",
    "description": "Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product. Return the largest product you can get.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Product"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum product of the contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "-10 <= nums[i] <= 10"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, -2, 4]",
        "output": "6",
        "explanation": "The subarray [2, 3] has the largest product 6."
      },
      {
        "input": "nums = [-2, 0, -1]",
        "output": "0",
        "explanation": "The maximum product is 0, which comes from the subarray [0]."
      },
      {
        "input": "nums = [-1, -3, -10, 0, 60]",
        "output": "60",
        "explanation": "The maximum product is 60 from the subarray [60]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider both positive and negative numbers in the subarray.",
      "Keep track of the max and min product up to the current position."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list and return the reversed list.",
    "topic": "Linked List",
    "subtopic": "Reversal",
    "tags": [
      "Linked List",
      "Reversal",
      "Pointer"
    ],
    "input_format": "A singly linked list represented by the head node.",
    "output_format": "The head of the reversed singly linked list.",
    "constraints": [
      "The number of nodes in the list is in the range [0, 5000].",
      "-5000 <= Node.val <= 5000"
    ],
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5]",
        "output": "[5, 4, 3, 2, 1]",
        "explanation": "Reversing the list gives us 5 -> 4 -> 3 -> 2 -> 1."
      },
      {
        "input": "head = [1, 2]",
        "output": "[2, 1]",
        "explanation": "Reversing the list gives us 2 -> 1."
      },
      {
        "input": "head = []",
        "output": "[]",
        "explanation": "An empty list remains empty when reversed."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use three pointers to reverse the links: prev, curr, and next.",
      "Iterate through the list and adjust the pointers accordingly."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "DFS",
      "Matrix"
    ],
    "input_format": "A 2D array of characters grid where each element is either '1' or '0'.",
    "output_format": "An integer representing the number of islands in the grid.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]",
        "output": "3",
        "explanation": "There are three islands in the grid."
      },
      {
        "input": "grid = [[1,1,1,1,0],[1,0,0,1,0],[1,1,0,0,0],[0,0,0,0,0]]",
        "output": "1",
        "explanation": "There is one island in the grid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use Depth-First Search to explore each island.",
      "Mark visited land cells to avoid counting them multiple times."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Valid Parenthesis String",
    "description": "Given a string s containing only the characters '(', ')', and '*', return true if the string is valid. A string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. 3. The '*' character can represent either an empty string, '(', or ')'.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Stack"
    ],
    "input_format": "A string s of length n (1 <= n <= 100)",
    "output_format": "A boolean value, true if the string is valid, false otherwise.",
    "constraints": [
      "1 <= s.length <= 100",
      "s consists of '(', ')', and '*'"
    ],
    "examples": [
      {
        "input": "s = \"(*)\"",
        "output": "true",
        "explanation": "The parentheses can be matched as '(' and ')'."
      },
      {
        "input": "s = \"(*))\"",
        "output": "true",
        "explanation": "The parentheses can be matched by treating '*' as '('."
      },
      {
        "input": "s = \"((*)\"",
        "output": "true",
        "explanation": "The parentheses can be matched by treating '*' as ')'."
      },
      {
        "input": "s = \"*(*))\"",
        "output": "true",
        "explanation": "The '*' can be treated as both '(', allowing the string to be valid."
      },
      {
        "input": "s = \"(()*)))\"",
        "output": "false",
        "explanation": "Too many closing parentheses without a matching opening one."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a stack to keep track of open parentheses.",
      "Think about how '*' can change the meaning of the string.",
      "Try to maintain a balance of open and close parentheses."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "First Unique Character in a String",
    "description": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.",
    "topic": "String",
    "subtopic": "Hash Table",
    "tags": [
      "String",
      "Hash Table",
      "Index"
    ],
    "input_format": "A string s consisting only of lowercase English letters.",
    "output_format": "An integer representing the index of the first unique character, or -1 if not found.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'leetcode'",
        "output": "0",
        "explanation": "The first non-repeating character is 'l' which is at index 0."
      },
      {
        "input": "s = 'loveleetcode'",
        "output": "2",
        "explanation": "'v' is the first unique character, located at index 2."
      },
      {
        "input": "s = 'aabb'",
        "output": "-1",
        "explanation": "There are no non-repeating characters in the string."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a frequency map to count occurrences of each character.",
      "Traverse the string again to find the first character with a count of 1."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Validate IP Address",
    "description": "Given a string s, write a function that validates whether the input string is a valid IPv4 or IPv6 address. The function should return 'IPv4' if the string is a valid IPv4 address, 'IPv6' if it is a valid IPv6 address, and 'Neither' if it is neither.",
    "topic": "String",
    "subtopic": "Validation",
    "tags": [
      "String",
      "Validation",
      "IPv4",
      "IPv6"
    ],
    "input_format": "A string s representing the IP address to validate.",
    "output_format": "A string that is either 'IPv4', 'IPv6', or 'Neither'.",
    "constraints": [
      "1 <= s.length <= 40"
    ],
    "examples": [
      {
        "input": "192.0.2.146",
        "output": "IPv4",
        "explanation": "This is a valid IPv4 address with four octets."
      },
      {
        "input": "2001:0db8:85a3:0000:0000:8a2e:0370:7334",
        "output": "IPv6",
        "explanation": "This is a valid IPv6 address composed of eight groups."
      },
      {
        "input": "256.100.50.25",
        "output": "Neither",
        "explanation": "It contains an octet that exceeds 255, making it invalid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "IPv4 consists of four decimal numbers separated by dots.",
      "Each decimal number in IPv4 must be between 0 and 255.",
      "IPv6 consists of eight groups of four hexadecimal digits.",
      "Use consistent rules for forming your validation criteria."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Reverse Words in a String II",
    "description": "Given a character array s, reverse the order of the words in the array in-place. A word is defined as a sequence of non-space characters. The words in the input array will be separated by a single space, and there may be leading or trailing spaces. The algorithm should run in O(1) space complexity.",
    "topic": "String",
    "subtopic": "In-place manipulation",
    "tags": [
      "String",
      "In-place",
      "Array"
    ],
    "input_format": "A character array s which can contain spaces and non-space characters.",
    "output_format": "The modified character array s with words reversed in place.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s[i] is a printable ASCII character."
    ],
    "examples": [
      {
        "input": "s = ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']",
        "output": "['d', 'l', 'r', 'o', 'w', ' ', 'o', 'l', 'l', 'e', 'h']",
        "explanation": "The words 'hello' and 'world' are reversed to 'world' and 'hello'."
      },
      {
        "input": "s = [' ', 'a', 'b', 'c', ' ']",
        "output": "[' ', 'c', 'b', 'a', ' ']",
        "explanation": "The only words are 'a', 'b', and 'c', which are reversed."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how you can reverse the entire string first.",
      "After reversing the whole string, you'll need to reverse each word again."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Binary Tree Right Side View",
    "description": "Given the root of a binary tree, return the values of the nodes that are visible from the right side of it, from top to bottom.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "DFS",
      "BFS"
    ],
    "input_format": "The input is a binary tree represented by its root node.",
    "output_format": "A list of integers representing the values of the visible nodes from the right side.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 10^4].",
      "-100 <= Node.val <= 100"
    ],
    "examples": [
      {
        "input": "root = [1, 2, 3, null, 5, null, 4]",
        "output": "[1, 3, 4]",
        "explanation": "The right side view is composed of nodes 1, 3, and 4."
      },
      {
        "input": "root = [1, null, 3]",
        "output": "[1, 3]",
        "explanation": "The right side view is composed of nodes 1 and 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use level order traversal to explore each level of the tree.",
      "You only need to keep track of the last element encountered at each level."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Top K Frequent Words",
    "description": "Given a list of strings words and an integer k, return the k most frequent strings. Return the answer in any order. It is guaranteed that the answer is unique in terms of frequency but may not be unique lexicographically. If two words have the same frequency, the word with the lexicographically smaller one should come first.",
    "topic": "Hash Table",
    "subtopic": "Frequency Counting",
    "tags": [
      "Hash Table",
      "Sorting",
      "Priority Queue"
    ],
    "input_format": "A list of strings words followed by an integer k.",
    "output_format": "A list of the k most frequent words.",
    "constraints": [
      "1 <= words.length <= 10^4",
      "1 <= k <= number of unique words in words",
      "1 <= words[i].length <= 100",
      "words[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2",
        "output": "[\"i\",\"love\"]",
        "explanation": "The words 'i' and 'love' appear the most frequently, each appearing 2 times."
      },
      {
        "input": "words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4",
        "output": "[\"the\",\"is\",\"sunny\",\"day\"]",
        "explanation": "The words 'the' (4 occurrences), 'is' (3 occurrences), 'sunny' (2 occurrences), and 'day' (1 occurrence) are returned."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to count frequencies.",
      "A max-heap can be useful for extracting the top k elements.",
      "Sorting by frequency and then lexicographically may help."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Number of Distinct Substrings in a String",
    "description": "Given a string 's', you need to determine the number of distinct substrings present in the string. A substring is defined as any contiguous sequence of characters within the string. For instance, in the string 'banana', the distinct substrings are 'b', 'a', 'n', 'ba', 'an', 'ban', 'ana', 'nan', 'banana'.",
    "topic": "String",
    "subtopic": "Substring Manipulation",
    "tags": [
      "String",
      "Substring",
      "Distinct Substrings"
    ],
    "input_format": "A single string s consisting of lowercase English letters.",
    "output_format": "An integer representing the number of distinct substrings in the string.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of lowercase English letters only."
    ],
    "examples": [
      {
        "input": "s = 'banana'",
        "output": "15",
        "explanation": "The distinct substrings are: 'b', 'a', 'n', 'ba', 'an', 'ban', 'ana', 'nan', 'banana' and so on, totaling 15."
      },
      {
        "input": "s = 'abc'",
        "output": "6",
        "explanation": "The distinct substrings are: 'a', 'b', 'c', 'ab', 'bc', 'abc', totaling 6."
      },
      {
        "input": "s = 'aaa'",
        "output": "3",
        "explanation": "The distinct substrings are: 'a', 'aa', 'aaa', totaling just 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a suffix array or a Trie structure.",
      "Think about how to count substrings efficiently without generating them all."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Set Matrix Zeroes",
    "description": "Given an m x n integer matrix, if an element is 0, set its entire row and column to 0. You must do it in place without using extra space for another matrix. This means you must modify the input matrix directly.",
    "topic": "Matrix",
    "subtopic": "In-place Operations",
    "tags": [
      "Matrix",
      "In-place",
      "Manipulation"
    ],
    "input_format": "An m x n integer matrix.",
    "output_format": "The modified matrix with rows and columns set to 0 in place.",
    "constraints": [
      "1 <= m, n <= 200",
      "-10^8 <= matrix[i][j] <= 10^8"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 1, 1], [1, 0, 1], [1, 1, 1]]",
        "output": "[[1, 0, 1], [0, 0, 0], [1, 0, 1]]",
        "explanation": "The element at (1, 1) is 0, hence its entire row and column are set to 0."
      },
      {
        "input": "matrix = [[0]]",
        "output": "[[0]]",
        "explanation": "The only element is 0, so the entire matrix will be set to 0."
      },
      {
        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 0, 9]]",
        "output": "[[1, 0, 3], [0, 0, 0], [7, 0, 9]]",
        "explanation": "The element at (2, 1) is 0, hence its entire row and column are set to 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the first row and first column for marking.",
      "Remember to handle the first row and first column separately if they contain zeros."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Asteroid Collision",
    "description": "We have a list of integers representing asteroids in a row. Each asteroid is positive, which means it moves to the right, and negative, which means it moves to the left. When two asteroids collide, the smaller absolute value asteroid will explode. If they have the same absolute value, both will explode. Write a function to simulate the collisions until all asteroids have settled down and return the final list of asteroids.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Simulation"
    ],
    "input_format": "An array of integers, asteroids, where each integer represents an asteroid's size and direction.",
    "output_format": "An array of integers representing the remaining asteroids after all collisions.",
    "constraints": [
      "1 <= asteroids.length <= 10^4",
      "-1000 <= asteroids[i] <= 1000",
      "Asteroids are not allowed to be 0."
    ],
    "examples": [
      {
        "input": "asteroids = [5, 10, -5]",
        "output": "[5, 10]",
        "explanation": "The -5 asteroid collides with 10 and is destroyed. The remaining asteroids are [5, 10]."
      },
      {
        "input": "asteroids = [8, -8]",
        "output": "[]",
        "explanation": "Both asteroids collide and destroy each other."
      },
      {
        "input": "asteroids = [10, 2, -5]",
        "output": "[10]",
        "explanation": "The 2 and -5 collide and are destroyed. The remaining asteroid is [10]."
      },
      {
        "input": "asteroids = [-2, -1, 1, 2]",
        "output": "[-2, -1, 1, 2]",
        "explanation": "No collisions occur, so all asteroids remain."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the current asteroids.",
      "Check for collisions only when there are right-moving and left-moving asteroids."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Number of Visible People in a Queue",
    "description": "You are given a list of integers representing the heights of people standing in a queue from front to back. A person can only see the front of the queue if there are no taller or equally tall people in front of them. Write a function that returns the number of people visible from the front of the queue.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Greedy"
    ],
    "input_format": "An array of integers representing the heights of the people in the queue.",
    "output_format": "An integer representing the number of visible people in the queue.",
    "constraints": [
      "1 <= heights.length <= 10^5",
      "1 <= heights[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "heights = [5, 3, 6, 7, 2]",
        "output": "4",
        "explanation": "The heights from the front are 5 (visible), 3 (not visible), 6 (visible), 7 (visible), and 2 (not visible). Thus, the visible people are those of heights 5, 6, and 7."
      },
      {
        "input": "heights = [1, 2, 3, 4, 5]",
        "output": "5",
        "explanation": "All people can see the front as each one is taller than the previous one."
      },
      {
        "input": "heights = [5, 5, 5, 5, 5]",
        "output": "1",
        "explanation": "Only the person at the front can see, as they are all of equal height."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Think about maintaining a stack to keep track of visible heights.",
      "Iterate through the heights from back to front."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Meeting Rooms II",
    "description": "Given an array of meeting time intervals where intervals[i] = [start_i, end_i], return the minimum number of conference rooms required to hold all the meetings. An interval is constructed as a pair of start and end times, indicating when a meeting starts and ends. Meetings can overlap, and multiple meetings can occur in the same room if they do not overlap.",
    "topic": "Greedy",
    "subtopic": "Interval Scheduling",
    "tags": [
      "Greedy",
      "Interval",
      "Sorting"
    ],
    "input_format": "A list of intervals where each interval is represented as a list of two integers, [start, end].",
    "output_format": "An integer representing the minimum number of meeting rooms required.",
    "constraints": [
      "0 <= intervals.length <= 10^4",
      "0 <= start_i < end_i <= 10^6"
    ],
    "examples": [
      {
        "input": "intervals = [[0, 30],[5, 10],[15, 20]]",
        "output": "2",
        "explanation": "We need two rooms: one for the first meeting (0, 30) and another for the second meeting (5, 10)."
      },
      {
        "input": "intervals = [[7,10],[2,4]]",
        "output": "1",
        "explanation": "Both meetings do not overlap, so one room is sufficient."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals by start time.",
      "Use a min-heap to track the end times of meetings."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Fraction to Recurring Decimal",
    "description": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format. If the fractional part is repeating, enclose the repeating part in parentheses.",
    "topic": "Math",
    "subtopic": "Fraction Conversion",
    "tags": [
      "Math",
      "String",
      "Fractions"
    ],
    "input_format": "Two integers numerator and denominator.",
    "output_format": "A string representing the fraction in decimal form, with repeating parts enclosed in parentheses.",
    "constraints": [
      "-2^31 <= numerator, denominator <= 2^31 - 1",
      "denominator != 0"
    ],
    "examples": [
      {
        "input": "numerator = 1, denominator = 2",
        "output": "0.5",
        "explanation": "The result of 1 divided by 2 is 0.5."
      },
      {
        "input": "numerator = 2, denominator = 1",
        "output": "2",
        "explanation": "The result of 2 divided by 1 is 2."
      },
      {
        "input": "numerator = 4, denominator = 333",
        "output": "0.(012)",
        "explanation": "The result of 4 divided by 333 is 0.012012012..., thus we enclose the repeating part in parentheses."
      },
      {
        "input": "numerator = 1, denominator = 5",
        "output": "0.2",
        "explanation": "The result of 1 divided by 5 is 0.2, which is not repeating."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hashmap to detect cycles in the decimal places.",
      "Handle the case for negative values carefully."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "topic": "Dynamic Programming",
    "subtopic": "Kadane's Algorithm",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers nums where 1 <= nums.length <= 10^5 and -10^4 <= nums[i] <= 10^4.",
    "output_format": "An integer representing the maximum sum of the contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The contiguous subarray [4,-1,2,1] has the largest sum 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The only element is 1, so the maximum sum is also 1."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The contiguous subarray [5,4,-1,7,8] has the largest sum 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how you can keep track of the sum as you iterate through the array.",
      "You can store the maximum sum encountered so far while iterating."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Longest Consecutive Sequence",
    "description": "Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your algorithm should run in O(n) complexity.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Set"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest consecutive elements sequence.",
    "constraints": [
      "0 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [100, 4, 200, 1, 3, 2]",
        "output": "4",
        "explanation": "The longest consecutive sequence is [1, 2, 3, 4]. Its length is 4."
      },
      {
        "input": "nums = [0, 0, 1, 1, 2, 2, 3, 3]",
        "output": "4",
        "explanation": "The longest consecutive sequence is [0, 1, 2, 3]. Its length is 4."
      },
      {
        "input": "nums = []",
        "output": "0",
        "explanation": "There are no elements in the array, so the longest consecutive sequence length is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a set to eliminate duplicates and allow for O(1) lookups.",
      "For each number, check if it is the start of a sequence."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Sum Root to Leaf Numbers",
    "description": "Given a binary tree, each node contains a single digit (0-9). The root-to-leaf path represents a number by concatenating the values of the nodes along the path. Return the total sum of all root-to-leaf numbers formed in this way.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "DFS",
      "Recursion",
      "Sum"
    ],
    "input_format": "A binary tree represented as a root node.",
    "output_format": "An integer representing the sum of all root-to-leaf numbers.",
    "constraints": [
      "The number of nodes in the tree is in the range [1, 1000].",
      "0 <= Node.val <= 9"
    ],
    "examples": [
      {
        "input": "root = [1,2,3]",
        "output": "25",
        "explanation": "The root-to-leaf paths are 12 and 13, summing to 12 + 13 = 25."
      },
      {
        "input": "root = [4,9,0,5,1]",
        "output": "1026",
        "explanation": "The root-to-leaf paths are 495, 491, and 40, summing to 495 + 491 + 40 = 1026."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth-First Search (DFS) to explore paths.",
      "Accumulate the current path as you traverse the tree."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Vowels of All Substrings",
    "description": "Given a string s, return the total count of vowels present in all possible substrings of s. A substring is defined as a contiguous sequence of characters within the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u', and can be in either upper or lower case. Your task is to calculate how many times vowels appear in all substrings combined.",
    "topic": "String",
    "subtopic": "Substring Count",
    "tags": [
      "String",
      "Count",
      "Substrings",
      "Vowels"
    ],
    "input_format": "A single string s (1 <= s.length <= 1000).",
    "output_format": "An integer representing the total count of vowels in all substrings of s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of English letters (both uppercase and lowercase)."
    ],
    "examples": [
      {
        "input": "s = \"abc\"",
        "output": "5",
        "explanation": "The substrings are: \"a\", \"b\", \"c\", \"ab\", \"bc\", \"abc\". The vowels in these are: \"a\" (1), \"ab\" (1), \"abc\" (1), and \"b\", \"c\" do not contain vowels. The total count of vowels is 1 + 1 + 1 = 5."
      },
      {
        "input": "s = \"aaa\"",
        "output": "10",
        "explanation": "The substrings are: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\". Each vowel contributes count based on how many substrings include it. Overall, it sums to 10."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how many substrings each character in the string contributes to.",
      "Use combinatorial counting to simplify the calculations."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Largest Number",
    "description": "Given a list of non-negative integers nums, arrange them such that they form the largest number possible. The resulting largest number must be returned as a string. Note that the integers in the list can be large, so the final number may exceed the limits of a standard 32-bit integer.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Greedy"
    ],
    "input_format": "A list of non-negative integers nums.",
    "output_format": "A string representing the largest number formed by concatenating the integers.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [10, 2]",
        "output": "210",
        "explanation": "The largest number formed is 210."
      },
      {
        "input": "nums = [3, 30, 34, 5, 9]",
        "output": "9534330",
        "explanation": "The largest number formed is 9534330."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to compare pairs of numbers to decide their order.",
      "Think about the string representation of numbers to determine the best order."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Jump Game",
    "description": "You are given an array of non-negative integers nums. Each element in the array represents your maximum jump length at that position. Your goal is to determine if you can reach the last index starting from the first index. You can assume that you can always jump from all indices that have a zero value, unless they are the last index.",
    "topic": "Array",
    "subtopic": "Greedy",
    "tags": [
      "Array",
      "Greedy",
      "Dynamic Programming"
    ],
    "input_format": "An array of non-negative integers nums.",
    "output_format": "A boolean value indicating whether you can reach the last index.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, 1, 1, 4]",
        "output": "true",
        "explanation": "You can jump to index 1, and then jump to index 4 (the last index)."
      },
      {
        "input": "nums = [3, 2, 1, 0, 4]",
        "output": "false",
        "explanation": "You will always land in a position that cannot jump to the last index."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to maintain the farthest point you can reach.",
      "Use a greedy approach to determine if you can reach the last index."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "4Sum",
    "description": "Given an array of integers `nums` and an integer target, return all unique quadruplets (a, b, c, d) such that a + b + c + d = target. You may return the answer in any order.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "A list of unique quadruplets, where each quadruplet is a list of four integers.",
    "constraints": [
      "0 <= nums.length <= 200",
      "-10^9 <= nums[i] <= 10^9",
      "The solution set must not contain duplicate quadruplets."
    ],
    "examples": [
      {
        "input": "nums = [1, 0, -1, 0, -2, 2], target = 0",
        "output": "[[-2, -1, 0, 1], [-2, 0, 0, 2], [-1, 0, 0, 1]]",
        "explanation": "The quadruplets that sum to zero are [-2, -1, 0, 1] and [-2, 0, 0, 2]."
      },
      {
        "input": "nums = []; target = 0",
        "output": "[]",
        "explanation": "There are no numbers to form quadruplets."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the array first to make it easier to avoid duplicates.",
      "Use a nested loop to fix the first two numbers and then find the last two numbers using a two-pointer approach."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Sliding Window Maximum",
    "description": "Given an array of integers nums and an integer k, return the maximum sliding window for each sliding window of size k. The sliding window moves from the start of the array to the end, and at each position, you need to find the maximum element within the current window.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Queue"
    ],
    "input_format": "An array of integers nums and an integer k (1 <= k <= nums.length).",
    "output_format": "An array of integers representing the maximum values in each sliding window.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, -1, -3, 5, 3, 6, 7], k = 3",
        "output": "[3, 3, 5, 5, 6, 7]",
        "explanation": "The maximum in each sliding window of size 3 are 3, 3, 5, 5, 6, and 7."
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]",
        "explanation": "There is only one element in the window."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a deque to keep track of the maximum elements.",
      "The front of the deque should always represent the maximum of the current window.",
      "Make sure to remove indices that are out of the current window."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Find First and Last Position of Element in Sorted Array",
    "description": "Given an array of integers sorted in non-decreasing order, find the starting and ending position of a given target value. If the target is not found in the array, return [-1, -1]. You must write an algorithm with O(log n) runtime complexity.",
    "topic": "Binary Search",
    "subtopic": "Searching",
    "tags": [
      "Binary Search",
      "Array",
      "Search"
    ],
    "input_format": "An array of integers nums (sorted in non-decreasing order) and an integer target.",
    "output_format": "A list of two integers indicating the first and last position of target in nums.",
    "constraints": [
      "0 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9",
      "nums is sorted in non-decreasing order."
    ],
    "examples": [
      {
        "input": "nums = [5, 7, 7, 8, 8, 10], target = 8",
        "output": "[3, 4]",
        "explanation": "The first position of 8 is at index 3, and the last position is at index 4."
      },
      {
        "input": "nums = [5, 7, 7, 8, 8, 10], target = 6",
        "output": "[-1, -1]",
        "explanation": "Since 6 is not present in the array, return [-1, -1]."
      },
      {
        "input": "nums = [], target = 0",
        "output": "[-1, -1]",
        "explanation": "The array is empty, so return [-1, -1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use binary search to find the first occurrence of the target.",
      "Once you find the first occurrence, continue searching to find the last occurrence."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "House Robber",
    "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money hidden, and adjacent houses have security systems connected. If two adjacent houses are robbed on the same night, the security system will trigger, and you will be caught. Given an integer array representing the amount of money of each house, return the maximum amount of money you can rob without triggering the security alarms.",
    "topic": "Dynamic Programming",
    "subtopic": "1D DP",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An integer array, nums, where 0 <= nums.length <= 100 and 0 <= nums[i] <= 400.",
    "output_format": "An integer representing the maximum amount of money you can rob.",
    "constraints": [
      "0 <= nums.length <= 100",
      "0 <= nums[i] <= 400"
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 9, 3, 1]",
        "output": "12",
        "explanation": "Robbing houses 1 (2) + 3 (9) + 5 (1) gives a maximum amount of 2 + 9 + 1 = 12."
      },
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "4",
        "explanation": "Robbing houses 1 (1) + 3 (3) gives a maximum amount of 1 + 3 = 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider a dynamic programming approach where you keep track of the maximum amount at each house.",
      "You can either rob the current house and add it to the amount at the house before the last, or skip it."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Target Sum",
    "description": "Given an integer array nums and an integer target, return the number of ways to assign symbols to the numbers in nums such that their sum equals target. Each number can be assigned a '+' or '-' sign. For example, if nums = [1, 1, 1, 1, 1] and target = 3, the possible ways to reach the target sum are: +1 +1 +1 -1 -1, +1 +1 -1 +1 -1, +1 -1 +1 +1 -1, -1 +1 +1 +1 +1. Therefore, the answer is 5.",
    "topic": "Dynamic Programming",
    "subtopic": "Backtracking",
    "tags": [
      "Dynamic Programming",
      "Backtracking",
      "Recursion"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An integer representing the number of ways to reach the target sum.",
    "constraints": [
      "1 <= nums.length <= 20",
      "-1000 <= nums[i] <= 1000",
      "-1000 <= target <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 1, 1, 1], target = 3",
        "output": "5",
        "explanation": "There are five ways to assign signs to achieve the target sum of 3."
      },
      {
        "input": "nums = [1, 2, 3], target = 4",
        "output": "1",
        "explanation": "The only way to achieve the target sum of 4 is by assigning +2 and +3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a recursive approach to generate all possible combinations.",
      "You can use memoization to optimize your recursive solution."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an array of integers nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of lists of integers representing the unique triplets that sum up to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The three unique triplets that sum to zero are [-1, -1, 2] and [-1, 0, 1]."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "Since the input is empty, there are no triplets that can be formed."
      },
      {
        "input": "nums = [0, 1, 1]",
        "output": "[]",
        "explanation": "No triplets can sum to zero with the given numbers."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try sorting the array first.",
      "Use two pointers to find pairs that sum to a specific target.",
      "Skip duplicate values to avoid duplicate triplets."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Letter Combinations of a Phone Number",
    "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Mapping of digits to letters is similar to that of a telephone keypad. Note that 1 does not map to any letters. Return the answer in any order.",
    "topic": "Backtracking",
    "subtopic": "Combination Generation",
    "tags": [
      "Backtracking",
      "String",
      "Combination"
    ],
    "input_format": "A string digits consisting of digits from '2' to '9'.",
    "output_format": "A list of strings containing all possible letter combinations.",
    "constraints": [
      "0 <= digits.length <= 4",
      "digits[i] is a digit from '2' to '9'."
    ],
    "examples": [
      {
        "input": "digits = '23'",
        "output": "[\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]",
        "explanation": "The digit '2' maps to letters 'a', 'b', 'c'; the digit '3' maps to 'd', 'e', 'f'. Combinations are formed as follows: 'ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf'."
      },
      {
        "input": "digits = ''",
        "output": "[]",
        "explanation": "An empty input should return an empty list."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a mapping of digits to letters.",
      "Consider using backtracking to build combinations."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Palindrome Linked List",
    "description": "Given the head of a singly linked list, return true if it is a palindrome. A linked list is considered a palindrome if the sequence of values read the same forwards and backwards.",
    "topic": "Linked List",
    "subtopic": "Palindrome",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Palindrome"
    ],
    "input_format": "The input consists of the head node of a singly linked list.",
    "output_format": "A boolean value indicating whether the linked list is a palindrome.",
    "constraints": [
      "The number of nodes in the linked list is in the range [1, 10^5].",
      "0 <= Node.val <= 9"
    ],
    "examples": [
      {
        "input": "head = [1,2,2,1]",
        "output": "true",
        "explanation": "The linked list reads the same forwards and backwards."
      },
      {
        "input": "head = [1,2]",
        "output": "false",
        "explanation": "The linked list does not read the same forwards and backwards."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider reversing the second half of the linked list.",
      "Use a slow and fast pointer approach to find the middle of the linked list."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Basic Calculator II",
    "description": "Implement a basic calculator to evaluate a simple expression string containing non-negative integers, '+', '-', '*', and '/' operators. The expression should be evaluated according to the order of operations (PEMDAS/BODMAS). Handle edge cases such as multiple spaces, incorrect operators, and assumptions about the input format.",
    "topic": "Math",
    "subtopic": "String Parsing",
    "tags": [
      "Math",
      "String Parsing",
      "Calculator"
    ],
    "input_format": "A string `s` representing the expression to evaluate.",
    "output_format": "An integer representing the result of the evaluated expression.",
    "constraints": [
      "1 <= s.length <= 3 * 10^5",
      "The expression contains only non-negative integers and operators.",
      "Operators are '+', '-', '*', '/' and there may be spaces.",
      "Division should be integer division."
    ],
    "examples": [
      {
        "input": "s = '3+2*2'",
        "output": "7",
        "explanation": "2 * 2 is evaluated first, then 3 + 4 equals 7."
      },
      {
        "input": "s = ' 3/2 '",
        "output": "1",
        "explanation": "Integer division of 3 by 2 gives 1."
      },
      {
        "input": "s = ' 3+5 / 2 '",
        "output": "5",
        "explanation": "5 / 2 is calculated as 2, then 3 + 2 equals 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about using a stack to keep track of operators and operands.",
      "Handle one operator at a time according to precedence."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Gas Station",
    "description": "There are N gas stations along a circular route, where the amount of gas at station i is gas[i]. You can travel from station i to station i+1 with the cost of cost[i] gas. You start at any gas station and need to determine if you can travel around the circuit once without running out of gas. If possible, return the starting gas station's index. Otherwise, return -1.",
    "topic": "Greedy Algorithms",
    "subtopic": "Circular Array",
    "tags": [
      "Greedy",
      "Array",
      "Simulation"
    ],
    "input_format": "Two lists: the amount of gas at each station, gas, and the cost to travel to the next station, cost.",
    "output_format": "An integer representing the index of the starting gas station or -1 if it's not possible to complete the circuit.",
    "constraints": [
      "N == gas.length == cost.length",
      "1 <= N <= 10^5",
      "0 <= gas[i], cost[i] <= 10^4"
    ],
    "examples": [
      {
        "input": {
          "gas": [
            1,
            2,
            3,
            4,
            5
          ],
          "cost": [
            3,
            4,
            5,
            1,
            2
          ]
        },
        "output": "3",
        "explanation": "Starting at index 3, you can travel to 4 (with 4-1=3 gas left), then to 0 (with 3-2=1 gas left), then to 1 (with 1-3=-2 gas left - not possible). Therefore, index 3 will allow a full loop back."
      },
      {
        "input": {
          "gas": [
            2,
            3,
            4
          ],
          "cost": [
            3,
            4,
            3
          ]
        },
        "output": "-1",
        "explanation": "Not enough gas at any starting point to complete the loop."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Calculate the total gas and total cost.",
      "If total gas is less than total cost, return -1.",
      "Try a greedy approach to find a valid starting point."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Find Peak Element",
    "description": "A peak element in an array is an element that is greater than its neighbors. Given an array of integers, you need to find one peak element and return its index. You may assume that the array is not empty and the elements at the edges have only one neighbor.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Binary Search",
      "Peak Finding"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the index of the peak element.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "2",
        "explanation": "The peak element is 3 at index 2."
      },
      {
        "input": "nums = [1, 2, 1, 3, 5, 6, 4]",
        "output": "1 or 5",
        "explanation": "The peaks are 2 at index 1 and 6 at index 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "You can use binary search to improve the time complexity.",
      "Consider edge cases where the peak may be at the boundaries."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Amount of Time for Binary Tree to Be Infected",
    "description": "In a binary tree, each node represents an individual who may be infected with a virus. When a node is infected, it can spread the infection to its immediate neighbors in one minute. Given the root of the binary tree and the node that starts the infection, return the amount of time it takes for the entire tree to be infected.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Graph"
    ],
    "input_format": "The first input is a binary tree represented as a root node. The second input is an integer representing the target node's value where the infection starts.",
    "output_format": "An integer representing the total time in minutes for the entire binary tree to be infected.",
    "constraints": [
      "The number of nodes in the tree is in the range [1, 1000].",
      "Each node's value is unique.",
      "0 <= target_node_value <= 1000."
    ],
    "examples": [
      {
        "input": "root = [1, 2, 3, 4, 5, 6], target_node_value = 4",
        "output": "3",
        "explanation": "Starting from node 4, the infection spreads to nodes 2 and 5 in the first minute, then to nodes 1, 3, and 6 in the following minutes, taking a total of 3 minutes."
      },
      {
        "input": "root = [1], target_node_value = 1",
        "output": "0",
        "explanation": "There is only one node which is already infected, so it takes 0 minutes."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a breadth-first search (BFS) to traverse through the tree.",
      "Keep track of the time taken to infect each level of the tree."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Combination Sum",
    "description": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. The same number may be chosen from candidates an unlimited number of times. The combinations should be returned in any order. Two combinations are considered unique if the frequency of at least one of the chosen numbers is different.",
    "topic": "Backtracking",
    "subtopic": "Combination Sum",
    "tags": [
      "Backtracking",
      "Combination",
      "DFS"
    ],
    "input_format": "A list of distinct integers candidates and an integer target.",
    "output_format": "A list of lists of integers, where each list represents a unique combination that sums up to the target.",
    "constraints": [
      "1 <= candidates.length <= 30",
      "1 <= candidates[i] <= 200",
      "All elements of candidates are unique.",
      "1 <= target <= 500"
    ],
    "examples": [
      {
        "input": "candidates = [2, 3, 6, 7], target = 7",
        "output": "[[2, 2, 3], [7]]",
        "explanation": "The two combinations that sum to 7 are [2, 2, 3] and [7]."
      },
      {
        "input": "candidates = [1], target = 2",
        "output": "[[1, 1]]",
        "explanation": "The only combination that sums to 2 is [1, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a backtracking approach to explore combinations.",
      "You can choose the same number multiple times in a combination."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Number of Distinct Islands",
    "description": "Given a 2D grid of '1's (land) and '0's (water), calculate the number of distinct islands. An island is a group of '1's connected horizontally or vertically, but not diagonally. Two islands are considered distinct if they have different shapes, even if they are the same size and consist of the same number of '1's. You need to return the count of distinct islands in the grid.",
    "topic": "Graph",
    "subtopic": "DFS/BFS",
    "tags": [
      "Graph",
      "DFS",
      "BFS",
      "Matrix"
    ],
    "input_format": "A 2D binary grid represented as a list of lists, where grid[i][j] is either 0 or 1.",
    "output_format": "An integer representing the number of distinct islands.",
    "constraints": [
      "1 <= grid.length <= 300",
      "1 <= grid[i].length <= 300",
      "grid[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "grid = [[1,1,0,0,0],[0,1,0,0,1],[0,0,0,1,1],[0,0,0,0,0]]",
        "output": "2",
        "explanation": "There are two distinct islands in the grid. The first island is made of three '1's connected horizontally and the second one is made of four '1's connected vertically."
      },
      {
        "input": "grid = [[1,1,0,1,0],[1,0,0,0,0],[0,0,1,0,1],[0,0,0,1,1]]",
        "output": "3",
        "explanation": "The first island consists of the four '1's connected in the upper part. The second island is a single '1' on the left, and the third island is connected '1's on the right."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using depth-first search (DFS) or breadth-first search (BFS) to explore the islands.",
      "To uniquely identify an island shape, consider storing the relative positions of the '1's."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Subarray Sum Equals K",
    "description": "Given an integer array nums and an integer k, return the total number of continuous subarrays whose sum equals to k.",
    "topic": "Array",
    "subtopic": "Prefix Sum",
    "tags": [
      "Array",
      "HashMap",
      "Prefix Sum"
    ],
    "input_format": "An integer array nums followed by an integer k.",
    "output_format": "An integer representing the number of continuous subarrays whose sum equals k.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "-1000 <= nums[i] <= 1000",
      "-10^7 <= k <= 10^7"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 1], k = 2",
        "output": "2",
        "explanation": "The subarrays are [1, 1] (indexes 0-1) and [1, 1] (indexes 1-2), both sum to 2."
      },
      {
        "input": "nums = [1, 2, 3], k = 3",
        "output": "2",
        "explanation": "The subarrays are [3] (indexes 2) and [1, 2] (indexes 0-1)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a HashMap to store the cumulative sum.",
      "Think about how the sum can be computed using a running total."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Next Permutation",
    "description": "Implement the next permutation algorithm, which rearranges numbers into the next lexicographically greater permutation of numbers. If such an arrangement is not possible, it must be rearranged as the lowest possible order (i.e., sorted in ascending order). The algorithm must run in-place and use only constant extra memory.",
    "topic": "Array",
    "subtopic": "Permutation",
    "tags": [
      "Array",
      "Permutation",
      "In-Place"
    ],
    "input_format": "An array of integers 'nums' of length n.",
    "output_format": "Modify 'nums' in-place to represent its next permutation.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 100"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "[1, 3, 2]",
        "explanation": "The next permutation is obtained by swapping the last two elements."
      },
      {
        "input": "nums = [3, 2, 1]",
        "output": "[1, 2, 3]",
        "explanation": "The input is the last permutation, so the output should be the first permutation."
      },
      {
        "input": "nums = [1, 1, 5]",
        "output": "[1, 5, 1]",
        "explanation": "The next permutation is obtained by swapping the first and last elements."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Find the first decreasing element from the end.",
      "Find the right element to swap with the first decreasing element.",
      "Reverse the elements after the first decreasing element."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Time Needed to Rearrange a Binary String",
    "description": "You are given a binary string consisting of '0's and '1's. Your task is to determine the minimum number of moves required to rearrange the string so that all '0's come before all '1's. A move consists of selecting a '1' and moving it to a position before all '0's (that is, to the left of any '0s'). The string may be modified as many times as needed until all '0's are in front of all '1's.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Binary",
      "Greedy"
    ],
    "input_format": "A binary string s consisting only of '0's and '1's.",
    "output_format": "An integer representing the minimum number of moves needed.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of '0's and '1's only."
    ],
    "examples": [
      {
        "input": "s = '1001'",
        "output": "1",
        "explanation": "We can move the '1' at position 1 to position 0, resulting in '0100' which satisfies the condition."
      },
      {
        "input": "s = '1100'",
        "output": "0",
        "explanation": "All '0's are already to the right of all '1's. No moves are needed."
      },
      {
        "input": "s = '010101'",
        "output": "3",
        "explanation": "We need to move three '1's that are located to the left of '0's to achieve '000111'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Count the number of '0's and track positions of '1's.",
      "Greedily position '1's as far left as possible."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Permutations",
    "description": "Given a collection of distinct integers, return all possible permutations. You can return the answer in any order. The order of the output does not matter, but each combination should be unique, and the result should not contain duplicates.",
    "topic": "Backtracking",
    "subtopic": "Permutations",
    "tags": [
      "Backtracking",
      "Recursion",
      "Permutations"
    ],
    "input_format": "A list of distinct integers, nums.",
    "output_format": "A list of all possible permutations of the input list.",
    "constraints": [
      "1 <= nums.length <= 6",
      "-10 <= nums[i] <= 10"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": [
          [
            1,
            2,
            3
          ],
          [
            1,
            3,
            2
          ],
          [
            2,
            1,
            3
          ],
          [
            2,
            3,
            1
          ],
          [
            3,
            1,
            2
          ],
          [
            3,
            2,
            1
          ]
        ],
        "explanation": "For the input [1, 2, 3], all possible arrangements of the list are generated."
      },
      {
        "input": "nums = [0, 1]",
        "output": [
          [
            0,
            1
          ],
          [
            1,
            0
          ]
        ],
        "explanation": "For the input [0, 1], the two possible permutations are generated."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use backtracking to explore all potential arrangements of elements.",
      "Make sure to use a system to track which elements have been used in the current permutation."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Pow(x, n)",
    "description": "Implement a function to calculate x raised to the power n (x^n). This function should handle both positive and negative exponents. For example, pow(2, 3) should return 8, while pow(2, -2) should return 0.25.",
    "topic": "Math",
    "subtopic": "Exponentiation",
    "tags": [
      "Math",
      "Exponentiation",
      "Recursion"
    ],
    "input_format": "Two numbers, x (floating-point) and n (integer), where x is the base and n is the exponent.",
    "output_format": "A floating-point number representing x raised to the power n.",
    "constraints": [
      "-10^4 <= x <= 10^4",
      "-10^4 <= n <= 10^4"
    ],
    "examples": [
      {
        "input": "x = 2, n = 3",
        "output": "8.0",
        "explanation": "2 raised to the power of 3 is 2 * 2 * 2 = 8."
      },
      {
        "input": "x = 2, n = -2",
        "output": "0.25",
        "explanation": "2 raised to the power of -2 is 1 / (2^2) = 1 / 4 = 0.25."
      },
      {
        "input": "x = 0, n = 5",
        "output": "0.0",
        "explanation": "Any non-negative power of 0 is 0."
      },
      {
        "input": "x = 3, n = 0",
        "output": "1.0",
        "explanation": "Any number raised to the power of 0 is 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the case when n is negative.",
      "You can use a recursive approach for this problem."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Minimum One Bit Operations to Make Integers Zero",
    "description": "Given an integer n, you are allowed to perform the following operation any number of times: choose a bit position i (0-indexed) and flip the bit at that position. Your task is to find the minimum number of such operations required to make the integer n equal to zero. For instance, if you have an integer with the bits represented as 101 (which is 5 in decimal), you would need to flip the first and third bits to achieve 000 (which is 0 in decimal).",
    "topic": "Bit Manipulation",
    "subtopic": "Bit Operations",
    "tags": [
      "Bit Manipulation",
      "Integer",
      "Operations"
    ],
    "input_format": "An integer n, where 0 <= n <= 10^9.",
    "output_format": "An integer representing the minimum number of bit operations required to make n zero.",
    "constraints": [
      "0 <= n <= 10^9"
    ],
    "examples": [
      {
        "input": "n = 5",
        "output": "2",
        "explanation": "The binary representation of 5 is '101'. To make it zero, flip the 1st bit and the 3rd bit."
      },
      {
        "input": "n = 8",
        "output": "4",
        "explanation": "The binary representation of 8 is '1000'. To make it zero, flip all four bits."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Count the number of bits set to 1 in the binary representation of the number."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Coin Change",
    "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. You want to know the fewest number of coins that you need to make up that amount. If that amount cannot be made up by any combination of the coins, return -1.",
    "topic": "Dynamic Programming",
    "subtopic": "Coin Change Problem",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of integers coins and an integer amount.",
    "output_format": "An integer representing the fewest number of coins needed to make up the amount, or -1 if it is not possible.",
    "constraints": [
      "1 <= coins.length <= 12",
      "1 <= coins[i] <= 2^31 - 1",
      "0 <= amount <= 10^4"
    ],
    "examples": [
      {
        "input": "coins = [1, 2, 5], amount = 11",
        "output": "3",
        "explanation": "The fewest coins that make up 11 are 5 + 5 + 1 = 11. Thus, the answer is 3."
      },
      {
        "input": "coins = [2], amount = 3",
        "output": "-1",
        "explanation": "It is not possible to make up the amount 3 using coins of denomination 2."
      },
      {
        "input": "coins = [1], amount = 0",
        "output": "0",
        "explanation": "No coins are needed to make up the amount 0. Thus, the answer is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dynamic programming approach to solve the problem.",
      "Start by creating an array to store the minimum coins needed for each amount up to the target."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Implement Trie (Prefix Tree)",
    "description": "Design and implement a Trie (prefix tree) so that you can perform the following operations: insert a word, search a word, and start with a prefix. Implement the methods insert(word), search(word), and startsWith(prefix).",
    "topic": "Tree",
    "subtopic": "Trie",
    "tags": [
      "Trie",
      "Tree",
      "Dictionary"
    ],
    "input_format": "You need to implement a class Trie with the following methods: insert, search, and startsWith. Each method will take a string as input.",
    "output_format": "The insert method returns nothing. The search method returns a boolean indicating whether the word exists in the Trie. The startsWith method returns a boolean indicating whether there is any word in the Trie that starts with the given prefix.",
    "constraints": [
      "All inputs are lowercase English letters.",
      "The maximum length of a word is 200.",
      "The maximum number of words in the Trie is 10^4."
    ],
    "examples": [
      {
        "input": "Trie trie = new Trie(); trie.insert(\"apple\"); boolean searchApple = trie.search(\"apple\"); boolean searchApp = trie.startsWith(\"app\"); trie.insert(\"app\"); boolean searchAppAfterInsert = trie.search(\"app\");",
        "output": "[true, true, true]",
        "explanation": "After inserting 'apple', the search method confirms its existence. The startsWith checks if 'app' is a prefix and returns true. After inserting 'app', searching for 'app' also returns true."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to structure the Trie node.",
      "Each node can represent a character and have a map of children nodes.",
      "Use a flag to indicate the end of a word."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Search Suggestions System",
    "description": "Given a list of products and a search word, return a list of suggested products as the user types each character of the search word. The suggestions should be sorted lexicographically. If there are no suggestions, return an empty list.",
    "topic": "String",
    "subtopic": "Autocomplete",
    "tags": [
      "String",
      "Sorting",
      "Search"
    ],
    "input_format": "A list of strings products and a string searchWord.",
    "output_format": "A list of lists of strings where each sublist contains suggestions for the current prefix of searchWord.",
    "constraints": [
      "1 <= products.length <= 1000",
      "1 <= products[i].length <= 100",
      "All characters of products[i] are lowercase English letters.",
      "The input list 'products' is already sorted."
    ],
    "examples": [
      {
        "input": {
          "products": [
            "mobile",
            "mouse",
            "moneypot",
            "monitor",
            "mousepad"
          ],
          "searchWord": "mouse"
        },
        "output": [
          [
            "mobile",
            "moneypot",
            "monitor",
            "mouse",
            "mousepad"
          ],
          [
            "mobile",
            "moneypot",
            "monitor",
            "mouse",
            "mousepad"
          ],
          [
            "mouse",
            "mousepad"
          ],
          [
            "mouse",
            "mousepad"
          ],
          [
            "mouse",
            "mousepad"
          ]
        ],
        "explanation": "As users type 'm', all products starting with 'm' are suggested. As they continue typing, suggestions narrow down to those starting specifically with 'mou'."
      },
      {
        "input": {
          "products": [
            "havana"
          ],
          "searchWord": "havana"
        },
        "output": [
          [
            "havana"
          ],
          [
            "havana"
          ],
          [
            "havana"
          ],
          [
            "havana"
          ],
          [
            "havana"
          ],
          [
            "havana"
          ]
        ],
        "explanation": "Each character typed continues to yield the single product 'havana'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a Trie data structure for efficient prefix matching.",
      "Sort the products before processing the search suggestions."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Partition Equal Subset Sum",
    "description": "Given a non-empty array of positive integers, you need to determine if it can be partitioned into two subsets such that the sum of the elements in both subsets is equal. This problem can be solved using dynamic programming or backtracking.",
    "topic": "Dynamic Programming",
    "subtopic": "Subset Sum Problem",
    "tags": [
      "Dynamic Programming",
      "Backtracking",
      "Subset Sum"
    ],
    "input_format": "An array of positive integers nums.",
    "output_format": "A boolean value: true if the array can be partitioned into two equal subsets, otherwise false.",
    "constraints": [
      "1 <= nums.length <= 200",
      "1 <= nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [1, 5, 11, 5]",
        "output": "true",
        "explanation": "The array can be partitioned into [1, 5, 5] and [11] with equal sum 11."
      },
      {
        "input": "nums = [1, 2, 3, 5]",
        "output": "false",
        "explanation": "The array cannot be partitioned into two subsets with equal sum."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the total sum of the array.",
      "Use dynamic programming to check for subset sums."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Minimum Number of Taps to Open to Water a Garden",
    "description": "You have a garden of length n, and you have n taps numbered from 0 to n-1. Each tap can water a specific segment of the garden. For example, if tap i can water from the leftmost point x to the rightmost point y, it can water the garden from index x to index y (0-indexed). Your goal is to determine the minimum number of taps you need to open to water the entire garden. If it's not possible to water the entire garden, return -1.",
    "topic": "Greedy",
    "subtopic": "Interval Coverage",
    "tags": [
      "Greedy",
      "Interval",
      "Dynamic Programming"
    ],
    "input_format": "An integer n representing the length of the garden, followed by an array of n integers where each integer represents the range of the respective tap.",
    "output_format": "An integer representing the minimum number of taps needed to water the entire garden, or -1 if it's not possible.",
    "constraints": [
      "1 <= n <= 100",
      "0 <= tap[i] <= n"
    ],
    "examples": [
      {
        "input": "n = 5, taps = [0, 2, 1, 1, 4, 0]",
        "output": "1",
        "explanation": "Opening tap 4 can cover the entire garden from 0 to 5."
      },
      {
        "input": "n = 3, taps = [0, 0, 0, 0]",
        "output": "-1",
        "explanation": "It's impossible to water the garden as all taps cover only the index 0."
      },
      {
        "input": "n = 7, taps = [1, 2, 1, 0, 2, 1, 0, 0]",
        "output": "3",
        "explanation": "You need to open taps 0, 1, and 2 to cover the entire garden."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how each tap's coverage can extend the watering range.",
      "Use a greedy approach to select taps that maximize coverage."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Min Stack",
    "description": "Implement a stack that supports push, pop, top, and retrieving the minimum element in constant time. Your task is to design a stack that supports the following operations:\n\n1. **push(x)**: Pushes the element x onto the stack.\n2. **pop()**: Removes the element on the top of the stack.\n3. **top()**: Gets the top element of the stack.\n4. **getMin()**: Retrieves the minimum element in the stack.\n\nYou must implement these operations such that their time complexity is O(1) for each operation.",
    "topic": "Data Structures",
    "subtopic": "Stack",
    "tags": [
      "Stack",
      "Design",
      "Data Structures"
    ],
    "input_format": "No formal input format as the operations are performed through function calls.",
    "output_format": "The operations return the results for `top()` and `getMin()`; `pop()` does not return anything.",
    "constraints": [
      "The number of operations will be in the range of [1, 10^4].",
      "All operations are guaranteed to be valid."
    ],
    "examples": [
      {
        "input": "MinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin();\nminStack.pop();\nminStack.top();\nminStack.getMin();",
        "output": "-3\n0\n-2",
        "explanation": "After executing the operations, the minimum is -3, top is 0 after popping -3, and the new minimum is -2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using two stacks: one for the main stack and one for tracking the minimum values."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Find Minimum in Rotated Sorted Array",
    "description": "Given a rotated sorted array, find the minimum element in the array. The array was originally sorted in ascending order, but then rotated at some pivot. You must write an efficient algorithm that runs in O(log n) time complexity.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Sorted Array"
    ],
    "input_format": "An array of integers `nums` representing the rotated sorted array.",
    "output_format": "An integer representing the minimum element in the array.",
    "constraints": [
      "1 <= nums.length <= 5000",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [3, 4, 5, 1, 2]",
        "output": "1",
        "explanation": "The minimum element in the rotated array is 1."
      },
      {
        "input": "nums = [4, 5, 6, 7, 0, 1, 2]",
        "output": "0",
        "explanation": "The minimum element in the rotated array is 0."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The only element is the minimum element."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to find the pivot.",
      "The minimum will be at the pivot point."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Word Break II",
    "description": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences. Note that the same word in the dictionary may be reused multiple times in the segmentation.",
    "topic": "Dynamic Programming",
    "subtopic": "Backtracking",
    "tags": [
      "Dynamic Programming",
      "Backtracking",
      "String"
    ],
    "input_format": "A string s representing the input and a list of strings wordDict representing the dictionary.",
    "output_format": "A list of all possible sentences representing valid segmentations of the string.",
    "constraints": [
      "1 <= s.length <= 20",
      "1 <= wordDict.length <= 1000",
      "1 <= wordDict[i].length <= 10"
    ],
    "examples": [
      {
        "input": {
          "s": "catsanddog",
          "wordDict": [
            "cat",
            "cats",
            "and",
            "sand",
            "dog"
          ]
        },
        "output": [
          "cats and dog",
          "cat sand dog"
        ],
        "explanation": "The string can be segmented into two valid sentences: 'cats and dog' and 'cat sand dog'."
      },
      {
        "input": {
          "s": "pineapplepenapple",
          "wordDict": [
            "apple",
            "pen",
            "applepen",
            "pine",
            "pineapple"
          ]
        },
        "output": [
          "pine apple pen apple",
          "pineapple pen apple",
          "pine applepen apple"
        ],
        "explanation": "There are three valid segmentations for the string."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use backtracking to explore all possible word breaks.",
      "Memoization can help in storing results of previously computed states.",
      "Consider splitting the string at every position."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Valid Palindrome",
    "description": "Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring case. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization).",
    "topic": "String",
    "subtopic": "Two Pointers",
    "tags": [
      "String",
      "Palindrome",
      "Two Pointers"
    ],
    "input_format": "A string s consisting of printable ASCII characters.",
    "output_format": "A boolean value. Return true if s is a palindrome, otherwise return false.",
    "constraints": [
      "0 <= s.length <= 2 * 10^5"
    ],
    "examples": [
      {
        "input": "A man, a plan, a canal: Panama",
        "output": "true",
        "explanation": "After removing non-alphanumeric characters and considering case, the string reads 'amanaplanacanalpanama', which is a palindrome."
      },
      {
        "input": "race a car",
        "output": "false",
        "explanation": "After processing the string, it reads 'raceacar', which is not a palindrome."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using two pointers to compare characters from both ends of the string."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Populating Next Right Pointers in Each Node",
    "description": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL. Initially, all next pointers are set to NULL.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Depth-First Search"
    ],
    "input_format": "The root of the perfect binary tree.",
    "output_format": "Return the root of the tree after populating the next right pointers.",
    "constraints": [
      "The number of nodes in the tree is between 0 and 6000.",
      "Each node's value is between 1 and 6000."
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "[1,#,2,3,#,4,5,6,7,#]",
        "explanation": "After populating the next pointers, each node points to its next right node or NULL where applicable."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a level-order traversal approach.",
      "Utilize a queue to keep track of the nodes at the current level."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Rotting Oranges",
    "description": "You are given a 2D grid representing a box of oranges, where each cell can have one of three values: 0 representing an empty cell, 1 representing a fresh orange, or 2 representing a rotten orange. Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange will rot. Return the minimum number of minutes that must elapse until no fresh oranges remain. If it is impossible to rot all oranges, return -1.",
    "topic": "Graph",
    "subtopic": "BFS",
    "tags": [
      "Graph",
      "BFS",
      "Simulation"
    ],
    "input_format": "A 2D grid of integers where each element is 0, 1, or 2.",
    "output_format": "An integer representing the minimum number of minutes until all oranges are rotten or -1 if not possible.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 300",
      "grid[i][j] is 0, 1, or 2."
    ],
    "examples": [
      {
        "input": "grid = [[2,1,1],[1,1,0],[0,1,1]]",
        "output": "4",
        "explanation": "Initially, the rotten orange at (0,0) will rot its neighbors in 4 minutes."
      },
      {
        "input": "grid = [[2,1,1],[0,1,1],[1,0,2]]",
        "output": "-1",
        "explanation": "The fresh orange at (1,1) cannot be rotted because it is isolated from rotten oranges."
      },
      {
        "input": "grid = [[0,2]]",
        "output": "0",
        "explanation": "There are no fresh oranges, so the time taken is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use BFS to traverse and rot neighboring fresh oranges.",
      "Count the time taken until all reachable fresh oranges are rotten."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Binary Tree Zigzag Level Order Traversal",
    "description": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).",
    "topic": "Tree",
    "subtopic": "Binary Tree Traversal",
    "tags": [
      "Tree",
      "Breadth-First Search",
      "Traversal"
    ],
    "input_format": "The input consists of the root node of a binary tree.",
    "output_format": "A list of lists of integers representing the zigzag level order traversal of the binary tree.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 2000].",
      "-100 <= Node.val <= 100"
    ],
    "examples": [
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "[[3],[20,9],[15,7]]",
        "explanation": "The zigzag level order traversal of the tree is: 1st level: [3], 2nd level: [20, 9] from right to left, 3rd level: [15, 7]."
      },
      {
        "input": "root = [1]",
        "output": "[[1]]",
        "explanation": "The tree has only one node, thus the traversal result is simply [[1]]."
      },
      {
        "input": "root = []",
        "output": "[]",
        "explanation": "Since the tree is empty, the traversal result is an empty list."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a queue to assist with level order traversal.",
      "Alternate the direction of traversal for each level."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "You are given two integer arrays, nums1 and nums2, which are sorted in non-decreasing order. You need to merge nums2 into nums1 as one sorted array. The number of elements initialized in nums1 and nums2 are m and n respectively and the remaining space in nums1 should be filled with 0s, which are not considered part of the merged array. After merging, the merged array should also be sorted in non-decreasing order.",
    "topic": "Array",
    "subtopic": "Merging Arrays",
    "tags": [
      "Array",
      "Sorting",
      "Merge"
    ],
    "input_format": "Two integer arrays nums1 and nums2, where nums1 has a size of m + n and nums2 has a size of n.",
    "output_format": "The merged array stored in nums1, should be modified in-place.",
    "constraints": [
      "0 <= m, n <= 200",
      "1 <= m + n <= 200",
      "-10^9 <= nums1[i], nums2[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1, 2, 3, 0, 0, 0], m = 3, nums2 = [2, 5, 6], n = 3",
        "output": "[1, 2, 2, 3, 5, 6]",
        "explanation": "After merging, the array in nums1 should be [1, 2, 2, 3, 5, 6]."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "No elements from nums2 to merge, nums1 remains [1]."
      },
      {
        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "output": "[1]",
        "explanation": "Only one element from nums2 is merged, resulting in [1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider merging the arrays from the end to avoid overwriting elements in nums1.",
      "Use two pointers to track the current index of nums1 and nums2."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Rotate Array",
    "description": "Given an array of integers and a number k, rotate the array to the right by k steps, where k is non-negative. You must do this in-place without using extra space.",
    "topic": "Array",
    "subtopic": "In-place Array Manipulation",
    "tags": [
      "Array",
      "Rotation",
      "In-place"
    ],
    "input_format": "An array of integers `nums`, followed by an integer `k`.",
    "output_format": "The same array `nums` rotated in-place.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= k <= 10^5",
      "\u221210^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5], k = 2",
        "output": "[4, 5, 1, 2, 3]",
        "explanation": "Rotating the array to the right by 2 results in [4, 5, 1, 2, 3]."
      },
      {
        "input": "nums = [-1, -100, 3, 99], k = 2",
        "output": "[3, 99, -1, -100]",
        "explanation": "After rotating the array to the right by 2 steps, we get [3, 99, -1, -100]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how many effective rotations are needed if k exceeds the array length.",
      "Reverse the array in parts to achieve this in-place."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Product of Array Except Self",
    "description": "Given an integer array nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. You must solve it without using division and in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Prefix and Suffix Products",
    "tags": [
      "Array",
      "Product",
      "Prefix",
      "Suffix"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An array of integers representing the product of all elements except the current one.",
    "constraints": [
      "2 <= nums.length <= 10^5",
      "-30 <= nums[i] <= 30"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "[24, 12, 8, 6]",
        "explanation": "The product of all elements except the element at index 0 is 2 * 3 * 4 = 24, and so on for other indices."
      },
      {
        "input": "nums = [-1, 1, 0, -3, 3]",
        "output": "[0, 0, 9, 0, 0]",
        "explanation": "The product for index 2 (value 0) is all other values multiplied together (-1 * 1 * -3 * 3 = 9), while the others are 0 due to the presence of 0 in the array."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use two passes to calculate prefix and suffix products.",
      "Consider how to store the intermediate products without using extra space."
    ],
    "company": "ServiceNow"
  },
  {
    "question_id": "",
    "title": "Single Element in a Sorted Array",
    "description": "Given a sorted array of integers where every element appears three times except for one element which appears exactly once, find that single element. You must implement a solution with a linear runtime complexity.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Binary Search"
    ],
    "input_format": "An array of integers arr, sorted in ascending order.",
    "output_format": "An integer representing the single element that appears only once in the array.",
    "constraints": [
      "1 <= arr.length <= 3 * 10^4",
      "0 <= arr[i] <= 10^5",
      "The array is guaranteed to have one single element."
    ],
    "examples": [
      {
        "input": "arr = [2, 2, 3, 2]",
        "output": "3",
        "explanation": "The number 3 is the only number that appears once."
      },
      {
        "input": "arr = [0, 1, 0, 1, 0, 1, 99]",
        "output": "99",
        "explanation": "The number 99 is the only number that appears once."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search for efficiency.",
      "Think about how the index of elements changes based on their parity."
    ],
    "company": "ServiceNow"
  }
]