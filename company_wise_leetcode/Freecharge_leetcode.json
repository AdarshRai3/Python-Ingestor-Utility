[
  {
    "question_id": "",
    "title": "Gas Station",
    "description": "There are N gas stations along a circular route, where the amount of gas at the i-th station is gas[i]. You have a car that can travel for gas[i] miles from station i. You start at a particular station and want to determine if you can travel around the entire circuit. If you can travel around the circuit, return the starting gas station index. Otherwise, return -1.",
    "topic": "Greedy",
    "subtopic": "Simulation",
    "tags": [
      "Greedy",
      "Simulation",
      "Array"
    ],
    "input_format": "Two arrays: `gas` and `cost`, both of length N. `gas[i]` represents the amount of gas available at station i, and `cost[i]` represents the cost of gas required to travel to the next station.",
    "output_format": "An integer that represents the starting gas station index, or -1 if it is not possible to complete the circuit.",
    "constraints": [
      "N == gas.length",
      "N == cost.length",
      "1 <= N <= 10^5",
      "0 <= gas[i], cost[i] <= 10^4"
    ],
    "examples": [
      {
        "input": {
          "gas": [
            1,
            2,
            3,
            4,
            5
          ],
          "cost": [
            3,
            4,
            5,
            1,
            2
          ]
        },
        "output": "3",
        "explanation": "Starting at station 3 with gas 4, the car can travel to station 4 (gas 5), then to station 0 (gas 1), then to station 1 (gas 2), and finally to station 2 (gas 3). Hence, it is possible to make a complete circuit starting from station 3."
      },
      {
        "input": {
          "gas": [
            2,
            3,
            4
          ],
          "cost": [
            3,
            4,
            3
          ]
        },
        "output": "-1",
        "explanation": "It's impossible to make a complete circuit due to insufficient gas."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the total gas and total cost.",
      "Track the current gas balance while simulating the circuit.",
      "If you run out of gas, the next starting point must be after the current station."
    ],
    "company": "Freecharge"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for an LRU (Least Recently Used) Cache. It should support the following operations: get and put.\n\n1. get(key): If the key exists in the cache, return the value of the key. Otherwise, return -1.\n2. put(key, value): If the key already exists, update the value. If the cache reaches its capacity, it should invalidate the least recently used key before inserting a new key-value pair.",
    "topic": "Design",
    "subtopic": "Cache Design",
    "tags": [
      "Design",
      "Cache",
      "LRU"
    ],
    "input_format": "The cache will be initialized with a positive capacity.\nOperations will consist of get and put methods.",
    "output_format": "The result of the get method calls (either the value or -1).",
    "constraints": [
      "The capacity of the cache is between 1 and 3000.",
      "All keys and values are non-negative.",
      "The functions get and put must each run in O(1) average time complexity."
    ],
    "examples": [
      {
        "input": "LRUCache cache = new LRUCache(2);\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);",
        "output": "1",
        "explanation": "The cache contains [1, 2]. The get method returns 1."
      },
      {
        "input": "cache.put(3, 3);\ncache.get(2);",
        "output": "-1",
        "explanation": "The cache is full, and the key 2 was least recently used. The get method returns -1."
      },
      {
        "input": "cache.put(4, 4);\ncache.get(1);",
        "output": "-1",
        "explanation": "The key 1 was evicted due to cache capacity. The get method returns -1."
      },
      {
        "input": "cache.get(3);",
        "output": "3",
        "explanation": "The key 3 is still in the cache, returning its value."
      },
      {
        "input": "cache.get(4);",
        "output": "4",
        "explanation": "The key 4 is in the cache, returning its value."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a combination of a hash map and a doubly linked list.",
      "The hash map can store the key and its corresponding node for O(1) access.",
      "Use the linked list to keep track of the order of usage and remove the least recently used element."
    ],
    "company": "Freecharge"
  }
]