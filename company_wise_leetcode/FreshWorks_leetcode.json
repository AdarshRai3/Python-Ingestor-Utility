[
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s consisting of parentheses.",
    "output_format": "A boolean value indicating whether the string s is valid.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The parentheses are matched and closed correctly."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "All the brackets are matched and closed correctly."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The brackets do not match correctly."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Pop from the stack when you find a closing bracket."
    ],
    "company": "FreshWorks"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers 'nums' and an integer 'target', return the indices of the two numbers such that they add up to 'target'. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Two Pointers"
    ],
    "input_format": "An array of integers 'nums' followed by an integer 'target'.",
    "output_format": "An array of two integers representing the indices of the two numbers that add up to 'target'.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to keep track of visited numbers and their indices.",
      "One loop is sufficient if you keep the numbers and their indices in the hash map."
    ],
    "company": "FreshWorks"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within a string. You need to return the length of that substring.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Hash Map"
    ],
    "input_format": "A single string s consisting of English letters, digits, symbols, and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s consists of English letters, digits, symbols and spaces."
    ],
    "examples": [
      {
        "input": "s = 'abcabcbb'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'abc', which has a length of 3."
      },
      {
        "input": "s = 'bbbbb'",
        "output": "1",
        "explanation": "The longest substring without repeating characters is 'b', with a length of 1."
      },
      {
        "input": "s = 'pwwkew'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'wke', with a length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window technique.",
      "Use a hash map to store characters and their indices.",
      "Keep track of the start index of the current substring."
    ],
    "company": "FreshWorks"
  },
  {
    "question_id": "",
    "title": "Zigzag Conversion",
    "description": "The string is written in a zigzag pattern on a given number of rows. Each row is filled sequentially from left to right, and when the bottom row is reached, the filling continues in a diagonal direction until it reaches the top row again. Given a string and the number of rows, return the string written in a zigzag pattern, read line by line.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Zigzag",
      "Manipulation"
    ],
    "input_format": "A string s and an integer numRows, where 1 <= numRows <= 1000.",
    "output_format": "A string representing the characters arranged in a zigzag pattern.",
    "constraints": [
      "1 <= s.length <= 1000",
      "numRows is a positive integer."
    ],
    "examples": [
      {
        "input": "s = 'PAYPALISHIRING', numRows = 4",
        "output": "PINALSIGYAHRIP",
        "explanation": "The zigzag pattern is:\nP   I   N\nA L S I G\nY   H   R\nAnd reading line by line gives 'PINALSIGYAHRIP'."
      },
      {
        "input": "s = 'A', numRows = 1",
        "output": "A",
        "explanation": "With only one row, the output is the same as the input."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to calculate the index of characters in each row.",
      "You can use a list of strings to build each row."
    ],
    "company": "FreshWorks"
  },
  {
    "question_id": "",
    "title": "Letter Combinations of a Phone Number",
    "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters, and the digit 0 may not be included. The mapping is as follows: \n\n2 -> 'abc'\n3 -> 'def'\n4 -> 'ghi'\n5 -> 'jkl'\n6 -> 'mno'\n7 -> 'pqrs'\n8 -> 'tuv'\n9 -> 'wxyz'.\n\nYou may return the answer in any order.",
    "topic": "Backtracking",
    "subtopic": "Combinatorial Problems",
    "tags": [
      "Backtracking",
      "String",
      "Combination"
    ],
    "input_format": "A string digits (1 <= digits.length <= 4) containing digits from 2-9",
    "output_format": "A list of strings representing all possible letter combinations.",
    "constraints": [
      "1 <= digits.length <= 4",
      "digits[i] is one of '2', '3', '4', '5', '6', '7', '8', '9'."
    ],
    "examples": [
      {
        "input": "digits = '23'",
        "output": "['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']",
        "explanation": "The digit '2' maps to 'abc' and '3' maps to 'def', which results in the combinations."
      },
      {
        "input": "digits = '2'",
        "output": "['a', 'b', 'c']",
        "explanation": "There is only one digit '2', thus we have the letters it maps to."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using backtracking to explore all combinations.",
      "You can build combinations incrementally and stop when you reach the desired length."
    ],
    "company": "FreshWorks"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithm",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices representing the stock prices on different days.",
    "output_format": "An integer representing the maximum profit that can be achieved.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done, and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Track the minimum price seen so far.",
      "At each step, calculate the potential profit and update the maximum profit."
    ],
    "company": "FreshWorks"
  },
  {
    "question_id": "",
    "title": "Find Minimum in Rotated Sorted Array",
    "description": "Given a rotated sorted array, you need to find the minimum element in the array. The array may have duplicates. The rotation means that the sorted array has been shifted at some pivot, where the original array is broken down into two parts and then reassembled. Your task is to find the minimum number in O(log n) time complexity.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Minimum"
    ],
    "input_format": "An array of integers nums, which is rotated at some pivot.",
    "output_format": "An integer representing the minimum element in the rotated sorted array.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [3, 4, 5, 1, 2]",
        "output": "1",
        "explanation": "The minimum element is 1."
      },
      {
        "input": "nums = [2, 2, 2, 0, 1, 2]",
        "output": "0",
        "explanation": "Despite duplicates, the minimum element is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search for more efficient searching.",
      "Check the mid element and its position relative to the start and end of the array."
    ],
    "company": "FreshWorks"
  },
  {
    "question_id": "",
    "title": "Maximum Product of Three Numbers",
    "description": "Given an integer array nums, you need to find three integers in the array such that their product is maximized. Return the maximum product of these three integers.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Greedy"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum product of any three integers.",
    "constraints": [
      "3 <= nums.length <= 10^4",
      "-1000 <= nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "6",
        "explanation": "The maximum product is 1 * 2 * 3 = 6."
      },
      {
        "input": "nums = [-10, -10, 5, 2]",
        "output": "500",
        "explanation": "The maximum product is -10 * -10 * 5 = 500."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider both positive and negative numbers.",
      "The maximum product could come from the two smallest numbers and the largest."
    ],
    "company": "FreshWorks"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) Cache. It should support the following operations: `get(key)` and `put(key, value)`. The `get` method retrieves the value of the key if the key exists in the cache, and otherwise returns -1. The `put` method will insert or update the value of the key. If the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Design",
    "subtopic": "Cache",
    "tags": [
      "Design",
      "Cache",
      "LinkedList",
      "HashMap"
    ],
    "input_format": "The cache is initialized with a positive capacity.",
    "output_format": "The output is the results of the `get` operations.",
    "constraints": [
      "The capacity of the cache must be positive.",
      "The key and value of each put operation are guaranteed to be non-negative integers.",
      "The maximum capacity of the cache will not exceed 1000."
    ],
    "examples": [
      {
        "input": "cache = LRUCache(2);\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1); // returns 1\ncache.put(3, 3); // evicts key 2\ncache.get(2); // returns -1 (not found)",
        "output": "1, -1",
        "explanation": "The cache has a capacity of 2, is populated with (1,1) and (2,2). Accessing key 1 returns its value, while accessing key 2 after inserting a new entry evicts it."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a data structure that allows efficient insertion and deletion.",
      "Think about how to keep track of the order of usage."
    ],
    "company": "FreshWorks"
  }
]