[
  {
    "question_id": "",
    "title": "Text Justification",
    "description": "Given an array of words and a length maxWidth, format the text such that each line has exactly maxWidth characters and is fully justified. You should align the text to both the left and right margins, adding extra spaces between words as necessary. The last line should be left-justified, meaning that it should not be fully justified, and any extra spaces should be put at the end of the line. Each word is guaranteed to be non-empty and the input array has at least one word.",
    "topic": "String",
    "subtopic": "Text Formatting",
    "tags": [
      "String",
      "Text Justification",
      "Formatting"
    ],
    "input_format": "An array of strings words and an integer maxWidth.",
    "output_format": "A list of strings where each string represents a justified line of text.",
    "constraints": [
      "1 <= words.length <= 300",
      "1 <= words[i].length <= 20",
      "words[i] consists of only English letters and spaces.",
      "maxWidth is a positive integer.",
      "1 <= maxWidth <= 100"
    ],
    "examples": [
      {
        "input": {
          "words": [
            "This",
            "is",
            "an",
            "example",
            "of",
            "text",
            "justification."
          ],
          "maxWidth": 16
        },
        "output": [
          "This    is    an",
          "example  of text",
          "justification.  "
        ],
        "explanation": "The first line is justified to have exactly 16 characters with spaces distributed evenly between the words. The last line is left-justified."
      },
      {
        "input": {
          "words": [
            "What",
            "must",
            "be",
            "acknowledgment",
            "shall",
            "be"
          ],
          "maxWidth": 16
        },
        "output": [
          "What   must   be",
          "acknowledgment  ",
          "shall be        "
        ],
        "explanation": "In the second example, each line is justified to have exactly maxWidth characters. The last line is left-justified."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how to distribute spaces between words.",
      "Think about how to handle the last line separately.",
      "You may need to calculate the total number of characters to justify correctly."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Palindrome Pairs",
    "description": "Given a list of unique words, return all the distinct pairs of indices (i, j) such that the concatenation of the two words forms a palindrome. A palindrome is a word that reads the same forward and backward.",
    "topic": "String",
    "subtopic": "Palindrome",
    "tags": [
      "String",
      "Palindrome",
      "Hash Table"
    ],
    "input_format": "An array of unique strings words.",
    "output_format": "A list of unique pairs of indices (i, j) where words[i] + words[j] is a palindrome.",
    "constraints": [
      "1 <= words.length <= 1000",
      "1 <= words[i].length <= 1000",
      "All words consist of lowercase letters."
    ],
    "examples": [
      {
        "input": "words = [\"bat\", \"tab\", \"cat\"]",
        "output": "[[0, 1], [1, 0]]",
        "explanation": "The pairs (0, 1) and (1, 0) form the palindromes \"battab\" and \"tabbat\"."
      },
      {
        "input": "words = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"]",
        "output": "[[0, 1], [1, 0], [2, 4], [4, 2]]",
        "explanation": "The pairs form the palindromes \"abcddcba\", \"dcbaabc\", \"lls\", and \"slls\"."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a hash map to store the words.",
      "Check for each word, if its reverse exists in the list.",
      "Pay attention to empty strings and their role in forming palindromes."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Maximum Profit in Job Scheduling",
    "description": "You have a collection of jobs, where each job is defined as a pair (start_time, end_time, profit). Your task is to maximize the total profit you can earn by scheduling non-overlapping jobs. Write a function that takes a list of jobs and returns the maximum profit that can be achieved. Two jobs overlap if the start time of one job is less than the end time of the other job.",
    "topic": "Dynamic Programming",
    "subtopic": "Interval Scheduling",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Interval Scheduling"
    ],
    "input_format": "A list of tuples, where each tuple contains three integers (start_time, end_time, profit).",
    "output_format": "An integer representing the maximum profit that can be obtained by scheduling non-overlapping jobs.",
    "constraints": [
      "1 <= jobs.length <= 10^4",
      "1 <= start_time < end_time <= 10^5",
      "0 <= profit <= 10^4"
    ],
    "examples": [
      {
        "input": "jobs = [(1, 3, 50), (2, 5, 20), (3, 10, 100), (6, 19, 70), (10, 20, 30)]",
        "output": "220",
        "explanation": "We can schedule jobs (1, 3, 50), (3, 10, 100), and (10, 20, 30) for a total profit of 50 + 100 + 30 = 220."
      },
      {
        "input": "jobs = [(1, 2, 10), (2, 3, 20), (2, 5, 30), (5, 7, 10)]",
        "output": "40",
        "explanation": "We can schedule jobs (1, 2, 10) and (2, 5, 30) for a total profit of 10 + 30 = 40."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider sorting the jobs by their end times.",
      "Use binary search to find the last job that does not conflict with the current job.",
      "Think about dynamic programming to keep track of the maximum profits."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Flatten 2D Vector",
    "description": "Design a 2D Vector class that should support the following operations: \n\n1. `init(int n,int m)` Initializes the 2D vector with n rows and m columns, all the values are initially 0.\n2. `set(int row, int col, int value)` Sets the value at the specified position to 'value'.\n3. `get(int row, int col)` Returns the value at the specified position. If the position is invalid, return -1.\n4. `flatten()` Flattens the 2D vector into a 1D vector and returns an array of integers.\n\nThe flattening of a vector converts all rows of the 2D vector into a single row, maintaining the order of elements.",
    "topic": "Design",
    "subtopic": "Data Structures",
    "tags": [
      "Design",
      "Array",
      "Data Structures"
    ],
    "input_format": "A series of operations for the 2D vector class denoting initialization, setting values, getting values, and flattening.",
    "output_format": "An array of integers representing the flattened 1D vector.",
    "constraints": [
      "1 <= n, m <= 100",
      "The coordinates for set and get operations will be valid.",
      "-10^5 <= value <= 10^5"
    ],
    "examples": [
      {
        "input": "init(2, 3); set(0, 0, 1); set(0, 1, 2); set(1, 0, 3); flatten();",
        "output": "[1, 2, 0, 3, 0, 0]",
        "explanation": "After setting values, the 2D vector looks like [[1, 2, 0], [3, 0, 0]]. Flattening it gives [1, 2, 0, 3, 0, 0]."
      },
      {
        "input": "init(1, 4); set(0, 1, 5); flatten();",
        "output": "[0, 5, 0, 0]",
        "explanation": "The 2D vector is [[0, 5, 0, 0]]. Flattening it results in [0, 5, 0, 0]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a list to store rows.",
      "Ensure to handle the dimensions while flattening."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Combination Sum",
    "description": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order. You may use the same integer from candidates an unlimited number of times in the combination.",
    "topic": "Backtracking",
    "subtopic": "Combination Generation",
    "tags": [
      "Backtracking",
      "Combination",
      "DFS"
    ],
    "input_format": "An array of distinct integers candidates, and an integer target.",
    "output_format": "A list of lists of integers, where each list represents a unique combination of candidates that sum up to the target.",
    "constraints": [
      "1 <= candidates.length <= 30",
      "1 <= candidates[i] <= 200",
      "All elements of candidates are distinct.",
      "1 <= target <= 500"
    ],
    "examples": [
      {
        "input": "candidates = [2, 3, 6, 7], target = 7",
        "output": "[[2, 2, 3], [7]]",
        "explanation": "The combination [2, 2, 3] can be chosen because 2 + 2 + 3 = 7. The combination [7] is also valid."
      },
      {
        "input": "candidates = [1], target = 2",
        "output": "[[1, 1]]",
        "explanation": "The only combination is [1, 1] because 1 + 1 = 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using backtracking to explore all combinations.",
      "You can skip elements in your recursion when their current sum exceeds the target."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Smallest Common Region",
    "description": "You are given a list of regions in a hierarchical structure, represented as a tree. Each region has a name and may have subregions. Your task is to find the smallest common region that contains a list of given regions. The regions are represented as a tree, where each region has a unique name and can have multiple subregions. If the regions provided are not in the tree, return an empty string.",
    "topic": "Tree",
    "subtopic": "Lowest Common Ancestor",
    "tags": [
      "Tree",
      "Recursive",
      "LCA"
    ],
    "input_format": "A list of regions in the form of a hierarchical dictionary and a list of region names to find.",
    "output_format": "A string representing the name of the smallest common region.",
    "constraints": [
      "1 <= regions.length <= 100",
      "Each region name is unique and consists of only lowercase alphabetical characters."
    ],
    "examples": [
      {
        "input": "{'Earth': {'North America': {'USA': [], 'Canada': []}, 'Europe': {'Germany': [], 'France': []}}}, ['Canada', 'USA']",
        "output": "North America",
        "explanation": "North America is the smallest region that contains both Canada and USA."
      },
      {
        "input": "{'Earth': {'North America': {'USA': [], 'Canada': []}, 'Europe': {'Germany': [], 'France': []}}}, ['Germany', 'France']",
        "output": "Europe",
        "explanation": "Europe is the smallest region that contains both Germany and France."
      },
      {
        "input": "{'Earth': {'North America': {'USA': [], 'Canada': []}, 'Europe': {'Germany': [], 'France': []}}}, ['Canada', 'Germany']",
        "output": "Earth",
        "explanation": "Earth is the smallest region that contains both Canada and Germany."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a tree traversal to find the path to each region.",
      "The smallest common region can be found by comparing paths."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Pour Water",
    "description": "You are given an array representing the height of walls, where the width of each wall is 1. You can pour water onto the walls, and the water will flow down to the lowest adjacent wall. Given the heights of the walls, calculate how much water can be trapped after pouring over the walls.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Water Trapping"
    ],
    "input_format": "An array of integers representing the height of walls.",
    "output_format": "An integer representing the total amount of water trapped.",
    "constraints": [
      "1 <= heights.length <= 2 * 10^4",
      "0 <= heights[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "heights = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The water can be trapped in the valleys formed by heights. Total water trapped is 6."
      },
      {
        "input": "heights = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The water can accumulate between the walls, trapping a total of 9 units."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using two pointers to track the left and right boundaries.",
      "Use an array to store the maximum height from left and right."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Alien Dictionary",
    "description": "Given a list of words sorted lexicographically by the rules of an alien language, determine the order of characters in the alien language. Each word is guaranteed to follow the order dictated by the alien language. Your task is to construct a string representing the characters in the correct order. If there is a valid ordering, return it; otherwise, return an empty string.",
    "topic": "Graph",
    "subtopic": "Topological Sort",
    "tags": [
      "Graph",
      "Topological Sort",
      "String"
    ],
    "input_format": "An array of strings `words` representing the sorted words in alien language.",
    "output_format": "A string representing the order of characters in the alien language, or an empty string if no valid order exists.",
    "constraints": [
      "1 <= words.length <= 100",
      "1 <= words[i].length <= 100",
      "All characters in words are lowercase English letters."
    ],
    "examples": [
      {
        "input": "words = [\"wrt\", \"wrf\", \"er\", \"ett\", \"rftt\"]",
        "output": "wertf",
        "explanation": "The given order based on the words is 'w', 'e', 'r', 't', 'f'."
      },
      {
        "input": "words = [\"z\", \"x\"]",
        "output": "zx",
        "explanation": "From the order of words, 'z' appears before 'x'."
      },
      {
        "input": "words = [\"z\", \"x\", \"z\"]",
        "output": "",
        "explanation": "There is a conflict with the ordering as 'z' appears before 'x' and 'z' again, making it impossible to determine an order."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a graph to represent the relationships between characters.",
      "Consider using Kahn's algorithm for topological sorting.",
      "Check for cycles in the graph to determine if a valid order exists."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Cheapest Flights Within K Stops",
    "description": "There are n cities connected by flights. The flights are represented by a 2D array, where flights[i] = [u, v, cost] indicates that there is a flight from city u to city v with a given cost. You want to find the cheapest price from the starting city src to the destination city dst, with at most k stops. If there is no such route, return -1.",
    "topic": "Graph",
    "subtopic": "Shortest Path",
    "tags": [
      "Graph",
      "Dynamic Programming",
      "Dijkstra's Algorithm"
    ],
    "input_format": "An integer n (the number of cities), a 2D array flights representing the available flights, integers src, dst, and k.",
    "output_format": "An integer representing the cheapest price or -1 if no such route exists.",
    "constraints": [
      "1 <= n <= 100",
      "0 <= flights.length <= 600",
      "flights[i].length == 3",
      "0 <= u, v < n",
      "0 < cost <= 10^4",
      "0 <= k <= n - 1"
    ],
    "examples": [
      {
        "input": "n = 4, flights = [[0, 1, 100], [1, 2, 100], [2, 0, 100], [1, 3, 600], [2, 3, 200]], src = 0, dst = 3, k = 1",
        "output": "700",
        "explanation": "The cheapest price from city 0 to city 3 with at most 1 stop is from 0 to 1 to 3 with costs 100 + 600 = 700."
      },
      {
        "input": "n = 3, flights = [[0, 1, 100], [1, 2, 100], [0, 2, 500]], src = 0, dst = 2, k = 1",
        "output": "500",
        "explanation": "The cheapest price from city 0 to city 2 with at most 1 stop is direct flight from 0 to 2 with cost 500."
      },
      {
        "input": "n = 3, flights = [[0, 1, 100], [1, 2, 100]], src = 0, dst = 2, k = 0",
        "output": "-1",
        "explanation": "No route exists from city 0 to city 2 with 0 stops."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a priority queue to explore the cheapest flights first.",
      "Be careful with the number of stops, and maintain a count of the current number of stops."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the height of walls, compute how much water can be trapped after raining. The water can only be trapped where there is a cavity between the walls. For example, if the heights are [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1], it can trap 6 units of water.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers heights, where heights[i] represents the height of the i-th wall.",
    "output_format": "An integer representing the total amount of water that can be trapped.",
    "constraints": [
      "1 <= heights.length <= 2 * 10^4",
      "0 <= heights[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]",
        "output": "6",
        "explanation": "The water trapped above each wall can be calculated, and the total is 6 units."
      },
      {
        "input": "[4, 2, 0, 3, 2, 5]",
        "output": "9",
        "explanation": "The amount of water trapped is 9 units when calculated based on the walls."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the walls on both ends and how they define the amount of water.",
      "Use two pointers to efficiently calculate the trapped water amount.",
      "Think about how to find the maximum height seen from both the left and right sides."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Sliding Puzzle",
    "description": "You are given a 2x3 board with six tiles labeled '1' to '6' and a blank space represented by '0'. The objective is to move the tiles around to reach a target configuration by sliding them into the blank space. You can slide a tile into the blank space if it is adjacent (up, down, left, or right). Your task is to determine whether it is possible to reach the target configuration from the initial configuration, and if so, return the minimum number of moves required. If it's not possible, return -1.",
    "topic": "Graph",
    "subtopic": "BFS",
    "tags": [
      "Graph",
      "BFS",
      "State Space Search"
    ],
    "input_format": "A 2D list of integers representing the initial configuration of the puzzle and a 2D list of integers representing the target configuration.",
    "output_format": "An integer representing the minimum number of moves required to reach the target configuration, or -1 if it is not possible.",
    "constraints": [
      "The input boards will always be 2x3.",
      "Each board will contain exactly one blank space (0) and will contain numbers from 0 to 6."
    ],
    "examples": [
      {
        "input": {
          "initial": [
            [
              1,
              2,
              3
            ],
            [
              4,
              0,
              5
            ]
          ],
          "target": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              0
            ]
          ]
        },
        "output": "1",
        "explanation": "Just move the '5' tile into the blank space, achieving the target configuration in one move."
      },
      {
        "input": {
          "initial": [
            [
              1,
              2,
              3
            ],
            [
              5,
              4,
              0
            ]
          ],
          "target": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              0
            ]
          ]
        },
        "output": "2",
        "explanation": "First, move '4' into the blank space, and then move '5' into the blank space, achieving the target configuration in two moves."
      },
      {
        "input": {
          "initial": [
            [
              1,
              2,
              3
            ],
            [
              5,
              4,
              0
            ]
          ],
          "target": [
            [
              1,
              2,
              0
            ],
            [
              4,
              5,
              3
            ]
          ]
        },
        "output": "-1",
        "explanation": "It is not possible to reach the target configuration from the initial configuration."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using Breadth-First Search (BFS) to explore the possible configurations.",
      "Keep track of visited states to avoid cycles."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Employee Free Time",
    "description": "You are given a list of employees' schedules, where each employee's schedule is represented as an array of intervals that indicate when they are busy. Your task is to find the intervals during which no employees are busy, which denotes their free time. An interval is defined by a start time and an end time (inclusive). You need to return a list of intervals representing the free times for all employees.",
    "topic": "Interval",
    "subtopic": "Merge Intervals",
    "tags": [
      "Interval",
      "Merge",
      "Array"
    ],
    "input_format": "A 2D array of integers where each sub-array represents the busy intervals of an employee, sorted by start time.",
    "output_format": "A 2D array of integers representing the free time intervals for all employees, sorted by start time.",
    "constraints": [
      "1 <= schedules.length <= 100",
      "0 <= schedules[i].length <= 100",
      "0 <= schedules[i][j] <= 10^9",
      "schedules[i] contains pairs of integers sorted by start time"
    ],
    "examples": [
      {
        "input": "[[1, 2], [5, 6], [7, 8], [2, 4]]",
        "output": "[[4, 5], [6, 7]]",
        "explanation": "The busy intervals are [1, 2], [2, 4], [5, 6], and [7, 8]. The free time occurs between [4, 5] and [6, 7]."
      },
      {
        "input": "[[1, 3], [6, 10], [11, 15]]",
        "output": "[[3, 6], [10, 11]]",
        "explanation": "The busy intervals are [1, 3], [6, 10], and [11, 15]. The free time occurs between [3, 6] and [10, 11]."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Sort all intervals before processing.",
      "Use a two-pointer technique to find overlaps.",
      "When two intervals overlap, keep track of the maximum end time."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Shortest Path to Get All Keys",
    "description": "You are given a grid representing a room where some cells are walls ('#'), some are open space ('.'), and some are keys ('a' to 'f') and doors ('A' to 'F'). Your task is to determine the shortest path to collect all keys in the room starting from a specified starting point. You can only traverse through open space and you cannot pass through walls. Furthermore, you can only enter a door if you have collected the corresponding key. Return the length of the shortest path that collects all keys. If it is impossible to collect all keys, return -1.",
    "topic": "Graph",
    "subtopic": "Breadth-First Search",
    "tags": [
      "Graph",
      "BFS",
      "Shortest Path"
    ],
    "input_format": "A 2D grid represented as a list of strings and a starting position (x, y) as a tuple, where grid[i][j] can be '#', '.', or a key/door character.",
    "output_format": "An integer representing the shortest path length to collect all keys, or -1 if it is impossible.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 30",
      "There will be at most 6 keys in the grid.",
      "Each key and door pairs are unique."
    ],
    "examples": [
      {
        "input": {
          "grid": [
            "@.a.#",
            "###.#",
            "b.A.B"
          ],
          "start": [
            0,
            0
          ]
        },
        "output": 8,
        "explanation": "The shortest path to collect both keys (a and b) is: Right -> Down -> Left -> Down -> Down -> Up -> Up -> Left."
      },
      {
        "input": {
          "grid": [
            "@..aA",
            "..B#.",
            "....b"
          ],
          "start": [
            0,
            0
          ]
        },
        "output": 6,
        "explanation": "The path to collect key a is: Right -> Right -> Down -> Down and collect key b by going down; thus the total length is 6."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use BFS to explore the grid.",
      "Track the collected keys with a bitmask.",
      "Consider all four directions in your traversal."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Word Search II",
    "description": "Given a 2D board and a list of words, find all words in the board. Each word can be constructed from letters of sequentially adjacent cells, where 'adjacent' cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word. Return all words found on the board.",
    "topic": "Backtracking",
    "subtopic": "Trie",
    "tags": [
      "Backtracking",
      "Trie",
      "Matrix",
      "String"
    ],
    "input_format": "A 2D array of characters representing the board and a list of strings representing the words to search.",
    "output_format": "A list of strings representing all words found in the board.",
    "constraints": [
      "1 <= board.length, board[i].length <= 12",
      "1 <= words.length <= 3 * 10^4",
      "1 <= words[i].length <= 10",
      "All characters in the board and words are lowercase English letters."
    ],
    "examples": [
      {
        "input": "board = [['o','a','a','n'], ['e','t','a','e'], ['i','h','k','r'], ['i','f','l','v']] \n words = ['oath','pea','eat','rain']",
        "output": "['oath']",
        "explanation": "The word 'oath' can be constructed from the letters in the board."
      },
      {
        "input": "board = [['a','b'], ['c','d']] \n words = ['ab','cd','ad','ac','bd']",
        "output": "['ab','cd']",
        "explanation": "The words 'ab' and 'cd' can be constructed from the board."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a trie for efficient word search.",
      "Use a backtracking approach to explore adjacent cells."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Add Two Numbers",
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contains a single digit. Add the two numbers and return it as a linked list.",
    "topic": "Linked List",
    "subtopic": "Addition",
    "tags": [
      "Linked List",
      "Addition",
      "Math"
    ],
    "input_format": "Two linked lists l1 and l2 representing the two numbers.",
    "output_format": "A linked list representing the sum of the two numbers.",
    "constraints": [
      "The number of nodes in each linked list is in the range [1, 100].",
      "0 <= Node.val <= 9",
      "It is guaranteed that the list represents a number that does not have leading zeros."
    ],
    "examples": [
      {
        "input": "l1 = [2, 4, 3], l2 = [5, 6, 4]",
        "output": "[7, 0, 8]",
        "explanation": "342 + 465 = 807, so the linked list representing the sum is [7, 0, 8]."
      },
      {
        "input": "l1 = [0], l2 = [0]",
        "output": "[0]",
        "explanation": "0 + 0 = 0, so the linked list representing the sum is [0]."
      },
      {
        "input": "l1 = [9, 9, 9, 9, 9, 9, 9], l2 = [9, 9, 9, 9]",
        "output": "[8, 9, 9, 9, 0, 0, 1]",
        "explanation": "9999999 + 9999 = 10009998, so the linked list representing the sum is [8, 9, 9, 9, 0, 0, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how you would add two numbers digit by digit.",
      "Don't forget to handle the carry from the addition."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Maximum Candies You Can Get from Boxes",
    "description": "You have a collection of boxes, each containing a certain number of candies. Each box can only be opened once. Each time you open a box, you can collect the candies inside it, and you can also find keys to other boxes. Your goal is to maximize the total number of candies you can collect by strategically opening boxes. You need to determine the maximum number of candies you can gather given the initial state of the boxes.",
    "topic": "Graph",
    "subtopic": "Breadth-First Search",
    "tags": [
      "Graph",
      "BFS",
      "Dynamic Programming"
    ],
    "input_format": "A list of boxes where each box is represented by an array. The first element of the array is the number of candies in that box, followed by the indices of the boxes that can be opened with the keys found in that box.",
    "output_format": "An integer representing the maximum number of candies that can be collected.",
    "constraints": [
      "1 <= boxes.length <= 200",
      "0 <= boxes[i][0] <= 100",
      "0 <= boxes[i][j] < boxes.length (for j > 0)"
    ],
    "examples": [
      {
        "input": "[[1, 1], [2, 2], [3], []]",
        "output": "6",
        "explanation": "Open box 0 to collect 1 candy and find a key to box 1. Then open box 1 to collect 2 candies and find a key to box 2. Finally, open box 2 to collect 3 candies. Total = 1 + 2 + 3 = 6."
      },
      {
        "input": "[[5], [0], [1], [2]]",
        "output": "5",
        "explanation": "You can only open box 0 for 5 candies, and it has no keys, so you can collect only 5 candies."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Think about using a queue to process the boxes in breadth-first order.",
      "Keep track of the boxes you've already opened to avoid cycles."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Basic Calculator II",
    "description": "Implement a basic calculator to evaluate a simple expression string containing non-negative integers, '+', '-', '*', and '/' operators. The expression should respect the order of operations: multiplication and division should be performed before addition and subtraction. The result should be returned as an integer, discarding any fractional part.",
    "topic": "String",
    "subtopic": "Parsing",
    "tags": [
      "String",
      "Math",
      "Stack"
    ],
    "input_format": "A string expression containing non-negative integers and the operators '+', '-', '*', '/'.",
    "output_format": "An integer representing the evaluated result of the expression.",
    "constraints": [
      "The input expression is guaranteed to be valid.",
      "The expression will not contain any leading or trailing spaces.",
      "1 <= expression.length <= 10^4"
    ],
    "examples": [
      {
        "input": "s = \"3+2*2\"",
        "output": "7",
        "explanation": "First, we perform 2*2 = 4, then 3+4 = 7."
      },
      {
        "input": "s = \" 3/2 \"",
        "output": "1",
        "explanation": "3 divided by 2 is 1.5, but we discard the fractional part."
      },
      {
        "input": "s = \" 3 + 5 / 2 \"",
        "output": "5",
        "explanation": "First, we perform 5/2 = 2, then 3+2 = 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a stack to handle the operations.",
      "Remember to prioritize '*' and '/' over '+' and '-'."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Contains Duplicate II",
    "description": "Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Sliding Window"
    ],
    "input_format": "An integer array nums and an integer k.",
    "output_format": "A boolean value, true if there are two distinct indices i and j such that nums[i] == nums[j] and abs(i - j) <= k; otherwise, false.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9",
      "0 <= k <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1,2,3,1], k = 3",
        "output": "true",
        "explanation": "Indices 0 and 3 have the same value (1) and the difference between indices is 3 which is less than or equal to k."
      },
      {
        "input": "nums = [1,0,1,1], k = 1",
        "output": "true",
        "explanation": "Indices 1 and 2 have the same value (1) and the difference between indices is 1 which is less than or equal to k."
      },
      {
        "input": "nums = [1,2,3,1,2,3], k = 2",
        "output": "false",
        "explanation": "Even though there are duplicates, the closest duplicates are at a distance greater than k."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the index of each number.",
      "Check for duplicates only when the index difference is less than or equal to k."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Two Pointer"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Assume that each input has exactly one solution."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to complement the value for each element.",
      "Iterate through the array and check if the complement exists in the hash map.",
      "Return the indices as soon as you find the solution."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Intersection of Two Linked Lists",
    "description": "Given the heads of two singly linked lists, determine the node at which the two lists intersect. If the two linked lists do not intersect, return null. The intersection is defined based on reference, not value, meaning both lists must point to the same node.",
    "topic": "Linked List",
    "subtopic": "Intersection",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Intersection"
    ],
    "input_format": "The input consists of two heads of singly linked lists, listA and listB.",
    "output_format": "Return the node where the two lists intersect. If there is no intersection, return null.",
    "constraints": [
      "The number of nodes in both lists is in the range [0, 10^4].",
      "The values of the nodes are in the range [-10^4, 10^4].",
      "The lists do not have cycles."
    ],
    "examples": [
      {
        "input": "listA = [4, 1, 8, 4, 5], listB = [5, 0, 1, 8, 4, 5]",
        "output": "8",
        "explanation": "The lists intersect at node with value 8."
      },
      {
        "input": "listA = [1, 2, 3], listB = [4, 5, 6]",
        "output": "null",
        "explanation": "The two lists do not intersect."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to traverse the lists.",
      "If one pointer reaches the end of a list, redirect it to the head of the other list."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Simple Bank System",
    "description": "Design a simple bank system that allows customers to create accounts, deposit money, withdraw money, and check the balance. Each customer can only have one account, and the account cannot go into a negative balance. Provide methods to handle these operations in a thread-safe manner.",
    "topic": "Design",
    "subtopic": "Object-Oriented Design",
    "tags": [
      "Design",
      "OOP",
      "Thread-Safety"
    ],
    "input_format": "Class methods to operate on bank accounts: createAccount(name), deposit(name, amount), withdraw(name, amount), getBalance(name).",
    "output_format": "The methods return appropriate responses based on the operations performed. For deposit and withdrawal, return a boolean indicating success or failure.",
    "constraints": [
      "The customer name will be a non-empty string.",
      "The amount for deposit and withdrawal will be a non-negative integer.",
      "The account balance should not go below zero."
    ],
    "examples": [
      {
        "input": "createAccount('Alice'); deposit('Alice', 100); withdraw('Alice', 50); getBalance('Alice')",
        "output": "50",
        "explanation": "Alice's account is created with an initial deposit of 100, she withdraws 50, so the remaining balance is 50."
      },
      {
        "input": "createAccount('Bob'); deposit('Bob', 200); withdraw('Bob', 250); getBalance('Bob')",
        "output": "200",
        "explanation": "Bob tries to withdraw more than he has. The withdrawal fails, so his balance remains 200."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hashmap to store account information.",
      "Use appropriate locking mechanisms to ensure thread safety."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Happy Number",
    "description": "A happy number is defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers. Write a function to determine if a given number is a happy number.",
    "topic": "Math",
    "subtopic": "Number Theory",
    "tags": [
      "Math",
      "Number Theory",
      "Recursion"
    ],
    "input_format": "An integer n, where n is the number to be checked.",
    "output_format": "Return true if n is a happy number, otherwise return false.",
    "constraints": [
      "1 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "n = 19",
        "output": "true",
        "explanation": "1^2 + 9^2 = 1 + 81 = 82, 8^2 + 2^2 = 64 + 4 = 68, 6^2 + 8^2 = 36 + 64 = 100, 1^2 + 0^2 + 0^2 = 1, hence 19 is a happy number."
      },
      {
        "input": "n = 2",
        "output": "false",
        "explanation": "2 will go into a cycle of 4, 16, 37, 58, 89, 145, 42, 20, and back to 4 which means it's not a happy number."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a set to track previously seen numbers to detect cycles."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Mini Parser",
    "description": "Implement a Mini Parser that converts a string into a nested list structure. The input string will be in the format of a nested list, where each number could be an integer or another nested list. Your task is to parse the string and return the corresponding NestedInteger object. A NestedInteger can either hold a single integer or a list of NestedInteger objects. The format of the input string strictly follows the convention of parentheses and commas.",
    "topic": "Data Structure",
    "subtopic": "Nested List",
    "tags": [
      "String",
      "Parsing",
      "Recursion"
    ],
    "input_format": "A string input representing the nested list. Example: '[123,[456,[789]]]'",
    "output_format": "Return a NestedInteger object that represents the parsed structure.",
    "constraints": [
      "The input string is guaranteed to be a valid representation of a nested list.",
      "The integers in the input are within the range of -10^6 to 10^6."
    ],
    "examples": [
      {
        "input": "'[123,[456,[789]]]'",
        "output": "NestedInteger with value 123 and a nested list containing 456 and a list containing 789.",
        "explanation": "The string represents a list where 123 is a single NestedInteger and 456 is part of a NestedInteger that holds another list with 789."
      },
      {
        "input": "'[1,2,3]'",
        "output": "NestedInteger containing three integers: 1, 2, and 3.",
        "explanation": "The string represents a list of three NestedIntegers, each holding a single integer."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a stack to manage the nested structure.",
      "You can utilize recursion to build the NestedInteger objects."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Regular Expression Matching",
    "description": "Implement a function that supports regular expression matching with the following rules: '.' Matches any single character, and '*' Matches zero or more of the preceding element. The matching should cover the entire input string (not partial). Given a string s and a pattern p, return true if s matches p, otherwise return false.",
    "topic": "String",
    "subtopic": "Regular Expressions",
    "tags": [
      "String",
      "Dynamic Programming",
      "Backtracking"
    ],
    "input_format": "A string s and a pattern p.",
    "output_format": "A boolean value indicating whether the string s matches the pattern p.",
    "constraints": [
      "0 <= s.length <= 20",
      "0 <= p.length <= 30",
      "s contains only lowercase letters.",
      "p contains lowercase letters, '.' and '*' characters."
    ],
    "examples": [
      {
        "input": "s = 'aa', p = 'a*'",
        "output": "true",
        "explanation": "'a*' means zero or more of 'a', thus it can match 'aa'."
      },
      {
        "input": "s = 'ab', p = '.*'",
        "output": "true",
        "explanation": "'.*' will match any string, including 'ab'."
      },
      {
        "input": "s = 'aab', p = 'c*a*b'",
        "output": "true",
        "explanation": "'c*' matches an empty string, 'a*' can match 'aa', and 'b' matches 'b'."
      },
      {
        "input": "s = 'mississippi', p = 'mis*is*p*.'",
        "output": "false",
        "explanation": "'mis*is*p*.' does not match 'mississippi' completely."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using dynamic programming to find the solution.",
      "Think about how to break down the problem using recursion or memoization."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Each open bracket must have a corresponding closing bracket of the same type, and the brackets must close in the correct order.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s containing only the characters '(', ')', '{', '}', '[' and ']'.",
    "output_format": "A boolean value indicating whether the string is valid.",
    "constraints": [
      "0 <= s.length <= 10^4"
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The string contains one pair of correctly matched parentheses."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "The string contains multiple pairs of correctly matched parentheses."
      },
      {
        "input": "s = '(]')",
        "output": "false",
        "explanation": "The string contains mismatched parentheses."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The string contains incorrectly nested parentheses."
      },
      {
        "input": "s = '{[]}']",
        "output": "true",
        "explanation": "The string contains correctly matched and nested brackets."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Check if the top of the stack matches the closing bracket."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Pyramid Transition Matrix",
    "description": "Given a string representing the base row of a pyramid and a list of allowed transitions, determine if it is possible to build the pyramid with the given base row. Each row of the pyramid can only be formed if its elements can transition from the elements directly below it according to the allowed transitions.",
    "topic": "Dynamic Programming",
    "subtopic": "Graph Representation",
    "tags": [
      "Dynamic Programming",
      "String",
      "Graph"
    ],
    "input_format": "A string 'bottom' representing the base row of the pyramid, and a list of strings 'allowed' representing allowed transitions.",
    "output_format": "A boolean value, true if the pyramid can be built, false otherwise.",
    "constraints": [
      "1 <= bottom.length <= 30",
      "1 <= allowed.length <= 100",
      "allowed[i].length == 3"
    ],
    "examples": [
      {
        "input": {
          "bottom": "XYZ",
          "allowed": [
            "XYA",
            "XBZ",
            "YZA",
            "YXB",
            "ZXY"
          ]
        },
        "output": true,
        "explanation": "We can transition from XYZ -> XYA and then build the next row, finally reaching a single character."
      },
      {
        "input": {
          "bottom": "XYZ",
          "allowed": [
            "XYA",
            "XBZ"
          ]
        },
        "output": false,
        "explanation": "No valid transitions can form a next row from XYZ."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how to represent the transition possibilities.",
      "Use a recursive approach with memoization to check for possible pyramid formation."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Merge k Sorted Lists",
    "description": "You are given an array of k linked-lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.",
    "topic": "Linked List",
    "subtopic": "Merge Operations",
    "tags": [
      "Linked List",
      "Sorting",
      "Merge"
    ],
    "input_format": "An array of k linked-lists, where each linked-list consists of nodes that contain integers.",
    "output_format": "A single linked-list that represents the merged sorted linked-list.",
    "constraints": [
      "k == nums.length",
      "0 <= k <= 10^4",
      "0 <= nums[i].length <= 500",
      "-10^4 <= nums[i][j] <= 10^4"
    ],
    "examples": [
      {
        "input": "lists = [[1,4,5],[1,3,4],[2,6]]",
        "output": "[1,1,2,3,4,4,5,6]",
        "explanation": "The merged list is [1,1,2,3,4,4,5,6]."
      },
      {
        "input": "lists = [[]]",
        "output": "[]",
        "explanation": "The merged list is empty, since there are no elements."
      },
      {
        "input": "lists = [[], [0]]",
        "output": "[0]",
        "explanation": "The merged list contains the single element from the second list."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a priority queue to keep track of the smallest current element.",
      "You can also use a divide-and-conquer approach."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "IP to CIDR",
    "description": "Given an integer IP address (in its decimal representation) and an integer number of IP addresses in the CIDR block, return all the CIDR blocks that can represent the IP and the given number of addresses. You must return the CIDR blocks in ascending order.",
    "topic": "Networking",
    "subtopic": "IP Addressing",
    "tags": [
      "CIDR",
      "IP Address",
      "Networking"
    ],
    "input_format": "An integer ip representing the starting IP address and an integer n representing the number of addresses.",
    "output_format": "A list of strings representing the CIDR blocks.",
    "constraints": [
      "0 <= ip < 2^32",
      "1 <= n <= 2^(32 - 26)"
    ],
    "examples": [
      {
        "input": "ip = 4294967296, n = 5",
        "output": "[\"255.255.255.252/30\", \"255.255.255.253/31\"]",
        "explanation": "The CIDR blocks that can accommodate 5 IP addresses starting from 4294967296 are 255.255.255.252/30 and 255.255.255.253/31."
      },
      {
        "input": "ip = 0, n = 3",
        "output": "[\"0.0.0.0/30\"]",
        "explanation": "The CIDR block 0.0.0.0/30 can accommodate 4 IPs, and starting from 0 gives 3 addresses."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how many IP addresses a CIDR block can represent.",
      "Use bit manipulation to calculate the range of the CIDR blocks."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Strings Differ by One Character",
    "description": "Given two strings, determine if they differ by exactly one character. This can be one insertion, one deletion, or one replacement in either of the strings. You need to return true if they differ by one character and false otherwise.",
    "topic": "String",
    "subtopic": "String Comparison",
    "tags": [
      "String",
      "Comparison",
      "Two Pointers"
    ],
    "input_format": "Two strings, s1 and s2, of lengths m and n respectively.",
    "output_format": "A boolean value representing whether s1 and s2 differ by exactly one character.",
    "constraints": [
      "1 <= m, n <= 100",
      "s1 and s2 consist of lowercase letters."
    ],
    "examples": [
      {
        "input": "s1 = \"abc\", s2 = \"ab\"",
        "output": "true",
        "explanation": "By removing 'c' from s1, we have s1 differing from s2 by one deletion."
      },
      {
        "input": "s1 = \"abc\", s2 = \"abd\"",
        "output": "true",
        "explanation": "By replacing 'c' in s1 with 'd', we can transform s1 to s2 in one replacement."
      },
      {
        "input": "s1 = \"abc\", s2 = \"xyz\"",
        "output": "false",
        "explanation": "The strings differ by more than one character."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Check the length difference between the two strings.",
      "Use a single loop to compare characters for replacement.",
      "Consider insertion and deletion through length checks."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Minimum Number of Vertices to Reach All Nodes",
    "description": "Given a directed acyclic graph (DAG) with n nodes and a list of edges, return the minimum number of vertices from which all nodes in the graph can be reached. A vertex can reach another vertex if there is a direct edge from one to the other. Your task is to identify the set of nodes that are required to cover all reachable nodes in the graph.",
    "topic": "Graph",
    "subtopic": "Graph Traversal",
    "tags": [
      "Graph",
      "DAG",
      "Reachability"
    ],
    "input_format": "An integer n representing the number of nodes followed by a list of directed edges, where each edge is a pair of integers [u, v] indicating a directed edge from node u to node v.",
    "output_format": "An integer representing the minimum number of vertices required to reach all nodes.",
    "constraints": [
      "1 <= n <= 10^4",
      "edges[i].length == 2",
      "0 <= u, v < n"
    ],
    "examples": [
      {
        "input": "n = 6, edges = [[0, 1], [0, 2], [1, 3], [1, 4], [2, 4]]",
        "output": "1",
        "explanation": "Starting from node 0, we can reach all nodes 1, 2, 3, and 4."
      },
      {
        "input": "n = 5, edges = [[0, 1], [0, 2], [1, 3], [2, 4]]",
        "output": "2",
        "explanation": "We need to start from both nodes 0 and 1 to reach all other nodes."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Identify the nodes that do not have any incoming edges.",
      "Consider the properties of a directed acyclic graph (DAG)."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Robot Bounded In Circle",
    "description": "A robot is standing on a square grid facing north. The robot can move forward or rotate 90 degrees clockwise or counterclockwise. The robot starts at position (0, 0) on the grid, and the aim is to determine whether the robot will remain in a circle or not after executing a specific set of commands. The commands consist of 'G' (go forward), 'L' (turn left), and 'R' (turn right). A robot is said to be bounded in a circle if it can return to its starting position (0,0) after executing these commands, and can keep returning to the circle indefinitely. Your task is to determine if the robot is bounded in a circle after executing the sequence of commands.",
    "topic": "Simulation",
    "subtopic": "Robot Movement",
    "tags": [
      "Simulation",
      "Geometry",
      "Mathematics"
    ],
    "input_format": "A string commands consisting of characters 'G', 'L', and 'R'.",
    "output_format": "A boolean value indicating whether the robot is bounded in a circle.",
    "constraints": [
      "1 <= commands.length <= 100"
    ],
    "examples": [
      {
        "input": "commands = 'GGLLGG'",
        "output": "true",
        "explanation": "The robot moves two steps forward, turns left, moves two steps forward, and ends up at (0,0)."
      },
      {
        "input": "commands = 'GL'",
        "output": "true",
        "explanation": "The robot turns left and moves forward, then turns left again and moves forward, ending at (0,0)."
      },
      {
        "input": "commands = 'GRGGRGGRGGR'",
        "output": "false",
        "explanation": "The robot forms a square but ends up facing east, and moving indefinitely will not return to (0,0)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how the robot's direction changes with each command.",
      "If after executing commands the robot is facing north at (0,0), it is not bounded.",
      "A grid representation might help visualize the robot's movement."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Add Strings",
    "description": "Given two non-negative integers represented as strings, return their sum as a string. The numbers can be extremely large and should not be converted directly to integers during the computation. You must simulate the addition process as it is done by hand.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Simulation",
      "Addition"
    ],
    "input_format": "Two non-negative integers num1 and num2, represented as strings.",
    "output_format": "A string representing the sum of the two numbers.",
    "constraints": [
      "1 <= num1.length, num2.length <= 100",
      "num1 and num2 consist of digits only and do not contain leading zeros."
    ],
    "examples": [
      {
        "input": "num1 = \"123\", num2 = \"456\"",
        "output": "\"579\"",
        "explanation": "123 + 456 = 579."
      },
      {
        "input": "num1 = \"999\", num2 = \"1\"",
        "output": "\"1000\"",
        "explanation": "999 + 1 = 1000."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Think about how you would add numbers by hand, carrying over when sums exceed 9."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Minimize Rounding Error to Meet Target",
    "description": "You are given an array of numbers and a target value. Your task is to minimize the rounding error when the numbers are rounded to the nearest integers. The rounding error is defined as the absolute difference between the sum of the rounded integers and the target value. Return the minimum rounding error possible.",
    "topic": "Array",
    "subtopic": "Rounding and Precision",
    "tags": [
      "Array",
      "Rounding",
      "Mathematics"
    ],
    "input_format": "An array of floating point numbers nums and a float target.",
    "output_format": "A float representing the minimum rounding error.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5",
      "-10^5 <= target <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [2.5, 3.7, 1.3], target = 8.0",
        "output": "0.0",
        "explanation": "Rounding each element gives us [3, 4, 1], which sums to 8, resulting in no rounding error."
      },
      {
        "input": "nums = [2.1, 3.8, 1.2], target = 7.0",
        "output": "0.1",
        "explanation": "Rounding gives [2, 4, 1], which sums to 7, leading to a rounding error of 0.1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the effects of rounding each number up or down.",
      "Calculate the cumulative sum of the rounded numbers to compare against the target."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
    "description": "You are given a binary matrix of 0s and 1s. A flip is defined as changing a 0 to a 1 or a 1 to a 0. Your task is to determine the minimum number of flips required to convert the entire binary matrix to a zero matrix. The conversion must be done in such a way that if you flip any cell, all of its adjacent cells (up, down, left, right) must also be flipped. Return the minimum number of flips needed, or -1 if it's impossible to convert the matrix to a zero matrix.",
    "topic": "Matrix",
    "subtopic": "Grid Manipulation",
    "tags": [
      "Matrix",
      "Flipping",
      "Dynamic Programming"
    ],
    "input_format": "A 2D binary matrix of size m x n.",
    "output_format": "An integer representing the minimum flips needed to convert the matrix to a zero matrix, or -1 if impossible.",
    "constraints": [
      "1 <= m, n <= 100",
      "matrix[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "matrix = [[0,0],[0,1]]",
        "output": "1",
        "explanation": "Flipping the cell (1, 1) will convert the matrix to zeros in one move."
      },
      {
        "input": "matrix = [[1,1,1],[1,1,1],[1,1,1]]",
        "output": "4",
        "explanation": "Flipping the corners will result in each edge cell being flipped, taking a total of 4 flips to convert to all zeros."
      },
      {
        "input": "matrix = [[1,0],[1,0]]",
        "output": "-1",
        "explanation": "It is impossible to convert this matrix to a zero matrix; making one flip creates another 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the relationship between flips and adjacent cells.",
      "Explore graph or state space searching techniques.",
      "Think about dynamic programming or breadth-first search strategies."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Number of Ways to Build House of Cards",
    "description": "You are tasked with building a house of cards using a certain number of cards. The goal is to determine how many different structures you can create given 'n' cards. Each structure can only be formed using complete layers of cards, where each layer consists of a certain number of individual cards arranged in a specific manner. You need to find the total number of unique ways to achieve this with the provided number of cards.",
    "topic": "Dynamic Programming",
    "subtopic": "Combinatorial Structures",
    "tags": [
      "Dynamic Programming",
      "Combinatorics",
      "Recursion"
    ],
    "input_format": "An integer 'n' representing the total number of cards available.",
    "output_format": "An integer representing the total number of unique ways to build the house of cards.",
    "constraints": [
      "0 <= n <= 1000"
    ],
    "examples": [
      {
        "input": "n = 5",
        "output": "1",
        "explanation": "With 5 cards, you can only build one valid structure: one complete layer with 3 cards, and a single card on top."
      },
      {
        "input": "n = 10",
        "output": "1",
        "explanation": "With 10 cards, the only valid structure is two complete layers: the first layer with 6 cards and the second with 3 cards on top."
      },
      {
        "input": "n = 0",
        "output": "0",
        "explanation": "With 0 cards, there are no ways to build any structure."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how many cards are needed for each layer and how they are arranged.",
      "Start with a base case for simple numbers and build upon it."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Contains Duplicate",
    "description": "Given an integer array 'nums', return true if any value appears at least twice in the array, and return false if every element is distinct.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Hash Table",
      "Searching"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A boolean value indicating whether any value appears at least twice.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "true",
        "explanation": "The number '1' appears twice in the array."
      },
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "false",
        "explanation": "All elements are distinct."
      },
      {
        "input": "nums = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]",
        "output": "true",
        "explanation": "The number '1' and '3' appear more than once."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a set to track seen numbers."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Convert to Base -2",
    "description": "Given an integer n, return a string representing its value in base -2. The output must be a valid representation of the number in base -2, where negative bases allow for simple binary conversion. If n is 0, the output should be '0'.",
    "topic": "Math",
    "subtopic": "Number System",
    "tags": [
      "Math",
      "Number Conversion",
      "Base Representation"
    ],
    "input_format": "An integer n (-10^9 <= n <= 10^9).",
    "output_format": "A string representing the integer n in base -2.",
    "constraints": [
      "-10^9 <= n <= 10^9"
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "110",
        "explanation": "In base -2, 2 is represented as 110."
      },
      {
        "input": "n = 3",
        "output": "111",
        "explanation": "In base -2, 3 is represented as 111."
      },
      {
        "input": "n = 4",
        "output": "100",
        "explanation": "In base -2, 4 is represented as 100."
      },
      {
        "input": "n = 0",
        "output": "0",
        "explanation": "The base -2 representation of 0 is simply '0'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to represent negative values in binary.",
      "Division in base -2 might yield negative remainders."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Design File System",
    "description": "You are tasked with designing a file system that supports creating directories and files, deleting them, and retrieving their contents. Your file system should support the following operations: create, delete, and get, each with specified behavior. The filesystem should mimic a hierarchical directory structure with the ability to handle nested directories and files.",
    "topic": "System Design",
    "subtopic": "File System",
    "tags": [
      "File System",
      "Design",
      "Data Structures"
    ],
    "input_format": "A series of operations denoted by strings such as 'create /path/to/file', 'delete /path/to/file', and 'get /path/to/file'.",
    "output_format": "The result of the 'get' operation, which should return the contents of the file as a string, or an error message if the file does not exist.",
    "constraints": [
      "1 <= operation.length <= 1000",
      "Paths are well-formed and do not contain redundant slashes."
    ],
    "examples": [
      {
        "input": "create /a/b/c, create /a/b/c/file.txt, get /a/b/c/file.txt",
        "output": "Contents of file.txt",
        "explanation": "First, we create the directory structure and then a file. The 'get' operation retrieves the content of 'file.txt'."
      },
      {
        "input": "create /a/b/c/file.txt, delete /a/b/c/file.txt, get /a/b/c/file.txt",
        "output": "File not found.",
        "explanation": "After creating 'file.txt', we delete it and attempt to get it again, leading to a 'File not found' error."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a tree structure to represent the filesystem.",
      "Keep track of the current state of files and directories."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Convert Sorted Array to Binary Search Tree",
    "description": "Given an integer array nums sorted in ascending order, convert it to a height-balanced binary search tree. A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.",
    "topic": "Tree",
    "subtopic": "Binary Search Tree",
    "tags": [
      "Tree",
      "Binary Search Tree",
      "Recursion"
    ],
    "input_format": "An integer array nums sorted in ascending order.",
    "output_format": "The root of the height-balanced binary search tree.",
    "constraints": [
      "0 <= nums.length <= 10^4",
      "-10^4 <= nums[i] <= 10^4",
      "nums is sorted in ascending order."
    ],
    "examples": [
      {
        "input": "nums = [-10, -3, 0, 5, 9]",
        "output": "[0,-10,5,null,-3,null,9]",
        "explanation": "The height-balanced binary search tree for the given input is: \n     0\n    / \\\n  -10  5\n    \\   \\\n    -3   9"
      },
      {
        "input": "nums = [1, 3]",
        "output": "[3,1]",
        "explanation": "The height-balanced binary search tree for the given input is: \n     1\n      \\\n      3"
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider the middle element of the array as the root of the tree.",
      "Recursively do the same for the left and right halves of the array."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Single Number",
    "description": "Given a non-empty array of integers, every element appears twice except for one. Find that single one. You must implement a solution with a linear runtime complexity and use only constant extra space.",
    "topic": "Array",
    "subtopic": "Bit Manipulation",
    "tags": [
      "Array",
      "Bit Manipulation",
      "Hashing"
    ],
    "input_format": "An array of integers nums where every element appears twice except for one.",
    "output_format": "An integer representing the single number that appears only once.",
    "constraints": [
      "1 <= nums.length <= 3 * 10^4",
      "-3 * 10^4 <= nums[i] <= 3 * 10^4",
      "Each input has exactly one single number."
    ],
    "examples": [
      {
        "input": "nums = [2, 2, 1]",
        "output": "1",
        "explanation": "The number 1 appears only once, while 2 appears twice."
      },
      {
        "input": "nums = [4, 1, 2, 1, 2]",
        "output": "4",
        "explanation": "The number 4 appears only once, while 1 and 2 appear twice."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using XOR to solve the problem.",
      "Every two equal numbers XOR to zero."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Reverse Bits",
    "description": "Given a 32-bit unsigned integer n, return n with its bits reversed. For example, the binary representation of the number 5 is '00000000000000000000000000000101', which reversed is '10100000000000000000000000000000', which is 268435456 in decimal.",
    "topic": "Bit Manipulation",
    "subtopic": "Bit Reversal",
    "tags": [
      "Bit Manipulation",
      "Reversal",
      "Integer"
    ],
    "input_format": "A single 32-bit unsigned integer n.",
    "output_format": "A 32-bit unsigned integer representing n with its bits reversed.",
    "constraints": [
      "0 <= n <= 2^32 - 1"
    ],
    "examples": [
      {
        "input": "n = 5",
        "output": "268435456",
        "explanation": "The binary representation of 5 is '00000000000000000000000000000101'. When reversed, it becomes '10100000000000000000000000000000', which is 268435456 in decimal."
      },
      {
        "input": "n = 1",
        "output": "2147483648",
        "explanation": "The binary representation of 1 is '00000000000000000000000000000001'. When reversed, it becomes '10000000000000000000000000000000', which is 2147483648 in decimal."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using bitwise operations to extract and reverse bits.",
      "You can shift bits to the right or left using the operator '>>' or '<<'."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Contains Duplicate III",
    "description": "Given an integer array nums and two integers k and t, return true if there are two distinct indices i and j in the array such that abs(nums[i] - nums[j]) <= t and abs(i - j) <= k.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Hash Map",
      "Sliding Window"
    ],
    "input_format": "An array of integers nums, and two integers k and t.",
    "output_format": "A boolean value indicating whether the conditions are satisfied.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "0 <= k <= 10^4",
      "0 <= t <= 2^31 - 1",
      "-2^31 <= nums[i] <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "nums = [1, 5, 9, 1, 5, 9], k = 2, t = 3",
        "output": "false",
        "explanation": "No two distinct indices i and j exist such that abs(nums[i] - nums[j]) <= 3 and abs(i - j) <= 2."
      },
      {
        "input": "nums = [1, 2, 3, 1], k = 3, t = 0",
        "output": "true",
        "explanation": "The numbers at indices 0 and 3 are both 1, satisfying both conditions."
      },
      {
        "input": "nums = [1, 0, 1, 1], k = 1, t = 2",
        "output": "true",
        "explanation": "The numbers at indices 0 and 2 are both 1, satisfying both conditions with abs(i - j) = 2 <= 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a data structure that can efficiently store and retrieve nearby values.",
      "Think about using a sliding window approach to limit the range of indices compared."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "House Robber",
    "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing the houses is that adjacent houses have security systems connected, and it will automatically contact the police if two adjacent houses are broken into on the same night. Given an integer array 'nums' representing the amount of money at each house, return the maximum amount of money you can rob tonight without alerting the police.",
    "topic": "Dynamic Programming",
    "subtopic": "Memoization",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Greedy"
    ],
    "input_format": "An integer array nums where 0 <= nums.length <= 100 and 0 <= nums[i] <= 400.",
    "output_format": "An integer representing the maximum amount of money that can be robbed.",
    "constraints": [
      "0 <= nums.length <= 100",
      "0 <= nums[i] <= 400"
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 9, 3, 1]",
        "output": "12",
        "explanation": "Robbery plan: rob house 1 (2) and house 3 (9), and house 4 (1): total = 2 + 9 + 1 = 12."
      },
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "4",
        "explanation": "Robbery plan: rob house 1 (1) and house 3 (3): total = 1 + 3 = 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to store results of subproblems.",
      "Try to formulate a recurrence relation to capture the maximum profit at each step."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Maximal Square",
    "description": "Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.",
    "topic": "Dynamic Programming",
    "subtopic": "Matrix",
    "tags": [
      "Dynamic Programming",
      "Matrix",
      "Square"
    ],
    "input_format": "A 2D binary matrix represented as a list of lists, where each element is either '0' or '1'.",
    "output_format": "An integer representing the area of the largest square that can be formed with 1's.",
    "constraints": [
      "1 <= matrix.length <= 300",
      "1 <= matrix[i].length <= 300",
      "matrix[i][j] is '0' or '1'"
    ],
    "examples": [
      {
        "input": "[['1', '0', '1', '0', '0'], ['1', '0', '1', '1', '1'], ['1', '1', '1', '1', '1'], ['1', '0', '0', '1', '0']]",
        "output": "4",
        "explanation": "The largest square containing only 1's has a size of 2x2, resulting in an area of 4."
      },
      {
        "input": "[['0', '0', '0', '0'], ['0', '0', '0', '0'], ['0', '0', '0', '0']]",
        "output": "0",
        "explanation": "There are no 1's in the matrix, so the area of the largest square is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a DP array to store the size of the largest square ending at each cell.",
      "Use the relation: dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Design Tic-Tac-Toe",
    "description": "Design a Tic-Tac-Toe game that supports two players. Implement the `TicTacToe` class that allows players to make moves and check for a winner. The board is 3x3 and players take turns placing their markers ('X' or 'O'). The game can be won if one player places three markers in a row vertically, horizontally, or diagonally. If the board is full and no player has won, the game is a draw.",
    "topic": "Design",
    "subtopic": "Game Design",
    "tags": [
      "Design",
      "Game",
      "Simulation"
    ],
    "input_format": "You can initialize a TicTacToe class, and use the `move(int row, int col, char player)` method to make a move. The current player is given as 'X' or 'O'.",
    "output_format": "The `move` method returns: 1 if the current player wins after the move, 0 if the game continues, and -1 if the move is invalid.",
    "constraints": [
      "1 <= row, col <= 3",
      "The game must follow rules of Tic-Tac-Toe.",
      "Players must alternate turns."
    ],
    "examples": [
      {
        "input": "TicTacToe ttt = new TicTacToe(); ttt.move(0, 0, 'X'); ttt.move(0, 1, 'O'); ttt.move(0, 2, 'X');",
        "output": "1",
        "explanation": "Player X wins by filling the top row."
      },
      {
        "input": "TicTacToe ttt = new TicTacToe(); ttt.move(0, 0, 'X'); ttt.move(0, 1, 'O'); ttt.move(1, 1, 'X'); ttt.move(1, 0, 'O'); ttt.move(2, 0, 'X');",
        "output": "1",
        "explanation": "Player X wins by filling the first column."
      },
      {
        "input": "TicTacToe ttt = new TicTacToe(); ttt.move(0, 0, 'X'); ttt.move(0, 1, 'O'); ttt.move(1, 0, 'X'); ttt.move(1, 1, 'O'); ttt.move(2, 0, 'X'); ttt.move(2, 1, 'O'); ttt.move(2, 2, 'X');",
        "output": "0",
        "explanation": "The game continues without a winner."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about using a 2D array to represent the game board.",
      "You need to check for three consecutive markers after each move."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Subarray Product Less Than K",
    "description": "Given an array of positive integers 'nums' and a positive integer 'k', find the number of contiguous subarrays where the product of all the elements in the subarray is less than 'k'.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Product"
    ],
    "input_format": "An array of positive integers nums and a positive integer k.",
    "output_format": "An integer representing the number of contiguous subarrays with a product less than k.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "1 <= nums[i] <= 1000",
      "1 <= k <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [10, 5, 2, 6], k = 100",
        "output": "8",
        "explanation": "The subarrays with products less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], and [10, 5, 2]."
      },
      {
        "input": "nums = [1, 2, 3], k = 0",
        "output": "0",
        "explanation": "Since k is 0, no subarray can have a product less than k."
      },
      {
        "input": "nums = [1, 2, 3, 4], k = 10",
        "output": "7",
        "explanation": "The subarrays that conform are: [1], [2], [3], [4], [1, 2], [1, 2, 3], and [2, 3]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach.",
      "Keep track of the product of the subarray elements efficiently.",
      "If the product exceeds k, shrink the window from the left."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Shortest Uncommon Substring in an Array",
    "description": "Given an array of strings, find the shortest substring that is not contained in any of the strings within the array. The substring must have a minimum length of 1 character. If there are multiple shortest uncommon substrings, return the one that appears first in lexicographical order.",
    "topic": "Strings",
    "subtopic": "Substring Search",
    "tags": [
      "String",
      "Matrix",
      "Substring"
    ],
    "input_format": "An array of strings arr.",
    "output_format": "A string representing the shortest uncommon substring.",
    "constraints": [
      "1 <= arr.length <= 100",
      "1 <= arr[i].length <= 10"
    ],
    "examples": [
      {
        "input": "arr = [\"aa\", \"ab\", \"bc\"]",
        "output": "c",
        "explanation": "The substring 'c' is not present in any of the strings in the array."
      },
      {
        "input": "arr = [\"a\", \"b\", \"c\"]",
        "output": "d",
        "explanation": "The shortest uncommon substring is 'd', as 'a', 'b', and 'c' are present."
      },
      {
        "input": "arr = [\"apple\", \"banana\", \"grape\"]",
        "output": "f",
        "explanation": "The shortest uncommon substring is 'f', as it is not in any of the input strings."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Explore all substrings of length 1 and increase if necessary.",
      "Using a set can help track existing substrings efficiently."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Design Excel Sum Formula",
    "description": "You are tasked with designing an Excel-like sum formula that takes a range of cells and returns the sum of all the values within that range. The formula should support both direct cell references (like A1, B2, etc.) and ranges (like A1:B2). Additionally, you need to handle basic arithmetic operations and ensure that any non-numeric values are ignored in the sum.",
    "topic": "Excel Formula Design",
    "subtopic": "String Parsing and Evaluation",
    "tags": [
      "Excel",
      "String",
      "Mathematical Evaluation"
    ],
    "input_format": "A string representing the Excel formula, which includes cell references and/or ranges.",
    "output_format": "An integer representing the sum of all numeric values represented by the input formula.",
    "constraints": [
      "The formula string length does not exceed 100 characters.",
      "Cell references can be uppercase letters followed by digits (e.g., A1, B2).",
      "Ranges are denoted with a colon, e.g., A1:B2.",
      "Non-numeric values are represented as strings and should be ignored."
    ],
    "examples": [
      {
        "input": "A1:10 + B1:5 + C1:'text'",
        "output": "15",
        "explanation": "Cells A1 and B1 contain 10 and 5 respectively, while C1 contains a non-numeric value 'text', which is ignored."
      },
      {
        "input": "A1:3 + A2:3 + A3:5 + D1:'hello'",
        "output": "11",
        "explanation": "The numeric values 3, 3, and 5 are summed, while 'hello' is ignored."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a mapping for cell references to simulate the data.",
      "Parse the input string carefully to extract numeric values and ranges."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "All O`one Data Structure",
    "description": "Design and implement a data structure that supports the following operations: insert, delete, and getMaxFrequency. The getMaxFrequency operation should return the element with the highest frequency. If there are multiple elements with the same maximum frequency, return any of them. The data structure should be efficient, allowing each operation to run in O(1) time complexity on average.",
    "topic": "Data Structures",
    "subtopic": "Design",
    "tags": [
      "Data Structures",
      "Design",
      "Frequency"
    ],
    "input_format": "A sequence of operations, each specified as a string ('insert x', 'delete x', 'getMaxFrequency').",
    "output_format": "For each 'getMaxFrequency' operation, return the element that has the highest frequency.",
    "constraints": [
      "1 <= operations.length <= 10^5",
      "-10^5 <= x <= 10^5"
    ],
    "examples": [
      {
        "input": [
          "insert 1",
          "insert 2",
          "insert 2",
          "getMaxFrequency",
          "delete 2",
          "getMaxFrequency"
        ],
        "output": "2",
        "explanation": "After inserting, the frequency of 1 is 1 and the frequency of 2 is 2. So, getMaxFrequency returns 2. After deleting one '2', the frequency of 2 becomes 1, and both 1 and 2 have the same frequency now."
      },
      {
        "input": [
          "insert 1",
          "insert 1",
          "insert 2",
          "getMaxFrequency",
          "delete 1",
          "getMaxFrequency"
        ],
        "output": "1",
        "explanation": "Initially, 1 has a frequency of 2, and 2 has a frequency of 1. getMaxFrequency returns 1. After deleting one '1', the frequency of 1 becomes 1, and the maximum frequency is now 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "You may need to maintain a mapping of frequencies to their respective elements.",
      "Consider using a map or a dictionary to keep track of counts."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals and return an array of the non-overlapping intervals that cover all the intervals in the input.",
    "topic": "Array",
    "subtopic": "Sorting and Merging",
    "tags": [
      "Array",
      "Sorting",
      "Intervals"
    ],
    "input_format": "An array of intervals, where each interval is represented as a pair of integers [start, end].",
    "output_format": "An array of merged intervals, where each interval is represented as a pair of integers [start, end].",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^5"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "The intervals [1,3] and [2,6] overlap, so we merge them into [1,6]."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] touch, so we merge them into [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on the starting times.",
      "Use a list to keep track of merged intervals as you iterate."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Time Based Key-Value Store",
    "description": "Design a time-based key-value store that can store multiple values for the same key with different timestamps. Implement the following methods: set(key, value, timestamp) which sets the value of the key at a specified timestamp, and get(key, timestamp) which returns the value at that timestamp. If no value exists at the given timestamp, return the value of the next smallest timestamp. If there are no timestamps less than or equal to the given timestamp, return an empty string.",
    "topic": "Design",
    "subtopic": "Key-Value Store",
    "tags": [
      "Design",
      "Key-Value Store",
      "Data Structures"
    ],
    "input_format": "Two methods: set(key: str, value: str, timestamp: int) and get(key: str, timestamp: int).",
    "output_format": "Return the value for the key at the specified timestamp, or an empty string if no such value exists.",
    "constraints": [
      "Number of calls to set and get will not exceed 1000.",
      "1 <= key.length <= 100",
      "1 <= value.length <= 100",
      "1 <= timestamp <= 10^9"
    ],
    "examples": [
      {
        "input": "Store = TimeBasedKeyValueStore(); Store.set('foo', 'bar', 1); Store.get('foo', 1)",
        "output": "'bar'",
        "explanation": "The value 'bar' is associated with the key 'foo' at timestamp 1."
      },
      {
        "input": "Store.set('foo', 'bar', 1); Store.set('foo', 'baz', 2); Store.get('foo', 3)",
        "output": "'baz'",
        "explanation": "For timestamp 3, the latest value is 'baz' which was set at timestamp 2."
      },
      {
        "input": "Store.set('foo', 'bar', 1); Store.get('foo', 0)",
        "output": "''",
        "explanation": "There is no value set for timestamp 0, so the result is an empty string."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hashmap to store timestamps and their corresponding values.",
      "For get method, binary search may help to find the appropriate timestamp quickly."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Shortest Path in Binary Matrix",
    "description": "Given a binary matrix represented as a 2D grid where 0s represent open cells and 1s represent blocked cells, find the length of the shortest path from the top-left corner (0, 0) to the bottom-right corner (n-1, n-1). You can move in 8 directions (up, down, left, right, and the four diagonals). If there is no such path, return -1.",
    "topic": "Graph",
    "subtopic": "Breadth-First Search",
    "tags": [
      "Graph",
      "BFS",
      "Pathfinding"
    ],
    "input_format": "A 2D binary matrix grid with dimensions n x n.",
    "output_format": "An integer representing the length of the shortest path, or -1 if no path exists.",
    "constraints": [
      "1 <= n <= 100",
      "grid[i][j] is either 0 or 1",
      "grid[0][0] and grid[n-1][n-1] are guaranteed to be 0."
    ],
    "examples": [
      {
        "input": "grid = [[0,0,0],[0,1,0],[0,0,0]]",
        "output": "4",
        "explanation": "The shortest path goes through (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2)."
      },
      {
        "input": "grid = [[0,1],[1,0]]",
        "output": "2",
        "explanation": "The path goes from (0,0) to (1,1)."
      },
      {
        "input": "grid = [[1,0,0],[0,1,0],[0,0,0]]",
        "output": "-1",
        "explanation": "There is no path from (0,0) to (2,2) due to blocked cells."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a queue to manage the cells to explore next.",
      "Track the distance from the starting point as you explore the grid."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Making A Large Island",
    "description": "You are given a 2D grid of 0s and 1s, where 0 represents water and 1 represents land. Your task is to find the maximum area of an island that can be formed by converting at most one water cell (0) into land (1). An island is defined as a group of connected 1s (horizontally or vertically). You need to return the maximum area of an island that can be created after this conversion.",
    "topic": "Dynamic Programming",
    "subtopic": "Grid Traversal",
    "tags": [
      "Array",
      "Grid",
      "Dynamic Programming",
      "DFS"
    ],
    "input_format": "A 2D grid represented as an array of arrays of integers, where each integer is either 0 or 1.",
    "output_format": "An integer representing the maximum area of the island after converting one water cell to land.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 50",
      "grid[i][j] is either 0 or 1"
    ],
    "examples": [
      {
        "input": "grid = [[0,0,1,0],[0,1,1,0],[0,0,0,0],[0,1,0,0]]",
        "output": "5",
        "explanation": "By converting one of the 0s (water) connected to the island into a 1 (land), the island can grow to an area of 5."
      },
      {
        "input": "grid = [[1,0,0],[0,1,1],[0,0,0]]",
        "output": "4",
        "explanation": "By converting one of the 0s in the last row into a 1, we connect two islands into one with a total area of 4."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how you can track connected components in the grid.",
      "Think about using Depth First Search (DFS) or Breadth First Search (BFS) to explore the islands."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Flatten Nested List Iterator",
    "description": "Design an iterator to flatten a nested list of integers. Each element in the nested list could either be an integer or a list. The iterator should support the hasNext() and next() methods to iterate through the integers in the nested list in a flattened manner.",
    "topic": "Design",
    "subtopic": "Iterator",
    "tags": [
      "Design",
      "Iterator",
      "Flatten"
    ],
    "input_format": "A nested list of integers where each element could either be an integer or a nested list.",
    "output_format": "An integer returned by the next() method of the iterator.",
    "constraints": [
      "The total number of integers in all lists combined will not exceed 10^4.",
      "The integers are within the range of [-10^6, 10^6]."
    ],
    "examples": [
      {
        "input": "[1, [2, [3, 4], 5], 6]",
        "output": "1",
        "explanation": "The first call to next() returns 1."
      },
      {
        "input": "[[1, 1], 2, [1, 1]]",
        "output": "1",
        "explanation": "After the first call to next(), it returns 1 from the first nested list."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the current position in the nested lists.",
      "Make sure to handle cases where you encounter lists within lists."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Fraction to Recurring Decimal",
    "description": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format. If the fractional part is recurring, enclose the repeating part in parentheses. For example, the input `(2, 3)` will produce the output `'0.(6)'`.",
    "topic": "Math",
    "subtopic": "Fractions",
    "tags": [
      "Math",
      "Fractions",
      "String"
    ],
    "input_format": "Two integers numerator and denominator.",
    "output_format": "A string representing the fraction in decimal format.",
    "constraints": [
      "-2^31 <= numerator, denominator <= 2^31 - 1",
      "denominator != 0"
    ],
    "examples": [
      {
        "input": "numerator = 1, denominator = 2",
        "output": "0.5",
        "explanation": "1 divided by 2 is 0.5."
      },
      {
        "input": "numerator = 2, denominator = 1",
        "output": "2",
        "explanation": "2 divided by 1 is 2."
      },
      {
        "input": "numerator = 2, denominator = 3",
        "output": "0.(6)",
        "explanation": "2 divided by 3 is 0.66666..., which is represented as 0.(6)."
      },
      {
        "input": "numerator = 4, denominator = 333",
        "output": "0.0(12)",
        "explanation": "4 divided by 333 is 0.012012012..., which is represented as 0.0(12)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hashmap to store the indices of the remainders.",
      "Pay attention to handle both integral and fractional parts.",
      "Consider the cases when the numerator is negative."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Can Place Flowers",
    "description": "You have a flowerbed represented as a list of zeroes and ones, where a zero signifies an empty plot of land and a one signifies a flower. You want to plant a new flower in the flowerbed, but flowers cannot be planted in adjacent plots. Given an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.",
    "topic": "Array",
    "subtopic": "Greedy",
    "tags": [
      "Array",
      "Greedy",
      "Simulation"
    ],
    "input_format": "An array of integers flowerbed and an integer n.",
    "output_format": "A boolean value indicating whether n new flowers can be planted.",
    "constraints": [
      "1 <= flowerbed.length <= 20000",
      "flowerbed[i] is 0 or 1",
      "0 <= n <= flowerbed.length"
    ],
    "examples": [
      {
        "input": "flowerbed = [1, 0, 0, 0, 1], n = 1",
        "output": "true",
        "explanation": "You can plant a flower in the middle '0' without violating the rules."
      },
      {
        "input": "flowerbed = [1, 0, 0, 0, 1], n = 2",
        "output": "false",
        "explanation": "You cannot plant two flowers in the flowerbed as it would violate the no-adjacent-flowers rule."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Check if you can plant in a given position.",
      "Iterate through the flowerbed while keeping track of the last planted position.",
      "Consider the edges of the flowerbed carefully."
    ],
    "company": "Airbnb"
  },
  {
    "question_id": "",
    "title": "Coin Change",
    "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. You want to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin.",
    "topic": "Dynamic Programming",
    "subtopic": "Coin Change Problem",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Math"
    ],
    "input_format": "An integer array coins and an integer amount.",
    "output_format": "An integer representing the fewest number of coins needed to make the amount, or -1 if it cannot be made.",
    "constraints": [
      "1 <= coins.length <= 12",
      "1 <= coins[i] <= 2^31 - 1",
      "0 <= amount <= 10^4"
    ],
    "examples": [
      {
        "input": "coins = [1, 2, 5], amount = 11",
        "output": "3",
        "explanation": "The fewest number of coins to make amount 11 is 3: 5 + 5 + 1."
      },
      {
        "input": "coins = [2], amount = 3",
        "output": "-1",
        "explanation": "It is not possible to make amount 3 with just 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to solve the problem.",
      "Think about how you can build solutions for smaller amounts to solve for larger amounts."
    ],
    "company": "Airbnb"
  }
]