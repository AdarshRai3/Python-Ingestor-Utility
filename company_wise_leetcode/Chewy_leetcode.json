[
  {
    "question_id": "",
    "title": "Top K Frequent Elements",
    "description": "Given a non-empty array of integers, return the k most frequent elements. You may return the answer in any order. For example, given the array [1,1,1,2,2,3] and k = 2, return [1,2]. It is guaranteed that the answer is unique, and you may return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hash Table",
      "Frequency Count"
    ],
    "input_format": "An integer array nums and an integer k.",
    "output_format": "An array of the k most frequent elements.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "k is always valid, 1 <= k <= number of unique elements"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 1, 2, 2, 3], k = 2",
        "output": "[1, 2]",
        "explanation": "The number 1 appears 3 times and the number 2 appears 2 times. Hence, the top 2 frequent elements are 1 and 2."
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]",
        "explanation": "The number 1 appears once which is the only unique element."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to count frequencies.",
      "You may want a min-heap to keep track of the top k elements."
    ],
    "company": "Chewy"
  },
  {
    "question_id": "",
    "title": "Design Tic-Tac-Toe",
    "description": "You need to design a Tic-Tac-Toe game that supports the following operations: placing a mark on the board and determining the game's status. The board is a 3x3 grid, and players can take turns placing their respective marks ('X' or 'O'). After each placement, the game needs to check if there is a winner or if the game ends in a draw.",
    "topic": "Design",
    "subtopic": "Game Design",
    "tags": [
      "Design",
      "Game",
      "Tic-Tac-Toe"
    ],
    "input_format": "A sequence of operations to place marks on the board.",
    "output_format": "Return 'X' if player X wins, return 'O' if player O wins, return 'Draw' if the game ends in a draw, and return 'Pending' if the game is still ongoing.",
    "constraints": [
      "Players will take turns, and each player will make a valid move.",
      "The board is a 3x3 grid, and coordinates are 1-indexed.",
      "Each mark placed must be in an empty spot."
    ],
    "examples": [
      {
        "input": "Operations: [(1, 1, 'X'), (1, 2, 'O'), (1, 3, 'X'), (2, 1, 'O'), (2, 2, 'X'), (2, 3, 'O'), (3, 1, 'X')]",
        "output": "'X'",
        "explanation": "Player X wins by forming a vertical line in the first column."
      },
      {
        "input": "Operations: [(1, 1, 'X'), (1, 2, 'O'), (1, 3, 'X'), (2, 2, 'O'), (2, 3, 'X'), (3, 1, 'O'), (3, 2, 'X')]",
        "output": "'Draw'",
        "explanation": "All spots are filled, and there are no winners."
      },
      {
        "input": "Operations: [(1, 1, 'X'), (1, 2, 'O'), (2, 1, 'X')]",
        "output": "'Pending'",
        "explanation": "The game is still ongoing as there are empty spots."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a 2D array to represent the board.",
      "Check winning conditions after every move."
    ],
    "company": "Chewy"
  },
  {
    "question_id": "",
    "title": "Robot Bounded In Circle",
    "description": "A robot is located at the origin (0, 0) of a grid and wants to move in four directions: 'G' (go straight), 'L' (turn left), and 'R' (turn right). The robot performs a sequence of instructions and returns to the origin if it is bounded in a circle. Determine if the robot is bounded in a circle after executing the given instructions.",
    "topic": "Geometry",
    "subtopic": "Simulation",
    "tags": [
      "Simulation",
      "Geometry",
      "Robot"
    ],
    "input_format": "A string instructions representing the movement of the robot.",
    "output_format": "A boolean value: true if the robot is bounded in a circle, false otherwise.",
    "constraints": [
      "1 <= instructions.length <= 100",
      "instructions[i] is either 'G', 'L', or 'R'."
    ],
    "examples": [
      {
        "input": "instructions = \"GGLLGG\"",
        "output": "true",
        "explanation": "The robot makes two moves forward then turns back and repeats. It returns to the origin in a circular path."
      },
      {
        "input": "instructions = \"GLGLGGLG\"",
        "output": "true",
        "explanation": "The robot moves in a square path, returning to the starting point, thus is bounded in a circle."
      },
      {
        "input": "instructions = \"GG\"",
        "output": "false",
        "explanation": "The robot moves forward twice and does not return to the origin, so it is not bounded in a circle."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about the robot's direction after completing the instructions.",
      "If the robot doesn't end facing north, it might be bounded.",
      "Consider the movements in terms of changes in coordinates on a Cartesian plane."
    ],
    "company": "Chewy"
  },
  {
    "question_id": "",
    "title": "Backspace String Compare",
    "description": "Given two strings, S and T, return true if they are equal when both are typed into empty text editors. '#' means a backspace character. Note that after backspacing an empty text, the text will continue empty.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Two Pointers",
      "Stack"
    ],
    "input_format": "Two strings S and T.",
    "output_format": "A boolean value indicating whether the processed strings are equal.",
    "constraints": [
      "1 <= S.length, T.length <= 200",
      "S and T only contain lowercase letters and '#' characters."
    ],
    "examples": [
      {
        "input": "S = \"ab#c\", T = \"ad#c\"",
        "output": "true",
        "explanation": "Both strings become \"ac\" after processing."
      },
      {
        "input": "S = \"ab##\", T = \"c#d#\"",
        "output": "true",
        "explanation": "Both strings become \"\" after processing."
      },
      {
        "input": "S = \"a#c\", T = \"b\"",
        "output": "false",
        "explanation": "S becomes \"c\", T is \"b\". They are not equal."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider simulating the process of typing the strings.",
      "You can use a stack to manage the backspace operations."
    ],
    "company": "Chewy"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers, return the indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An integer array nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers adding up to the target.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "Assume that each input has exactly one solution."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9, so the output is [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6, so the output is [1, 2]."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6, so the output is [0, 1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash table to remember the indices of the numbers you have seen.",
      "You can find the complement of the current number by subtracting it from the target."
    ],
    "company": "Chewy"
  }
]