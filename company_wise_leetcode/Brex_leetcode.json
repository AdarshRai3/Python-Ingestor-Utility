[
  {
    "question_id": "",
    "title": "Basic Calculator III",
    "description": "Implement a basic calculator to evaluate a string expression containing non-negative integers, '+', '-', '*', and '/' operators, and open and closed parentheses '('. The expression should be evaluated according to the standard order of operations (PEMDAS). The input expression is guaranteed to be valid. You should return an integer that represents the result of the evaluation.",
    "topic": "Mathematics",
    "subtopic": "Expression Evaluation",
    "tags": [
      "Calculator",
      "Stack",
      "Expression",
      "Math"
    ],
    "input_format": "A string expression s representing the arithmetic operation.",
    "output_format": "An integer representing the result of the evaluated expression.",
    "constraints": [
      "1 <= s.length <= 3 * 10^5",
      "s consists of digits, '+', '-', '*', '/', '(', and ')'.",
      "It is guaranteed that the expression is valid."
    ],
    "examples": [
      {
        "input": "s = \"1 + 1\"",
        "output": "2",
        "explanation": "The expression is simply 1 + 1, which equals 2."
      },
      {
        "input": "s = \" 2-1 + 2 \"",
        "output": "3",
        "explanation": "The expression evaluates to (2 - 1) + 2 = 1 + 2 = 3."
      },
      {
        "input": "s = \"(1+(4+5+2)-3)+(6+8)\"",
        "output": "23",
        "explanation": "The expression can be simplified step by step to get the final result of 23."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a stack to evaluate the expression.",
      "Handle operator precedence when evaluating.",
      "Don't forget to handle parentheses."
    ],
    "company": "Brex"
  },
  {
    "question_id": "",
    "title": "Game of Life",
    "description": "The 'Game of Life' is a cellular automaton devised by the British mathematician John Conway. The game is played on a 2D grid where each cell can either be alive (1) or dead (0). The state of the cells evolves over iterations based on a set of rules. For each cell in the grid, the next state is determined by the following rules: \n1. Any live cell with two or three live neighbors survives. \n2. Any dead cell with exactly three live neighbors becomes a live cell. \n3. All other live cells die in the next generation. Similarly, all other dead cells stay dead. \nYour task is to implement the `game_of_life` function that takes the current state of the grid and updates it to the next state.",
    "topic": "Simulation",
    "subtopic": "Grid",
    "tags": [
      "Array",
      "Simulation",
      "Grid"
    ],
    "input_format": "A 2D list `board` of size m x n, where board[i][j] is 0 (dead) or 1 (alive).",
    "output_format": "The function returns nothing, and the board is modified in place to represent the next state.",
    "constraints": [
      "The input board is a rectangular grid with dimensions m x n.",
      "1 <= m, n <= 25",
      "Each cell board[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]",
        "output": "[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]",
        "explanation": "After applying the rules, the board evolves to the next generation."
      },
      {
        "input": "board = [[1,1],[1,0]]",
        "output": "[[1,1],[1,1]]",
        "explanation": "Both live cells have 3 live neighbors and remain alive, and the dead cell becomes alive."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to apply the rules without using extra space.",
      "Think about representing the next state using different values temporarily."
    ],
    "company": "Brex"
  }
]