[
  {
    "question_id": "",
    "title": "Watering Plants",
    "description": "You have a garden with `n` plants arranged in a line, and each plant requires a certain amount of water, represented by an array `plants`. You can water one plant at a time with a fixed amount of water `capacity`. Every time you water a plant, it will immediately absorb all the water, but you must walk back from the plant to a water tap located at the starting position (index 0). If at any point your water capacity runs out before reaching the plant that needs water, you must return to the tap to refill. Your task is to determine the minimum distance you need to walk to water all the plants in the garden. The distance is measured in units of distance traveled: from the tap to the plant and back to the tap for refilling.",
    "topic": "Greedy",
    "subtopic": "Distance Calculation",
    "tags": [
      "Greedy",
      "Distance",
      "Simulation"
    ],
    "input_format": "An array of integers `plants` where `plants[i]` is the amount of water needed for the i-th plant, and an integer `capacity` representing the maximum amount of water you can carry.",
    "output_format": "An integer representing the minimum total distance you need to walk to water all the plants.",
    "constraints": [
      "1 <= plants.length <= 10^5",
      "0 <= plants[i] <= 1000",
      "1 <= capacity <= 1000"
    ],
    "examples": [
      {
        "input": {
          "plants": [
            2,
            4,
            3,
            5,
            1
          ],
          "capacity": 5
        },
        "output": 16,
        "explanation": "You can water the first 3 plants in a single trip to the tap. The total distance is (2 + 4) + (4 + 3) + (3 + 5) + (5 + 1) = 16."
      },
      {
        "input": {
          "plants": [
            1,
            2,
            3,
            4,
            5
          ],
          "capacity": 5
        },
        "output": 30,
        "explanation": "You need to refill for every plant since the total requires more than you can carry in one trip."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Calculate the distance for each plant based on current water level.",
      "Keep track of the current water level and adjust trips accordingly."
    ],
    "company": "Amadeus"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An integer array `nums`, and an integer `target`.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the difference between target and each element."
    ],
    "company": "Amadeus"
  },
  {
    "question_id": "",
    "title": "Water Bottles",
    "description": "You have a number of water bottles, each with a certain capacity. Initially, all are empty, and you can fill them with water from a water container. You can pour a maximum of `fullWater` liters into the water bottles. Each bottle has a maximum capacity defined in a list. Return the number of completely filled bottles after pouring water into them.",
    "topic": "Greedy",
    "subtopic": "Selection",
    "tags": [
      "Greedy",
      "Water",
      "Array"
    ],
    "input_format": "An array of integers representing the capacities of the water bottles and an integer fullWater representing the total liters of water available.",
    "output_format": "An integer representing the number of completely filled bottles.",
    "constraints": [
      "1 <= capacities.length <= 10^5",
      "1 <= capacities[i] <= 100",
      "0 <= fullWater <= 10^9"
    ],
    "examples": [
      {
        "input": "capacities = [1, 2, 3], fullWater = 4",
        "output": "2",
        "explanation": "You can fill the first bottle (1 liter) and the second bottle (2 liters) completely, totaling 3 liters. You have 1 liter left which is not enough to fill the third bottle."
      },
      {
        "input": "capacities = [3, 3, 3], fullWater = 6",
        "output": "2",
        "explanation": "You can fill two bottles completely (3 + 3 = 6) but not the third."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Sort the capacities first to prioritize filling smaller bottles.",
      "Use a loop to iterate over capacities, subtracting from fullWater as you fill each bottle."
    ],
    "company": "Amadeus"
  },
  {
    "question_id": "",
    "title": "Minimum Time to Complete Trips",
    "description": "You are given an array of integers `time` where `time[i]` is the time taken by the `i-th` bus to complete one trip. You have to find the minimum time required to complete a given number of `trips` using any of the buses. Each bus can only complete one trip at a time and can be reused. Determine the minimum time needed to complete the specified number of trips.",
    "topic": "Binary Search",
    "subtopic": "Optimization",
    "tags": [
      "Binary Search",
      "Optimization",
      "Math"
    ],
    "input_format": "An array of integers `time` and an integer `trips`. `time` represents the time taken by each bus to complete one trip, and `trips` is the total number of trips needed.",
    "output_format": "An integer representing the minimum time required to complete the specified number of trips.",
    "constraints": [
      "1 <= time.length <= 1000",
      "1 <= time[i], trips <= 10^7"
    ],
    "examples": [
      {
        "input": "time = [1, 2, 3], trips = 5",
        "output": "3",
        "explanation": "Bus 1 can complete 3 trips in 3 time units, while bus 2 can complete 2 trips in 4 time units. Using bus 1 will allow for the minimum total time."
      },
      {
        "input": "time = [2, 3, 5], trips = 10",
        "output": "12",
        "explanation": "In 12 time units, bus 1 can complete 6 trips, bus 2 can complete 4 trips, and bus 3 can complete 2 trips, totaling 12 trips."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try using binary search to minimize the total time.",
      "Calculate how many trips can be completed in a given time."
    ],
    "company": "Amadeus"
  }
]