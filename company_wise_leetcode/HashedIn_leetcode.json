[
  {
    "question_id": "",
    "title": "Find Candidates for Data Scientist Position",
    "description": "You are given a list of resumes for candidates applying for a Data Scientist position. Each resume contains a string of skills the candidate possesses. Your task is to find all candidates who possess at least a certain number of required skills. Return the indices of these candidates in the original list.",
    "topic": "String",
    "subtopic": "Searching",
    "tags": [
      "String",
      "Searching",
      "Filtering"
    ],
    "input_format": "A list of strings `resumes` representing the skills of each candidate, and an integer `min_skills` indicating the minimum number of required skills.",
    "output_format": "A list of integers representing the indices of candidates who meet the skill requirement.",
    "constraints": [
      "1 <= resumes.length <= 1000",
      "1 <= min_skills <= 100",
      "1 <= resumes[i].length <= 100"
    ],
    "examples": [
      {
        "input": "resumes = ['python, ml, sql', 'java, python, data analysis', 'sql, data visualization'], min_skills = 2",
        "output": "[0, 1]",
        "explanation": "Candidate 0 has skills ['python', 'ml', 'sql'] which is 3 skills; Candidate 1 has ['java', 'python', 'data analysis'] which is also 3 skills. Candidate 2 has only 2 skills, so the valid candidates are 0 and 1."
      },
      {
        "input": "resumes = ['r, python', 'sql'], min_skills = 2",
        "output": "[0]",
        "explanation": "Only Candidate 0 has 2 skills, while Candidate 1 only has 1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a split function to count skills in each resume.",
      "Iterate through the resumes to check the skill count."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Maximize Items",
    "description": "You are given an array of integers representing the weights of items and a weight limit. Your task is to select the maximum number of items that can be carried without exceeding the weight limit. Each item can only be used once. The approach should be efficient as the number of items may be large.",
    "topic": "Greedy",
    "subtopic": "Knapsack Problem",
    "tags": [
      "Greedy",
      "Knapsack",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers weights and an integer limit representing the maximum weight capacity.",
    "output_format": "An integer representing the maximum number of items that can be carried.",
    "constraints": [
      "1 <= weights.length <= 1000",
      "1 <= weights[i] <= 1000",
      "1 <= limit <= 10000"
    ],
    "examples": [
      {
        "input": "weights = [1, 3, 2, 5, 4], limit = 7",
        "output": "4",
        "explanation": "You can take items with weights 1, 2, 3, and 4, which sums to 10, exceeding the limit; however, the best combination is 1 + 2 + 4, allowing 4 items."
      },
      {
        "input": "weights = [6, 2, 3, 5], limit = 7",
        "output": "3",
        "explanation": "You can take items with weights 2, 3, and 5, which sums to 10, thus the best combination is 2 + 3 + 5, allowing 3 items."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Sort the items by their weights.",
      "Keep adding items until you exceed the limit."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Maximum Points Inside the Square",
    "description": "Given an array of points on a 2D plane, each represented by a coordinate (xi, yi), you need to find the maximum number of points that can fit inside a square of side length s, with its sides parallel to the axes. The square can be placed anywhere on the plane, but it must completely fit within the grid formed by the integer coordinates.",
    "topic": "Geometry",
    "subtopic": "Coordinate System",
    "tags": [
      "Geometry",
      "Square",
      "Points"
    ],
    "input_format": "An integer s representing the side length of the square, followed by a list of points, where each point is represented as an array of two integers [xi, yi].",
    "output_format": "An integer representing the maximum number of points inside the square.",
    "constraints": [
      "1 <= s <= 100",
      "1 <= points.length <= 1000",
      "-10^4 <= xi, yi <= 10^4"
    ],
    "examples": [
      {
        "input": "s = 2, points = [[1,1], [2,2], [3,3], [2,1], [1,2]]",
        "output": "4",
        "explanation": "The square can be placed with its bottom-left corner at (1,1), which includes points (1,1), (2,1), (1,2), and (2,2), totaling 4 points."
      },
      {
        "input": "s = 3, points = [[0,0], [1,0], [2,1], [1,1], [3,3]]",
        "output": "5",
        "explanation": "The square can be placed with its bottom-left corner at (0,0), which includes all five points."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider a sliding window approach to check for maximum points in a given area.",
      "Sort the points based on their coordinates for easier processing."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Count the Number of Powerful Integers",
    "description": "Given two positive integers x and y, you need to find the number of distinct integers that can be represented as a^i + b^j, where a is x, b is y, and i and j are non-negative integers. A number is classified as a powerful integer if there exists at least one pair (i, j) such that a^i + b^j is less than or equal to bound.",
    "topic": "Mathematics",
    "subtopic": "Exponential Growth",
    "tags": [
      "Math",
      "Exponents",
      "Brute Force"
    ],
    "input_format": "Three integers x, y, and bound, where 1 <= x, y <= 100 and 1 <= bound <= 10^6.",
    "output_format": "An integer representing the count of distinct powerful integers that can be formed.",
    "constraints": [
      "1 <= x, y <= 100",
      "1 <= bound <= 10^6"
    ],
    "examples": [
      {
        "input": "x = 2, y = 3, bound = 10",
        "output": "5",
        "explanation": "The powerful integers are 2^0 + 3^0 = 1, 2^1 + 3^0 = 2, 2^0 + 3^1 = 3, 2^1 + 3^1 = 5, and 2^2 + 3^0 = 4. Hence, the total count is 5."
      },
      {
        "input": "x = 3, y = 5, bound = 15",
        "output": "6",
        "explanation": "The powerful integers are 3^0 + 5^0 = 1, 3^0 + 5^1 = 6, 3^1 + 5^0 = 4, 3^1 + 5^1 = 8, 3^2 + 5^0 = 9, and 3^0 + 5^2 = 26 (exceeds bound). Hence, the total count is 6."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using sets to store distinct integers.",
      "You don't need to calculate powers indefinitely; keep them within bounds."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Minimize Length of Array Using Operations",
    "description": "Given an array of integers, you are allowed to perform a series of operations where you can remove two adjacent elements if the sum of these elements is even. Your goal is to minimize the length of the array. Return the minimum possible length of the array after performing the allowed operations.",
    "topic": "Array",
    "subtopic": "Adjacent Elements",
    "tags": [
      "Array",
      "Operations",
      "Greedy"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the minimum length of the array after operations.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5]",
        "output": "3",
        "explanation": "Remove 2 and 4 (sum is 6), resulting in [1, 3, 5]. Length is now 3."
      },
      {
        "input": "nums = [2, 4, 6, 8]",
        "output": "0",
        "explanation": "All pairs can be removed since their sums are even."
      },
      {
        "input": "nums = [1, 3, 5]",
        "output": "3",
        "explanation": "No adjacent elements can be removed since their sums are odd."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how adjacent sums affect the ability to remove elements.",
      "Track the parity of numbers to decide on removals.",
      "Consider using a stack to help manage the array elements."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array where the ith element is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "Array Manipulation",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices where 0 <= prices.length <= 10^5 and 0 <= prices[i] <= 10^4.",
    "output_format": "An integer representing the maximum profit.",
    "constraints": [
      "0 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done, and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a variable to track the minimum price seen so far.",
      "Calculate the profit at each step and keep track of the maximum profit."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array representing the height of bars in a histogram, compute how much water can be trapped after raining. The width of each bar is 1. You need to consider the height of the left and right bar for each bar to determine how much water can be trapped above it.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "input_format": "An array of non-negative integers representing the heights of the bars.",
    "output_format": "An integer representing the total amount of trapped rainwater.",
    "constraints": [
      "n == height.length",
      "1 <= n <= 2 * 10^4",
      "0 <= height[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The water can be trapped between the bars. The total amount is 6."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The structure forms a valley between the 4 and 5, trapping 9 units of water."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the maximum height of bars from both ends to find the water level.",
      "Utilize two pointers to traverse from both ends toward the center."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Kadane's Algorithm"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum sum of the contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The contiguous subarray [4,-1,2,1] has the largest sum = 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The only element in the array is the maximum sum."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The contiguous subarray [5,4,-1,7,8] has the largest sum = 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a variable to store the maximum sum found so far.",
      "Use a second variable to keep track of the current sum of the subarray."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Note that the solution set must not contain duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of unique triplets that sum up to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The triplet [-1, -1, 2] sums to 0, as does the triplet [-1, 0, 1]."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "There are no elements in the array, so no triplets can be formed."
      },
      {
        "input": "nums = [0, 1, 1]",
        "output": "[]",
        "explanation": "There are not enough elements to form any triplet."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the array first to make it easier to avoid duplicates.",
      "Use a nested loop with two pointers to find pairs that complement the current value."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth First Search",
    "tags": [
      "Graph",
      "DFS",
      "Grid"
    ],
    "input_format": "A 2D binary grid where each element is either '1' or '0'.",
    "output_format": "An integer representing the number of islands in the grid.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]",
        "output": "3",
        "explanation": "There are three islands: one consisting of the first two rows, one in the third row, and one in the fourth row."
      },
      {
        "input": "grid = [[1,1,1,1,0],[0,1,0,0,0],[1,0,1,0,1],[0,0,0,0,0]]",
        "output": "5",
        "explanation": "There are five islands formed by the '1's in the grid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth First Search to explore and mark visited islands.",
      "Iterate over each cell in the grid and increment island count for unvisited land.",
      "Watch out for edge cases with one row or column."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Sorting and Hashing",
    "tags": [
      "String",
      "Anagram",
      "Hashing"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A list of lists of strings where each inner list contains grouped anagrams.",
    "constraints": [
      "1 <= strs.length <= 100",
      "0 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"bat\"], [\"nat\", \"tan\"], [\"ate\", \"eat\", \"tea\"]]",
        "explanation": "The anagrams are grouped together in lists."
      },
      {
        "input": "strs = [\"\" ]",
        "output": "[[\"\"]]",
        "explanation": "Single empty string forms its own group."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "Single character forms its own group."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to categorize the anagrams.",
      "Sorting the characters of each string can help identify anagrams."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Isomorphic Strings",
    "description": "Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Isomorphic",
      "HashMap"
    ],
    "input_format": "Two strings s and t consisting of lowercase English letters.",
    "output_format": "A boolean value indicating whether the strings are isomorphic.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "1 <= t.length <= 10^5",
      "s.length == t.length"
    ],
    "examples": [
      {
        "input": "s = 'egg', t = 'add'",
        "output": "true",
        "explanation": "The characters 'e' and 'a' can be mapped, and 'g' and 'd' can be mapped. Thus, 'egg' is isomorphic to 'add'."
      },
      {
        "input": "s = 'foo', t = 'bar'",
        "output": "false",
        "explanation": "The character 'o' in 'foo' cannot be mapped to 'a' and 'r' since they must have distinct mappings."
      },
      {
        "input": "s = 'paper', t = 'title'",
        "output": "true",
        "explanation": "The characters can be mapped: 'p' -> 't', 'a' -> 'i', 'p' -> 't', 'e' -> 'l', 'r' -> 'e'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to keep track of character mappings.",
      "Check for symmetry in character mapping."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Edit Distance",
    "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. You can perform the following operations: insert a character, delete a character, or replace a character.",
    "topic": "Dynamic Programming",
    "subtopic": "String Manipulation",
    "tags": [
      "Dynamic Programming",
      "String",
      "Edit Distance"
    ],
    "input_format": "Two strings word1 and word2, where 0 <= word1.length, word2.length <= 1000.",
    "output_format": "An integer representing the minimum number of operations required to convert word1 to word2.",
    "constraints": [
      "0 <= word1.length, word2.length <= 1000",
      "word1 and word2 consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "word1 = 'horse', word2 = 'ros'",
        "output": "3",
        "explanation": "horse -> rorse (replace 'h' with 'r') -> roese (replace 'r' with 'e') -> rose (remove 'e')."
      },
      {
        "input": "word1 = 'intention', word2 = 'execution'",
        "output": "5",
        "explanation": "intention -> inention (remove 't') -> enention (replace 'i' with 'e') -> exention (replace 'n' with 'x') -> exection (replace 't' with 'c') -> execution (insert 'u')."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a 2D array to store intermediate results.",
      "Think about the relationship between the edit distance of substrings."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Maximum Product Subarray",
    "description": "Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product and return the product. It is guaranteed that the result will fit in a 32-bit integer.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Calculation"
    ],
    "input_format": "An integer array nums.",
    "output_format": "An integer representing the maximum product of the contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "-10 <= nums[i] <= 10"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, -2, 4]",
        "output": "6",
        "explanation": "The subarray [2, 3] has the maximum product of 6."
      },
      {
        "input": "nums = [-2, 0, -1]",
        "output": "0",
        "explanation": "The maximum product is 0 by choosing the subarray [0]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Keep track of both the maximum and minimum products up to the current index.",
      "Use a single pass to calculate the product dynamically."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Minimum Time to Repair Cars",
    "description": "You are given an array representing the number of cars at each repair station and an integer `time` representing the time it takes to repair one car at any station. The goal is to determine the minimum time required to repair all cars by simultaneously working on cars at different stations. The number of cars at each station is represented as an array of integers, where each integer indicates the count of cars at that station. You will need to calculate how quickly all cars can be repaired depending on the distribution of the cars across the stations.",
    "topic": "Dynamic Programming",
    "subtopic": "Optimization",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Simulation"
    ],
    "input_format": "An array of integers cars where each element represents the number of cars at a station, and an integer time representing the time to repair one car.",
    "output_format": "An integer representing the minimum time needed to repair all cars.",
    "constraints": [
      "1 <= cars.length <= 1000",
      "1 <= cars[i] <= 1000",
      "1 <= time <= 100"
    ],
    "examples": [
      {
        "input": "cars = [2, 4, 3], time = 1",
        "output": "4",
        "explanation": "All cars can be repaired in parallel, taking the maximum time at the station with the most cars, which is 4."
      },
      {
        "input": "cars = [1, 2, 3, 4], time = 2",
        "output": "8",
        "explanation": "The maximum cars are at station 4, so it will take 4 * 2 = 8 time total to repair all cars simultaneously."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider working on multiple stations simultaneously.",
      "Use the maximum count of cars at any station to determine the overall time."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Chalkboard XOR Game",
    "description": "Alice and Bob take turns playing a game on a chalkboard that contains numbers from 1 to N. In each turn, a player can choose any number x from the chalkboard and delete it along with all the multiples of x. The player who cannot make a move loses the game. The goal of this problem is to determine whether Alice, who always plays first, can guarantee a win given the total number of chalkboard numbers, N. It is guaranteed that 1 <= N <= 100.",
    "topic": "Game Theory",
    "subtopic": "XOR Game",
    "tags": [
      "Game Theory",
      "XOR",
      "Mathematics"
    ],
    "input_format": "An integer N representing the total numbers on the chalkboard.",
    "output_format": "A boolean indicating whether Alice can guarantee a win (true for Alice wins, false for Bob wins).",
    "constraints": [
      "1 <= N <= 100"
    ],
    "examples": [
      {
        "input": "N = 3",
        "output": "false",
        "explanation": "Alice can choose 1, removing 1 and 2 (the multiples). Bob can choose 3. Bob wins."
      },
      {
        "input": "N = 4",
        "output": "true",
        "explanation": "Alice can choose 2, removing 2 and 4. Now Bob can choose only 1 or 3, leading Alice to win."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the parity of N.",
      "Look for patterns in small values of N."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Beautiful Arrangement",
    "description": "Suppose you have a list of positive integers. You want to create arrangements of these integers such that at the ith position, the integer can be divisible by i or i can be divisible by the integer. Your task is to count how many beautiful arrangements can be made using all the integers in the list.",
    "topic": "Backtracking",
    "subtopic": "Permutations",
    "tags": [
      "Backtracking",
      "Recursion",
      "Permutation"
    ],
    "input_format": "An integer n representing the total numbers from 1 to n.",
    "output_format": "An integer representing the count of beautiful arrangements.",
    "constraints": [
      "1 <= n <= 15"
    ],
    "examples": [
      {
        "input": "2",
        "output": "2",
        "explanation": "The two arrangements are [1, 2] and [2, 1]. Both satisfy the conditions."
      },
      {
        "input": "1",
        "output": "1",
        "explanation": "The only arrangement [1] is valid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using backtracking to generate arrangements.",
      "Check divisibility conditions in each recursive call."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Jump Game",
    "description": "You are given an array of non-negative integers nums. Each element in the array represents your maximum jump length at that position. Your goal is to determine if you can reach the last index starting from the first index. You can assume that you can always reach the last index if you are already at the last index.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithms",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of non-negative integers nums.",
    "output_format": "A boolean value indicating whether you can reach the last index.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, 1, 1, 4]",
        "output": "true",
        "explanation": "You can jump to index 1 (value = 3) and then jump to the last index (value = 4)."
      },
      {
        "input": "nums = [3, 2, 1, 0, 4]",
        "output": "false",
        "explanation": "No matter how you jump, you will not be able to reach the last index."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to iterate through the array and track the furthest index you can reach.",
      "If your current position exceeds the furthest index reached, return false."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Jump Game II",
    "description": "You are given an array of non-negative integers nums. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps. Write a function to determine the minimum number of jumps needed to reach the last index. If it is not possible to reach the last index, return -1.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithms",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of non-negative integers, nums.",
    "output_format": "An integer representing the minimum number of jumps to reach the last index, or -1 if it is not possible.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, 1, 1, 4]",
        "output": "2",
        "explanation": "Jump 1: from index 0 to index 1 (2 -> 3); Jump 2: from index 1 to index 4 (3 -> 4)."
      },
      {
        "input": "nums = [2, 3, 0, 1, 4]",
        "output": "2",
        "explanation": "Jump 1: from index 0 to index 1 (2 -> 3); Jump 2: from index 1 to index 4 (3 -> 4)."
      },
      {
        "input": "nums = [0, 1, 2]",
        "output": "-1",
        "explanation": "It is impossible to reach the last index since the first index has a jump length of 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the farthest point you can reach with each jump.",
      "Use a variable to track the end of the current range you can jump to."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Next Permutation",
    "description": "Implement an algorithm to generate the next lexicographical permutation of a given array of integers. The replacement must be in place, meaning you must modify the input array directly. If it is not possible to generate a next permutation, rearrange it to the lowest possible order (i.e., sorted in ascending order).",
    "topic": "Array",
    "subtopic": "Permutation",
    "tags": [
      "Array",
      "Permutation",
      "In-place"
    ],
    "input_format": "An array of integers nums of size n.",
    "output_format": "Modify the array nums in-place to represent its next permutation.",
    "constraints": [
      "1 <= n <= 100",
      "0 <= nums[i] <= 100"
    ],
    "examples": [
      {
        "input": "[1, 2, 3]",
        "output": "[1, 3, 2]",
        "explanation": "The next permutation of [1, 2, 3] is [1, 3, 2]."
      },
      {
        "input": "[3, 2, 1]",
        "output": "[1, 2, 3]",
        "explanation": "The input is the last permutation in lexicographical order; thus, we rearrange it to the lowest order: [1, 2, 3]."
      },
      {
        "input": "[1, 1, 5]",
        "output": "[1, 5, 1]",
        "explanation": "The next permutation after [1, 1, 5] is [1, 5, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to find the first pair of adjacent elements from the end that are in increasing order.",
      "Once you find the pivot, find the smallest element larger than the pivot to swap with.",
      "Reverse the sequence after the pivot to get the next permutation."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Minimum Cost to Make Array Equal",
    "description": "You are given an array of integers numbers and an integer cost. Your goal is to make all elements of the array equal with the least cost. The cost of transforming an element numbers[i] to a target value x is defined as |numbers[i] - x| * cost. Return the minimum cost to make all elements equal.",
    "topic": "Array",
    "subtopic": "Optimizing Transformations",
    "tags": [
      "Array",
      "Mathematical Optimization",
      "Cost Minimization"
    ],
    "input_format": "An integer array numbers and an integer cost.",
    "output_format": "An integer representing the minimum cost to make all elements equal.",
    "constraints": [
      "1 <= numbers.length <= 10^5",
      "1 <= numbers[i] <= 10^6",
      "1 <= cost <= 10^3"
    ],
    "examples": [
      {
        "input": "numbers = [1, 2, 3], cost = 10",
        "output": "20",
        "explanation": "Choosing target x = 2, the costs are |1-2|*10 + |2-2|*10 + |3-2|*10 = 10 + 0 + 10 = 20."
      },
      {
        "input": "numbers = [1, 10, 2, 9], cost = 3",
        "output": "18",
        "explanation": "Choosing target x = 5, the costs are |1-5|*3 + |10-5|*3 + |2-5|*3 + |9-5|*3 = 12 + 15 + 9 + 12 = 48."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider binary search to find the optimal target value.",
      "Cost function is continuous and can be minimized.",
      "Try to evaluate the cost based on the median or averages."
    ],
    "company": "HashedIn"
  },
  {
    "question_id": "",
    "title": "Container With Most Water",
    "description": "You are given an integer array height where height[i] represents the height of a vertical line at position i. Write a function to find two lines, which, together with the x-axis, form a container that holds the most water. Return the area of the water the container can hold. The area is calculated as the minimum of the two heights multiplied by the distance between them.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Geometry"
    ],
    "input_format": "An array of integers height where 2 <= height.length <= 10^5.",
    "output_format": "An integer representing the maximum area of water that can be contained.",
    "constraints": [
      "2 <= height.length <= 10^5",
      "0 <= height[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "height = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The lines at indexes 1 and 8 (heights 8 and 7) form the largest container, which has an area of min(8,7) * (8-1) = 7 * 7 = 49."
      },
      {
        "input": "height = [1,1]",
        "output": "1",
        "explanation": "The only two lines are both of height 1, so the area is min(1,1) * (1-0) = 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider a two-pointer strategy to optimize your search.",
      "Move the pointer pointing to the shorter line towards the other pointer to try and find a taller line."
    ],
    "company": "HashedIn"
  }
]