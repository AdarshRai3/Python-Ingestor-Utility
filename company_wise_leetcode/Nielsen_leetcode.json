[
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You can return the answer in any order. An anagram is a word formed by rearranging the letters of a different word, using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Hashing",
    "tags": [
      "String",
      "Hashing",
      "Anagram"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A list of lists of strings, where each list contains the grouped anagrams.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "0 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = ['eat', 'tea', 'tan', 'ate', 'nat', 'bat']",
        "output": "[['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]",
        "explanation": "The anagrams 'eat', 'tea', and 'ate' are grouped together, 'tan' and 'nat' are another group, while 'bat' stands alone."
      },
      {
        "input": "strs = ['']",
        "output": "[['']]",
        "explanation": "There is only one string, which is an anagram of itself."
      },
      {
        "input": "strs = ['a']",
        "output": "[['a']]",
        "explanation": "There is only one string, which is an anagram of itself."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort each string to identify anagrams.",
      "Use a hash table to store grouped anagrams."
    ],
    "company": "Nielsen"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A string is called a palindrome if it reads the same forward and backward. You may assume that the input string has at least one character and that the output will be a valid substring of s.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Palindrome",
      "Dynamic Programming"
    ],
    "input_format": "A single string s, where 1 <= s.length <= 1000.",
    "output_format": "A string representing the longest palindromic substring.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "babad",
        "output": "bab",
        "explanation": "Both 'bab' and 'aba' are valid answers since they are palindromes. The output is 'bab' since it appears first."
      },
      {
        "input": "cbbd",
        "output": "bb",
        "explanation": "'bb' is the longest palindromic substring in the input string."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around the center of the palindrome.",
      "Check both odd and even length palindromes."
    ],
    "company": "Nielsen"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. For example, if the input intervals are [[1,3],[2,6],[8,10],[15,18]], the output should be [[1,6],[8,10],[15,18]]. The intervals [1,3] and [2,6] overlap, so they are merged into [1,6].",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Interval"
    ],
    "input_format": "A list of intervals, where each interval is represented by a pair of integers [start, end].",
    "output_format": "A list of merged intervals in which no overlapping intervals exist.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "The intervals [1,3] and [2,6] overlap and should be merged into [1,6]."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] touch at point 4, so they are merged to [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the intervals by their starting points.",
      "Use a variable to keep track of the last merged interval."
    ],
    "company": "Nielsen"
  },
  {
    "question_id": "",
    "title": "Edit Distance",
    "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. The allowed operations are insertion, deletion, and substitution of a single character.",
    "topic": "Dynamic Programming",
    "subtopic": "String Manipulation",
    "tags": [
      "Dynamic Programming",
      "String",
      "Edit Distance"
    ],
    "input_format": "Two strings word1 and word2, where 0 <= word1.length, word2.length <= 500.",
    "output_format": "An integer representing the minimum number of operations required.",
    "constraints": [
      "0 <= word1.length, word2.length <= 500",
      "word1 and word2 consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "word1 = \"horse\", word2 = \"ros\"",
        "output": "3",
        "explanation": "horse -> rorse (replace 'h' with 'r') -> rorase (replace 'e' with 'a') -> ros (delete 'r')."
      },
      {
        "input": "word1 = \"intention\", word2 = \"execution\"",
        "output": "5",
        "explanation": "intention -> inention (remove 't') -> enention (replace 'i' with 'e') -> exention (insert 'x') -> exection (replace 'n' with 'c') -> execution."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to build a solution.",
      "Think about how you can use a 2D array to represent the states."
    ],
    "company": "Nielsen"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock IV",
    "description": "You are given an integer k and an array prices where prices[i] is the price of a given stock on the ith day. Find the maximum profit you can achieve. You may complete at most k transactions. Note that you cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
    "topic": "Dynamic Programming",
    "subtopic": "Stock Trading",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Greedy"
    ],
    "input_format": "An integer k and an array of integers prices.",
    "output_format": "An integer representing the maximum profit achievable.",
    "constraints": [
      "0 <= k <= 100",
      "0 <= prices.length <= 1000",
      "0 <= prices[i] <= 1000"
    ],
    "examples": [
      {
        "input": "k = 2, prices = [2, 4, 1]",
        "output": "2",
        "explanation": "You can buy on day 0 (price = 2) and sell on day 1 (price = 4), which gives a profit of 4 - 2 = 2."
      },
      {
        "input": "k = 2, prices = [3, 2, 6, 5, 0, 3]",
        "output": "7",
        "explanation": "You can buy on day 1 (price = 2) and sell on day 2 (price = 6), then buy on day 4 (price = 0) and sell on day 5 (price = 3). The profit would be (6 - 2) + (3 - 0) = 4 + 3 = 7."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using dynamic programming to keep track of profits.",
      "Think about how to break the problem down into smaller subproblems."
    ],
    "company": "Nielsen"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An integer array nums of length n and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers in nums that add up to target.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9, so return [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6, so return [1, 2]."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6, so return [0, 1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash table to keep track of the numbers needed to reach the target.",
      "You can check for the complement of each number in the hash table."
    ],
    "company": "Nielsen"
  }
]