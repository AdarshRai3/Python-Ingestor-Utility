[
  {
    "question_id": "",
    "title": "Maximum Area Rectangle With Point Constraints I",
    "description": "Given a set of points in a 2D grid, find the maximum area of a rectangle that can be formed such that all four corners of the rectangle are in the set of points. The coordinates of the points are given as a list of tuples. A rectangle is defined by its bottom-left and top-right corners, and it is valid only when all four corners exist in the set of points.",
    "topic": "Geometry",
    "subtopic": "Rectangle Area Calculation",
    "tags": [
      "Geometry",
      "Set",
      "Area",
      "Rectangle"
    ],
    "input_format": "A list of distinct points, where each point is represented as a tuple (x, y).",
    "output_format": "An integer representing the maximum area of the rectangle formed by the points. If no rectangle can be formed, return 0.",
    "constraints": [
      "1 <= points.length <= 10^5",
      "-10^4 <= points[i][0], points[i][1] <= 10^4",
      "No duplicate points in the input list."
    ],
    "examples": [
      {
        "input": "points = [(1, 1), (1, 3), (3, 1), (3, 3)]",
        "output": "4",
        "explanation": "The maximum rectangle is formed by points (1, 1), (1, 3), (3, 1), and (3, 3) with an area of 4."
      },
      {
        "input": "points = [(1, 1), (2, 2), (3, 3)]",
        "output": "0",
        "explanation": "No rectangle can be formed since not all corners of a rectangle exist."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Check for all possible pairs of points as bottom-left and top-right corners.",
      "Use a set for quick lookup of points.",
      "Calculate area using width and height derived from corners."
    ],
    "company": "UKG"
  },
  {
    "question_id": "",
    "title": "Maximum Area Rectangle With Point Constraints II",
    "description": "Given a 2D grid with points marked as obstacles, find the maximum area of a rectangle that can be formed without encountering any obstacles. The rectangle's corners must be aligned with the grid cells. The points that represent obstacles are given as a list of coordinates. If no rectangle can be formed, return 0.",
    "topic": "Geometry",
    "subtopic": "Rectangle Area",
    "tags": [
      "Geometry",
      "Dynamic Programming",
      "Grid"
    ],
    "input_format": "A grid size defined by two integers m (rows) and n (columns), followed by a list of obstacle points as pairs of integers representing their coordinates.",
    "output_format": "An integer representing the maximum area of the rectangle that can be formed without obstacles.",
    "constraints": [
      "1 <= m, n <= 10^4",
      "0 <= number of obstacles <= min(m * n, 10^5)",
      "0 <= obstacle[i][0] < m, 0 <= obstacle[i][1] < n"
    ],
    "examples": [
      {
        "input": {
          "m": 5,
          "n": 5,
          "obstacles": [
            [
              1,
              1
            ],
            [
              1,
              2
            ],
            [
              2,
              2
            ]
          ]
        },
        "output": "6",
        "explanation": "The maximum area rectangle can be formed in the region without obstacles, which is 6 for the rectangle defined by (0,0) to (4,4) excluding the obstacles."
      },
      {
        "input": {
          "m": 3,
          "n": 3,
          "obstacles": [
            [
              0,
              0
            ],
            [
              0,
              2
            ],
            [
              2,
              2
            ]
          ]
        },
        "output": "1",
        "explanation": "The maximum area that doesn't contain obstacles is just 1, for example the cell at (1,1)."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider sorting obstacles and evaluating rectangular areas between them.",
      "Utilize algorithms that can efficiently calculate the maximum area considering the constraints.",
      "Dynamic programming approaches might help in computing the possible rectangles."
    ],
    "company": "UKG"
  },
  {
    "question_id": "",
    "title": "Count the Number of Good Subsequences",
    "description": "You are given an array of integers, where each integer represents a positive or negative integer. A subsequence is considered 'good' if it contains at least one positive number and does not contain any negative numbers. Your task is to count the total number of 'good' subsequences that can be formed using the elements of the array.",
    "topic": "Combinatorics",
    "subtopic": "Subsequences",
    "tags": [
      "Subsequences",
      "Combinatorics",
      "Counting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the number of good subsequences.",
    "constraints": [
      "1 <= nums.length <= 100",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, -1, 3]",
        "output": "7",
        "explanation": "The good subsequences are: [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]. Total = 7."
      },
      {
        "input": "nums = [-1, -2, -3]",
        "output": "0",
        "explanation": "There are no positive numbers in the array, so no good subsequences can be formed."
      },
      {
        "input": "nums = [5, 6, 7]",
        "output": "7",
        "explanation": "All non-empty subsequences of [5, 6, 7] are good: [5], [6], [7], [5, 6], [5, 7], [6, 7], [5, 6, 7]. Total = 7."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the number of positive numbers in the array.",
      "Each positive number can either be included or excluded from a subsequence."
    ],
    "company": "UKG"
  },
  {
    "question_id": "",
    "title": "Longest Consecutive Sequence",
    "description": "Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your algorithm should run in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Consecutive Sequence"
    ],
    "input_format": "An unsorted array of integers nums.",
    "output_format": "An integer representing the length of the longest consecutive elements sequence.",
    "constraints": [
      "0 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [100, 4, 200, 1, 3, 2]",
        "output": "4",
        "explanation": "The longest consecutive sequence is [1, 2, 3, 4], which has a length of 4."
      },
      {
        "input": "nums = [0, 0, 1, 2, 2, 3, 4, 5]",
        "output": "6",
        "explanation": "The longest consecutive sequence is [0, 1, 2, 3, 4, 5], which has a length of 6."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a set to store the elements for O(1) lookup.",
      "For each number, check if it's the start of a sequence.",
      "Count consecutive elements until you can't find the next one."
    ],
    "company": "UKG"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices.",
    "output_format": "An integer representing the maximum profit.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price seen so far.",
      "Calculate the profit by subtracting the minimum price from the current price."
    ],
    "company": "UKG"
  },
  {
    "question_id": "",
    "title": "Special Binary String",
    "description": "Given a binary string `S`, we want to make a special binary string that meets the following criteria: The leftmost characters should be '1's and the rightmost characters should be '0's. In addition, all the substrings that start with '1' and not counting the leading zeroes must also be special binary strings. To do this, you can swap any two characters in `S`. Return the lexicographically largest special binary string you can obtain after performing the swaps.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Binary",
      "Greedy"
    ],
    "input_format": "A binary string S (1 <= S.length <= 50).",
    "output_format": "A special binary string which is the lexicographically largest.",
    "constraints": [
      "S consists of only '0's and '1's.",
      "S has at least one '1'."
    ],
    "examples": [
      {
        "input": "S = \"11000000\"",
        "output": "11110000",
        "explanation": "Swap the second '1' with the first '0' to create the lexicographically largest special binary string."
      },
      {
        "input": "S = \"110010\"",
        "output": "101100",
        "explanation": "Move the '&' character and the result will still be valid."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider breaking the string into parts of '1's and '0's.",
      "Recursion can be helpful to build special binary strings."
    ],
    "company": "UKG"
  },
  {
    "question_id": "",
    "title": "Minimum Length of Anagram Concatenation",
    "description": "Given two strings, s1 and s2, you need to find the minimum length of a string that can be formed by concatenating anagrams of both s1 and s2 in such a way that all characters from both strings are included in the concatenated result. The string should not have any duplicate characters, and it must be an anagram of its concatenated input strings. If it is not possible to form such a string, return -1.",
    "topic": "String",
    "subtopic": "Anagrams",
    "tags": [
      "String",
      "Anagrams",
      "Concatenation"
    ],
    "input_format": "Two strings s1 and s2.",
    "output_format": "An integer representing the minimum length of the concatenated anagram or -1 if not possible.",
    "constraints": [
      "1 <= s1.length, s2.length <= 1000",
      "s1 and s2 consist of lowercase letters only."
    ],
    "examples": [
      {
        "input": "s1 = 'abc', s2 = 'cde'",
        "output": "5",
        "explanation": "The concatenated anagrams can be 'abcde'."
      },
      {
        "input": "s1 = 'aaa', s2 = 'aaa'",
        "output": "1",
        "explanation": "Only one unique character 'a' exists."
      },
      {
        "input": "s1 = 'abc', s2 = 'cba'",
        "output": "3",
        "explanation": "The concatenated anagram can be 'abc' or 'cba'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the frequency of each character in both strings.",
      "You can use a set to keep track of unique characters."
    ],
    "company": "UKG"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers 'nums' and an integer 'target', return the indices of the two numbers such that they add up to 'target'. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Map",
    "tags": [
      "Array",
      "Hash Map",
      "Two Pointers"
    ],
    "input_format": "An array of integers 'nums' followed by an integer 'target'.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "Each input would have exactly one solution."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "Since nums[0] + nums[1] = 2 + 7 = 9, we return their indices [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "Since nums[1] + nums[2] = 2 + 4 = 6, we return their indices [1, 2]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to keep track of the indices of the numbers.",
      "Check if the complement of the current number exists in the hash map."
    ],
    "company": "UKG"
  },
  {
    "question_id": "",
    "title": "Valid Word",
    "description": "Given a string `word`, return true if it is a valid word. A valid word is a string that contains only lowercase English letters from 'a' to 'z'. If the string contains any uppercase letters, digits, symbols, or whitespace, it is not considered a valid word.",
    "topic": "String",
    "subtopic": "Validation",
    "tags": [
      "String",
      "Validation",
      "Boolean"
    ],
    "input_format": "A single string word.",
    "output_format": "A boolean value indicating whether the word is valid.",
    "constraints": [
      "1 <= word.length <= 100",
      "word consists of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "word = \"hello\"",
        "output": "true",
        "explanation": "The string 'hello' contains only lowercase letters, making it a valid word."
      },
      {
        "input": "word = \"Hello123\"",
        "output": "false",
        "explanation": "The string contains uppercase letters and digits, hence it is not a valid word."
      },
      {
        "input": "word = \"hello world\"",
        "output": "false",
        "explanation": "The string contains a space, which invalidates the word."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Check if the string only contains characters from 'a' to 'z'.",
      "Consider using regular expressions for validation."
    ],
    "company": "UKG"
  },
  {
    "question_id": "",
    "title": "Angle Between Hands of a Clock",
    "description": "Given a time represented in hours and minutes, calculate the angle between the hour and minute hands on a clock. The angle should be the smaller angle formed between the two hands. The clock is assumed to be a standard 12-hour clock.",
    "topic": "Mathematics",
    "subtopic": "Geometry",
    "tags": [
      "Mathematics",
      "Geometry",
      "Clock"
    ],
    "input_format": "Two integers h (0 <= h < 12) and m (0 <= m < 60) representing the hour and minute.",
    "output_format": "A float representing the smaller angle between the hour and minute hands, rounded to two decimal places.",
    "constraints": [
      "0 <= h < 12",
      "0 <= m < 60"
    ],
    "examples": [
      {
        "input": "h = 3, m = 30",
        "output": "165.00",
        "explanation": "At 3:30, the hour hand is at 165 degrees and the minute hand is at 180 degrees. The angle is 180 - 165 = 15 degrees then add 150 degrees to get the smaller angle of 165 degrees."
      },
      {
        "input": "h = 12, m = 0",
        "output": "0.00",
        "explanation": "At 12:00, both hands overlap at 0 degrees."
      },
      {
        "input": "h = 1, m = 45",
        "output": "112.50",
        "explanation": "At 1:45, the hour hand is at 52.5 degrees and the minute hand is at 270 degrees. The smaller angle is 270 - 52.5 = 217.5 degrees, and the angle its complement (360 - 217.5 = 142.5 degrees)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Calculate the angle of the hour hand as (30 * h) + (0.5 * m).",
      "Calculate the angle of the minute hand as (6 * m)."
    ],
    "company": "UKG"
  },
  {
    "question_id": "",
    "title": "Make a Positive Array",
    "description": "Given an array of integers, modify the array such that all negative integers are replaced with their absolute values, and all zero values are removed from the array. Return the modified array sorted in non-decreasing order.",
    "topic": "Array",
    "subtopic": "Transformation",
    "tags": [
      "Array",
      "Transformation",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An array of integers representing the modified and sorted array.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 2, 0, -3, 4]",
        "output": "[1, 2, 3, 4]",
        "explanation": "Negatives are replaced by their absolute values and zeros are removed. The sorted array is [1, 2, 3, 4]."
      },
      {
        "input": "nums = [0, -2, -2, 1, 0]",
        "output": "[1, 2, 2]",
        "explanation": "Zeros are removed, negatives are converted to positives, and the sorted array is [1, 2, 2]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the absolute value function.",
      "Filter out zeros from the array before sorting."
    ],
    "company": "UKG"
  }
]