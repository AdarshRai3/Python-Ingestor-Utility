[
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for Least Recently Used (LRU) Cache. It should support the following operations: get and put. The get operation retrieves the value of the key if the key exists in the cache, otherwise it returns -1. The put operation will insert or update the value of the key. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item. The operations should be performed in O(1) time complexity.",
    "topic": "Data Structure",
    "subtopic": "Cache",
    "tags": [
      "HashMap",
      "Doubly Linked List",
      "LRU Cache"
    ],
    "input_format": "An integer representing the maximum capacity of the cache, followed by a sequence of operations (put/get) each with its corresponding key-value pairs.",
    "output_format": "The return value for each get operation.",
    "constraints": [
      "The capacity of the cache will be a positive integer.",
      "The input operations will be valid and within the constraints provided."
    ],
    "examples": [
      {
        "input": "LRUCache(2), put(1, 1), put(2, 2), get(1), put(3, 3), get(2), put(4, 4), get(1), get(3), get(4)",
        "output": "[null,null,null,1,null,-1,null,-1,3,4]",
        "explanation": "Initially, cache = {1=1, 2=2}. Returning 1 for get(1). Adding (3,3) evicts key 2. Cache now = {1=1, 3=3}. Returning -1 for get(2). Adding (4,4) evicts key 1. Cache now = {3=3, 4=4}. Returning -1 for get(1), 3 for get(3), 4 for get(4)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider a combination of a hashmap for fast lookups and a linked list to track the order of usage."
    ],
    "company": "Aurora"
  },
  {
    "question_id": "",
    "title": "Number of Distinct Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), determine the number of distinct islands. An island is formed by connecting adjacent lands horizontally or vertically. Two islands are considered distinct if they differ in shape or position. The shape of an island is represented as a sequence of coordinates relative to its starting position.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "DFS",
      "Array"
    ],
    "input_format": "A 2D grid represented as a list of lists, where grid[i][j] is either '1' for land or '0' for water.",
    "output_format": "An integer representing the number of distinct islands.",
    "constraints": [
      "1 <= grid.length <= 300",
      "1 <= grid[i].length <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [[1,1,0,0,0],[1,0,0,1,1],[0,0,0,1,0],[0,1,1,0,0]]",
        "output": "3",
        "explanation": "There are three distinct islands defined by the connected lands."
      },
      {
        "input": "grid = [[1,1,1,1,0],[0,0,0,1,0],[1,1,1,0,0]]",
        "output": "1",
        "explanation": "There's only one island formed by the connected lands."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use Depth-First Search to explore each island.",
      "You may need to normalize the shape of each island for consistency."
    ],
    "company": "Aurora"
  },
  {
    "question_id": "",
    "title": "Diameter of Binary Tree",
    "description": "Given a binary tree, find the diameter of the tree. The diameter of a binary tree is defined as the length of the longest path between any two nodes in the tree. This path may or may not pass through the root. The length of a path between two nodes is represented by the number of edges between them.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Diameter"
    ],
    "input_format": "The input consists of the root node of the binary tree.",
    "output_format": "An integer representing the diameter of the binary tree.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 10^4].",
      "-100 <= Node.val <= 100"
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5]",
        "output": "3",
        "explanation": "The longest path is between node 4 and node 5, which has 3 edges."
      },
      {
        "input": "root = [1]",
        "output": "0",
        "explanation": "The tree has only one node, so the diameter is 0."
      },
      {
        "input": "root = []",
        "output": "0",
        "explanation": "An empty tree has a diameter of 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use depth-first search (DFS) to calculate the height of the tree.",
      "The diameter can be calculated as the sum of the heights of the left and right subtrees for each node."
    ],
    "company": "Aurora"
  },
  {
    "question_id": "",
    "title": "Word Search II",
    "description": "Given a 2D board and a list of words, find all the words in the board. Each word can be constructed from letters of sequentially adjacent cells, where 'adjacent' cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word. Return all the words found in the board.",
    "topic": "Backtracking",
    "subtopic": "Trie",
    "tags": [
      "Backtracking",
      "Trie",
      "Matrix"
    ],
    "input_format": "A 2D char array board and a list of strings words.",
    "output_format": "A list of words that can be found in the board.",
    "constraints": [
      "1 <= board.length, board[i].length <= 12",
      "1 <= words.length <= 2000",
      "1 <= words[i].length <= 10",
      "All inputs are lowercase English letters."
    ],
    "examples": [
      {
        "input": "board = [['o','a','a','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words = ['oath','pea','eat','rain']",
        "output": "['oath']",
        "explanation": "'oath' can be found in the board starting from (0,0) and moving to (0,1), (1,1), (1,0) and (1,0) again."
      },
      {
        "input": "board = [['a','b'],['c','d']], words = ['ab','cd','ac']",
        "output": "['ab','cd']",
        "explanation": "'ab' and 'cd' can be found in the board, while 'ac' cannot as 'a' and 'c' are not adjacent."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a Trie to store the list of words.",
      "Use Depth First Search (DFS) to explore the board.",
      "Keep track of visited positions to avoid using the same cell more than once."
    ],
    "company": "Aurora"
  }
]