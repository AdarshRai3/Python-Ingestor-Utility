[
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "You are given two integer arrays, nums1 and nums2, sorted in non-decreasing order. You need to merge nums2 into nums1 as one sorted array. The merge should be done in place, allowing you to use the space in nums1 to hold the merged results. An initial length of m is given for nums1, which signifies the number of elements that should be considered in nums1, and the remaining space in nums1 is filled with zeros to accommodate nums2. The length of nums2 is n. Your task is to modify nums1 such that it contains the merged output of both arrays, sorted in non-decreasing order.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "Two integer arrays nums1 and nums2, with an integer m (the number of initialized elements in nums1) and n (the size of nums2).",
    "output_format": "The modified nums1 array, which contains the merged and sorted elements.",
    "constraints": [
      "0 <= m, n <= 200",
      "1 <= m + n <= 200",
      "You may assume that nums1 has enough space (size that is equal to m + n) to hold additional elements from nums2.",
      "-10^9 <= nums1[i], nums2[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
        "output": "[1,2,2,3,5,6]",
        "explanation": "You can merge nums2 into nums1 to get [1,2,2,3,5,6] by filling in the zeros in nums1."
      },
      {
        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "output": "[1]",
        "explanation": "Since nums1 has no initialized elements, the result is just nums2."
      },
      {
        "input": "nums1 = [2,0], m = 1, nums2 = [1], n = 1",
        "output": "[1,2]",
        "explanation": "You can merge nums2 into nums1 to get [1,2]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to track the position of elements in nums1 and nums2."
    ],
    "company": "Squarespace"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for a Least Recently Used (LRU) cache. It should support the following operations: get and put. The get operation retrieves the value of the key if the key exists in the cache, otherwise returns -1. The put operation will add the key-value pair to the cache. If the number of keys exceeds the capacity of the cache, the least recently used key will be removed.",
    "topic": "Design",
    "subtopic": "Cache",
    "tags": [
      "Cache",
      "Design",
      "LinkedList",
      "HashMap"
    ],
    "input_format": "The input consists of a series of operations: the first operation will be the capacity of the LRU cache, followed by a series of calls to get and put methods.",
    "output_format": "Return the result of each get operation. The put operation does not return anything.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10^4",
      "0 <= value <= 10^4",
      "The operations will be performed in the following order: put(key, value), get(key), put(key, value), get(key)..."
    ],
    "examples": [
      {
        "input": "LRUCache lruCache = new LRUCache(2); lruCache.put(1, 1); lruCache.put(2, 2); lruCache.get(1); lruCache.put(3, 3); lruCache.get(2); lruCache.put(4, 4); lruCache.get(1); lruCache.get(3); lruCache.get(4);",
        "output": "[1,-1,3,4]",
        "explanation": "The cache reaches its capacity (2) after putting (1, 1) and (2, 2). So when we put (3, 3), it evicts key 2. After the operations, 1 is found, while 2 is not, and keys 3 and 4 are found."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a doubly linked list in conjunction with a hash map.",
      "Keep track of the order of use to easily find the least recently used item."
    ],
    "company": "Squarespace"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Every opening bracket must have a corresponding closing bracket of the same type.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Valid Parentheses"
    ],
    "input_format": "A string s consisting of characters '(', ')', '{', '}', '[' and ']'.",
    "output_format": "Return true if the input string is valid; otherwise, return false.",
    "constraints": [
      "0 <= s.length <= 104",
      "s consists of parentheses only '()', '{}', '[]'."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "'(' and ')' are matched and closed properly."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "All parentheses are properly matched."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "'(' is not matched with a corresponding closing bracket."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The brackets are incorrectly nested."
      },
      {
        "input": "s = '{[]}'",
        "output": "true",
        "explanation": "All brackets are properly matched and nested."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Check for matching brackets when encountering a closing bracket."
    ],
    "company": "Squarespace"
  }
]