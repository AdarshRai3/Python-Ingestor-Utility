[
  {
    "question_id": "",
    "title": "Number of 1 Bits",
    "description": "Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight). The input is guaranteed to be a valid 32-bit unsigned integer.",
    "topic": "Bit Manipulation",
    "subtopic": "Counting Bits",
    "tags": [
      "Bit Manipulation",
      "Counting",
      "Hamming Weight"
    ],
    "input_format": "An integer n representing the unsigned integer.",
    "output_format": "An integer representing the number of '1' bits in the binary representation of n.",
    "constraints": [
      "0 <= n <= 2^32 - 1"
    ],
    "examples": [
      {
        "input": "n = 11",
        "output": "3",
        "explanation": "The binary representation of 11 is '1011', which has three '1' bits."
      },
      {
        "input": "n = 128",
        "output": "1",
        "explanation": "The binary representation of 128 is '10000000', which has one '1' bit."
      },
      {
        "input": "n = 0",
        "output": "0",
        "explanation": "The binary representation of 0 is '0', which has no '1' bits."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using bit manipulation techniques.",
      "You can repeatedly check the least significant bit."
    ],
    "company": "Box"
  },
  {
    "question_id": "",
    "title": "Top K Frequent Words",
    "description": "Given a list of words, return the k most frequent words. If there is a tie, the words with the smallest lexicographical order should be returned first.",
    "topic": "Hash Table",
    "subtopic": "Frequency Count",
    "tags": [
      "Hash Table",
      "Sorting",
      "Trie"
    ],
    "input_format": "A list of strings 'words' and an integer 'k'.",
    "output_format": "A list of the k most frequent words.",
    "constraints": [
      "1 <= words.length <= 1000",
      "1 <= k <= the number of unique words in the list",
      "Each word consists of lowercase letters and has a length between 1 and 20."
    ],
    "examples": [
      {
        "input": {
          "words": [
            "i",
            "love",
            "leetcode",
            "i",
            "love",
            "coding"
          ],
          "k": 2
        },
        "output": [
          "i",
          "love"
        ],
        "explanation": "The word 'i' appears 2 times and 'love' appears 2 times. Both are the most frequent, and since they are tied, they are sorted lexicographically."
      },
      {
        "input": {
          "words": [
            "the",
            "day",
            "is",
            "sunny",
            "the",
            "the",
            "sunny",
            "is",
            "is"
          ],
          "k": 4
        },
        "output": [
          "the",
          "is",
          "sunny",
          "day"
        ],
        "explanation": "The counts are: 'the' (3), 'is' (3), 'sunny' (2), 'day' (1). Hence, the top 4 are 'the', 'is', 'sunny', and 'day'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to count the frequency of each word.",
      "Consider using a priority queue to efficiently get the top k words.",
      "Remember to sort the results when necessary."
    ],
    "company": "Box"
  },
  {
    "question_id": "",
    "title": "Word Ladder",
    "description": "Given two words, beginWord and endWord, and a dictionary's word list, return the length of the shortest transformation sequence from beginWord to endWord, such that only one letter can be changed at a time, and each transformed word must exist in the word list. Note that beginWord is not a part of the word list. If there is no such transformation sequence, return 0.",
    "topic": "Graph",
    "subtopic": "BFS (Breadth First Search)",
    "tags": [
      "Graph",
      "BFS",
      "Strings"
    ],
    "input_format": "A string beginWord, a string endWord, and a list of strings wordList.",
    "output_format": "An integer representing the length of the shortest transformation sequence.",
    "constraints": [
      "1 <= beginWord.length <= 10",
      "1 <= endWord.length <= 10",
      "1 <= wordList.length <= 5000",
      "beginWord, endWord, and all words in wordList consist of lowercase alphabetic characters.",
      "beginWord != endWord",
      "All words have the same length."
    ],
    "examples": [
      {
        "input": {
          "beginWord": "hit",
          "endWord": "cog",
          "wordList": [
            "hot",
            "dot",
            "dog",
            "cog",
            "log"
          ]
        },
        "output": "5",
        "explanation": "The shortest transformation sequence is 'hit' -> 'hot' -> 'dot' -> 'dog' -> 'cog', which is 5 words long."
      },
      {
        "input": {
          "beginWord": "leet",
          "endWord": "code",
          "wordList": [
            "leet",
            "lose",
            "code",
            "lode",
            "robe",
            "lost"
          ]
        },
        "output": "0",
        "explanation": "There is no possible transformation sequence from 'leet' to 'code' using the provided word list."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using BFS to explore all possible transformations.",
      "Construct a graph where each node is a word and edges represent valid transformations.",
      "Utilize a queue for your BFS exploration."
    ],
    "company": "Box"
  },
  {
    "question_id": "",
    "title": "Kth Largest Element in a Stream",
    "description": "Design a class `KthLargest` that keeps track of the k-th largest element in a stream of integers. Implement the following methods: \\n - `KthLargest(int k, int[] nums)`: Initializes the object with the integer k and the stream of integers nums. \\n - `int add(int val)`: Appends the integer val to the stream and returns the k-th largest element.",
    "topic": "Data Structures",
    "subtopic": "Heap",
    "tags": [
      "Heap",
      "Design",
      "Stream"
    ],
    "input_format": "An integer k followed by an array of integers nums.",
    "output_format": "An integer representing the k-th largest element after each insertion.",
    "constraints": [
      "1 <= k <= 10^4",
      "0 <= nums.length <= 10^4",
      "-10^4 <= nums[i] <= 10^4",
      "-10^4 <= val <= 10^4"
    ],
    "examples": [
      {
        "input": "KthLargest kLargest = new KthLargest(3, new int[]{4, 5, 8, 2}); kLargest.add(3); kLargest.add(5); kLargest.add(10); kLargest.add(9); kLargest.add(4);",
        "output": "4",
        "explanation": "The current stream is [4, 5, 8, 2, 3, 5, 10, 9, 4]. The 3rd largest element is 4."
      },
      {
        "input": "KthLargest kLargest = new KthLargest(1, new int[]{}); kLargest.add(5); kLargest.add(10); kLargest.add(3);",
        "output": "10",
        "explanation": "The current stream is [5, 10, 3]. The largest element is 10."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a min-heap to keep track of the k largest elements.",
      "When adding an element, check if the size of the heap exceeds k."
    ],
    "company": "Box"
  },
  {
    "question_id": "",
    "title": "Event Emitter",
    "description": "Implement a basic Event Emitter class that can register event handlers, trigger events, and remove event handlers. The class should support multiple handlers for the same event and should provide the ability to remove specific handlers or all handlers for an event.",
    "topic": "Object-Oriented Programming",
    "subtopic": "Design Patterns",
    "tags": [
      "Event Handling",
      "Object-Oriented",
      "Design"
    ],
    "input_format": "N/A - Use methods of the EventEmitter class to manipulate events.",
    "output_format": "N/A - Use methods of the EventEmitter class to retrieve results.",
    "constraints": [
      "1 <= number of events <= 100",
      "1 <= number of handlers per event <= 10"
    ],
    "examples": [
      {
        "input": "emitter = new EventEmitter();\nemitter.on('event1', handler1);\nemitter.on('event1', handler2);\nemitter.emit('event1');",
        "output": "handler1 called\nhandler2 called",
        "explanation": "Both handler1 and handler2 are registered for event1, so they are both called when 'event1' is emitted."
      },
      {
        "input": "emitter.off('event1', handler1);\nemitter.emit('event1');",
        "output": "handler2 called",
        "explanation": "handler1 was removed from the event1 listener, leaving only handler2, which gets called."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a map to store event names and their corresponding handlers.",
      "Consider how to efficiently call multiple handlers for an event.",
      "Think about how to remove a specific handler from the list."
    ],
    "company": "Box"
  }
]