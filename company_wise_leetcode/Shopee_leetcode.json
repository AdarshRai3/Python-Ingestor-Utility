[
  {
    "question_id": "",
    "title": "Count Pairs in Two Arrays",
    "description": "You are given two integer arrays, A and B. Your task is to count the number of pairs (i, j) such that A[i] + B[j] is divisible by a given integer k. Return the total count of such pairs.",
    "topic": "Array",
    "subtopic": "Pairs",
    "tags": [
      "Array",
      "Mathematics",
      "Divisibility"
    ],
    "input_format": "Two integer arrays A and B, and an integer k.",
    "output_format": "An integer representing the count of valid pairs.",
    "constraints": [
      "1 <= A.length, B.length <= 10^4",
      "-10^5 <= A[i], B[j] <= 10^5",
      "1 <= k <= 10^6"
    ],
    "examples": [
      {
        "input": "A = [1, 2, 3], B = [4, 5, 6], k = 5",
        "output": "2",
        "explanation": "The valid pairs are (0, 0) -> 1+4 = 5 and (2, 1) -> 3+5 = 8, both divisible by 5."
      },
      {
        "input": "A = [10, 20, 30], B = [5, 15, 25], k = 10",
        "output": "6",
        "explanation": "All pairs are valid since any sum of A and B will be multiples of 10."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the remainders of the elements in both arrays when divided by k.",
      "Use a frequency map to count occurrences of remainders."
    ],
    "company": "Shopee"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for a Least Recently Used (LRU) cache. It should support the following operations: get and put. The get operation retrieves the value of the key if the key exists in the cache, otherwise it returns -1. The put operation will update the value of the key if it exists, or insert the key-value pair if it does not. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Design",
    "subtopic": "Data Structure",
    "tags": [
      "Cache",
      "Design",
      "Data Structure"
    ],
    "input_format": "The constructor of the LRUCache class will be called with an integer capacity. The get and put methods will be called with relevant parameters.",
    "output_format": "The get method returns the value of the key or -1 if the key doesn't exist. There is no output for the put method.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10000",
      "-10^5 <= value <= 10^5",
      "At most 10^4 calls will be made to get and put."
    ],
    "examples": [
      {
        "input": "LRUCache(2); lruCache.put(1, 1); lruCache.put(2, 2); lruCache.get(1); lruCache.put(3, 3); lruCache.get(2); lruCache.put(4, 4); lruCache.get(1); lruCache.get(3); lruCache.get(4);",
        "output": "[1,-1,-1,4]",
        "explanation": "After the operations, the cache contains the key-value pairs (3,3) and (4,4). The keys are returned in the order: first for the get(1) which returns -1 because 1 was evicted, then for get(3) which returns 3, and finally for get(4) which returns 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a combination of a hash map and a doubly linked list.",
      "Keep track of the order in which keys are used to efficiently identify the least recently used."
    ],
    "company": "Shopee"
  },
  {
    "question_id": "",
    "title": "Jump Game",
    "description": "You are given an array of non-negative integers nums. Each element in the array represents your maximum jump length at that position. Your goal is to determine if you can reach the last index starting from the first index. Return true if you can reach the last index; otherwise, return false.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of non-negative integers nums.",
    "output_format": "A boolean value indicating whether you can reach the last index.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, 1, 1, 4]",
        "output": "true",
        "explanation": "Jump 1 step from index 0 to 1, then 2 steps to reach the last index."
      },
      {
        "input": "nums = [3, 2, 1, 0, 4]",
        "output": "false",
        "explanation": "You will always arrive at index 3 and cannot move further to reach the last index."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the farthest index you can reach at each step.",
      "If at any point the current index exceeds the farthest index, return false."
    ],
    "company": "Shopee"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Every opening bracket must have a corresponding closing bracket of the same type.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A single string s consisting of characters '(', ')', '{', '}', '[' and ']'",
    "output_format": "A boolean indicating whether the string s is valid.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The string contains a valid pair of parentheses."
      },
      {
        "input": "s = '([{}])'",
        "output": "true",
        "explanation": "Each opening bracket has a corresponding closing bracket in the correct order."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The parentheses do not match correctly."
      },
      {
        "input": "s = '({})['",
        "output": "false",
        "explanation": "The last bracket is not closed."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Check for corresponding closing brackets during the traversal of the string."
    ],
    "company": "Shopee"
  },
  {
    "question_id": "",
    "title": "Merge Two Sorted Lists",
    "description": "You are given the heads of two sorted linked lists, list1 and list2. Merge the two lists in a new sorted list. The new list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.",
    "topic": "Linked List",
    "subtopic": "Merge",
    "tags": [
      "Linked List",
      "Merge",
      "Sorting"
    ],
    "input_format": "The input consists of two linked list heads, list1 and list2, each representing a sorted linked list.",
    "output_format": "Return the head of the new merged linked list.",
    "constraints": [
      "The number of nodes in both lists is in the range [0, 50].",
      "-100 <= Node.val <= 100",
      "Both list1 and list2 are sorted in non-decreasing order."
    ],
    "examples": [
      {
        "input": "list1 = [1, 2, 4], list2 = [1, 3, 4]",
        "output": "[1, 1, 2, 3, 4, 4]",
        "explanation": "The merged list is 1 -> 1 -> 2 -> 3 -> 4 -> 4."
      },
      {
        "input": "list1 = [], list2 = [0]",
        "output": "[0]",
        "explanation": "The merged list is simply the second list, which is 0."
      },
      {
        "input": "list1 = [], list2 = []",
        "output": "[]",
        "explanation": "Both lists are empty, so the merged list is also empty."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a dummy node to simplify the merging process.",
      "You can iterate through both lists and compare the elements."
    ],
    "company": "Shopee"
  },
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array. The merge operation must be done in-place, meaning you should not use additional arrays. After the merge, nums1 should contain all elements from both arrays sorted in non-decreasing order.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "The first array, nums1, has a size of m + n, where m is the number of elements initially in nums1 and n is the number of elements in nums2. The first m elements denote a sorted array, and the last n elements are initialized to 0. The second array, nums2, has a size of n.",
    "output_format": "The merged array nums1, which should contain all elements from both nums1 and nums2 sorted in non-decreasing order.",
    "constraints": [
      "0 <= m, n <= 200",
      "1 <= m + n <= 200",
      "-10^9 <= nums1[i], nums2[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1, 2, 3, 0, 0, 0], m = 3, nums2 = [2, 5, 6], n = 3",
        "output": "[1, 2, 2, 3, 5, 6]",
        "explanation": "After merging, nums1 will contain [1, 2, 2, 3, 5, 6]."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "nums1 is already sorted and has no elements to merge from nums2."
      },
      {
        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "output": "[1]",
        "explanation": "Since nums1 has no elements initially, after merging, it will contain [1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use pointers to track the last elements of nums1 and nums2.",
      "Start merging from the end of the arrays to avoid overwriting elements in nums1."
    ],
    "company": "Shopee"
  },
  {
    "question_id": "",
    "title": "Random Pick with Weight",
    "description": "You are given an array of positive integers w where w[i] describes the weight of i-th index (0 indexed). You need to implement a function pickIndex that randomly picks an index from the array based on the weights. You should return a valid index weighted by the weights, meaning that an index i has a probability of being picked equal to w[i] / sum(w).",
    "topic": "Design",
    "subtopic": "Randomized Algorithms",
    "tags": [
      "Random",
      "Design",
      "Probability"
    ],
    "input_format": "An array of positive integers w, where 1 <= w.length <= 10^4 and 1 <= w[i] <= 10^6.",
    "output_format": "An integer representing the randomly picked index.",
    "constraints": [
      "1 <= w.length <= 10^4",
      "1 <= w[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "w = [1, 3]",
        "output": "0 or 1",
        "explanation": "The weights are 1 for index 0 and 3 for index 1. The probability of picking index 0 is 1/4 and index 1 is 3/4, so 1 is more likely to be returned."
      },
      {
        "input": "w = [1, 2, 3]",
        "output": "0, 1, or 2",
        "explanation": "The weights are 1, 2, and 3 for indexes 0, 1, and 2, respectively. Index 0 has a probability of 1/6, index 1 has 2/6, and index 2 has 3/6 to be picked."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a prefix sum array to represent the cumulative weights.",
      "Utilize binary search to find the index based on a random number."
    ],
    "company": "Shopee"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "Array Manipulation",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices where 0 <= prices.length <= 10^4.",
    "output_format": "An integer representing the maximum profit you can achieve.",
    "constraints": [
      "0 <= prices.length <= 10^4",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price seen so far.",
      "Calculate potential profits at each price point."
    ],
    "company": "Shopee"
  },
  {
    "question_id": "",
    "title": "Valid Palindrome",
    "description": "Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. A string is a palindrome if it reads the same backward as forward.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Palindrome",
      "Two Pointers"
    ],
    "input_format": "A single string s.",
    "output_format": "A boolean value indicating whether the string is a valid palindrome.",
    "constraints": [
      "1 <= s.length <= 2 * 10^5",
      "s consists only of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"A man, a plan, a canal: Panama\"",
        "output": "true",
        "explanation": "After ignoring non-alphanumeric characters and case, the string becomes 'amanaplanacanalpanama', which is a palindrome."
      },
      {
        "input": "s = \"race a car\"",
        "output": "false",
        "explanation": "After removing non-alphanumeric characters, the string becomes 'raceacar', which is not a palindrome."
      },
      {
        "input": "s = \"\"",
        "output": "true",
        "explanation": "An empty string is considered a palindrome."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to compare characters from both ends.",
      "Skip non-alphanumeric characters while checking."
    ],
    "company": "Shopee"
  },
  {
    "question_id": "",
    "title": "Memoize",
    "description": "Implement a memoization function that takes in a function and returns a memoized version of that function. The memoized function should cache the results of expensive function calls and return the cached result when the same inputs occur again.",
    "topic": "Dynamic Programming",
    "subtopic": "Memoization",
    "tags": [
      "Dynamic Programming",
      "Memoization",
      "Caching"
    ],
    "input_format": "A function `fn` that takes any number of arguments.",
    "output_format": "A memoized version of the input function `fn`.",
    "constraints": [
      "The function can take any number of arguments of any immutable type.",
      "The results of function calls must be storable in memory."
    ],
    "examples": [
      {
        "input": "function fib(n) { return n <= 1 ? n : fib(n - 1) + fib(n - 2); }\nconst memoizedFib = memoize(fib);\nmemoizedFib(5);",
        "output": "5",
        "explanation": "The memoized version of the Fibonacci function saves results for previously computed values, thus reducing the number of redundant calculations."
      },
      {
        "input": "function add(a, b) { return a + b; }\nconst memoizedAdd = memoize(add);\nmemoizedAdd(2, 3);",
        "output": "5",
        "explanation": "The memoized addition function caches results for argument pairs, allowing for instant retrieval on duplicate calls."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a dictionary to store the cached results.",
      "Check if the input arguments exist in the cache before executing the function."
    ],
    "company": "Shopee"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers 'nums' and an integer 'target', return the indices of the two numbers such that they add up to 'target'. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers 'nums' followed by an integer 'target'.",
    "output_format": "An array of two integers representing the indices of the two numbers that add up to 'target'.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "Each input will have exactly one solution."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "Because nums[1] + nums[2] == 6, we return [1, 2]."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "Because nums[0] + nums[1] == 6, we return [0, 1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the difference between the target and the current number."
    ],
    "company": "Shopee"
  }
]