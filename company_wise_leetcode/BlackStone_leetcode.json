[
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers 'nums' and an integer 'target', return the indices of the two numbers such that they add up to 'target'. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Map",
    "tags": [
      "Array",
      "Hash Map",
      "Two Pass Hash Table"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9, so the indices are 0 and 1."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6, so the indices are 1 and 2."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6, so the indices are 0 and 1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the difference of the target and each number as you iterate.",
      "Check if the current number exists in the hash map.",
      "Remember to return the indices, not the numbers themselves."
    ],
    "company": "BlackStone"
  },
  {
    "question_id": "",
    "title": "Make The String Great",
    "description": "You are given a string s containing lowercase and uppercase letters. Your task is to remove all adjacent duplicates in the string until no more adjacent duplicates exist. To do this, you need to create a new string where, for every two adjacent characters that are the same, you remove both characters. Repeat this process until you can no longer remove any adjacent duplicates. Return the final string after all such removals.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Stack"
    ],
    "input_format": "A string s consisting of lowercase and uppercase letters.",
    "output_format": "A string representing the final result after removing adjacent duplicates.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists only of lowercase and uppercase letters."
    ],
    "examples": [
      {
        "input": "s = 'abbaca'",
        "output": "ca",
        "explanation": "Removing adjacent duplicates: 'abbaca' -> 'aaca' -> 'ca'."
      },
      {
        "input": "s = 'azxxzy'",
        "output": "az",
        "explanation": "Removing adjacent duplicates: 'azxxzy' -> 'ayya' -> 'az'."
      },
      {
        "input": "s = 'aa'",
        "output": "",
        "explanation": "Removing adjacent duplicates: 'aa' results in an empty string."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a stack to keep track of characters."
    ],
    "company": "BlackStone"
  }
]