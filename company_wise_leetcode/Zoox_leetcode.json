[
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array where the ith element is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices representing the stock prices.",
    "output_format": "An integer representing the maximum profit.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit is 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price encountered so far and compute the profit at each step.",
      "Consider the difference between the current price and the minimum price seen so far."
    ],
    "company": "Zoox"
  },
  {
    "question_id": "",
    "title": "Minimum Number of Frogs Croaking",
    "description": "You are given a string representing the sounds made by frogs croaking, denoted by the character 'c'. Each frog may croak in one of the following sequences: 'croak'. You need to determine the minimum number of frogs that are croaking simultaneously given the string. Each frog must finish the sequence 'croak' before starting again. If the sequence is invalid, return -1.",
    "topic": "String",
    "subtopic": "Counting Characters",
    "tags": [
      "String",
      "Counting",
      "Greedy"
    ],
    "input_format": "A string 's' consisting of characters from the set {'c', 'r', 'o', 'a', 'k'}.",
    "output_format": "An integer representing the minimum number of frogs croaking simultaneously, or -1 if the sequence is invalid.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists only of characters 'c', 'r', 'o', 'a', 'k'"
    ],
    "examples": [
      {
        "input": "croakcroak",
        "output": "1",
        "explanation": "There is only one complete sequence of 'croak'."
      },
      {
        "input": "crcoakroak",
        "output": "2",
        "explanation": "Two frogs are croaking: one croaks 'croak' and simultaneously another starts with 'cro', leading to two active frogs."
      },
      {
        "input": "croakcrook",
        "output": "-1",
        "explanation": "The sequence is invalid since 'k' cannot appear without 'a' preceding it."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Count the occurrences of each character in the sequence.",
      "Check the order of the characters 'c', 'r', 'o', 'a', 'k'.",
      "Keep track of the number of active frogs."
    ],
    "company": "Zoox"
  },
  {
    "question_id": "",
    "title": "Basic Calculator II",
    "description": "Implement a basic calculator to evaluate a simple expression string containing non-negative integers, '+', '-', '*', and '/' operators, and spaces. The integer division should truncate towards zero. The expression is guaranteed to be valid. You need to return the final result of evaluating the expression.",
    "topic": "Mathematics",
    "subtopic": "Parsing Expressions",
    "tags": [
      "Math",
      "String",
      "Stack",
      "Calculation"
    ],
    "input_format": "A string s representing the expression to evaluate.",
    "output_format": "An integer representing the result of the evaluated expression.",
    "constraints": [
      "The input expression is guaranteed to be valid and contains no illegal characters.",
      "0 <= s.length <= 3 * 10^4"
    ],
    "examples": [
      {
        "input": "s = \"3+2*2\"",
        "output": "7",
        "explanation": "The expression evaluates to 3 + (2 * 2) = 3 + 4 = 7."
      },
      {
        "input": "s = \" 3/2 \"",
        "output": "1",
        "explanation": "The expression evaluates to 3 / 2 = 1 after truncating towards zero."
      },
      {
        "input": "s = \" 3+5 / 2 \"",
        "output": "5",
        "explanation": "The expression evaluates to 3 + (5 / 2) = 3 + 2 = 5 after truncating towards zero."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a stack to handle operator precedence.",
      "Pay attention to spaces in the input string.",
      "Remember to handle integer division correctly."
    ],
    "company": "Zoox"
  },
  {
    "question_id": "",
    "title": "H-Index",
    "description": "Given an array of citations where citations[i] is the number of citations a researcher received for their i-th paper, return the researcher\u2019s h-index. According to the definition of h-index on Wikipedia: 'A scientist has index h if h of his or her N papers have at least h citations each, and the other N \u2212 h papers have fewer than h citations each.'",
    "topic": "Sorting",
    "subtopic": "Array Manipulation",
    "tags": [
      "Sorting",
      "Array",
      "Greedy"
    ],
    "input_format": "An array of integers citations representing the number of citations for each paper.",
    "output_format": "An integer representing the h-index of the researcher.",
    "constraints": [
      "0 <= citations.length <= 5000",
      "0 <= citations[i] <= 1000"
    ],
    "examples": [
      {
        "input": "citations = [3, 0, 6, 1, 5]",
        "output": "3",
        "explanation": "The h-index is 3 because the researcher has 3 papers with at least 3 citations each."
      },
      {
        "input": "citations = [1, 3, 1]",
        "output": "1",
        "explanation": "The h-index is 1 because the researcher has 1 paper with at least 1 citation."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the citations array and determine the h-index based on the sorted order.",
      "Consider the relationship between the index of the sorted array and the citation count."
    ],
    "company": "Zoox"
  },
  {
    "question_id": "",
    "title": "4Sum",
    "description": "Given an array of integers nums and an integer target, return all unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that: \n\n* 0 <= a, b, c, d < nums.length \n* a, b, c, and d are distinct \n* nums[a] + nums[b] + nums[c] + nums[d] == target\n\nYou may return the answer in any order.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "A list of unique quadruplets that sum up to the target.",
    "constraints": [
      "0 <= nums.length <= 200",
      "-10^9 <= nums[i] <= 10^9",
      "The solution set must not contain duplicate quadruplets."
    ],
    "examples": [
      {
        "input": "nums = [1, 0, -1, 0, -2, 2], target = 0",
        "output": "[[-2, -1, 0, 1], [-2, 0, 0, 2], [-1, 0, 0, 1]]",
        "explanation": "The unique quadruplets that sum to zero are: [-2, -1, 0, 1] and [-2, 0, 0, 2]."
      },
      {
        "input": "nums = [] , target = 0",
        "output": "[]",
        "explanation": "There are no elements in the array, hence no quadruplets can be formed."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash set to handle duplicates.",
      "Sorting the array can help reduce the complexity.",
      "Use two pointers to find pairs that sum to a specific value."
    ],
    "company": "Zoox"
  },
  {
    "question_id": "",
    "title": "Rotting Oranges",
    "description": "You are given an m x n grid where each cell can have one of three values: 0 (empty cell), 1 (fresh orange), or 2 (rotten orange). Every minute, any fresh orange that is adjacent (up, down, left, or right) to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no fresh oranges remain. If it is impossible for all the fresh oranges to rot, return -1.",
    "topic": "Graph",
    "subtopic": "BFS",
    "tags": [
      "Graph",
      "BFS",
      "Matrix"
    ],
    "input_format": "A 2D grid represented as a list of lists, where values are either 0, 1, or 2.",
    "output_format": "An integer representing the minimum number of minutes until no fresh oranges remain, or -1 if impossible.",
    "constraints": [
      "1 <= m, n <= 300",
      "grid[i][j] is 0, 1, or 2."
    ],
    "examples": [
      {
        "input": "grid = [[2,1,1],[1,1,0],[0,1,1]]",
        "output": "4",
        "explanation": "In this case, all oranges will rot in 4 minutes."
      },
      {
        "input": "grid = [[2,1,1],[0,1,1],[1,0,2]]",
        "output": "-1",
        "explanation": "In this case, it is impossible for all fresh oranges to rot."
      },
      {
        "input": "grid = [[0,2]]",
        "output": "0",
        "explanation": "There are no fresh oranges, so the output is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use BFS to simulate the rotting process.",
      "Keep track of minutes elapsed."
    ],
    "company": "Zoox"
  },
  {
    "question_id": "",
    "title": "Fibonacci Number",
    "description": "The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Write a function that computes the n-th Fibonacci number.",
    "topic": "Dynamic Programming",
    "subtopic": "Recursion",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Fibonacci"
    ],
    "input_format": "An integer n (0 <= n <= 30).",
    "output_format": "An integer representing the n-th Fibonacci number.",
    "constraints": [
      "0 <= n <= 30"
    ],
    "examples": [
      {
        "input": "n = 0",
        "output": "0",
        "explanation": "The 0-th Fibonacci number is 0."
      },
      {
        "input": "n = 1",
        "output": "1",
        "explanation": "The 1st Fibonacci number is 1."
      },
      {
        "input": "n = 5",
        "output": "5",
        "explanation": "The Fibonacci sequence up to the 5th index is 0, 1, 1, 2, 3, 5. Thus, the 5th Fibonacci number is 5."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "You can use either iteration or recursion to compute the Fibonacci number.",
      "Consider using memoization to optimize your recursive solution."
    ],
    "company": "Zoox"
  },
  {
    "question_id": "",
    "title": "Design Circular Queue",
    "description": "Implement a Circular Queue class that supports the following operations: enqueue, dequeue, front, rear, isEmpty, and isFull. The circular queue should allow a specified maximum size and wrap around when the end of the queue is reached.",
    "topic": "Design",
    "subtopic": "Data Structures",
    "tags": [
      "Queue",
      "Circular Queue",
      "Data Structure"
    ],
    "input_format": "The maximum size of the circular queue specified at initialization.",
    "output_format": "Methods that return the results of each operation as specified.",
    "constraints": [
      "1 <= maxSize <= 1000",
      "All operations must run in O(1) time."
    ],
    "examples": [
      {
        "input": "CircularQueue queue = new CircularQueue(3); queue.enqueue(1); queue.enqueue(2); queue.enqueue(3); queue.isFull();",
        "output": "true",
        "explanation": "Queue is full after adding 3 elements."
      },
      {
        "input": "queue.dequeue(); queue.enqueue(4); queue.front();",
        "output": "2",
        "explanation": "After dequeue, the front of the queue is 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a head and a tail pointer for tracking the front and rear.",
      "Calculate the index modulo maxSize to wrap around."
    ],
    "company": "Zoox"
  }
]