[
  {
    "question_id": "",
    "title": "Apply Operations to Make Two Strings Equal",
    "description": "You are given two strings, `s` and `t`, both of the same length. Your task is to determine if it is possible to make `s` equal to `t` by performing a series of operations. The operation consists of selecting two adjacent characters in `s` that are the same and replacing them with a single occurrence of that character. You can perform this operation any number of times. If you can make `s` equal to `t`, return true; otherwise, return false.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Greedy"
    ],
    "input_format": "Two strings s and t, where 1 <= s.length, t.length <= 10^5.",
    "output_format": "A boolean value: true if it is possible to make s equal to t, false otherwise.",
    "constraints": [
      "1 <= s.length, t.length <= 10^5",
      "s and t consist of only lowercase letters."
    ],
    "examples": [
      {
        "input": "s = \"aabbcc\", t = \"abc\"",
        "output": "true",
        "explanation": "You can perform operations to make s equal to t by reducing duplicates."
      },
      {
        "input": "s = \"aaabbbb\", t = \"ab\"",
        "output": "false",
        "explanation": "It's impossible to make s equal to t since 'a' cannot be removed."
      },
      {
        "input": "s = \"abc\", t = \"abc\"",
        "output": "true",
        "explanation": "s is already equal to t."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how many times you must remove adjacent duplicates.",
      "Check if the character frequency allows for reduction."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Split Array Largest Sum",
    "description": "Given an integer array nums and an integer k, you need to split the array into k non-empty continuous subarrays. The goal is to minimize the largest sum among these k subarrays. Return the minimum largest sum you can achieve.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Binary Search",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers nums and an integer k.",
    "output_format": "An integer representing the minimum largest sum among the k subarrays.",
    "constraints": [
      "1 <= k <= nums.length <= 1000",
      "0 <= nums[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [7, 2, 5, 10, 8], k = 2",
        "output": "18",
        "explanation": "One way to split is [7, 2, 5] and [10, 8]. The largest sum is 18."
      },
      {
        "input": "nums = [1, 4, 4], k = 3",
        "output": "4",
        "explanation": "The optimal split is [1], [4], [4]. The largest sum is 4."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using binary search to find the answer.",
      "The maximum sum in any subarray must be at least the largest number in nums.",
      "Try to evaluate the feasibility of a given largest sum."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Evaluate Division",
    "description": "You are given a list of equations represented as strings, where each equation is a division of two variables (like 'a/b'). You are also given a list of queries, where each query is a division of two variables, and your task is to evaluate each query based on the given equations. Return a list of answers corresponding to each query, or -1.0 if the result cannot be determined.",
    "topic": "Graph",
    "subtopic": "Union-Find",
    "tags": [
      "Graph",
      "Union-Find",
      "DFS"
    ],
    "input_format": "The input consists of two parts: an array of strings equations representing the equations, and an array of doubles values representing the results of these equations, followed by an array of strings queries representing the queries to evaluate.",
    "output_format": "Return an array of doubles representing the results of each query.",
    "constraints": [
      "1 <= equations.length <= 20",
      "equations[i].length == 3",
      "values.length == equations.length",
      "1 <= queries.length <= 20",
      "All variables are English letters.",
      "The result of each division will be on the interval [0.0, 10^9]."
    ],
    "examples": [
      {
        "input": {
          "equations": [
            "a/b",
            "b/c"
          ],
          "values": [
            2.0,
            3.0
          ],
          "queries": [
            "a/c",
            "b/a",
            "a/d",
            "d/e"
          ]
        },
        "output": [
          6.0,
          0.5,
          -1.0,
          -1.0
        ],
        "explanation": "a/c = a/b * b/c = 2.0 * 3.0 = 6.0. b/a = 1 / (a/b) = 0.5. a/d and d/e cannot be evaluated."
      },
      {
        "input": {
          "equations": [
            "a/b",
            "b/c",
            "c/a"
          ],
          "values": [
            2.0,
            3.0,
            0.5
          ],
          "queries": [
            "a/c",
            "c/b",
            "b/a",
            "a/a"
          ]
        },
        "output": [
          6.0,
          0.33333,
          0.5,
          1.0
        ],
        "explanation": "Using the equations, we can derive the results for each query."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a graph to represent the relationships between variables.",
      "Union-Find can help manage the connected components of the graph.",
      "Keep track of the weights while performing union operations."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Initial Public Offering (IPO)",
    "description": "You are given a list of companies, each represented by their respective values and expected profits. Your task is to determine the maximum profit you can achieve by investing in the companies, under the constraint that the total investment does not exceed a given budget. Each company can only be invested in once, and the expected profit may vary depending on the amount invested.",
    "topic": "Dynamic Programming",
    "subtopic": "Knapsack Problem",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An integer budget, a list of integers representing the values of the companies, and a list of integers representing the expected profits.",
    "output_format": "An integer representing the maximum profit that can be achieved with the given budget.",
    "constraints": [
      "1 <= budget <= 10^5",
      "1 <= values.length == profits.length <= 1000",
      "0 <= values[i], profits[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "budget = 50, values = [30, 20, 10], profits = [90, 50, 30]",
        "output": "90",
        "explanation": "Investing in the company with a value of 30 yields a profit of 90, which is the maximum achievable profit within the budget."
      },
      {
        "input": "budget = 100, values = [50, 50, 50], profits = [50, 70, 60]",
        "output": "70",
        "explanation": "Investing in the second company yields a profit of 70, which is maximized under the budget constraint."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a dynamic programming table to track maximum profits for each budget value.",
      "Think about sorting the companies by their profitability per investment value."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Insert Delete GetRandom O(1)",
    "description": "Design a data structure that supports the following operations: insert, delete, and getRandom. All operations should be performed in average O(1) time complexity. The insert operation adds an element to the data structure. The delete operation removes an element from the data structure. The getRandom operation returns a random element from the current set of elements. Each element must be unique.",
    "topic": "Data Structures",
    "subtopic": "Hash Table",
    "tags": [
      "Data Structure",
      "Hash Table",
      "Random"
    ],
    "input_format": "You will implement a class with the following methods: insert(val: int) -> bool, delete(val: int) -> bool, getRandom() -> int.",
    "output_format": "The insert and delete methods return a boolean indicating whether the operation was successful and getRandom returns a random integer from the current set.",
    "constraints": [
      "The number of calls to insert, delete, and getRandom does not exceed 2 * 10^4.",
      "The element being inserted or deleted will always be in the range of [1, 10^6]."
    ],
    "examples": [
      {
        "input": "obj = RandomizedSet(); obj.insert(1); obj.insert(2); obj.delete(1); obj.getRandom();",
        "output": "2",
        "explanation": "After inserting 1 and 2, deleting 1 leaves only 2, so getRandom returns 2."
      },
      {
        "input": "obj = RandomizedSet(); obj.insert(1); obj.insert(2); obj.insert(3); obj.delete(2); obj.getRandom();",
        "output": "1 or 3",
        "explanation": "After inserting 1, 2, and 3, deleting 2 can lead to either 1 or 3 being returned as both are present."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to keep track of the elements and their indices.",
      "To ensure O(1) time complexity for getRandom, store elements in an array."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Next Greater Element II",
    "description": "Given a circular array nums (i.e., the next element of the last element is the first element), return the next greater number for every element in nums. If there is no next greater number, output -1 for that element.",
    "topic": "Array",
    "subtopic": "Monotonic Stack",
    "tags": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "input_format": "An array of integers nums where 1 <= nums.length <= 10^4 and -10^9 <= nums[i] <= 10^9.",
    "output_format": "An array of integers representing the next greater elements for each number in the input array.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 1]",
        "output": "[2, -1, 2]",
        "explanation": "The next greater number after 1 (first) is 2, the next greater number after 2 is -1 since there is no greater element after it, and the next for 1 (second) is again 2."
      },
      {
        "input": "nums = [3, 2, 1]",
        "output": "[-1, 3, 3]",
        "explanation": "Each element has its next greater number in the circle, where 3 is the greater number for both 2 and 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about using a stack to keep track of indices.",
      "Consider how to handle the circular nature of the array."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Maximum Profit in Job Scheduling",
    "description": "You are given a list of jobs, where each job is represented by a start time, an end time, and a profit associated with that job. Write a function that returns the maximum profit you can achieve by scheduling jobs without overlapping. The schedule can include jobs that start at the same time but you can only run one job at any given time. The profits of the jobs may be overlapping, and you want to select the combination that gives you the highest profit.",
    "topic": "Dynamic Programming",
    "subtopic": "Interval Scheduling",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Interval Scheduling"
    ],
    "input_format": "A list of jobs where each job is represented as a tuple (start_time, end_time, profit).",
    "output_format": "An integer representing the maximum profit that can be obtained from scheduling the jobs.",
    "constraints": [
      "1 <= jobs.length <= 10^5",
      "0 <= start_time < end_time <= 10^9",
      "0 <= profit <= 10^6"
    ],
    "examples": [
      {
        "input": "jobs = [(1, 3, 50), (3, 5, 20), (5, 7, 100), (2, 6, 200)]",
        "output": "250",
        "explanation": "Select jobs (1, 3, 50) and (5, 7, 100) to maximize profit. Total profit is 50 + 100 = 150."
      },
      {
        "input": "jobs = [(1, 4, 100), (2, 3, 50), (3, 6, 150)]",
        "output": "250",
        "explanation": "Select jobs (1, 4, 100) and (3, 6, 150). Total profit is 100 + 150 = 250."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider sorting the jobs based on their end times.",
      "Use binary search to find the last non-overlapping job."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Longest Valid Parentheses",
    "description": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Stack"
    ],
    "input_format": "A string s consisting of '(' and ')'.",
    "output_format": "An integer representing the length of the longest valid parentheses substring.",
    "constraints": [
      "0 <= s.length <= 3 * 10^4",
      "s[i] is either '(' or ')'."
    ],
    "examples": [
      {
        "input": "s = \"(()\"\n",
        "output": "2",
        "explanation": "The longest valid parentheses substring is \"()\" with length 2."
      },
      {
        "input": "s = \")()())\"\n",
        "output": "4",
        "explanation": "The longest valid parentheses substring is \"()()\" with length 4."
      },
      {
        "input": "s = \"\"\"\n",
        "output": "0",
        "explanation": "There are no valid parentheses in the empty string."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a stack to keep track of indices.",
      "You can also use a dynamic programming array to store the lengths of valid substrings.",
      "Check the condition when you find a closing parenthesis."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Minimum Window Substring",
    "description": "Given two strings s and t, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\". The substring needs to be of the smallest size possible.",
    "topic": "Strings",
    "subtopic": "Sliding Window",
    "tags": [
      "Strings",
      "Sliding Window",
      "Hash Table"
    ],
    "input_format": "Two strings s and t, where 1 <= s.length, t.length <= 100.",
    "output_format": "A string representing the minimum window substring or an empty string if no such substring exists.",
    "constraints": [
      "1 <= s.length, t.length <= 1000",
      "s and t consist of English letters, digits, or spaces."
    ],
    "examples": [
      {
        "input": "s = 'ADOBECODEBANC', t = 'ABC'",
        "output": "'BANC'",
        "explanation": "The minimum window substring that contains 'A', 'B', and 'C' is 'BANC'."
      },
      {
        "input": "s = 'a', t = 'a'",
        "output": "'a'",
        "explanation": "The minimum window substring is the same as t, which is 'a'."
      },
      {
        "input": "s = 'a', t = 'aa'",
        "output": "''",
        "explanation": "There's no valid substring since 's' does not contain enough 'a' characters."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a Hash Map to keep track of character counts.",
      "Utilize two pointers to define the sliding window.",
      "Make use of the 'start' and 'end' indices carefully to find minimum lengths."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Count Univalue Subtrees",
    "description": "Given a binary tree, count the number of univalue subtrees. A univalue subtree is defined as a subtree of which all the nodes have the same value. Only the root of the subtree is counted towards the total if it is a univalue subtree.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "DFS"
    ],
    "input_format": "The input will be the root node of a binary tree.",
    "output_format": "An integer representing the total count of univalue subtrees.",
    "constraints": [
      "0 <= Number of nodes <= 1000",
      "-10^4 <= Node value <= 10^4"
    ],
    "examples": [
      {
        "input": "[5,1,5,5,5,null,5]",
        "output": "4",
        "explanation": "The univalue subtrees are the leaves with value 5 and the subtree with root 1."
      },
      {
        "input": "[1,1,1,5,1,null,1]",
        "output": "4",
        "explanation": "The univalue subtrees are the leaves with value 1 plus the subtree with root 1 where both children are 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a depth-first search approach.",
      "Track the value of the subtree\u2019s root and compare it with its children."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the height of bars in a histogram, compute how much water can be trapped after raining. The width of each bar is 1. You can assume that the input array is non-empty and that the heights of the bars can store water between them.",
    "topic": "Array",
    "subtopic": "Two Pointers / Stack",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming",
      "Stack"
    ],
    "input_format": "An array of non-negative integers heights representing the height of bars.",
    "output_format": "An integer representing the total amount of water that can be trapped.",
    "constraints": [
      "0 <= heights.length <= 10^5",
      "0 <= heights[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "heights = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The water trapped is between the bars forming the peaks, totaling 6 units."
      },
      {
        "input": "heights = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The water trapped between the bars results in a total of 9 units."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a two-pointer approach to calculate trapped water.",
      "You can also use a stack to keep track of the bars."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Capacity To Ship Packages Within D Days",
    "description": "You are given an integer array weights where weights[i] is the weight of the ith package. You are also given an integer D which represents the number of days within which you need to ship all the packages. Your task is to determine the minimum shipping capacity that you need to ship all packages within D days. A package with a weight of `x` can only be shipped on a day if the current shipping capacity is at least `x`. You have to minimize the maximum weight you can ship in a single day.",
    "topic": "Binary Search",
    "subtopic": "Greedy Algorithm",
    "tags": [
      "Binary Search",
      "Greedy",
      "Array"
    ],
    "input_format": "An integer array weights and an integer D.",
    "output_format": "An integer representing the minimum shipping capacity required.",
    "constraints": [
      "1 <= weights.length <= 10^5",
      "1 <= weights[i] <= 10^4",
      "1 <= D <= 10^5"
    ],
    "examples": [
      {
        "input": "weights = [1,2,3,4,5,6,7,8,9,10], D = 5",
        "output": "15",
        "explanation": "One possible way is to ship packages with weights [1, 2, 3, 4, 5] on the first day and [6, 7, 8, 9, 10] on the second day, making capacity = max(15, 40) = 40."
      },
      {
        "input": "weights = [3,2,2,4,1,4], D = 3",
        "output": "6",
        "explanation": "One possible way is to ship [3,2,2] on the first day, [4] on the second day, and [1,4] on the third day."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to find the minimum capacity.",
      "The maximum capacity should be at least the weight of the heaviest package.",
      "Sum up the weights and divide by D to get a starting point for binary search."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Minimum Operations to Write the Letter Y on a Grid",
    "description": "You are given a 2D grid of dimensions m x n containing uppercase letters. Your task is to transform the grid into one that can only produce the letter 'Y'. To do this, you can perform the following operation: choose any letter in the grid and change it to any uppercase letter. Your goal is to find the minimum number of operations required to achieve this transformation.",
    "topic": "Grid",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Grid",
      "Dynamic Programming",
      "String Manipulation"
    ],
    "input_format": "A 2D array of characters grid representing the uppercase letters.",
    "output_format": "An integer representing the minimum number of operations required.",
    "constraints": [
      "1 <= m, n <= 100",
      "grid[i][j] is an uppercase letter."
    ],
    "examples": [
      {
        "input": "grid = [['A', 'B', 'Y'], ['C', 'Y', 'D'], ['E', 'F', 'G']]",
        "output": "6",
        "explanation": "You can convert all the letters in the grid to 'Y'. There are 6 letters that need to be changed."
      },
      {
        "input": "grid = [['Y', 'Y', 'Y'], ['Y', 'Y', 'Y'], ['Y', 'Y', 'Y']]",
        "output": "0",
        "explanation": "The grid is already all 'Y', so no operations are needed."
      },
      {
        "input": "grid = [['Z', 'Z', 'Z'], ['Z', 'Y', 'Z'], ['Z', 'Z', 'Z']]",
        "output": "8",
        "explanation": "You need to convert the 8 'Z's to 'Y'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how many letters need to be changed.",
      "Look for patterns that might minimize changes.",
      "Think about the cost of changing letters."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Interleaving String",
    "description": "Given three strings s1, s2, and s3, determine if s3 is formed by the interleaving of s1 and s2. An interleaving of two strings s and t is created by merging them together in a way that maintains the relative order of the characters of s and t. Note that s1, s2, and s3 all consist of lowercase letters.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Interleaving"
    ],
    "input_format": "Three strings s1, s2, and s3.",
    "output_format": "A boolean value indicating whether s3 is an interleaving of s1 and s2.",
    "constraints": [
      "1 <= s1.length, s2.length <= 100",
      "s3.length == s1.length + s2.length"
    ],
    "examples": [
      {
        "input": "s1 = 'aab', s2 = 'axy', s3 = 'aaxyab'",
        "output": "true",
        "explanation": "s3 can be formed by interleaving s1 and s2: aab + axy = aaxyab."
      },
      {
        "input": "s1 = 'ab', s2 = 'cd', s3 = 'acbd'",
        "output": "false",
        "explanation": "There is no way to interleave ab and cd to form acbd."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a 2D array to track the interleaving.",
      "Check the characters in order for both strings during the process."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. This substring must be composed of distinct characters and may consist of any characters including letters, digits, symbols or whitespace.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Hash Map"
    ],
    "input_format": "A single string s consisting of ASCII characters.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s consists of ASCII characters."
    ],
    "examples": [
      {
        "input": "s = 'abcabcbb'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'abc', which has a length of 3."
      },
      {
        "input": "s = 'bbbbb'",
        "output": "1",
        "explanation": "The longest substring without repeating characters is 'b', with a length of 1."
      },
      {
        "input": "s = 'pwwkew'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'wke', which has a length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to store characters and their indices.",
      "Consider using a sliding window approach."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "DFS",
      "Matrix"
    ],
    "input_format": "A 2D grid of characters, grid, where grid[i][j] can either be '1' or '0'.",
    "output_format": "An integer representing the number of islands in the grid.",
    "constraints": [
      "1 <= grid.length <= 300",
      "1 <= grid[i].length <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [['1', '1', '0', '0', '0'], ['1', '1', '0', '0', '0'], ['0', '0', '1', '0', '0'], ['0', '0', '0', '1', '1']]",
        "output": "3",
        "explanation": "The grid contains three islands: one consisting of '1's at (0,0), (0,1), (1,0), (1,1), another at (2,2), and the last one at (3,3), (3,4)."
      },
      {
        "input": "grid = [['0', '0', '0', '0'], ['0', '0', '0', '0'], ['0', '0', '0', '0']]",
        "output": "0",
        "explanation": "The grid contains only water, therefore there are no islands."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth-First Search (DFS) to explore each island.",
      "You can modify the grid in-place to mark visited lands."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Find a Peak Element II",
    "description": "A peak element in a 2D grid is an element that is strictly greater than its neighbors. Given a 2D grid of integers, you need to find any peak element in the grid. An element in the grid can have up to 8 neighbors (top, bottom, left, right, and the four diagonals). You may assume that the grid is non-empty and the elements will be all distinct.",
    "topic": "Matrix",
    "subtopic": "Searching in 2D Array",
    "tags": [
      "Matrix",
      "Searching",
      "Grid"
    ],
    "input_format": "A 2D grid of integers where each row has the same number of columns.",
    "output_format": "A list of two integers representing the coordinates of a peak element (row index, column index).",
    "constraints": [
      "1 <= grid.length <= 500",
      "1 <= grid[i].length <= 500",
      "1 <= grid[i][j] <= 10^5"
    ],
    "examples": [
      {
        "input": "grid = [[1, 2, 3], [6, 5, 4], [7, 8, 9]]",
        "output": "[2, 2]",
        "explanation": "The element 9 at (2, 2) is a peak because it is greater than all its neighbors."
      },
      {
        "input": "grid = [[1, 2], [3, 4]]",
        "output": "[1, 1]",
        "explanation": "The element 4 at (1, 1) is a peak as it is greater than its neighbors."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a divide-and-conquer strategy to efficiently find a peak.",
      "You can check neighboring cells to determine if you have found a peak."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
    "description": "Design a data structure that supports the following operations: insert, delete, and getRandom, all in average O(1) time complexity. Duplicate elements are allowed to be inserted. Implement the required functionality such that the getRandom operation returns a random element from the current elements in the data structure. The insert method should return true if the element was added successfully, or false if it was already present. The delete method should return true if the element was removed, or false if it was not found.",
    "topic": "Design",
    "subtopic": "Data Structures",
    "tags": [
      "Design",
      "Data Structures",
      "Random"
    ],
    "input_format": "The input consists of a sequence of operations to perform on the data structure, where each operation is either insert x, delete x, or getRandom.",
    "output_format": "For each getRandom operation, return a random integer from the current elements.",
    "constraints": [
      "The number of operations will not exceed 10^5.",
      "0 <= x <= 10^9"
    ],
    "examples": [
      {
        "input": "insert(1), insert(1), insert(2), delete(1), getRandom()",
        "output": "1 or 2",
        "explanation": "After inserting 1 twice and then inserting 2, deleting 1 leaves [1, 2]. The getRandom can return either 1 or 2."
      },
      {
        "input": "insert(10), insert(20), getRandom(), delete(20), getRandom()",
        "output": "10 or 20; 10",
        "explanation": "Initially, both 10 and 20 are present; the first getRandom can return either. After deleting 20, the second getRandom can only return 10."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a hash map to store elements and their indices.",
      "Use a list to keep track of the order of elements for random access.",
      "Handle duplicates carefully in your data structure."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Task Scheduler",
    "description": "Given a list of tasks represented by characters, and an integer 'n' that represents the cooldown period between the same tasks, your objective is to find the least number of units of time required to execute all tasks. Each task can be executed only once in a cooldown period of 'n' units. If it becomes impossible to schedule tasks according to the rules, return -1.",
    "topic": "Greedy",
    "subtopic": "Task Scheduling",
    "tags": [
      "Greedy",
      "Array",
      "Task Scheduling"
    ],
    "input_format": "A list of characters tasks and an integer n.",
    "output_format": "An integer representing the least number of units of time required to execute all tasks.",
    "constraints": [
      "1 <= tasks.length <= 10^4",
      "1 <= n <= 26",
      "tasks[i] is an uppercase English letter."
    ],
    "examples": [
      {
        "input": "tasks = ['A', 'A', 'A', 'B', 'B', 'B'], n = 2",
        "output": "8",
        "explanation": "One possible scheduling is A -> B -> idle -> A -> B -> idle -> A -> B, which takes 8 units of time."
      },
      {
        "input": "tasks = ['A', 'A', 'A', 'B', 'B', 'B'], n = 0",
        "output": "6",
        "explanation": "Since there is no cooldown, we can execute all tasks one after another in 6 units of time."
      },
      {
        "input": "tasks = ['A', 'A', 'A', 'B', 'B', 'B'], n = 1",
        "output": "6",
        "explanation": "Possible scheduling: A -> B -> A -> B -> A -> B, completing in 6 units of time."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to maximize the number of idle time slots.",
      "Count the frequency of each task and manage the cooldown effectively."
    ],
    "company": "Zeta"
  },
  {
    "question_id": "",
    "title": "Reverse Nodes in k-Group",
    "description": "Given a linked list, reverse the nodes of the list k at a time and return the modified list. If the number of nodes is not a multiple of k, then left-out nodes in the end should remain as is. You may not alter the values in the nodes; only nodes themselves may be changed.",
    "topic": "Linked List",
    "subtopic": "Reverse Linked List",
    "tags": [
      "Linked List",
      "Recursion",
      "Two Pointers"
    ],
    "input_format": "A linked list and an integer k.",
    "output_format": "A modified linked list where nodes have been reversed in groups of k.",
    "constraints": [
      "The number of nodes in the linked list is n.",
      "1 <= k <= n <= 5000",
      "0 <= Node.val <= 1000"
    ],
    "examples": [
      {
        "input": "head = [1,2,3,4,5], k = 2",
        "output": "[2,1,4,3,5]",
        "explanation": "The first two nodes (1 and 2) are reversed to become (2 and 1). The second two nodes (3 and 4) are reversed to become (4 and 3). Node 5 remains as is since it's not part of a complete group of k."
      },
      {
        "input": "head = [1,2,3], k = 1",
        "output": "[1,2,3]",
        "explanation": "With k = 1, the list remains unchanged."
      },
      {
        "input": "head = [1], k = 1",
        "output": "[1]",
        "explanation": "With only one node, the list remains unchanged."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a dummy node for easier handling of the head.",
      "Think about how to maintain the connections between reversed nodes.",
      "Pay attention to the base cases for your recursive solution."
    ],
    "company": "Zeta"
  }
]