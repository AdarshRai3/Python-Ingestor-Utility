[
  {
    "question_id": "",
    "title": "Sort Integers by The Number of 1 Bits",
    "description": "Given an array of integers, sort the integers in ascending order based on the number of 1 bits in their binary representation. If two integers have the same number of 1 bits, sort them in ascending order by their value. Return the sorted array.",
    "topic": "Sorting",
    "subtopic": "Custom Sort",
    "tags": [
      "Sorting",
      "Binary",
      "Comparison"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An array of integers sorted based on the number of 1 bits.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "[0, 1, 2, 4, 8, 3, 5, 6, 7]",
        "explanation": "0 has 0 one bits, 1 has 1 one bit, 2 has 1 one bit, 4 has 1 one bit, 8 has 1 one bit. 3 has 2 one bits, 5 has 2 one bits, 6 has 2 one bits, 7 has 3 one bits."
      },
      {
        "input": "nums = [10, 3, 5, 8, 15, 6]",
        "output": "[8, 10, 3, 5, 6, 15]",
        "explanation": "8 has 1 one bit, 10 has 2 one bits, 3 has 2 one bits, 5 has 2 one bits, 6 has 2 one bits, and 15 has 4 one bits."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a custom comparator for sorting.",
      "You can count the number of 1 bits using built-in functions."
    ],
    "company": "Mapbox"
  },
  {
    "question_id": "",
    "title": "Implement Trie (Prefix Tree)",
    "description": "Implement a Trie (prefix tree), which supports the following operations: insert, search, and startsWith. A Trie is a tree-like data structure that stores strings efficiently and allows for fast prefix lookups. The `insert` operation adds a word into the trie, `search` checks if the word is in the trie, and `startsWith` checks if there is any word in the trie that starts with a given prefix.",
    "topic": "Data Structure",
    "subtopic": "Trie",
    "tags": [
      "Trie",
      "Data Structure",
      "String"
    ],
    "input_format": "The input consists of a series of commands where each command is either 'insert', 'search', or 'startsWith', followed by a word or prefix.",
    "output_format": "The methods `search` and `startsWith` return a boolean indicating whether the word or prefix exists in the trie.",
    "constraints": [
      "All input strings consist of lowercase English letters.",
      "The maximum length of a word or prefix will not exceed 200 characters.",
      "The total number of insert, search, and startsWith operations will not exceed 10^4."
    ],
    "examples": [
      {
        "input": "insert('apple'); search('apple'); search('app'); startsWith('app'); insert('app'); search('app')",
        "output": "[null, true, false, true, null, true]",
        "explanation": "'apple' is inserted. It returns true when searching 'apple', false for 'app', true for prefix 'app', and after inserting 'app', it returns true for 'app'."
      },
      {
        "input": "insert('bat'); search('bat'); search('bad'); startsWith('ba')",
        "output": "[null, true, false, true]",
        "explanation": "'bat' is inserted. It returns true for 'bat', false for 'bad', and true for 'ba' as it is a prefix."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how to represent each character of the word.",
      "Consider using a node structure that contains children nodes."
    ],
    "company": "Mapbox"
  }
]