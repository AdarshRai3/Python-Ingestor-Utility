[
  {
    "question_id": "",
    "title": "Check if an Original String Exists Given Two Encoded Strings",
    "description": "Given two encoded strings, encoded1 and encoded2, you need to determine if there exists an original string that can be reconstructed from the given encoded strings. This problem will test your ability to analyze the patterns in encoded data and find possible combinations that satisfy the conditions of the encoded strings.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Encoding",
      "Decoding",
      "Combinatorics"
    ],
    "input_format": "Two strings encoded1 and encoded2, where each string consists of lowercase letters only.",
    "output_format": "A boolean value indicating whether an original string can be constructed from the two encoded strings.",
    "constraints": [
      "1 <= encoded1.length, encoded2.length <= 10^5",
      "The characters in encoded1 and encoded2 are in the range 'a' to 'z'."
    ],
    "examples": [
      {
        "input": "encoded1 = 'abc', encoded2 = 'ab'",
        "output": "true",
        "explanation": "The original string 'a' can be constructed from encoded1 and encoded2."
      },
      {
        "input": "encoded1 = 'xyz', encoded2 = 'abcd'",
        "output": "false",
        "explanation": "There is no original string that can be formed using both encoded strings."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider character frequency and patterns in the encoded strings.",
      "Think about the implications of the encoded strings on the original string's structure."
    ],
    "company": "BitGo"
  },
  {
    "question_id": "",
    "title": "Gas Station",
    "description": "There are N gas stations along a circular route, where the amount of gas at the i-th station is gas[i]. The cost of gas to travel from the i-th station to the (i + 1)-th station is cost[i]. You are to determine the starting gas station's index to travel around the circuit once without running out of gas. If there is no such station, return -1.",
    "topic": "Greedy",
    "subtopic": "Circular Array",
    "tags": [
      "Greedy",
      "Array",
      "Simulation"
    ],
    "input_format": "Two arrays, gas and cost, where gas[i] is the gas available at the i-th station and cost[i] is the cost to travel to the next station.",
    "output_format": "An integer representing the starting gas station's index, or -1 if it is not possible to complete the circuit.",
    "constraints": [
      "N == gas.length == cost.length",
      "1 <= N <= 10^4",
      "0 <= gas[i], cost[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "gas = [1, 2, 3, 4, 5], cost = [3, 4, 5, 1, 2]",
        "output": "3",
        "explanation": "Starting at station 3, you can travel around the circuit without running out of gas."
      },
      {
        "input": "gas = [2, 3, 4], cost = [3, 4, 3]",
        "output": "-1",
        "explanation": "There's no valid starting station to complete the circuit."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a greedy approach to check the total gas against total cost.",
      "If you fail at station i, you cannot start from any station before i."
    ],
    "company": "BitGo"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands in the grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "DFS/BFS",
    "tags": [
      "Graph",
      "DFS",
      "BFS",
      "Matrix"
    ],
    "input_format": "A 2D binary grid grid where grid[i][j] is 1 (land) or 0 (water).",
    "output_format": "An integer representing the total number of islands.",
    "constraints": [
      "m, n = grid.length, grid[i].length; 1 <= m, n <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [['1','1','1','1','0'],['1','1','0','1','0'],['1','1','0','0','0'],['0','0','0','0','0']]",
        "output": "1",
        "explanation": "There is one island."
      },
      {
        "input": "grid = [['1','1','0','0','0'],['1','1','0','0','0'],['0','0','1','0','0'],['0','0','0','1','1']]",
        "output": "3",
        "explanation": "There are three islands."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth First Search (DFS) to explore the islands.",
      "Mark visited land cells to avoid counting them multiple times."
    ],
    "company": "BitGo"
  },
  {
    "question_id": "",
    "title": "Zigzag Conversion",
    "description": "The string 'PAYPALISHIRING' is written in a zigzag pattern on a given number of rows like this: (say, numRows = 3)\n\nP   A   H   N\nA P L S I I G\nY   I   \n\nAnd then read line by line: 'PAHNAPLSIIGY'. Write a function to convert a given string into this zigzag pattern, and then read it line by line to return the resultant string.",
    "topic": "String",
    "subtopic": "Conversion",
    "tags": [
      "String",
      "Transformation",
      "Zigzag"
    ],
    "input_format": "A string s representing the input string and an integer numRows representing the number of rows.",
    "output_format": "A string representing the converted string in zigzag format.",
    "constraints": [
      "1 <= s.length <= 1000",
      "1 <= numRows <= 1000"
    ],
    "examples": [
      {
        "input": "s = 'PAYPALISHIRING', numRows = 3",
        "output": "PAHNAPLSIIGY",
        "explanation": "The zigzag pattern is: P A H N\nA P L S I I G\nY I\nReading line by line gives 'PAHNAPLSIIGY'."
      },
      {
        "input": "s = 'A', numRows = 1",
        "output": "A",
        "explanation": "With only 1 row, the output is the same as the input."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to calculate the index for each character in the zigzag pattern.",
      "Think about how characters are positioned when transitioning from one line to another."
    ],
    "company": "BitGo"
  },
  {
    "question_id": "",
    "title": "Longest Substring with At Most K Distinct Characters",
    "description": "Given a string s, find the length of the longest substring that contains at most k distinct characters. A substring is a contiguous sequence of characters within the string.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A string s and an integer k.",
    "output_format": "An integer representing the length of the longest substring with at most k distinct characters.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "0 <= k <= 26"
    ],
    "examples": [
      {
        "input": "s = 'eceba', k = 2",
        "output": "3",
        "explanation": "The substring 'ece' is the longest with at most 2 distinct characters."
      },
      {
        "input": "s = 'aa', k = 1",
        "output": "2",
        "explanation": "The substring 'aa' contains only 1 distinct character."
      },
      {
        "input": "s = 'aabbcc', k = 2",
        "output": "4",
        "explanation": "The substrings 'aabb' and 'bbcc' have lengths of 4 with at most 2 distinct characters."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach to maintain the substring.",
      "Use a hashmap to count the occurrences of characters in the current window."
    ],
    "company": "BitGo"
  },
  {
    "question_id": "",
    "title": "Bus Routes",
    "description": "You are given a list of bus routes in a city, where each route is defined by a list of stops that the bus travels through. A bus can travel through multiple routes, and some stops may be shared between different routes. Your task is to determine the minimum number of buses needed to travel from a starting stop to a destination stop. If it is not possible to reach the destination stop, return -1.",
    "topic": "Graph",
    "subtopic": "Breadth-First Search",
    "tags": [
      "Graph",
      "BFS",
      "Shortest Path"
    ],
    "input_format": "The input consists of a list of bus routes where each route is an array of integers representing the bus stops. Additionally, two integers representing the source and destination bus stops are provided.",
    "output_format": "An integer representing the minimum number of buses needed to travel from the source to the destination. Return -1 if it is not possible.",
    "constraints": [
      "1 <= routes.length <= 500",
      "1 <= routes[i].length <= 10^5",
      "0 <= routes[i][j] <= 10^6",
      "source and destination are guaranteed to be different."
    ],
    "examples": [
      {
        "input": "routes = [[1, 2, 7], [3, 6, 7]], source = 1, destination = 6",
        "output": "2",
        "explanation": "Take the first bus from 1 to 7, then switch to the second bus from 7 to 6. So, 2 buses are needed."
      },
      {
        "input": "routes = [[1, 2, 5], [2, 3, 4], [4, 5, 6]], source = 5, destination = 6",
        "output": "1",
        "explanation": "Directly take the bus from 5 to 6. So, only 1 bus is needed."
      },
      {
        "input": "routes = [[1, 2, 3], [4, 5, 6]], source = 1, destination = 6",
        "output": "-1",
        "explanation": "There is no way to reach stop 6 from stop 1, thus return -1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a queue to perform a breadth-first search.",
      "Track the visited stops and the current number of buses taken."
    ],
    "company": "BitGo"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. It should support the following operations: 'get' and 'put'. The 'get' operation retrieves the value of the key if the key exists in the cache, otherwise it returns -1. The 'put' operation will add a key-value pair to the cache. If the number of keys exceeds the capacity, it should invalidate the least recently used key. The cache should be initialized with a positive capacity.",
    "topic": "Design",
    "subtopic": "Cache",
    "tags": [
      "Design",
      "Cache",
      "Linked List",
      "Hash Map"
    ],
    "input_format": "The cache is initialized with a capacity. The 'put' and 'get' operations are performed as follows: 'cache.put(key, value)' and 'cache.get(key)'.",
    "output_format": "The output for 'get' operations should be the value associated with the key or -1 if the key does not exist.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key, value <= 10^4",
      "The functions 'get' and 'put' must be called at most 2 * 10^5 times."
    ],
    "examples": [
      {
        "input": "cache = LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1,-1,3,4]",
        "explanation": "The cache capacity is 2. After putting (1,1) and (2,2), getting key 1 returns 1. When (3,3) is added, (2,2) is evicted. Getting key 2 returns -1. After adding (4,4) key 1 is evicted, etc."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a combination of a doubly linked list and a hash map.",
      "The linked list will help keep track of the LRU order.",
      "Update the order of items when they are accessed or added."
    ],
    "company": "BitGo"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an integer array height representing the height of walls, calculate how much water can be trapped after raining. The width of each wall is 1. You must return the total amount of water trapped.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Two Pointers"
    ],
    "input_format": "An integer array height where 1 <= height.length <= 2 * 10^4 and 0 <= height[i] <= 10^5.",
    "output_format": "An integer representing the total amount of water trapped.",
    "constraints": [
      "1 <= height.length <= 2 * 10^4",
      "0 <= height[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The trapped water is 6 units."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The trapped water is 9 units."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using two pointers to calculate the trapped water efficiently.",
      "Maintain the maximum height seen so far from both ends."
    ],
    "company": "BitGo"
  }
]