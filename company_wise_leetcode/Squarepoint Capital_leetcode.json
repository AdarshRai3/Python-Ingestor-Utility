[
  {
    "question_id": "",
    "title": "Search Suggestions System",
    "description": "You are given an array of strings products and a string searchWord. The searchWord is being typed, one character at a time. You need to implement a search suggestions system, which suggests up to three products from the products array that start with the current searchWord after each character addition. Return a list of lists of the suggested products after each character of searchWord is typed. The suggestions should be sorted in lexicographical order.",
    "topic": "String",
    "subtopic": "Searching",
    "tags": [
      "String",
      "Sorting",
      "Search"
    ],
    "input_format": "An array of strings products and a string searchWord.",
    "output_format": "A list of lists of strings containing the suggested products for each prefix of searchWord.",
    "constraints": [
      "1 <= products.length <= 1000",
      "1 <= products[i].length <= 100",
      "products[i] consist of lowercase English letters.",
      "The input product list is guaranteed to be unique.",
      "1 <= searchWord.length <= 100"
    ],
    "examples": [
      {
        "input": {
          "products": [
            "mobile",
            "mouse",
            "moneypot",
            "monitor",
            "mousepad"
          ],
          "searchWord": "mouse"
        },
        "output": [
          [
            "mobile",
            "moneypot",
            "monitor"
          ],
          [
            "mobile",
            "moneypot",
            "monitor"
          ],
          [
            "mouse",
            "mousepad"
          ],
          [
            "mouse",
            "mousepad"
          ],
          [
            "mouse",
            "mousepad"
          ]
        ],
        "explanation": "Typing 'm' gives suggestions starting with 'm', etc. Subsequent characters lead us to 'mouse' and its variations."
      },
      {
        "input": {
          "products": [
            "bags",
            "baggage",
            "banner",
            "box",
            "cloths"
          ],
          "searchWord": "bags"
        },
        "output": [
          [
            "bags",
            "baggage"
          ],
          [
            "bags",
            "baggage"
          ],
          [
            "bags",
            "baggage"
          ],
          [
            "bags",
            "baggage"
          ]
        ],
        "explanation": "Typing 'b' leads to 'bags', 'baggage' based on the prefix."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the products array first.",
      "Use a trie or direct filtering to gather suggestions efficiently.",
      "Keep track of the searchWord as you build it character by character."
    ],
    "company": "Squarepoint Capital"
  },
  {
    "question_id": "",
    "title": "Subarray Product Less Than K",
    "description": "Given an array of positive integers nums and a positive integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Product"
    ],
    "input_format": "An array of positive integers nums followed by a positive integer k.",
    "output_format": "An integer representing the count of contiguous subarrays with a product less than k.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i] < k <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [10, 5, 2, 6], k = 100",
        "output": "8",
        "explanation": "The subarrays with products less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [10, 5, 2]."
      },
      {
        "input": "nums = [1, 2, 3], k = 0",
        "output": "0",
        "explanation": "There are no subarrays with a product less than 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window to keep track of the product.",
      "If the product exceeds k, move the left pointer of the window."
    ],
    "company": "Squarepoint Capital"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array where each element represents the price of a stock on a given day. Find the maximum profit you can achieve from buying and selling a stock. You may complete at most one transaction (i.e., buy one and sell one share of the stock). If you cannot gain any profit, return 0.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices, where prices[i] is the price of a given stock on the ith day.",
    "output_format": "An integer representing the maximum profit you can achieve.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Maximum profit is 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit is 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price encountered so far.",
      "Calculate the potential profit at each step and update the maximum profit."
    ],
    "company": "Squarepoint Capital"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Depth-First Search",
    "subtopic": "Graph Traversal",
    "tags": [
      "DFS",
      "Graph",
      "Matrix",
      "Counting"
    ],
    "input_format": "A 2D grid represented as a list of lists containing '1's and '0's.",
    "output_format": "An integer representing the total number of islands.",
    "constraints": [
      "0 <= grid.length <= 300",
      "0 <= grid[i].length <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "[['1','1','1','1','0'], ['1','1','0','1','0'], ['0','0','0','0','0'], ['1','0','1','1','1']]",
        "output": "3",
        "explanation": "There are three islands in the given grid."
      },
      {
        "input": "[['0','0','0','0','0'], ['0','0','0','0','0'], ['0','0','0','0','0']]",
        "output": "0",
        "explanation": "The grid contains only water, so there are no islands."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth First Search (DFS) to explore all connected lands.",
      "Mark visited land cells to avoid counting them multiple times."
    ],
    "company": "Squarepoint Capital"
  },
  {
    "question_id": "",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. A subarray is a contiguous part of an array.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Kadane's Algorithm"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum sum of the contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The contiguous subarray [4, -1, 2, 1] has the largest sum = 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The only subarray is [1], which has the largest sum."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The contiguous subarray [5,4,-1,7,8] has the largest sum = 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the impact of including or excluding an element on the current sum.",
      "You can use a variable to track the current maximum sum found so far."
    ],
    "company": "Squarepoint Capital"
  },
  {
    "question_id": "",
    "title": "Longest Increasing Subsequence",
    "description": "Given an integer array nums, return the length of the longest strictly increasing subsequence.",
    "topic": "Dynamic Programming",
    "subtopic": "Subsequence",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Greedy"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest increasing subsequence.",
    "constraints": [
      "1 <= nums.length <= 2500",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [10, 9, 2, 5, 3, 7, 101, 18]",
        "output": "4",
        "explanation": "The longest increasing subsequence is [2, 3, 7, 101], which has a length of 4."
      },
      {
        "input": "nums = [0, 1, 0, 3, 2, 3]",
        "output": "4",
        "explanation": "The longest increasing subsequence is [0, 1, 2, 3], which has a length of 4."
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7]",
        "output": "1",
        "explanation": "The longest increasing subsequence is [7], which has a length of 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to store the lengths of increasing subsequences.",
      "You can use binary search to optimize your solution."
    ],
    "company": "Squarepoint Capital"
  },
  {
    "question_id": "",
    "title": "Minimum Insertion Steps to Make a String Palindrome",
    "description": "Given a string s, return the minimum number of characters that must be inserted to make s a palindrome. A palindrome is a string that reads the same forward and backward. You may insert characters at any position in the string.",
    "topic": "Dynamic Programming",
    "subtopic": "String Manipulation",
    "tags": [
      "Dynamic Programming",
      "String",
      "Palindrome"
    ],
    "input_format": "A single string s consisting of lowercase letters.",
    "output_format": "An integer representing the minimum number of insertions required.",
    "constraints": [
      "1 <= s.length <= 500",
      "s consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"abc\"",
        "output": "2",
        "explanation": "We can insert 'b' at the start and 'c' at the end to make 'abcba'."
      },
      {
        "input": "s = \"aebcbda\"",
        "output": "2",
        "explanation": "We can insert 'b' and 'a' to make 'aebcbdea'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the relationship between the longest palindromic subsequence and the required insertions.",
      "Use dynamic programming to find the minimum insertions."
    ],
    "company": "Squarepoint Capital"
  },
  {
    "question_id": "",
    "title": "Coin Change",
    "description": "You are given an array of coins where each coin has a positive integer value. You need to determine the minimum number of coins needed to make a certain amount of money. If that amount cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin.",
    "topic": "Dynamic Programming",
    "subtopic": "Coin Change Problem",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An integer array coins representing the denominations of the coins and an integer amount representing the total amount of money.",
    "output_format": "An integer representing the minimum number of coins that make up the amount, or -1 if it's not possible.",
    "constraints": [
      "1 <= coins.length <= 12",
      "1 <= coins[i] <= 2^31 - 1",
      "0 <= amount <= 10^4"
    ],
    "examples": [
      {
        "input": "coins = [1, 2, 5], amount = 11",
        "output": "3",
        "explanation": "The minimum number of coins to make 11 is 3, using two 5 coins and one 1 coin."
      },
      {
        "input": "coins = [2], amount = 3",
        "output": "-1",
        "explanation": "It's not possible to make amount 3 with just a 2 coin."
      },
      {
        "input": "coins = [1], amount = 0",
        "output": "0",
        "explanation": "No coins are needed to make amount 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how you can build up the amount from smaller amounts.",
      "Use dynamic programming to store the results of subproblems.",
      "Consider initializing an array to represent the minimum coins for each amount."
    ],
    "company": "Squarepoint Capital"
  },
  {
    "question_id": "",
    "title": "Kth Largest Element in an Array",
    "description": "Given an integer array nums and an integer k, return the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element. You must solve it in O(n log n) time complexity.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Heap"
    ],
    "input_format": "An integer array nums and an integer k.",
    "output_format": "An integer representing the kth largest element in the array.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 1, 5, 6, 4], k = 2",
        "output": "5",
        "explanation": "The second largest element in the sorted array [1, 2, 3, 4, 5, 6] is 5."
      },
      {
        "input": "nums = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4",
        "output": "4",
        "explanation": "The fourth largest element in the sorted array [1, 2, 2, 3, 3, 4, 5, 5, 6] is 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a min-heap to keep track of the largest elements.",
      "You can also sort the array and access the kth last element."
    ],
    "company": "Squarepoint Capital"
  },
  {
    "question_id": "",
    "title": "Subarrays with K Different Integers",
    "description": "Given an integer array 'nums' and an integer 'k', return the number of good subarrays of 'nums' where a good subarray is defined as a subarray that contains exactly 'k' different integers.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "An integer array nums and an integer k.",
    "output_format": "An integer representing the number of good subarrays.",
    "constraints": [
      "1 <= nums.length <= 20000",
      "0 <= nums[i] < 100000",
      "1 <= k <= distinct numbers in nums"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 1, 2, 3], k = 2",
        "output": "7",
        "explanation": "The good subarrays are: [1,2], [2,1], [1,2,1], [2,1,2], [1,2,3], [2,3], and [1,2,1,2]."
      },
      {
        "input": "nums = [1, 2, 1, 3, 4], k = 3",
        "output": "3",
        "explanation": "The good subarrays are: [1,2,1], [2,1,3], and [1,3,4]."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use two pointers to maintain a sliding window.",
      "Count the number of distinct integers in the current window."
    ],
    "company": "Squarepoint Capital"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You can return the answer in any order. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Hashing",
    "tags": [
      "String",
      "Hashing",
      "Anagrams"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "An array of arrays, where each inner array contains strings that are anagrams of each other.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "0 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = ['eat', 'tea', 'tan', 'ate', 'nat', 'bat']",
        "output": "[['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]",
        "explanation": "The anagrams of 'eat' are 'tea' and 'ate'. The anagrams of 'tan' are 'nat'. 'bat' has no anagrams."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to group the words by their sorted character representation.",
      "Think about how you can generate a unique key for each group of anagrams."
    ],
    "company": "Squarepoint Capital"
  },
  {
    "question_id": "",
    "title": "Frog Jump",
    "description": "A frog is located at position 0 on a number line. It wants to get to a position 'target'. The frog can jump forward a variable distance that can change every time it jumps. You are given two integers 'x' and 'y' representing the distance of the frog's first jump and the maximum distance the frog can jump. The frog can only jump an additional 'D' distance, if needed, on each subsequent jump, but it cannot jump backwards. Determine if the frog can reach the target exactly at some point.",
    "topic": "Dynamic Programming",
    "subtopic": "State Transition",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Recursion"
    ],
    "input_format": "Two integers 'x' and 'target'.",
    "output_format": "Return true if the frog can reach the target, false otherwise.",
    "constraints": [
      "1 <= x <= 1000",
      "1 <= target <= 10^6"
    ],
    "examples": [
      {
        "input": "x = 2, target = 5",
        "output": "true",
        "explanation": "The frog can jump to 2, then to 4, and finally to 5."
      },
      {
        "input": "x = 3, target = 6",
        "output": "false",
        "explanation": "The frog cannot make an exact jump to reach 6."
      },
      {
        "input": "x = 5, target = 5",
        "output": "true",
        "explanation": "The frog reaches the target in one jump."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Think about how the jump distance affects the ability to reach the target.",
      "Consider the steps needed to reach both positive and negative targets."
    ],
    "company": "Squarepoint Capital"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the height of walls by the index, compute how much water is trapped after raining. You may assume all heights are non-negative and edges are not walls that trap water.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers height representing the height of walls.",
    "output_format": "An integer representing the total units of trapped rainwater.",
    "constraints": [
      "n == height.length",
      "0 <= n <= 10^2",
      "0 <= height[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The water trapped between heights 1 and 3 is 6 units."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The water trapped is 9 units due to the configuration of heights."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using the two-pointer technique to optimize space.",
      "Think about the maximum height to the left and right for each position."
    ],
    "company": "Squarepoint Capital"
  }
]