[
  {
    "question_id": "",
    "title": "Pascal's Triangle",
    "description": "Given an integer numRows, return the first numRows of Pascal's Triangle. In Pascal's Triangle, each number is the sum of the two numbers directly above it, starting with a 1 at the top. For example, the first few rows of Pascal's Triangle are: \n1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1\n\nYour task is to generate and return the triangle as a list of lists.",
    "topic": "Dynamic Programming",
    "subtopic": "Combinatorics",
    "tags": [
      "Dynamic Programming",
      "Combinatorics",
      "Triangle"
    ],
    "input_format": "An integer numRows (1 <= numRows <= 30).",
    "output_format": "A list of lists representing the first numRows of Pascal's Triangle.",
    "constraints": [
      "1 <= numRows <= 30"
    ],
    "examples": [
      {
        "input": "numRows = 5",
        "output": "[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
        "explanation": "The first 5 rows of Pascal's Triangle are generated as shown in the output."
      },
      {
        "input": "numRows = 1",
        "output": "[[1]]",
        "explanation": "For numRows = 1, the triangle contains only the first row."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a loop to generate each row based on the previous one.",
      "Each element can be computed as the sum of the two elements above it."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Bulb Switcher",
    "description": "You have n bulbs that are initially turned off. Your task is to toggle the bulbs according to the following rules: For each i-th bulb, you will toggle every bulb that is a multiple of i (i.e., bulb i, bulb 2i, bulb 3i, ...). The task is to determine how many bulbs will be on after performing these operations.",
    "topic": "Mathematics",
    "subtopic": "Number Theory",
    "tags": [
      "Math",
      "Simulation",
      "Counting"
    ],
    "input_format": "An integer n representing the number of bulbs.",
    "output_format": "An integer representing the count of bulbs that are on after the operations.",
    "constraints": [
      "0 <= n <= 1000"
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "1",
        "explanation": "After toggling: 1st bulb (on), 2nd bulb (off), 3rd bulb (off). Number of bulbs on = 1."
      },
      {
        "input": "n = 10",
        "output": "3",
        "explanation": "After toggling, bulbs at positions 1, 4, and 9 are on. Total on = 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how many times each bulb is toggled.",
      "Think about the properties of perfect squares."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Happy Number",
    "description": "A happy number is defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. Those numbers for which this process ends in 1 are happy numbers. Return true if the given number is a happy number, and false if it is not.",
    "topic": "Mathematics",
    "subtopic": "Number Theory",
    "tags": [
      "Math",
      "Number Theory",
      "Recursion"
    ],
    "input_format": "An integer n representing the number to check.",
    "output_format": "A boolean indicating whether the number is a happy number.",
    "constraints": [
      "1 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "n = 19",
        "output": "true",
        "explanation": "1^2 + 9^2 = 82, 8^2 + 2^2 = 68, 6^2 + 8^2 = 100, 1^2 + 0^2 + 0^2 = 1."
      },
      {
        "input": "n = 2",
        "output": "false",
        "explanation": "2 leads to 4, 4 leads to 16, 16 leads to 37, 37 leads to 58, 58 leads to 89, 89 leads to 145, 145 leads to 42, 42 leads to 20, and finally leads back to 4. This results in a cycle."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of seen numbers to detect cycles.",
      "Break down numbers into their digits and compute the square."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "The solution will return valid indices."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a hash map to store numbers and their indices.",
      "Remember that you can only use each number once."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes 'n' steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "topic": "Dynamic Programming",
    "subtopic": "Fibonacci Sequence",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Fibonacci"
    ],
    "input_format": "An integer n representing the number of steps in the staircase.",
    "output_format": "An integer representing the number of distinct ways to climb to the top.",
    "constraints": [
      "1 <= n <= 45"
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "There are two ways to climb the staircase: 1 step + 1 step or 2 steps."
      },
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "There are three ways to climb the staircase: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a dynamic programming approach to store results.",
      "Think about the relation to the Fibonacci sequence."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices representing the stock prices on different days.",
    "output_format": "An integer representing the maximum profit that can be achieved.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to keep track of the minimum price encountered so far.",
      "Calculate the potential profit at each step, updating the maximum profit."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Palindrome Number",
    "description": "Given a positive integer, determine whether it is a palindrome. A palindrome is a number that remains the same when its digits are reversed. For example, 121 is a palindrome, but 123 is not.",
    "topic": "Math",
    "subtopic": "Number Theory",
    "tags": [
      "Palindrome",
      "Math",
      "Number Theory"
    ],
    "input_format": "A single integer x, where 0 <= x <= 2^31 - 1.",
    "output_format": "Return true if x is a palindrome, otherwise return false.",
    "constraints": [
      "0 <= x <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "x = 121",
        "output": "true",
        "explanation": "121 reads the same backward as forward."
      },
      {
        "input": "x = -121",
        "output": "false",
        "explanation": "-121 reads 121- which is not the same."
      },
      {
        "input": "x = 10",
        "output": "false",
        "explanation": "10 reads 01 backward which is not the same."
      },
      {
        "input": "x = 12321",
        "output": "true",
        "explanation": "12321 reads the same backward as forward."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how to reverse the number.",
      "You can also convert the number to a string and compare."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Rotate Array",
    "description": "Given an array of integers nums and an integer k, rotate the array to the right by k steps, where k is non-negative.",
    "topic": "Array",
    "subtopic": "Manipulation",
    "tags": [
      "Array",
      "Rotation",
      "In-place"
    ],
    "input_format": "An array of integers nums followed by a non-negative integer k.",
    "output_format": "The rotated array after performing k rotations.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= k <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7], k = 3",
        "output": "[5, 6, 7, 1, 2, 3, 4]",
        "explanation": "Rotating the array to the right by 3 steps gives [5, 6, 7, 1, 2, 3, 4]."
      },
      {
        "input": "nums = [-1, -100, 3, 99], k = 2",
        "output": "[3, 99, -1, -100]",
        "explanation": "Rotating the array to the right by 2 steps results in [3, 99, -1, -100]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the effective rotation using modulo operation.",
      "Try to achieve the result in-place without using extra space."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Roman to Integer",
    "description": "Given a string representing a roman numeral, convert it to an integer. The input is guaranteed to be within the range from 1 to 3999.",
    "topic": "String",
    "subtopic": "Parsing",
    "tags": [
      "String",
      "Parsing",
      "Conversion"
    ],
    "input_format": "A single string s representing a Roman numeral.",
    "output_format": "An integer representing the value of the Roman numeral.",
    "constraints": [
      "1 <= s.length <= 15",
      "s is a valid roman numeral in the range from 1 to 3999."
    ],
    "examples": [
      {
        "input": "s = 'III'",
        "output": "3",
        "explanation": "The roman numeral 'III' is equal to 3."
      },
      {
        "input": "s = 'IV'",
        "output": "4",
        "explanation": "'IV' represents 4."
      },
      {
        "input": "s = 'IX'",
        "output": "9",
        "explanation": "'IX' represents 9."
      },
      {
        "input": "s = 'LVIII'",
        "output": "58",
        "explanation": "'L' is 50, 'V' is 5, and 'III' is 3. Their sum is 50 + 5 + 3 = 58."
      },
      {
        "input": "s = 'MCMXCIV'",
        "output": "1994",
        "explanation": "'M' is 1000, 'CM' is 900, 'XC' is 90, and 'IV' is 4. Their sum is 1000 + 900 + 90 + 4 = 1994."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Create a mapping of roman numerals to their integer values.",
      "Iterate through the input string and add/subtract values based on the rules of Roman numeral formation."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. A subarray is a contiguous part of an array.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Max Subarray"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum sum of the contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]",
        "output": "6",
        "explanation": "The contiguous subarray [4, -1, 2, 1] has the largest sum 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The only element is 1."
      },
      {
        "input": "nums = [5, 4, -1, 7, 8]",
        "output": "23",
        "explanation": "The contiguous subarray [5, 4, -1, 7, 8] has the largest sum 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to keep track of the maximum sum while iterating through the array.",
      "Consider using a variable to store the current maximum sum."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Delete and Earn",
    "description": "You are given an array of integers, 'nums'. You can delete any number from the array, gaining the value of that number, but if you delete a number 'x', you must also delete all instances of 'x-1' and 'x+1'. Your goal is to maximize the total amount of money you can earn by deleting numbers strategically. Determine the maximum amount of money you can earn.",
    "topic": "Dynamic Programming",
    "subtopic": "Optimization",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum amount of money that can be earned.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "0 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [3, 4, 2]",
        "output": "6",
        "explanation": "Delete 4 to earn 4, then delete 3 to earn 3. Total earnings = 4 + 2 = 6."
      },
      {
        "input": "nums = [2, 2, 3, 3, 3, 4]",
        "output": "9",
        "explanation": "Delete 3 to earn 3 * 3 = 9. Deleting 2 or 4 would earn less."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how deleting a number affects adjacent numbers.",
      "Consider using a frequency array to represent the total value for each unique number."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Sum of Values at Indices With K Set Bits",
    "description": "Given an array of integers 'nums' and an integer 'k', return the sum of all values at the indices where the binary representation of the index has exactly 'k' set bits (1s).",
    "topic": "Array",
    "subtopic": "Bit Manipulation",
    "tags": [
      "Array",
      "Bit Manipulation",
      "Sum"
    ],
    "input_format": "An array of integers nums and an integer k.",
    "output_format": "An integer representing the sum of all values at the specified indices.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^6",
      "0 <= k <= 20"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5], k = 2",
        "output": "6",
        "explanation": "Indices with binary representations having 2 set bits are 3 (011) and 5 (101). Their values are 4 and 2. Sum is 4 + 2 = 6."
      },
      {
        "input": "nums = [10, 15, 20, 25, 30], k = 1",
        "output": "15",
        "explanation": "Index 1 (001) has 1 set bit. The value at this index is 15. The sum is 15."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use bit manipulation to count the number of set bits at each index."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Find Subsequence of Length K With the Largest Sum",
    "description": "Given an array of integers and an integer K, return the largest sum of any subsequence of length K. A subsequence is defined as a sequence that can be derived from the array by deleting some elements without changing the order of the remaining elements.",
    "topic": "Array",
    "subtopic": "Subsequence",
    "tags": [
      "Array",
      "Subsequence",
      "Sum"
    ],
    "input_format": "An array of integers `nums` and an integer `K`.",
    "output_format": "An integer representing the largest sum of any subsequence of length K.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "1 <= K <= nums.length",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5], K = 3",
        "output": "12",
        "explanation": "The largest subsequence of length 3 is [3, 4, 5]. Their sum is 3 + 4 + 5 = 12."
      },
      {
        "input": "nums = [-1, -2, -3, -4, -5], K = 2",
        "output": "-3",
        "explanation": "The largest subsequence of length 2 is [-1, -2]. Their sum is -1 + -2 = -3."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Sort the array and pick the largest K elements.",
      "Consider using a max-heap or priority queue for efficiency."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Maximum Area of Longest Diagonal Rectangle",
    "description": "Given an array of integers representing the length of the sides of rectangles, find the maximum area of a rectangle whose diagonal is the longest among all the rectangles that can be formed using the given sides. The rectangles can have two sides from the array, and each rectangle can only use each side once.",
    "topic": "Geometry",
    "subtopic": "Rectangle Properties",
    "tags": [
      "Geometry",
      "Rectangle",
      "Area",
      "Max"
    ],
    "input_format": "An array of integers sides representing the lengths of the sides.",
    "output_format": "An integer representing the maximum area of the rectangle with the longest diagonal.",
    "constraints": [
      "2 <= sides.length <= 1000",
      "1 <= sides[i] <= 10000"
    ],
    "examples": [
      {
        "input": "sides = [4, 5, 6, 7]",
        "output": "28",
        "explanation": "The rectangle with sides 4 and 7 has the longest diagonal, and its area is 4 * 7 = 28."
      },
      {
        "input": "sides = [1, 2, 3, 4, 5]",
        "output": "20",
        "explanation": "The rectangle with sides 4 and 5 has the longest diagonal, and its area is 4 * 5 = 20."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "To find the longest diagonal, consider the formula for the diagonal length.",
      "The area of a rectangle can be computed as length * width."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Ant on the Boundary",
    "description": "An ant is walking on a rectangular boundary defined by width w and height h. The ant starts at the bottom-left corner of the rectangle (0, 0) and can move up, down, left, or right. Your task is to determine the number of distinct positions the ant can reach within the boundary given the maximum number of steps it can take, k. The ant cannot step outside the boundary. Positions are represented as 2D coordinates.",
    "topic": "Geometry",
    "subtopic": "Grid Traversal",
    "tags": [
      "Geometry",
      "Boundary",
      "Grid",
      "Traversal"
    ],
    "input_format": "Three integers w (width), h (height), and k (maximum steps).",
    "output_format": "An integer representing the number of distinct positions the ant can reach.",
    "constraints": [
      "1 <= w, h <= 100",
      "0 <= k <= 100"
    ],
    "examples": [
      {
        "input": "w = 3, h = 3, k = 1",
        "output": "5",
        "explanation": "The ant can reach positions: (0,0), (0,1), (1,0), (1,1), (0,0) - total 5 distinct positions."
      },
      {
        "input": "w = 5, h = 4, k = 2",
        "output": "13",
        "explanation": "The ant can reach positions within a radius of 2 steps. The total distinct reachable positions count to 13."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider the edges of the rectangle and ensure you do not count positions outside the boundary.",
      "Use a set to keep track of distinct positions."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Count Tested Devices After Test Operations",
    "description": "You have a list of devices represented by integers, and each integer indicates a unique device identifier. Each time a test operation is performed on a device, it can be tested or untested. The device is counted as tested if it has been tested at least once. Given a list of test operations, your task is to determine the total number of unique devices that were tested at least once.",
    "topic": "Set",
    "subtopic": "Unique Elements",
    "tags": [
      "Set",
      "HashTable",
      "Unique"
    ],
    "input_format": "A list of integers representing test operations, where each integer corresponds to a device identifier.",
    "output_format": "An integer representing the count of unique tested devices.",
    "constraints": [
      "1 <= operations.length <= 10^5",
      "1 <= operations[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "operations = [1, 2, 3, 2, 1]",
        "output": "3",
        "explanation": "The unique tested devices are 1, 2, and 3."
      },
      {
        "input": "operations = [4, 4, 4, 4]",
        "output": "1",
        "explanation": "Only device 4 was tested."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a set to keep track of unique device identifiers.",
      "The length of the set will give you the count of unique devices."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Permutation Difference between Two Strings",
    "description": "Given two strings, you need to find the minimum number of character swaps required to transform the first string into a permutation of the second string. If it's not possible to obtain a permutation, return -1.",
    "topic": "Strings",
    "subtopic": "Character Manipulation",
    "tags": [
      "String",
      "Permutation",
      "Greedy"
    ],
    "input_format": "Two strings, s1 and s2, of equal length.",
    "output_format": "An integer representing the minimum number of swaps, or -1 if a permutation is not possible.",
    "constraints": [
      "1 <= s1.length, s2.length <= 10^5",
      "s1 and s2 consist of lowercase alphabets only."
    ],
    "examples": [
      {
        "input": "s1 = 'abc', s2 = 'bca'",
        "output": "1",
        "explanation": "One swap is needed: swap 'a' and 'b' to transform 'abc' into 'bca'."
      },
      {
        "input": "s1 = 'abcd', s2 = 'efgh'",
        "output": "-1",
        "explanation": "It is impossible to form a permutation of 'abcd' from 'efgh' as they contain different characters."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the frequency of each character in both strings.",
      "The difference in character counts will help determine the number of swaps."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Minimum Right Shifts to Sort the Array",
    "description": "Given an array of integers, your task is to determine the minimum number of right shifts required to sort the array. A right shift consists of moving the last element of the array to the beginning. If the array is already sorted, no shifts are required.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Shifting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the minimum number of right shifts required to sort the array.",
    "constraints": [
      "1 <= nums.length <= 100",
      "-10^3 <= nums[i] <= 10^3"
    ],
    "examples": [
      {
        "input": "nums = [3, 4, 5, 1, 2]",
        "output": "3",
        "explanation": "We need to shift the last three elements (5, 1, 2) to the front to make the array sorted in ascending order."
      },
      {
        "input": "nums = [1, 2, 3, 4, 5]",
        "output": "0",
        "explanation": "The array is already sorted, so no shifts are required."
      },
      {
        "input": "nums = [2, 1]",
        "output": "1",
        "explanation": "One right shift will sort the array to [1, 2]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider the properties of a sorted array to find the point of shifts.",
      "Keep track of the longest sorted suffix in the array."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Reverse Integer",
    "description": "Given a 32-bit signed integer, reverse the digits of the integer. If reversing the integer causes it to go out of the 32-bit signed integer range, return 0. Assume the environment does not allow you to store 64-bit integers.",
    "topic": "Math",
    "subtopic": "Integer Manipulation",
    "tags": [
      "Math",
      "Integer",
      "String Manipulation"
    ],
    "input_format": "A single 32-bit signed integer x.",
    "output_format": "A 32-bit signed integer representing the reversed digits of x, or 0 if it overflows.",
    "constraints": [
      "-2^31 <= x <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "x = 123",
        "output": "321",
        "explanation": "Reversing the digits of 123 gives 321."
      },
      {
        "input": "x = -456",
        "output": "-654",
        "explanation": "Reversing the digits of -456 gives -654."
      },
      {
        "input": "x = 120",
        "output": "21",
        "explanation": "Reversing the digits of 120 gives 21, as leading zeros are not counted."
      },
      {
        "input": "x = 1534236469",
        "output": "0",
        "explanation": "Reversing the digits of 1534236469 causes overflow, so the output is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using string manipulation for reversing the digits.",
      "Pay attention to negative numbers and leading zeros.",
      "Check for overflow conditions after reversing."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. You may assume that the input string has at least one character and could be empty.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Palindrome",
      "Dynamic Programming"
    ],
    "input_format": "A string s of length n (0 <= n <= 1000).",
    "output_format": "A string representing the longest palindromic substring in s.",
    "constraints": [
      "0 <= n <= 1000",
      "s consists of only printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"babad\"",
        "output": "\"bab\"",
        "explanation": "Both \"bab\" and \"aba\" are valid longest palindromic substrings, but we return \"bab\"."
      },
      {
        "input": "s = \"cbbd\"",
        "output": "\"bb\"",
        "explanation": "The longest palindromic substring is \"bb\"."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around the center of the palindrome.",
      "You can have two cases for palindromes: odd-length and even-length palindromes."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array. The initial elements of nums1 denote the elements that should be merged, and the rest of nums1 are filled with zeros. You must solve it in-place without using extra space.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "In-place"
    ],
    "input_format": "Two integer arrays nums1 and nums2, where nums1 has a size of m + n, initialized with zeroes for the last n elements.",
    "output_format": "A single sorted array merged in-place from nums1 and nums2.",
    "constraints": [
      "1 <= m + n <= 200",
      "0 <= m, n <= 100",
      "-10^9 <= nums1[i], nums2[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
        "output": "[1,2,2,3,5,6]",
        "explanation": "After merging, the array becomes [1,2,2,3,5,6]."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "No elements to merge from nums2, so the array remains [1]."
      },
      {
        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "output": "[1]",
        "explanation": " nums1 has no elements. After merging, it becomes [1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider utilizing two pointers approach to traverse both arrays.",
      "Start merging from the end of the nums1 to avoid overwriting elements."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Longest Common Prefix",
    "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string. Assume all input strings are lowercase letters a-z.",
    "topic": "String",
    "subtopic": "Searching",
    "tags": [
      "String",
      "Prefix",
      "Searching"
    ],
    "input_format": "An array of strings 'strs' where 1 <= strs.length <= 200 and 0 <= strs[i].length <= 200.",
    "output_format": "A string representing the longest common prefix. If there is none, return an empty string.",
    "constraints": [
      "1 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "All strings consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"flower\", \"flow\", \"flight\"]",
        "output": "\"fl\"",
        "explanation": "The longest common prefix is \"fl\"."
      },
      {
        "input": "strs = [\"dog\", \"racecar\", \"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the input strings."
      },
      {
        "input": "strs = [\"apple\", \"app\", \"apricot\"]",
        "output": "\"ap\"",
        "explanation": "The longest common prefix is \"ap\"."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider comparing characters at each index.",
      "Use a loop until you find a mismatch."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Spiral Matrix",
    "description": "Given a 2D array (matrix) of integers, return all elements of the matrix in spiral order. The spiral order starts from the top-left corner, goes to the right, then down the last column, then to the left at the bottom row, and finally up the first column, repeating this process until all elements have been traversed.",
    "topic": "Matrix",
    "subtopic": "Traversal",
    "tags": [
      "Matrix",
      "Traversal",
      "Spiral"
    ],
    "input_format": "A 2D array of integers matrix of size m x n.",
    "output_format": "A list of integers representing the elements of the matrix in spiral order.",
    "constraints": [
      "1 <= m, n <= 10^4",
      "1 <= matrix[i][j] <= 10^5"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "[1, 2, 3, 6, 9, 8, 7, 4, 5]",
        "explanation": "The elements in spiral order are: 1 -> 2 -> 3 -> 6 -> 9 -> 8 -> 7 -> 4 -> 5."
      },
      {
        "input": "matrix = [[1]]",
        "output": "[1]",
        "explanation": "The only element is 1."
      },
      {
        "input": "matrix = [[1, 2], [3, 4]]",
        "output": "[1, 2, 4, 3]",
        "explanation": "The elements in spiral order are: 1 -> 2 -> 4 -> 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use four pointers to keep track of the boundaries of the current layer.",
      "Iterate while the start row is less than or equal to the end row and the start column is less than or equal to the end column."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Shortest Palindrome",
    "description": "Given a string s, you need to return the shortest palindrome by adding characters in front of s. A palindrome is a string that reads the same from both directions. You must find the shortest such palindrome which can be formed by adding characters to the beginning of the string.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Palindrome",
      "Dynamic Programming"
    ],
    "input_format": "A single string s consisting of lowercase letters.",
    "output_format": "A string representing the shortest palindrome formed by adding characters to the beginning of s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of lowercase letters only."
    ],
    "examples": [
      {
        "input": "s = \"aacecaaa\"",
        "output": "aaacecaaa",
        "explanation": "By adding 'aa' in front of 'aacecaaa', we form 'aaacecaaa' which is a palindrome."
      },
      {
        "input": "s = \"abcd\"",
        "output": "dcbabcd",
        "explanation": "By adding 'dcb' in front of 'abcd', we form 'dcbabcd' which is a palindrome."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a combination of string matching algorithms.",
      "Think about how to check whether a substring is a palindrome."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Sort Integers by The Number of 1 Bits",
    "description": "Given an array of integers, sort the array in ascending order based on the number of 1 bits in their binary representation. If two numbers have the same number of 1 bits, sort them in ascending order by their value.",
    "topic": "Sorting",
    "subtopic": "Custom Sort",
    "tags": [
      "Sorting",
      "Binary",
      "Custom Sort"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An array of integers sorted based on the number of 1 bits.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1023, 5, 7, 8, 15]",
        "output": "[8, 5, 7, 15, 1023]",
        "explanation": "The binary representations are: 1023 -> '1111111111' (10 1s), 5 -> '101' (2 1s), 7 -> '111' (3 1s), 8 -> '1000' (1 1s), 15 -> '1111' (4 1s). Sorted by number of 1 bits and then by value."
      },
      {
        "input": "nums = [3, 1, 2, 2]",
        "output": "[1, 2, 2, 3]",
        "explanation": "Binary representations: 3 -> '11' (2 1s), 1 -> '1' (1 1s), 2 -> '10' (1 1s). Sorted results: [1, 2, 2, 3]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a helper function to count the number of 1 bits.",
      "Consider using a tuple to sort first by the count of 1 bits and then by value."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within a string.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A string s consists of English letters, digits, symbols and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 5 * 10^4",
      "s consists of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The answer is 'abc', with the length of 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The answer is 'b', with the length of 1."
      },
      {
        "input": "s = \"pwwkew\"",
        "output": "3",
        "explanation": "The answer is 'wke', with the length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window to keep track of the characters you have seen.",
      "Use a hashmap to store the index of the characters."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets (a, b, c) in the array which gives the sum of zero. Note that the solution set must not contain duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Hash Table"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of unique triplets that sum up to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The triplets that sum to zero are [-1, -1, 2] and [-1, 0, 1]."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "There are no elements in the array, so there can be no triplets."
      },
      {
        "input": "nums = [0, 0, 0, 0]",
        "output": "[[0, 0, 0]]",
        "explanation": "The only triplet that sums to zero is [0, 0, 0]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the array to easily avoid duplicates.",
      "Use a two-pointer approach to find pairs that together with the current element sum to zero.",
      "Skip duplicate elements to ensure unique triplets."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Find Peak Element",
    "description": "A peak element in an array is an element that is greater than its neighbors. Given an array of integers, you need to find one peak element and return its index. If the array contains multiple peaks, return the index of any one of them. The edge elements can only be compared to their one neighbor.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Binary Search",
      "Peak Element"
    ],
    "input_format": "An integer array nums.",
    "output_format": "An integer representing the index of one peak element.",
    "constraints": [
      "1 <= nums.length <= 10000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, 20, 4, 1]",
        "output": "2",
        "explanation": "The peak element is 20 at index 2."
      },
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "2",
        "explanation": "The peak element is 3 at index 2."
      },
      {
        "input": "nums = [1, 2, 1, 3, 5, 6, 4]",
        "output": "1 or 5",
        "explanation": "Both indices 1 (value 2) and 5 (value 6) are peaks."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try using binary search to find the peak efficiently.",
      "Consider the slope to determine if you should keep going left or right."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Perfect Squares",
    "description": "Given a positive integer n, you need to determine the least number of perfect square numbers that sum to n. A perfect square is an integer that is the square of an integer, e.g., 1, 4, 9, 16, etc.",
    "topic": "Dynamic Programming",
    "subtopic": "Coin Change Problem",
    "tags": [
      "Dynamic Programming",
      "Mathematics",
      "BFS"
    ],
    "input_format": "A single integer n (1 <= n <= 10^4) representing the target sum.",
    "output_format": "An integer representing the least number of perfect square numbers that sum to n.",
    "constraints": [
      "1 <= n <= 10^4"
    ],
    "examples": [
      {
        "input": "n = 12",
        "output": "3",
        "explanation": "12 can be represented as 4 + 4 + 4 (three perfect squares)."
      },
      {
        "input": "n = 13",
        "output": "2",
        "explanation": "13 can be represented as 4 + 9 (two perfect squares)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to express n as a sum of squares and minimize the count.",
      "Consider using dynamic programming to store results of subproblems."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Integer Break",
    "description": "Given an integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can obtain by breaking the integer n.",
    "topic": "Mathematics",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Mathematics",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An integer n (2 <= n <= 58).",
    "output_format": "An integer representing the maximum product obtained by breaking the integer n.",
    "constraints": [
      "2 <= n <= 58"
    ],
    "examples": [
      {
        "input": "n = 10",
        "output": "36",
        "explanation": "The best way to break 10 is 3 + 3 + 4, and the product is 3 * 3 * 4 = 36."
      },
      {
        "input": "n = 2",
        "output": "1",
        "explanation": "The only way to break 2 is 1 + 1, and the product is 1 * 1 = 1."
      },
      {
        "input": "n = 5",
        "output": "6",
        "explanation": "The best way to break 5 is 2 + 3, and the product is 2 * 3 = 6."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider breaking n into parts of 2 and 3.",
      "The product increases as the parts approach 3."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Majority Element",
    "description": "Given an array of size n, find the majority element. The majority element is the element that appears more than n/2 times in the array. You may assume that the majority element always exists in the array.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Majority Element"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the majority element.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "\u221210^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [2, 2, 1, 1, 1, 2, 2]",
        "output": "2",
        "explanation": "The element 2 appears 4 times while the remaining elements appear less than 3 times. Therefore, 2 is the majority element."
      },
      {
        "input": "nums = [3, 3, 4, 2, 4, 4, 2, 4, 4]",
        "output": "4",
        "explanation": "The element 4 appears 5 times while other elements appear less than 4 times. Thus, 4 is the majority element."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a hash map to count occurrences.",
      "Think about the properties of the majority element."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, write a function to determine if t is an anagram of s. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Sorting & Hashing",
    "tags": [
      "String",
      "Hashing",
      "Sorting"
    ],
    "input_format": "Two strings s and t. Both strings consist of lowercase English letters.",
    "output_format": "A boolean value indicating whether t is an anagram of s.",
    "constraints": [
      "1 <= s.length, t.length <= 5 * 10^4",
      "s and t consist of lowercase English letters"
    ],
    "examples": [
      {
        "input": "s = \"anagram\", t = \"nagaram\"",
        "output": "true",
        "explanation": "The string t is an anagram of s as both contain the same letters in different orders."
      },
      {
        "input": "s = \"rat\", t = \"car\"",
        "output": "false",
        "explanation": "The string t is not an anagram of s as they do not contain the same letters."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the frequency of each character in both strings.",
      "Use a hash table or array to store the character counts."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. Note that an empty string is also considered valid.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s consisting of parentheses.",
    "output_format": "A boolean value indicating whether the input string is valid.",
    "constraints": [
      "0 <= s.length <= 10^4",
      "s consists of parentheses only '()', '{}', '[]'."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The parentheses are correctly opened and closed."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "All the brackets are correctly matched and closed."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The brackets are not correctly matched."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The brackets are not closed in the correct order."
      },
      {
        "input": "s = '{[]}'",
        "output": "true",
        "explanation": "All the brackets are correctly matched and closed."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack data structure to solve this problem.",
      "Check for matching pairs of brackets."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Add Two Numbers",
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contains a single digit. Add the two numbers and return it as a linked list. The output should also be in the same reverse order format.",
    "topic": "Linked List",
    "subtopic": "Addition",
    "tags": [
      "Linked List",
      "Simulation",
      "Addition"
    ],
    "input_format": "Two linked lists, l1 and l2, representing two non-negative integers.",
    "output_format": "A linked list representing the sum of the two numbers.",
    "constraints": [
      "The number of nodes in each linked list is in the range [1, 100].",
      "0 <= Node.val <= 9",
      "It is guaranteed that in the linked list, there are no leading zeroes."
    ],
    "examples": [
      {
        "input": "l1 = [2, 4, 3], l2 = [5, 6, 4]",
        "output": "[7, 0, 8]",
        "explanation": "342 + 465 = 807, so the output linked list should be [7, 0, 8]."
      },
      {
        "input": "l1 = [0], l2 = [0]",
        "output": "[0]",
        "explanation": "0 + 0 = 0, so the output linked list should be [0]."
      },
      {
        "input": "l1 = [9, 9, 9, 9, 9, 9, 9], l2 = [9, 9, 9, 9]",
        "output": "[8, 9, 9, 9, 0, 0, 1]",
        "explanation": "9999999 + 9999 = 10009998, so the output linked list should be [8, 9, 9, 9, 0, 0, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dummy node to simplify the addition process.",
      "Keep track of the carry when adding two digits."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Plus One",
    "description": "Given a non-empty array of digits representing a non-negative integer, increment the integer by one and return the resulting array of digits. The digits are stored such that the most significant digit is at the head of the list, and each element in the array is a single digit.",
    "topic": "Array",
    "subtopic": "Manipulation",
    "tags": [
      "Array",
      "Math",
      "Increment"
    ],
    "input_format": "An array of digits nums where 0 <= nums.length <= 100.",
    "output_format": "An array of digits representing the incremented number.",
    "constraints": [
      "The array may contain leading zeros, but the integer represented is non-negative.",
      "0 <= digits[i] <= 9"
    ],
    "examples": [
      {
        "input": "digits = [1, 2, 3]",
        "output": "[1, 2, 4]",
        "explanation": "Incrementing 123 by one gives 124."
      },
      {
        "input": "digits = [4, 3, 2, 1]",
        "output": "[4, 3, 2, 2]",
        "explanation": "Incrementing 4321 by one gives 4322."
      },
      {
        "input": "digits = [9]",
        "output": "[1, 0]",
        "explanation": "Incrementing 9 by one gives 10."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how to handle carries as you add one to the last digit."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Product of Array Except Self",
    "description": "Given an integer array nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. You must solve it without using the division operation and in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Product",
    "tags": [
      "Array",
      "Product",
      "Prefix Sum"
    ],
    "input_format": "An integer array nums of length n.",
    "output_format": "An integer array output where output[i] is the product of all elements of nums except nums[i].",
    "constraints": [
      "2 <= nums.length <= 10^5",
      "-30 <= nums[i] <= 30",
      "The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer."
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "[24, 12, 8, 6]",
        "explanation": "The product of all numbers except the first number (1) is 2 * 3 * 4 = 24. Similarly, for the other indices."
      },
      {
        "input": "nums = [-1, 1, 0, -3, 3]",
        "output": "[0, 0, 9, 0, 0]",
        "explanation": "For index 0, the product is (1 * 0 * -3 * 3) = 0; for index 1, the product is (-1 * 0 * -3 * 3) = 0; for index 2, the product is (-1 * 1 * -3 * 3) = 9."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using prefix and suffix products to avoid division.",
      "You can build the output array in two passes."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis, form a container, such that the container contains the most water. Return the area of water that the container can contain.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy"
    ],
    "input_format": "An array of integers heights where heights[i] represents the height of the line at position i.",
    "output_format": "An integer representing the maximum area of water that can be contained.",
    "constraints": [
      "2 <= heights.length <= 10^5",
      "0 <= heights[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "heights = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The maximum area is formed between the lines at indices 1 and 8, which gives an area of 7 * 7 = 49."
      },
      {
        "input": "heights = [1,1]",
        "output": "1",
        "explanation": "The maximum area is formed between the two lines, which gives an area of 1 * 1 = 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try using a two-pointer approach to maximize area."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Fibonacci Number",
    "description": "The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Given an integer n, return the n-th Fibonacci number.",
    "topic": "Dynamic Programming",
    "subtopic": "Recursion",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Math"
    ],
    "input_format": "An integer n (0 <= n <= 30).",
    "output_format": "An integer representing the n-th Fibonacci number.",
    "constraints": [
      "0 <= n <= 30"
    ],
    "examples": [
      {
        "input": "n = 5",
        "output": "5",
        "explanation": "The Fibonacci sequence is 0, 1, 1, 2, 3, 5. Thus, the 5th Fibonacci number is 5."
      },
      {
        "input": "n = 10",
        "output": "55",
        "explanation": "The Fibonacci sequence up to the 10th position is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. Hence, the 10th Fibonacci number is 55."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using memoization to optimize your solution.",
      "You can also solve it iteratively."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Remove Duplicates from Sorted Array",
    "description": "Given a sorted array of integers, your task is to remove the duplicates in-place such that each element appears only once and returns the new length of the array. Do not allocate extra space for another array; you must do this by modifying the input array directly.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "In-place"
    ],
    "input_format": "A sorted array of integers nums.",
    "output_format": "An integer representing the new length of the array after duplicates have been removed.",
    "constraints": [
      "1 <= nums.length <= 3 * 10^4",
      "-100 <= nums[i] <= 100",
      "The input array is sorted in non-decreasing order."
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 2]",
        "output": "2",
        "explanation": "After removing duplicates, the array would be [1, 2]. The new length is 2."
      },
      {
        "input": "nums = [0,0,1,1,1,2,2,3,3,4]",
        "output": "5",
        "explanation": "After removing duplicates, the array would be [0, 1, 2, 3, 4]. The new length is 5."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to track the current position and the last unique element.",
      "Try to modify the array in place and minimize the use of extra space."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Count Primes",
    "description": "Given an integer n, return the number of prime numbers that are strictly less than n. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers.",
    "topic": "Math",
    "subtopic": "Sieve of Eratosthenes",
    "tags": [
      "Math",
      "Prime",
      "Counting"
    ],
    "input_format": "An integer n (2 <= n <= 10^6).",
    "output_format": "An integer representing the number of prime numbers less than n.",
    "constraints": [
      "2 <= n <= 10^6"
    ],
    "examples": [
      {
        "input": "n = 10",
        "output": "4",
        "explanation": "The prime numbers less than 10 are 2, 3, 5, and 7."
      },
      {
        "input": "n = 20",
        "output": "8",
        "explanation": "The prime numbers less than 20 are 2, 3, 5, 7, 11, 13, 17, and 19."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the Sieve of Eratosthenes algorithm for optimal performance.",
      "Count only numbers greater than 1.",
      "Mark non-prime numbers in a boolean array."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Nth Digit",
    "description": "Given an integer n, return the nth digit of the infinite sequence formed by concatenating the positive integers: 123456789101112131415... For example, the 10th digit is 1, and the 11th digit is 0, as the sequence is formed by concatenating all positive integers in order.",
    "topic": "String",
    "subtopic": "Digit Extraction",
    "tags": [
      "String",
      "Mathematics",
      "Digit Extraction"
    ],
    "input_format": "An integer n, where 1 <= n <= 2 * 10^9.",
    "output_format": "An integer representing the nth digit in the infinite sequence.",
    "constraints": [
      "1 <= n <= 2 * 10^9"
    ],
    "examples": [
      {
        "input": "10",
        "output": "1",
        "explanation": "The sequence is 12345678910..., the 10th digit is '1'."
      },
      {
        "input": "11",
        "output": "0",
        "explanation": "The sequence is 12345678910..., the 11th digit is '0'."
      },
      {
        "input": "12",
        "output": "1",
        "explanation": "The sequence is 1234567891011..., the 12th digit is '1'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how many digits each number contributes to the sequence.",
      "Use mathematical calculations rather than generating the full sequence."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Reverse Vowels of a String",
    "description": "Given a string s, reverse only the vowels in the string and return it. The vowels are 'a', 'e', 'i', 'o', 'u' and their uppercase counterparts. You must maintain the original positions of all other characters in the string.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Two Pointers",
      "Manipulation"
    ],
    "input_format": "A single string s consisting of English letters and the punctuation marks.",
    "output_format": "A string with the vowels reversed in the original string.",
    "constraints": [
      "1 <= s.length <= 3 * 10^5",
      "s consists of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "hello",
        "output": "holle",
        "explanation": "The vowels in the string are 'e' and 'o'. Reversing them gives 'h', 'o', 'l', 'l', 'e'."
      },
      {
        "input": "leetcode",
        "output": "leotcede",
        "explanation": "The vowels are 'e', 'e', and 'o'. Reversing them results in 'l', 'e', 'o', 't', 'c', 'e', 'd', 'e'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using two pointers to swap the vowels.",
      "A set can help quickly identify if a character is a vowel."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Find First and Last Position of Element in Sorted Array",
    "description": "Given an array of integers 'nums' sorted in non-decreasing order, find the starting and ending position of a given target value. If the target is not found in the array, return [-1, -1]. You must write an algorithm with O(log n) runtime complexity.",
    "topic": "Binary Search",
    "subtopic": "Searching in Sorted Array",
    "tags": [
      "Binary Search",
      "Array",
      "Searching"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the first and last position of the target, or [-1, -1] if not found.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9",
      "nums is a non-decreasing array."
    ],
    "examples": [
      {
        "input": "nums = [5,7,7,8,8,10], target = 8",
        "output": "[3, 4]",
        "explanation": "The target 8 appears first at index 3 and last at index 4."
      },
      {
        "input": "nums = [5,7,7,8,8,10], target = 6",
        "output": "[-1, -1]",
        "explanation": "The target 6 does not exist in the array."
      },
      {
        "input": "nums = [], target = 0",
        "output": "[-1, -1]",
        "explanation": "The array is empty, and hence the target cannot be found."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to find the target's first and last positions.",
      "You can perform two separate searches, one for the first occurrence and another for the last."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. For example, if you have intervals [1, 3], [2, 6], [8, 10], and [15, 18], the merged intervals would be [1, 6], [8, 10], and [15, 18]. Two intervals are considered overlapping if they share at least one point. Your task is to return a new list of merged intervals.",
    "topic": "Array",
    "subtopic": "Sorting and Merging",
    "tags": [
      "Array",
      "Sorting",
      "Merge"
    ],
    "input_format": "A list of intervals where each interval is represented as a list of two integers [start, end].",
    "output_format": "A list of merged intervals sorted by their start time.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1, 3], [2, 6], [8, 10], [15, 18]]",
        "output": "[[1, 6], [8, 10], [15, 18]]",
        "explanation": "The intervals [1, 3] and [2, 6] overlap, so they are merged into [1, 6]."
      },
      {
        "input": "intervals = [[1, 4], [4, 5]]",
        "output": "[[1, 5]]",
        "explanation": "The intervals [1, 4] and [4, 5] touch, so they are merged into [1, 5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Start by sorting the intervals based on the start time.",
      "Use a loop to merge overlapping intervals."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "House Robber",
    "description": "Given an array of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police. The rule is that you cannot rob two adjacent houses.",
    "topic": "Dynamic Programming",
    "subtopic": "Memoization",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of non-negative integers, nums, where nums[i] represents the amount of money in the i-th house.",
    "output_format": "An integer representing the maximum amount of money that can be robbed.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 400"
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 9, 3, 1]",
        "output": "12",
        "explanation": "Robbing house 1 (amount 7) and house 3 (amount 9) gives us 7 + 9 = 16. However, the optimal way is to rob house 0 (amount 2) and house 2 (amount 9) and house 4 (amount 1) for a total of 2 + 9 + 1 = 12."
      },
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "4",
        "explanation": "Robbing house 1 (amount 2) and house 3 (amount 1) gives us a total of 2 + 1 = 3. But we can also rob house 0 (amount 1) and house 2 (amount 3) for a total of 1 + 3 = 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to keep track of the maximum money that can be robbed up to each house.",
      "Think about the decision at each house. Can you rob it or not?"
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Coin Change",
    "description": "You are given an array of coins where each coin has a denomination. Your task is to determine the minimum number of coins needed to make a certain amount of money. If that amount cannot be made up by any combination of the coins, return -1.",
    "topic": "Dynamic Programming",
    "subtopic": "Coin Change Problem",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of integers coins representing different denominations and an integer amount representing the total amount of money.",
    "output_format": "An integer representing the minimum number of coins needed to make up the amount, or -1 if it is not possible.",
    "constraints": [
      "1 <= coins.length <= 12",
      "1 <= coins[i] <= 2 * 10^4",
      "0 <= amount <= 10^4"
    ],
    "examples": [
      {
        "input": "coins = [1, 2, 5], amount = 11",
        "output": "3",
        "explanation": "The minimum number of coins to make amount 11 is 3 (5 + 5 + 1)."
      },
      {
        "input": "coins = [2], amount = 3",
        "output": "-1",
        "explanation": "It is not possible to make amount 3 with only 2 denomination."
      },
      {
        "input": "coins = [1], amount = 0",
        "output": "0",
        "explanation": "No coins are needed to make amount 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dynamic programming approach to solve this problem.",
      "You can define a dp array where dp[i] represents the minimum number of coins needed for amount i."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Assign Cookies",
    "description": "Assume you have a list of children and a list of cookies. Each child has a greed factor represented by an integer array g, and each cookie has a size represented by an integer array s. Your goal is to distribute the cookies among the children such that each child is assigned at most one cookie, and the cookie's size must be greater than or equal to the child's greed factor. Return the maximum number of children who can be assigned cookies.",
    "topic": "Greedy",
    "subtopic": "Sorting",
    "tags": [
      "Greedy",
      "Sorting",
      "Array"
    ],
    "input_format": "Two integer arrays g and s, where g[i] is the greed factor of the i-th child and s[j] is the size of the j-th cookie.",
    "output_format": "An integer representing the maximum number of children who can be assigned cookies.",
    "constraints": [
      "1 <= g.length, s.length <= 3 * 10^4",
      "0 <= g[i], s[j] <= 10^4"
    ],
    "examples": [
      {
        "input": "g = [1, 2, 3], s = [1, 1]",
        "output": "1",
        "explanation": "Only one child can be satisfied with the given cookies."
      },
      {
        "input": "g = [1, 2], s = [1, 2, 3]",
        "output": "2",
        "explanation": "Both children can be satisfied with the available cookies."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Sort both arrays to facilitate matching.",
      "Use two pointers to keep track of the children and cookies."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Longest Increasing Subsequence",
    "description": "Given an integer array nums, return the length of the longest strictly increasing subsequence.",
    "topic": "Dynamic Programming",
    "subtopic": "Longest Increasing Subsequence",
    "tags": [
      "Dynamic Programming",
      "Subsequence",
      "Array"
    ],
    "input_format": "An integer array nums.",
    "output_format": "An integer representing the length of the longest increasing subsequence.",
    "constraints": [
      "1 <= nums.length <= 2500",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [10, 9, 2, 5, 3, 7, 101, 18]",
        "output": "4",
        "explanation": "The longest increasing subsequence is [2, 3, 7, 101], which has length 4."
      },
      {
        "input": "nums = [0, 1, 0, 3, 2, 3]",
        "output": "4",
        "explanation": "The longest increasing subsequence is [0, 1, 2, 3], which has length 4."
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7]",
        "output": "1",
        "explanation": "The longest increasing subsequence is [7], which has length 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to keep track of the length of the longest subsequence.",
      "Binary search can also optimize your solution for better performance."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Perfect Number",
    "description": "A perfect number is a positive integer that is equal to the sum of its proper positive divisors (excluding itself). For example, the first perfect number is 6 because its divisors are 1, 2, and 3, and 1 + 2 + 3 = 6. Given a number n, determine if it is a perfect number.",
    "topic": "Math",
    "subtopic": "Number Theory",
    "tags": [
      "Math",
      "Number Theory",
      "Divisors"
    ],
    "input_format": "An integer n, where 1 <= n <= 10^8.",
    "output_format": "Return true if n is a perfect number, otherwise return false.",
    "constraints": [
      "1 <= n <= 10^8"
    ],
    "examples": [
      {
        "input": "n = 28",
        "output": "true",
        "explanation": "The divisors of 28 are 1, 2, 4, 7, and 14. Their sum is 1 + 2 + 4 + 7 + 14 = 28."
      },
      {
        "input": "n = 6",
        "output": "true",
        "explanation": "The divisors of 6 are 1, 2, and 3. Their sum is 1 + 2 + 3 = 6."
      },
      {
        "input": "n = 12",
        "output": "false",
        "explanation": "The divisors of 12 are 1, 2, 3, 4, and 6. Their sum is 1 + 2 + 3 + 4 + 6 = 16, which is not equal to 12."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider iterating through the divisors of n up to the square root of n."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Sort Array by Increasing Frequency",
    "description": "Given an array of integers, sort the array in such a way that the elements are ordered by their frequency in increasing order. If two elements have the same frequency, sort them by their value in ascending order.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Frequency"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A sorted array of integers based on their frequency.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 2, 2, 2, 3]",
        "output": "[3, 1, 1, 2, 2, 2]",
        "explanation": "Number 3 appears once (frequency 1), number 1 appears twice (frequency 2), and number 2 appears three times (frequency 3). So the sorted array is [3, 1, 1, 2, 2, 2]."
      },
      {
        "input": "nums = [4, 5, 6, 5, 4, 3]",
        "output": "[3, 4, 4, 5, 5, 6]",
        "explanation": "Number 3 appears once, 4 appears twice, 5 appears twice, and 6 appears once. Hence, after sorting by frequency and value, we get [3, 4, 4, 5, 5, 6]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to count the frequency of each element first.",
      "You may want to use a data structure to store the frequency."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Valid Palindrome",
    "description": "Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring case. A palindrome is a string that reads the same backward as forward.",
    "topic": "String",
    "subtopic": "Two Pointers",
    "tags": [
      "String",
      "Palindrome",
      "Two Pointers"
    ],
    "input_format": "A single string s (1 <= s.length <= 2 * 10^5).",
    "output_format": "A boolean value indicating whether the input string is a valid palindrome.",
    "constraints": [
      "The input string consists only of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"A man, a plan, a canal: Panama\"",
        "output": "true",
        "explanation": "After filtering and converting to the same case, we have 'amanaplanacanalpanama', which is a palindrome."
      },
      {
        "input": "s = \"race a car\"",
        "output": "false",
        "explanation": "After filtering, we get 'raceacar', which is not a palindrome."
      },
      {
        "input": "s = \" \"",
        "output": "true",
        "explanation": "An empty string or a string containing only spaces is considered a palindrome."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to compare characters from both ends of the string.",
      "Ignore all non-alphanumeric characters."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Is Subsequence",
    "description": "Given two strings s and t, return true if s is a subsequence of t, or false otherwise. A string s is a subsequence of t if you can derive s by deleting some characters of t without changing the order of the remaining characters. Note that s does not need to be contiguous, but the characters must appear in the same order.",
    "topic": "String",
    "subtopic": "Subsequence",
    "tags": [
      "String",
      "Subsequence",
      "Two Pointers"
    ],
    "input_format": "Two strings s and t where 0 <= s.length <= 100 and 0 <= t.length <= 1000.",
    "output_format": "A boolean value indicating if s is a subsequence of t.",
    "constraints": [
      "0 <= s.length <= 100",
      "0 <= t.length <= 1000",
      "s and t consist of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"abc\", t = \"ahbgdc\"",
        "output": "true",
        "explanation": "The string 'abc' can be formed from 'ahbgdc' by deleting 'h', 'g', and 'd'."
      },
      {
        "input": "s = \"axc\", t = \"ahbgdc\"",
        "output": "false",
        "explanation": "'axc' cannot be derived from 'ahbgdc' because the 'x' is not present."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to track positions in both strings.",
      "If characters match, move both pointers forward."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Next Greater Element I",
    "description": "You are given two arrays of integers, nums1 and nums2, where nums1 is a subset of nums2. For each element x in nums1, find the next greater element in nums2. If no such element exists, return -1 for that element. The next greater element for an element x is the first greater element that is to the right of x in nums2.",
    "topic": "Array",
    "subtopic": "Monotonic Stack",
    "tags": [
      "Array",
      "Stack",
      "Monotonic"
    ],
    "input_format": "Two arrays of integers, nums1 and nums2, where nums1 is a subset of nums2.",
    "output_format": "An array of integers representing the next greater elements for each element in nums1.",
    "constraints": [
      "1 <= nums1.length <= 1000",
      "1 <= nums2.length <= 1000",
      "0 <= nums1[i], nums2[i] <= 10^4",
      "All elements in nums1 and nums2 are unique."
    ],
    "examples": [
      {
        "input": "nums1 = [4, 1, 2], nums2 = [1, 2, 3, 4]",
        "output": "[-1, 2, -1]",
        "explanation": "For 4, there is no greater element, hence -1. For 1, the next greater element is 2, and for 2, there is no greater element."
      },
      {
        "input": "nums1 = [2, 4], nums2 = [1, 2, 3, 4]",
        "output": "[3, -1]",
        "explanation": "For 2, the next greater element is 3, and for 4, there is no greater element, hence -1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a stack to store elements while iterating through nums2.",
      "A map can help to track the next greater elements."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
    "topic": "Linked List",
    "subtopic": "Reversing a Linked List",
    "tags": [
      "Linked List",
      "Reversal",
      "Pointer Manipulation"
    ],
    "input_format": "The input is the head of a singly linked list.",
    "output_format": "Return the head of the reversed linked list.",
    "constraints": [
      "The number of nodes in the linked list is in the range [0, 5000].",
      "-5000 <= Node.val <= 5000"
    ],
    "examples": [
      {
        "input": "[1,2,3,4,5]",
        "output": "[5,4,3,2,1]",
        "explanation": "The original linked list is 1 -> 2 -> 3 -> 4 -> 5. After reversing, it becomes 5 -> 4 -> 3 -> 2 -> 1."
      },
      {
        "input": "[1]",
        "output": "[1]",
        "explanation": "A single node list remains the same after reversal."
      },
      {
        "input": "[]",
        "output": "[]",
        "explanation": "An empty list remains empty after reversal."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using three pointers to keep track of the previous, current, and next nodes."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Remove Element",
    "description": "Given an array of integers nums and an integer val, write a function to remove all instances of val in nums in-place and return the new length of the array. Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.",
    "topic": "Array",
    "subtopic": "In-place Modifications",
    "tags": [
      "Array",
      "Two Pointers",
      "In-place"
    ],
    "input_format": "An array of integers nums followed by an integer val.",
    "output_format": "An integer representing the new length of the array after removing all instances of val.",
    "constraints": [
      "0 <= nums.length <= 100",
      "0 <= nums[i] <= 50",
      "0 <= val <= 50"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 2, 3], val = 3",
        "output": "2",
        "explanation": "After removing 3, the array becomes [2, 2] with new length 2."
      },
      {
        "input": "nums = [0, 1, 2, 2, 3, 0, 4, 2], val = 2",
        "output": "5",
        "explanation": "After removing 2, the array becomes [0, 1, 3, 0, 4] with new length 5."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using two pointers to manage the elements in place."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Candy Distribution",
    "description": "In a classroom, students are given candies based on their rankings. Each student should receive at least one candy. Students with a higher ranking than their neighbors should receive more candies than those neighbors. Given an array representing the rankings of the students, determine the minimum number of candies required to distribute to the students while following these rules.",
    "topic": "Greedy",
    "subtopic": "Candy Distribution",
    "tags": [
      "Greedy",
      "Array",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers ratings where ratings[i] represents the ranking of the ith student.",
    "output_format": "An integer representing the minimum number of candies needed.",
    "constraints": [
      "1 <= ratings.length <= 2 * 10^4",
      "0 <= ratings[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "ratings = [1, 0, 2]",
        "output": "5",
        "explanation": "The distribution of candies can be [2, 1, 2], resulting in a total of 5 candies."
      },
      {
        "input": "ratings = [1, 2, 2]",
        "output": "4",
        "explanation": "The distribution of candies can be [1, 2, 1], resulting in a total of 4 candies."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the requirement from both left and right directions.",
      "First pass from left to right, then a second pass from right to left."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Find the Index of the First Occurrence in a String",
    "description": "Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.",
    "topic": "String",
    "subtopic": "Search",
    "tags": [
      "String",
      "Search"
    ],
    "input_format": "Two strings: haystack (the string to be searched) and needle (the substring to find).",
    "output_format": "An integer representing the index of the first occurrence of needle in haystack, or -1 if needle is not found.",
    "constraints": [
      "1 <= haystack.length <= 10^4",
      "0 <= needle.length <= 100"
    ],
    "examples": [
      {
        "input": "haystack = 'hello', needle = 'll'",
        "output": "2",
        "explanation": "The substring 'll' is found starting at index 2."
      },
      {
        "input": "haystack = 'aaaaa', needle = 'bba'",
        "output": "-1",
        "explanation": "The substring 'bba' is not found in 'aaaaa'."
      },
      {
        "input": "haystack = '', needle = ''",
        "output": "0",
        "explanation": "An empty needle is found at index 0 of an empty haystack."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to use a straightforward search approach.",
      "Consider the case where needle is empty."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Unique Paths",
    "description": "A robot is situated at the top-left corner of a m x n grid. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. How many unique paths are there to the destination? Consider that the robot can only move through open cells.",
    "topic": "Dynamic Programming",
    "subtopic": "Grid Traversal",
    "tags": [
      "Dynamic Programming",
      "Grid",
      "Pathfinding"
    ],
    "input_format": "Two integers m and n, representing the number of rows and columns in the grid.",
    "output_format": "An integer representing the number of unique paths from the top-left to the bottom-right of the grid.",
    "constraints": [
      "1 <= m, n <= 100"
    ],
    "examples": [
      {
        "input": "m = 3, n = 7",
        "output": "28",
        "explanation": "There are 28 unique paths from the top-left to the bottom-right corner of a 3x7 grid."
      },
      {
        "input": "m = 3, n = 2",
        "output": "3",
        "explanation": "There are 3 unique paths from the top-left to the bottom-right corner of a 3x2 grid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to count paths.",
      "You can build the solution iteratively by using a 2D array."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Remove Duplicates from Sorted List",
    "description": "Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.",
    "topic": "Linked List",
    "subtopic": "Linked List Manipulation",
    "tags": [
      "Linked List",
      "Sorting",
      "In-place"
    ],
    "input_format": "The input consists of a linked list represented by its head node.",
    "output_format": "Return the head of the linked list after removing all duplicates.",
    "constraints": [
      "The number of nodes in the list is in the range [0, 100].",
      "-100 <= Node.val <= 100",
      "The list is guaranteed to be sorted in ascending order."
    ],
    "examples": [
      {
        "input": "head = [1, 1, 2]",
        "output": "[1, 2]",
        "explanation": "The duplicate value '1' is removed, leaving [1, 2]."
      },
      {
        "input": "head = [1, 1, 2, 3, 3]",
        "output": "[1, 2, 3]",
        "explanation": "The duplicate values '1' and '3' are removed, leaving [1, 2, 3]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a pointer to traverse the list and a second pointer to track the last unique node."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Find the Winner of the Circular Game",
    "description": "In a circular game where there are 'n' players standing in a circle numbered from 1 to n, starting from the first player, every second player is eliminated until only one player remains. Your task is to determine the position of the last remaining player. Implement a function that takes the number of players 'n' and returns the position of the winner.",
    "topic": "Mathematics",
    "subtopic": "Simulation",
    "tags": [
      "Math",
      "Simulation",
      "Game"
    ],
    "input_format": "A single integer n, representing the number of players in the game.",
    "output_format": "An integer representing the position of the last remaining player.",
    "constraints": [
      "1 <= n <= 10^6"
    ],
    "examples": [
      {
        "input": "n = 5",
        "output": "3",
        "explanation": "The elimination order is 1, 3, 5, 2, and finally player 4 remains."
      },
      {
        "input": "n = 6",
        "output": "5",
        "explanation": "The elimination order is 1, 3, 5, 2, 4, and finally player 6 remains."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a mathematical approach to solve the problem instead of simulating each elimination."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Edit Distance",
    "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. The operations are: insert a character, delete a character, or replace a character.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Edit Distance"
    ],
    "input_format": "Two strings word1 and word2.",
    "output_format": "An integer representing the minimum number of operations required.",
    "constraints": [
      "0 <= word1.length, word2.length <= 100",
      "word1 and word2 consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "word1 = 'horse', word2 = 'ros'",
        "output": "3",
        "explanation": "The minimum edit distance is 3. (horse -> rorse -> rose -> ros)"
      },
      {
        "input": "word1 = 'intention', word2 = 'execution'",
        "output": "5",
        "explanation": "The minimum edit distance is 5. (intention -> inention -> enention -> exention -> exection -> execution)"
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a 2D array to store the distances.",
      "Consider using dynamic programming to build the solution iteratively.",
      "Think about the three operations and how they affect the string."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Sqrt(x)",
    "description": "Implement a function that calculates the square root of a non-negative integer x, without using any built-in square root functions. The function should return the largest integer y such that y*y <= x. If x is 0, the result should be 0.",
    "topic": "Math",
    "subtopic": "Binary Search",
    "tags": [
      "Math",
      "Binary Search",
      "Integer Calculation"
    ],
    "input_format": "A single non-negative integer x.",
    "output_format": "An integer representing the floored square root of x.",
    "constraints": [
      "0 <= x <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "x = 4",
        "output": "2",
        "explanation": "The square root of 4 is 2, since 2*2 = 4."
      },
      {
        "input": "x = 8",
        "output": "2",
        "explanation": "The largest integer y where y*y <= 8 is 2, since 2*2 = 4 and 3*3 = 9."
      },
      {
        "input": "x = 0",
        "output": "0",
        "explanation": "The square root of 0 is 0."
      },
      {
        "input": "x = 1",
        "output": "1",
        "explanation": "The square root of 1 is 1, since 1*1 = 1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using binary search to find the result efficiently.",
      "The maximum possible value for y is x."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Koko Eating Bananas",
    "description": "Koko loves to eat bananas, and she loves to eat them at a specific speed. She has a pile of bananas and wants to eat them all within a certain amount of hours. Koko can eat a variable number of bananas per hour, depending on the speed she chooses. Given this, your task is to determine the minimum integer speed (in bananas per hour) at which Koko can eat all the bananas within the given hours. If Koko cannot eat all the bananas within the given hours at any speed, return -1.",
    "topic": "Binary Search",
    "subtopic": "Optimization",
    "tags": [
      "Binary Search",
      "Greedy",
      "Optimization"
    ],
    "input_format": "An integer array piles representing the number of bananas in each pile, and an integer h representing the total hours Koko has to eat all the bananas.",
    "output_format": "An integer representing the minimum speed Koko must eat to finish in h hours, or -1 if it's not possible.",
    "constraints": [
      "1 <= piles.length <= 10^4",
      "1 <= piles[i] <= 10^9",
      "1 <= h <= 10^9"
    ],
    "examples": [
      {
        "input": "piles = [3, 6, 7, 11], h = 8",
        "output": "4",
        "explanation": "At speed 4, Koko can eat 4 bananas in the first hour, 4 in the second hour, and finish the remaining 11 bananas in the following hours, completing them all in 8 hours."
      },
      {
        "input": "piles = [30, 11, 23, 4, 20], h = 5",
        "output": "30",
        "explanation": "At speed 30, Koko can eat all piles in the given hours."
      },
      {
        "input": "piles = [30, 11, 23, 4, 20], h = 6",
        "output": "23",
        "explanation": "At speed 23, Koko can eat 23 bananas in less than 6 hours."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try using binary search to find the optimal speed.",
      "Calculate how many hours it takes to eat all the bananas at a certain speed.",
      "If the hours exceed h, increase the speed; if not, try a slower speed."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Peak Index in a Mountain Array",
    "description": "Given a mountain array, find the peak index. A mountain array is defined as an array that is strictly increasing until a peak element, then strictly decreasing. You must implement a function that searches for this peak with a time complexity of O(log n).",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Peak Element"
    ],
    "input_format": "An array of integers 'arr' representing the mountain array.",
    "output_format": "An integer representing the peak index in the mountain array.",
    "constraints": [
      "3 <= arr.length <= 10^5",
      "1 <= arr[i] <= 10^6",
      "arr is guaranteed to be a mountain array."
    ],
    "examples": [
      {
        "input": "arr = [0, 2, 1, 0]",
        "output": "1",
        "explanation": "The peak element is 2, which is at index 1."
      },
      {
        "input": "arr = [0, 10, 5, 2]",
        "output": "1",
        "explanation": "The peak element is 10, which is at index 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to find the peak.",
      "The peak element is greater than its neighbors."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Contains Duplicate",
    "description": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Searching"
    ],
    "input_format": "An integer array nums of length n.",
    "output_format": "A boolean value indicating whether any value appears at least twice.",
    "constraints": [
      "1 <= n <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "true",
        "explanation": "The number 1 appears twice in the array."
      },
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "false",
        "explanation": "All elements are distinct, so the output is false."
      },
      {
        "input": "nums = [1, 1, 1, 3, 3, 4, 3, 2, 4, 2]",
        "output": "true",
        "explanation": "The number 1 appears multiple times in the array."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a set to track seen numbers.",
      "If a number is already in the set, return true."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Max Consecutive Ones",
    "description": "Given a binary array, return the maximum number of consecutive 1s in the array. If there are no 1s, return 0.",
    "topic": "Array",
    "subtopic": "Counting Sequence",
    "tags": [
      "Array",
      "Binary",
      "Counting"
    ],
    "input_format": "A binary array nums consisting of 0s and 1s.",
    "output_format": "An integer representing the maximum number of consecutive 1s.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "nums[i] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 0, 1, 1, 1]",
        "output": "3",
        "explanation": "The longest sequence of consecutive 1s is [1, 1, 1], which has a length of 3."
      },
      {
        "input": "nums = [1, 0, 1, 1, 0, 1]",
        "output": "2",
        "explanation": "The longest sequence of consecutive 1s is [1, 1], which has a length of 2."
      },
      {
        "input": "nums = [0, 0, 0, 0]",
        "output": "0",
        "explanation": "There are no 1s in the array, so the output is 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a counter to track the current length of consecutive 1s.",
      "Reset the counter when a 0 is encountered."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Rotate Image",
    "description": "You are given an n x n 2D matrix representing an image. You need to rotate the image by 90 degrees (clockwise) in-place, which means you need to modify the input matrix directly. Do not use an additional matrix to perform the rotation.",
    "topic": "Matrix",
    "subtopic": "2D Array Manipulation",
    "tags": [
      "Matrix",
      "In-place",
      "Array Manipulation"
    ],
    "input_format": "A 2D array of integers representing the image.",
    "output_format": "The input 2D array should be modified in-place to represent the rotated image.",
    "constraints": [
      "1 <= n <= 20",
      "-1000 <= matrix[i][j] <= 1000"
    ],
    "examples": [
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[[7,4,1],[8,5,2],[9,6,3]]",
        "explanation": "After rotating the matrix 90 degrees clockwise, the first row becomes the last column."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how the indices of a 2D array change after a rotation.",
      "You can layer your rotation, handling one layer at a time."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Next Permutation",
    "description": "Implement the function next_permutation(nums) that rearranges the numbers into the next lexicographical permutation of numbers. If such arrangement is not possible, it must rearrange it to the lowest possible order (i.e., sorted in ascending order). The replacement must be done in place and use only constant extra memory.",
    "topic": "Array",
    "subtopic": "Permutation",
    "tags": [
      "Array",
      "Permutation",
      "In-place"
    ],
    "input_format": "An array of integers nums representing the current permutation.",
    "output_format": "The next lexicographical permutation of nums in place.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 100"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "[1, 3, 2]",
        "explanation": "The next permutation of [1, 2, 3] is [1, 3, 2]."
      },
      {
        "input": "nums = [3, 2, 1]",
        "output": "[1, 2, 3]",
        "explanation": "The next permutation of [3, 2, 1] is the lowest order: [1, 2, 3]."
      },
      {
        "input": "nums = [1, 5, 1]",
        "output": "[1, 1, 5]",
        "explanation": "The next permutation of [1, 5, 1] is [1, 1, 5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Look for the first decrease from the right.",
      "Swap this decrease with the next larger number to its right.",
      "Reverse the part of the array to the right of the decrease."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Average Value of Even Numbers That Are Divisible by Three",
    "description": "Given an array of integers, calculate the average value of all even numbers that are divisible by three. If there are no such numbers, return 0. The average is defined as the sum of the numbers divided by the count of the numbers. You may assume the input array will always have at least one integer.",
    "topic": "Array",
    "subtopic": "Filtering and Averaging",
    "tags": [
      "Array",
      "Average",
      "Filtering"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A float representing the average of all even numbers that are divisible by three, rounded to two decimal places.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 6, 9, 12]",
        "output": "6.00",
        "explanation": "The even numbers divisible by 3 are 6 and 12. Their average is (6 + 12) / 2 = 9 / 2 = 4.50."
      },
      {
        "input": "nums = [5, 15, 30, 45, 60]",
        "output": "30.00",
        "explanation": "The only even number divisible by 3 is 30. The average is just 30."
      },
      {
        "input": "nums = [1, 3, 5, 7]",
        "output": "0.00",
        "explanation": "There are no even numbers in the array, so the output is 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Start by filtering the even numbers.",
      "Check if the even number is divisible by 3 using num % 3 == 0.",
      "Remember to handle the case where no numbers meet the criteria."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Single Number II",
    "description": "Given an array of integers, each appearing three times except for one, which appears exactly once, determine the single number that does not occur three times. Your algorithm should have a linear runtime complexity and use only constant space.",
    "topic": "Array",
    "subtopic": "Bit Manipulation",
    "tags": [
      "Array",
      "Bit Manipulation",
      "Hashing"
    ],
    "input_format": "An array of integers nums where every element appears three times except for one that appears once.",
    "output_format": "An integer representing the single number that appears only once.",
    "constraints": [
      "1 <= nums.length <= 3 * 10^4",
      "-2^31 <= nums[i] <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "nums = [2, 2, 3, 2]",
        "output": "3",
        "explanation": "The number 3 appears once while 2 appears three times."
      },
      {
        "input": "nums = [0, 1, 0, 1, 0, 1, 99]",
        "output": "99",
        "explanation": "The number 99 appears once while 0 and 1 appear three times."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to use bit manipulation techniques.",
      "Consider how you can track the number of times each bit is set."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Search a 2D Matrix",
    "description": "Write an efficient algorithm to determine if a target value exists in an m x n integer matrix. The integers in each row of the matrix are sorted in ascending order, and the integers in each column are also sorted in ascending order. You may assume that all integers in the matrix are unique.",
    "topic": "Binary Search",
    "subtopic": "Matrix Searching",
    "tags": [
      "Matrix",
      "Binary Search",
      "Search"
    ],
    "input_format": "An m x n matrix of integers and an integer target.",
    "output_format": "A boolean indicating whether the target exists in the matrix.",
    "constraints": [
      "1 <= m, n <= 100",
      "-10^4 <= matrix[i][j], target <= 10^4"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 3, 5], [7, 9, 11], [15, 17, 19]], target = 9",
        "output": "true",
        "explanation": "9 is present in the matrix."
      },
      {
        "input": "matrix = [[1, 3, 5], [7, 9, 11], [15, 17, 19]], target = 10",
        "output": "false",
        "explanation": "10 is not present in the matrix."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how the sorted properties of the matrix can help with searching.",
      "You can start searching from the top-right corner or bottom-left corner."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Kth Largest Element in an Array",
    "description": "Given an array of integers, find the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element. You must solve it in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Heap"
    ],
    "input_format": "An array of integers nums and an integer k.",
    "output_format": "An integer representing the kth largest element in the array.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 1, 5, 6, 4], k = 2",
        "output": "5",
        "explanation": "The second largest element in the sorted order is 5."
      },
      {
        "input": "nums = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4",
        "output": "4",
        "explanation": "The fourth largest element in the sorted order is 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a heap to efficiently track the kth largest element.",
      "You can use Quickselect to achieve O(n) average time complexity."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Daily Temperatures",
    "description": "Given a list of daily temperatures, produce a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0]. Note that '0' means there is no future warmer temperature for that day.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "input_format": "An array of integers T representing the daily temperatures.",
    "output_format": "An array of integers where each integer represents the number of days until a warmer temperature.",
    "constraints": [
      "1 <= T.length <= 30000",
      "30 <= T[i] <= 100"
    ],
    "examples": [
      {
        "input": "T = [73, 74, 75, 71, 69, 72, 76, 73]",
        "output": "[1, 1, 4, 2, 1, 1, 0, 0]",
        "explanation": "For day 0 (temperature 73), the next warmer temperature occurs on day 1 (74)."
      },
      {
        "input": "T = [30, 40, 50, 60]",
        "output": "[1, 1, 1, 0]",
        "explanation": "Each day has a warmer day to follow, the last day does not."
      },
      {
        "input": "T = [40, 40, 40]",
        "output": "[0, 0, 0]",
        "explanation": "No warmer days for any of the inputs."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the indices of the days.",
      "Traverse the list from the end to the beginning.",
      "Only keep the indices of temperatures that are warmer than the current day."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Integer to Roman",
    "description": "Given an integer, convert it to a Roman numeral. The integer must be between 1 and 3999 inclusive. Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. For example, 1 is represented as 'I', 2 is 'II', 3 is 'III'. Similarly, 4 is 'IV' and 5 is 'V'. The number 6 is 'VI', and so on up to 3999 which is represented as 'MMMCMXCIX'.",
    "topic": "Math",
    "subtopic": "Numerical Conversion",
    "tags": [
      "Math",
      "String",
      "Conversion"
    ],
    "input_format": "An integer num (1 <= num <= 3999).",
    "output_format": "A string representing the Roman numeral equivalent of the input integer.",
    "constraints": [
      "1 <= num <= 3999"
    ],
    "examples": [
      {
        "input": "num = 3",
        "output": "III",
        "explanation": "The number 3 is represented as 'III' in Roman numerals."
      },
      {
        "input": "num = 4",
        "output": "IV",
        "explanation": "The number 4 is represented as 'IV' in Roman numerals."
      },
      {
        "input": "num = 9",
        "output": "IX",
        "explanation": "The number 9 is represented as 'IX' in Roman numerals."
      },
      {
        "input": "num = 58",
        "output": "LVIII",
        "explanation": "The number 58 is represented as 'LVIII' in Roman numerals: 50 (L) + 5 (V) + 3 (III)."
      },
      {
        "input": "num = 1994",
        "output": "MCMXCIV",
        "explanation": "The number 1994 is represented as 'MCMXCIV' in Roman numerals: 1000 (M) + 900 (CM) + 90 (XC) + 4 (IV)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the values of Roman numeral symbols and their combinations.",
      "Use a greedy approach to subtract the value of Roman symbols from the input number."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Count Pairs Whose Sum is Less than Target",
    "description": "Given an array of integers and a target value, count the number of unique pairs (i, j) such that nums[i] + nums[j] < target and i < j.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Counting"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An integer representing the count of unique pairs whose sum is less than the target.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5",
      "The target value is an integer in the range of [-10^5, 10^5]."
    ],
    "examples": [
      {
        "input": "nums = [10, 15, 2, 7], target = 17",
        "output": "4",
        "explanation": "The pairs are (10, 2), (10, 7), (15, 2), and (15, 7), which all sum to less than 17."
      },
      {
        "input": "nums = [1, 2, 3, 4], target = 5",
        "output": "4",
        "explanation": "The pairs are (1, 2), (1, 3), (1, 4), and (2, 3)."
      },
      {
        "input": "nums = [5, 1, 3, 4, 2], target = 6",
        "output": "4",
        "explanation": "The valid pairs are (1, 2), (1, 3), (1, 4), and (2, 3)."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Sort the array first to apply the two-pointer technique efficiently.",
      "Try to utilize the fact that if nums[i] + nums[j] is less than target, then all positions between i and j will also be valid."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Majority Element II",
    "description": "Given an integer array of size n, find all elements that appear more than n/3 times in the array. The algorithm should have linear time complexity and constant space complexity. Return the result as a list of the majority elements.",
    "topic": "Array",
    "subtopic": "Counting Frequency",
    "tags": [
      "Array",
      "Hash Table",
      "Counting"
    ],
    "input_format": "An integer array nums of size n.",
    "output_format": "A list of integers representing the majority elements.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 3]",
        "output": "[3]",
        "explanation": "The number 3 appears twice, which is more than n/3 (where n=3)."
      },
      {
        "input": "nums = [1, 2, 3, 1, 1, 2, 1]",
        "output": "[1]",
        "explanation": "The number 1 appears four times, which is more than n/3 (where n=7)."
      },
      {
        "input": "nums = [1, 2]",
        "output": "[]",
        "explanation": "No element appears more than n/3 for n=2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "You may use a hashmap to count frequencies.",
      "Consider the properties of majority elements."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "01 Matrix",
    "description": "Given a binary matrix mat, your task is to update the matrix in such a way that each zero in the matrix is replaced by the distance to the nearest 1. The distance between two cells is the Manhattan distance: |i1 - i2| + |j1 - j2| where (i1, j1) and (i2, j2) are the coordinates of the two cells. Note that the distance to the nearest 1 cell should be calculated, and if there are no 1s in the matrix, the cell should remain 0.",
    "topic": "Matrix",
    "subtopic": "BFS/DFS",
    "tags": [
      "Matrix",
      "BFS",
      "Distance Calculation"
    ],
    "input_format": "A binary matrix mat, where mat[i][j] is either 0 or 1.",
    "output_format": "An updated binary matrix that contains the distances to the nearest 1 for each cell.",
    "constraints": [
      "1 <= mat.length, mat[i].length <= 200",
      "mat[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "mat = [[0,0,0],[0,1,0],[0,0,0]]",
        "output": "[[1, 1, 1], [0, 1, 0], [1, 2, 1]]",
        "explanation": "The distance to the nearest 1 for each 0 is calculated based on their positions."
      },
      {
        "input": "mat = [[0]]",
        "output": "[[0]]",
        "explanation": "There is no 1 in the matrix, so it remains 0."
      },
      {
        "input": "mat = [[1,0,0],[0,0,0],[0,0,1]]",
        "output": "[[0,1,2],[1,2,1],[2,1,0]]",
        "explanation": "Calculated distances considering the nearest 1 in the vicinity."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a breadth-first search (BFS) to traverse the matrix.",
      "You may use a queue to help process cells layer by layer.",
      "Keep track of visited cells to avoid processing them multiple times."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Substrings of Size Three with Distinct Characters",
    "description": "Given a string s, return the number of substrings of size three that are all distinct characters. A substring is defined as a contiguous sequence of characters within the string. For example, in the string 'abc', 'abc' is a valid substring of size three with all distinct characters.",
    "topic": "String",
    "subtopic": "Substring",
    "tags": [
      "String",
      "Substring",
      "Counting"
    ],
    "input_format": "A string s (1 <= s.length <= 100).",
    "output_format": "An integer representing the count of distinct substrings of size three.",
    "constraints": [
      "1 <= s.length <= 100",
      "s consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'abcabc'",
        "output": "4",
        "explanation": "The distinct substrings of size three are: 'abc', 'bca', 'cab', 'abc'."
      },
      {
        "input": "s = 'aaa'",
        "output": "0",
        "explanation": "There are no distinct substrings of size three."
      },
      {
        "input": "s = 'abac'",
        "output": "1",
        "explanation": "The only distinct substring of size three is 'aba'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider sliding a window of size 3 across the string.",
      "Use a set to track distinct characters in the current window."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Count Operations to Obtain Zero",
    "description": "Given two integers `a` and `b`, you can perform the following operation: subtract the smaller integer from the larger integer until one of them becomes zero. Your task is to count how many operations are required to make either integer zero. Return the total count of operations performed.",
    "topic": "Math",
    "subtopic": "Counting Operations",
    "tags": [
      "Math",
      "Operations",
      "Counting"
    ],
    "input_format": "Two integers a and b, where -10^9 <= a, b <= 10^9.",
    "output_format": "An integer representing the total number of operations to obtain zero.",
    "constraints": [
      "-10^9 <= a, b <= 10^9"
    ],
    "examples": [
      {
        "input": "a = 5, b = 3",
        "output": "3",
        "explanation": "Operation 1: (5, 3) -> (2, 3); Operation 2: (2, 3) -> (2, 1); Operation 3: (2, 1) -> (1, 1)."
      },
      {
        "input": "a = 10, b = 10",
        "output": "10",
        "explanation": "Each operation will reduce both numbers equally, requiring 10 operations to reach (0, 0)."
      },
      {
        "input": "a = 0, b = 7",
        "output": "0",
        "explanation": "Since one of the integers is already zero, no operations are required."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use the absolute difference between the two numbers in each operation.",
      "Consider the case when either number is already zero."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Intersection of Two Linked Lists",
    "description": "Given the heads of two singly linked lists, determine the node at which the two lists intersect. If the two linked lists do not intersect, return null. The intersection of two linked lists is defined as the node that is common to both lists. The intersection starts from the node where both lists share the same reference. It is guaranteed that the intersection will exist for at least one node, which means there will always be an answer.",
    "topic": "Linked List",
    "subtopic": "Intersection of Linked Lists",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Intersection"
    ],
    "input_format": "The input consists of two linked lists represented by the heads of the lists: headA and headB.",
    "output_format": "Return the node where the two linked lists intersect. If there is no intersection, return null.",
    "constraints": [
      "The number of nodes in the first linked list is in the range [0, 10^4].",
      "The number of nodes in the second linked list is in the range [0, 10^4].",
      "The value of each node is in the range [-10^5, 10^5]."
    ],
    "examples": [
      {
        "input": "headA = [4, 1, 8, 4, 5], headB = [5, 0, 1, 8, 4, 5]",
        "output": "8",
        "explanation": "The lists intersect at node with value 8."
      },
      {
        "input": "headA = [1, 9, 1, 2, 4], headB = [3, 2, 4]",
        "output": "2",
        "explanation": "The lists intersect at node with value 2."
      },
      {
        "input": "headA = [2, 6, 4], headB = [1, 5]",
        "output": "null",
        "explanation": "The two lists do not intersect."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to find the lengths of both linked lists first.",
      "Use two pointers to traverse the lists."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Maximum Depth of Binary Tree",
    "description": "Given a binary tree, find its maximum depth. The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.",
    "topic": "Tree",
    "subtopic": "Depth-First Search",
    "tags": [
      "Tree",
      "Depth",
      "DFS"
    ],
    "input_format": "The input will be a binary tree represented as a node structure.",
    "output_format": "An integer representing the maximum depth of the binary tree.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 10^4].",
      "-100 <= Node.val <= 100"
    ],
    "examples": [
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "3",
        "explanation": "The longest path from the root to a leaf is 3 -> 20 -> 15, with a depth of 3."
      },
      {
        "input": "root = [1,null,2]",
        "output": "2",
        "explanation": "The only path is 1 -> 2, which has a depth of 2."
      },
      {
        "input": "root = []",
        "output": "0",
        "explanation": "An empty tree has a depth of 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use recursive or iterative methods to traverse the tree.",
      "Consider the depth of each subtree and take the maximum."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Excel Sheet Column Title",
    "description": "Given an integer column number, return its corresponding column title as it appears in an Excel sheet. For example, A = 1, B = 2, ..., Z = 26, AA = 27, AB = 28, and so on. The conversion should be done in such a way that the column titles are constructed similar to a base-26 numeral system but with alphabetic characters instead of digits.",
    "topic": "Math",
    "subtopic": "Base Conversion",
    "tags": [
      "Math",
      "String",
      "Excel"
    ],
    "input_format": "An integer columnNumber representing the column number.",
    "output_format": "A string representing the corresponding column title.",
    "constraints": [
      "1 <= columnNumber <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "columnNumber = 1",
        "output": "A",
        "explanation": "The column number 1 corresponds to the title 'A'."
      },
      {
        "input": "columnNumber = 28",
        "output": "AB",
        "explanation": "The column number 28 corresponds to the title 'AB', which is derived from 27 + 1."
      },
      {
        "input": "columnNumber = 701",
        "output": "ZY",
        "explanation": "The column number 701 corresponds to the title 'ZY', as 'Z' represents 26 and 'Y' represents 25."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how characters are mapped to numbers.",
      "Think about how to handle the transition from Z to AA."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Second Highest Salary",
    "description": "Given a table of employees, the task is to find the second highest salary among them. If there is no second highest salary, return null.",
    "topic": "Database",
    "subtopic": "SQL Queries",
    "tags": [
      "Database",
      "SQL",
      "Aggregation"
    ],
    "input_format": "A table named Employees with the following schema:\n- id: int, unique identifier for each employee\n- salary: int, salary of the employee",
    "output_format": "An integer representing the second highest salary or null if it does not exist.",
    "constraints": [
      "0 <= salary <= 10^6",
      "The table may have at most 10^4 rows."
    ],
    "examples": [
      {
        "input": "Employees = [ (1, 100), (2, 200), (3, 100) ]",
        "output": "100",
        "explanation": "The highest salary is 200 and the second highest is 100."
      },
      {
        "input": "Employees = [ (1, 300), (2, 300), (3, 300) ]",
        "output": "null",
        "explanation": "All employees have the same salary, so there is no second highest salary."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use DISTINCT to find unique salaries.",
      "Consider using ORDER BY and LIMIT to get the second highest salary."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Find Original Array From Doubled Array",
    "description": "You are given an array of integers 'doubled'. This array contains an original array 'original' such that for every element x in 'original', there exists an element 2*x in 'doubled'. Your task is to find and return the 'original' array from the 'doubled' array. If there are multiple solutions, return any of them. If no solution exists, return an empty array.",
    "topic": "Array",
    "subtopic": "Sorting and Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Sorting"
    ],
    "input_format": "An integer array 'doubled' where each element is from 'original' or twice an element from 'original'.",
    "output_format": "An integer array representing the original array, or an empty array if no solution exists.",
    "constraints": [
      "0 <= doubled.length <= 10^4",
      "-10^5 <= doubled[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "doubled = [1, 3, 4, 2, 6, 8]",
        "output": "[1, 2, 3]",
        "explanation": "The original array is [1, 2, 3] because 2*1 = 2, 2*2 = 4, and 2*3 = 6 exist in 'doubled'."
      },
      {
        "input": "doubled = [6, 3, 0, 2, 5, 2, 8, 1]",
        "output": "[1, 2, 3]",
        "explanation": "Multiple original arrays are possible, but one valid original array is [1, 2, 3]."
      },
      {
        "input": "doubled = [1, 2, 3]",
        "output": "[]",
        "explanation": "No original array exists because there is no pair for any element."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the doubled array to make pairing easier.",
      "Use a frequency map to keep track of counts."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "N-th Tribonacci Number",
    "description": "The Tribonacci sequence is defined as follows: T(0) = 0, T(1) = 1, T(2) = 1, and T(n) = T(n-1) + T(n-2) + T(n-3) for n > 2. Given an integer n, return the n-th Tribonacci number.",
    "topic": "Dynamic Programming",
    "subtopic": "Memoization",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Memoization"
    ],
    "input_format": "An integer n (0 <= n <= 37).",
    "output_format": "An integer representing the n-th Tribonacci number.",
    "constraints": [
      "0 <= n <= 37"
    ],
    "examples": [
      {
        "input": "n = 4",
        "output": "4",
        "explanation": "The Tribonacci sequence is 0, 1, 1, 2, 4. Therefore, the 4-th Tribonacci number is 4."
      },
      {
        "input": "n = 25",
        "output": "1389537",
        "explanation": "The 25-th Tribonacci number computed according to the sequence is 1389537."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using an iterative approach to build the sequence.",
      "You may use an array to store the computed values."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Basic Calculator II",
    "description": "Implement a basic calculator to evaluate a simple expression string containing non-negative integers, '+', '-', '*', and '/' operators. The expression must be evaluated according to the standard order of operations, following the rules of operator precedence.",
    "topic": "String",
    "subtopic": "Parsing",
    "tags": [
      "String",
      "Math",
      "Stack"
    ],
    "input_format": "A string s representing the expression to evaluate.",
    "output_format": "An integer representing the result of the evaluated expression.",
    "constraints": [
      "1 <= s.length <= 3 * 10^5",
      "s consists of digits, '+', '-', '*', '/' operators, and spaces.",
      "The expression is guaranteed to be valid."
    ],
    "examples": [
      {
        "input": "s = '3+2*2'",
        "output": "7",
        "explanation": "'3 + (2 * 2)' evaluates to '3 + 4' which equals '7'."
      },
      {
        "input": "s = ' 3/2 '",
        "output": "1",
        "explanation": "'3 / 2' evaluates to '1'."
      },
      {
        "input": "s = ' 3+5 / 2 '",
        "output": "5",
        "explanation": "'3 + (5 / 2)' evaluates to '3 + 2' which equals '5'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a stack to handle operator precedence.",
      "Remember to handle spaces in the input string."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Pow(x, n)",
    "description": "Implement a function to calculate x raised to the power n (x^n). Do not use the built-in power function. The function should handle both positive and negative values of n and return the result as a floating-point number.",
    "topic": "Mathematics",
    "subtopic": "Exponentiation",
    "tags": [
      "Math",
      "Recursion",
      "Exponentiation"
    ],
    "input_format": "Two inputs: a floating-point number x and an integer n.",
    "output_format": "A floating-point number representing the result of x raised to the power n.",
    "constraints": [
      "-10^4 <= x <= 10^4",
      "-10^4 <= n <= 10^4"
    ],
    "examples": [
      {
        "input": "x = 2.00000, n = 10",
        "output": "1024.00000",
        "explanation": "2 raised to the power of 10 is 1024."
      },
      {
        "input": "x = 2.10000, n = 3",
        "output": "9.26100",
        "explanation": "2.1 raised to the power of 3 is approximately 9.261."
      },
      {
        "input": "x = 2.00000, n = -2",
        "output": "0.25000",
        "explanation": "2 raised to the power of -2 is 1/4, which is 0.25."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using recursion for divide and conquer.",
      "Handle negative exponents by calculating the reciprocal."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Number of Days Between Two Dates",
    "description": "Given two dates in the format 'YYYY-MM-DD', calculate the number of days between them. The dates can be in any order, and you need to return the absolute difference in days.",
    "topic": "Date Manipulation",
    "subtopic": "Calculating Differences",
    "tags": [
      "Date",
      "Difference",
      "Absolute"
    ],
    "input_format": "Two strings representing the two dates in 'YYYY-MM-DD' format.",
    "output_format": "An integer representing the absolute number of days between the two dates.",
    "constraints": [
      "The input dates are valid and follow the 'YYYY-MM-DD' format.",
      "The year is in the range of 1900 to 2100."
    ],
    "examples": [
      {
        "input": "start = '2023-01-01', end = '2023-01-10'",
        "output": "9",
        "explanation": "There are 9 days between January 1, 2023, and January 10, 2023."
      },
      {
        "input": "start = '2020-02-29', end = '2020-03-01'",
        "output": "1",
        "explanation": "2020 is a leap year, so there's 1 day between February 29, 2020, and March 1, 2020."
      },
      {
        "input": "start = '2021-12-31', end = '2022-01-01'",
        "output": "1",
        "explanation": "There is 1 day between December 31, 2021, and January 1, 2022."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using date libraries for easier date manipulation.",
      "Make sure to account for leap years."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Ugly Number II",
    "description": "An ugly number is a positive number whose prime factors are limited to 2, 3, and 5. Given an integer n, return the nth ugly number. The sequence of ugly numbers starts from 1 with the following sequence: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, ... You need to find the nth number in this sequence.",
    "topic": "Dynamic Programming",
    "subtopic": "Heap/Min-Heap",
    "tags": [
      "Dynamic Programming",
      "Heap",
      "Min-Heap"
    ],
    "input_format": "An integer n (1 <= n <= 1690), where n represents the index of the ugly number to find.",
    "output_format": "An integer representing the nth ugly number.",
    "constraints": [
      "1 <= n <= 1690"
    ],
    "examples": [
      {
        "input": "n = 10",
        "output": "12",
        "explanation": "The 10th ugly number in the sequence is 12."
      },
      {
        "input": "n = 1",
        "output": "1",
        "explanation": "The 1st ugly number is 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a min-heap to keep track of the next potential ugly numbers.",
      "Each time you extract the smallest number from the heap, generate new numbers by multiplying it with 2, 3, and 5."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase. You can return the answer in any order.",
    "topic": "String",
    "subtopic": "Hashing",
    "tags": [
      "String",
      "HashMap",
      "Grouping"
    ],
    "input_format": "An array of strings `strs`.",
    "output_format": "A list of lists, where each inner list contains strings that are anagrams of each other.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "0 <= strs[i].length <= 100",
      "All input strings are in lowercase."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"eat\",\"tea\",\"ate\"],[\"tan\",\"nat\"],[\"bat\"]]",
        "explanation": "The strings 'eat', 'tea', and 'ate' are anagrams of each other, and 'tan' and 'nat' are also anagrams."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "The input contains only one empty string, so the output is a list containing one list with an empty string."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "The input contains one single character, which is also an anagram of itself."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting each string to identify anagrams easily.",
      "A HashMap could help in grouping the anagrams."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "How Many Numbers Are Smaller Than the Current Number",
    "description": "Given an integer array nums, for each element nums[i], count how many numbers are smaller than it. Return the answer as an array where each element is the count of smaller numbers compared to the current element.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Counting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An array of integers where each element represents the count of numbers smaller than the corresponding element in nums.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [8, 1, 2, 2, 3]",
        "output": "[4, 0, 1, 1, 3]",
        "explanation": "For each element: 8 has 4 smaller numbers (1, 2, 2, 3), 1 has 0, 2 has 1, 2 has 1, 3 has 3."
      },
      {
        "input": "nums = [6, 5, 4, 8]",
        "output": "[2, 1, 0, 3]",
        "explanation": "For each element: 6 has 2 smaller numbers (5, 4), 5 has 1, 4 has 0, 8 has 3 (6, 5, 4)."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider sorting the array to efficiently count smaller elements.",
      "Use a data structure to maintain the counts dynamically as you traverse the array."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Palindromic Substrings",
    "description": "Given a string, return the number of substrings that are palindromes. A substring is a contiguous sequence of characters within a string. A palindrome is a string that reads the same forward and backward.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A single string s, where 1 <= s.length <= 1000.",
    "output_format": "An integer representing the total number of palindromic substrings in s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"aba\"",
        "output": "4",
        "explanation": "The palindromic substrings are 'a', 'b', 'a', and 'aba'."
      },
      {
        "input": "s = \"abc\"",
        "output": "3",
        "explanation": "The palindromic substrings are 'a', 'b', and 'c'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around the center of each character.",
      "Keep in mind that palindromes can have even or odd lengths."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Min Cost Climbing Stairs",
    "description": "You are climbing a staircase with n steps, and you can either climb 1 or 2 steps at a time. The cost of climbing to each step is given in an array. You need to find the minimum cost to reach the top of the staircase. You can start from either step 0 or step 1.",
    "topic": "Dynamic Programming",
    "subtopic": "Min Cost Path",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An integer array cost of length n, where cost[i] is the cost of stepping on the ith step.",
    "output_format": "An integer representing the minimum cost to reach the top of the staircase.",
    "constraints": [
      "2 <= cost.length <= 1000",
      "0 <= cost[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "cost = [10, 15, 20]",
        "output": "15",
        "explanation": "The minimum cost to reach the top is 15, by taking the first step (cost 10) then to the top (cost 5), or directly to step 1 and step 2 for 15."
      },
      {
        "input": "cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]",
        "output": "6",
        "explanation": "The minimum cost to reach the top is 6, by opting for the path: 1 -> 1 -> 1 -> 1 -> 1 -> 1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using dynamic programming to keep track of the minimum cost.",
      "You only need to remember the last two steps when calculating the current step cost."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Truncate Sentence",
    "description": "Given a sentence comprising of a series of words separated by spaces, you need to truncate the sentence after a given number of words. Return the truncated sentence without any trailing spaces.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Truncation"
    ],
    "input_format": "A string `sentence` and an integer `k` representing the number of words to keep.",
    "output_format": "A string representing the truncated sentence with at most `k` words.",
    "constraints": [
      "1 <= length of sentence <= 1000",
      "0 <= k <= number of words in sentence"
    ],
    "examples": [
      {
        "input": "sentence = \"Hello world this is a test\", k = 4",
        "output": "Hello world this is",
        "explanation": "The first 4 words are kept to form the truncated sentence."
      },
      {
        "input": "sentence = \"LeetCode is awesome and helpful\", k = 2",
        "output": "LeetCode is",
        "explanation": "The first 2 words are kept from the sentence."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Split the sentence into words using spaces.",
      "Join the first k words back into a sentence."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Median of Two Sorted Arrays",
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Median"
    ],
    "input_format": "Two sorted arrays nums1 and nums2.",
    "output_format": "A float representing the median of the two sorted arrays.",
    "constraints": [
      "0 <= m <= 1000",
      "0 <= n <= 1000",
      "1 <= m + n <= 2000",
      "The arrays nums1 and nums2 are sorted."
    ],
    "examples": [
      {
        "input": "nums1 = [1, 3], nums2 = [2]",
        "output": "2.0",
        "explanation": "The merged array is [1, 2, 3], and the median is 2."
      },
      {
        "input": "nums1 = [1, 2], nums2 = [3, 4]",
        "output": "2.5",
        "explanation": "The merged array is [1, 2, 3, 4], and the median is (2 + 3) / 2 = 2.5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider binary search on the smaller array.",
      "You may need to partition both arrays.",
      "Check edge cases when arrays are of different sizes."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Binary Search",
    "description": "Given a sorted array of integers and a target value, determine if the target exists in the array. If it exists, return the index of the target. Otherwise, return -1.",
    "topic": "Search",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Search"
    ],
    "input_format": "A sorted array of integers nums and an integer target.",
    "output_format": "An integer index of the target if found, otherwise -1.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9",
      "nums is sorted in ascending order."
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5], target = 3",
        "output": "2",
        "explanation": "The target 3 is at index 2."
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], target = 6",
        "output": "-1",
        "explanation": "The target 6 is not present in the array."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a divide and conquer approach.",
      "Check the middle element and decide which half to continue searching."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Make The String Great",
    "description": "Given a string s, you need to perform the following operations on it: remove all occurrences of a lowercase letter that is followed by the same letter in uppercase, and remove all occurrences of an uppercase letter that is followed by the same letter in lowercase. Repeat this process until no more removals can be done. Return the resulting string after all the operations are completed.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Stack"
    ],
    "input_format": "A single string s consisting of lowercase and uppercase letters.",
    "output_format": "A string that represents the final result after all removals.",
    "constraints": [
      "1 <= s.length <= 100",
      "s consists of English letters (lowercase and uppercase)."
    ],
    "examples": [
      {
        "input": "s = 'leEeetcode'",
        "output": "leetcode",
        "explanation": "The 'E' and the 'e' cancel each other out, leaving 'leetcode'."
      },
      {
        "input": "s = 'abBA'",
        "output": "",
        "explanation": "Both 'a' and 'A' cancel each other out, leaving an empty string."
      },
      {
        "input": "s = 's'",
        "output": "s",
        "explanation": "There are no adjacent pairs to remove, so the result is 's'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Think about using a stack to keep track of the characters.",
      "Whenever you encounter a character, check if the top of the stack is its opposite case."
    ],
    "company": "Accenture"
  },
  {
    "question_id": "",
    "title": "Department Top Three Salaries",
    "description": "Given a table 'Employee' which contains the columns 'id', 'name', and 'salary', write a SQL query to find the top three salaries from the 'Employee' table. If there are fewer than three salaries, return NULL for those missing salaries. The result should be sorted in descending order by salary.",
    "topic": "Database",
    "subtopic": "SQL Queries",
    "tags": [
      "SQL",
      "Aggregations",
      "Sorting"
    ],
    "input_format": "A SQL table named 'Employee' with columns 'id', 'name', and 'salary'.",
    "output_format": "A table with a single column 'TopSalary' representing the top three salaries or NULL.",
    "constraints": [
      "The Employee table has at most 200 tables.",
      "The salary column will have unique values."
    ],
    "examples": [
      {
        "input": "SELECT salary FROM Employee;",
        "output": "TopSalary\n3000\n2000\n1000\nNULL\n",
        "explanation": "The first highest salary is 3000, the second is 2000, the third is 1000. The fourth row is NULL since there are no more salaries."
      },
      {
        "input": "SELECT salary FROM Employee;",
        "output": "TopSalary\n4000\n3000\nNULL\nNULL\n",
        "explanation": "There are only two unique salaries present, hence the third and fourth rows are NULL."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using the LIMIT and OFFSET keywords.",
      "You may need to use DISTINCT to handle duplicate salaries."
    ],
    "company": "Accenture"
  }
]