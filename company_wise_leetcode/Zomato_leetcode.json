[
  {
    "question_id": "",
    "title": "Maximum Spending After Buying Items",
    "description": "You have a budget represented as an integer `B` and a list of item prices. Each item can only be bought once, and your goal is to maximize the spending without exceeding the budget. You need to determine the maximum sum of the prices of the items that can be bought within this budget. If it's not possible to buy any item without exceeding the budget, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "Knapsack Problem",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Budget"
    ],
    "input_format": "An integer B (the budget) and an array of integers prices representing the prices of the items.",
    "output_format": "An integer representing the maximum spending without exceeding the budget.",
    "constraints": [
      "1 <= B <= 10^5",
      "1 <= prices.length <= 200",
      "1 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "B = 50, prices = [10, 20, 30, 40, 50]",
        "output": "50",
        "explanation": "You can buy the item priced at 50, which equals your budget."
      },
      {
        "input": "B = 45, prices = [10, 20, 30, 40, 50]",
        "output": "40",
        "explanation": "You can buy the item priced at 40 and 10 (10 + 30 exceed the budget), so the maximum is 40."
      },
      {
        "input": "B = 15, prices = [20, 30, 40]",
        "output": "0",
        "explanation": "None of the items can be bought without exceeding the budget."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a greedy approach to select the most expensive items that fit within the budget.",
      "Sort the item prices first and then try to buy from the most expensive to the cheapest."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Split the Array to Make Coprime Products",
    "description": "Given an integer array `nums`, your task is to split the array into two non-empty parts such that the product of the elements in each part is coprime. Two integers are said to be coprime if their greatest common divisor (GCD) is 1. Return true if such a split is possible, otherwise return false.",
    "topic": "Array",
    "subtopic": "Partitioning Array",
    "tags": [
      "Array",
      "Math",
      "GCD"
    ],
    "input_format": "An integer array nums with length n (1 <= n <= 10^5), where 1 <= nums[i] <= 10^5.",
    "output_format": "A boolean value indicating whether the array can be split into two coprime products.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, 5, 7]",
        "output": "true",
        "explanation": "One possible split is [2] and [3, 5, 7]. The GCD(2, 105) is 1, hence they are coprime."
      },
      {
        "input": "nums = [4, 6, 8]",
        "output": "false",
        "explanation": "No matter how we split this array, the products will share a common factor of 2."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using prime factorization.",
      "Check the GCD of potential splits using efficient methods."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Bitwise OR of All Subsequence Sums",
    "description": "Given an array of integers, calculate the bitwise OR of the sums of all possible subsequences. A subsequence is formed by deleting some or none of the elements of the array while keeping the order of the remaining elements. Return the final result as an integer.",
    "topic": "Array",
    "subtopic": "Bit Manipulation",
    "tags": [
      "Array",
      "Bit Manipulation",
      "Subsequences"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the bitwise OR of all subsequence sums.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "7",
        "explanation": "The subsequence sums are 1, 2, 3, 3 (1+2), 4 (1+3), 5 (2+3), 6 (1+2+3). The bitwise OR of all these sums is 1 | 2 | 3 | 3 | 4 | 5 | 6 = 7."
      },
      {
        "input": "nums = [0, 0, 0]",
        "output": "0",
        "explanation": "All subsequence sums are 0. The bitwise OR of multiple 0's is still 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how bitwise OR operations accumulate bits together.",
      "Analyze how to efficiently combine the contributions of each number in the array."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Shortest Cycle in a Graph",
    "description": "Given a directed or undirected graph, return the length of the shortest cycle in the graph. If no cycle exists, return -1. A cycle is defined as a path that starts and ends at the same vertex. The graph is represented as an adjacency list, where each element in the list corresponds to a vertex and contains a list of adjacent vertices.",
    "topic": "Graph",
    "subtopic": "Cycle Detection",
    "tags": [
      "Graph",
      "DFS",
      "BFS",
      "Cycle"
    ],
    "input_format": "An integer n representing the number of vertices and a list of edges representing the graph.",
    "output_format": "An integer representing the length of the shortest cycle, or -1 if no cycle exists.",
    "constraints": [
      "1 <= n <= 1000",
      "0 <= edges.length <= 2000",
      "edges[i] is a list of two integers [u, v] representing an edge from u to v."
    ],
    "examples": [
      {
        "input": "n = 5, edges = [[0, 1], [1, 2], [2, 0], [1, 3], [3, 4], [4, 1]]",
        "output": "3",
        "explanation": "The shortest cycle is 0 -> 1 -> 2 -> 0, which has length 3."
      },
      {
        "input": "n = 4, edges = [[0, 1], [1, 2], [2, 3]]",
        "output": "-1",
        "explanation": "There is no cycle in the graph."
      },
      {
        "input": "n = 3, edges = [[0, 1], [1, 2], [2, 0], [0, 2]]",
        "output": "2",
        "explanation": "The shortest cycle is 0 -> 2 -> 0, which has length 2."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use BFS or DFS to detect cycles.",
      "Maintain a distance array to track distances from the starting node."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Number of Ways to Divide a Long Corridor",
    "description": "You are given a long corridor consisting of several tiles, each of which can either be empty or contain a wall. You need to divide the corridor into different sections by placing a wall in such a way that each section has at least one tile. The walls can only be placed between two tiles. Return the number of ways to divide the corridor into sections with the walls such that no two walls are adjacent.",
    "topic": "Dynamic Programming",
    "subtopic": "Combinatorial Problems",
    "tags": [
      "Dynamic Programming",
      "Combinations",
      "Mathematics"
    ],
    "input_format": "A string of length n (1 <= n <= 10^5), where each character is either '.' (empty tile) or '#' (wall).",
    "output_format": "An integer representing the number of ways to divide the corridor into sections according to the rules.",
    "constraints": [
      "1 <= n <= 10^5",
      "The string consists only of '.' and '#'."
    ],
    "examples": [
      {
        "input": ".#..#.",
        "output": "4",
        "explanation": "You can place walls in the following ways: (1) between 1st and 2nd, 3rd and 4th; (2) between 1st and 2nd, 4th and 5th; (3) between 3rd and 4th, 5th and 6th; (4) between 3rd and 4th, 1st and 2nd."
      },
      {
        "input": ".###.",
        "output": "1",
        "explanation": "Only one valid wall placement exists, which divides the corridor into two sections."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Think about the positions of walls and how many sections can be formed.",
      "Dynamic programming can help to count the combinations effectively."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Count the Hidden Sequences",
    "description": "Given a string s consisting of uppercase and lowercase letters, your task is to count the number of distinct subsequences that form a hidden sequence. A 'hidden sequence' is defined as any subsequence of letters that can be formed from the original string without reordering the letters. Implement a function that efficiently calculates the number of such subsequences.",
    "topic": "String",
    "subtopic": "Subsequence Count",
    "tags": [
      "String",
      "Dynamic Programming",
      "Subsequence"
    ],
    "input_format": "A string s, where 1 <= s.length <= 10^5.",
    "output_format": "An integer representing the count of distinct hidden subsequences.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of only uppercase and lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'abc'",
        "output": "7",
        "explanation": "The distinct subsequences are: '', 'a', 'b', 'c', 'ab', 'ac', 'bc', 'abc'."
      },
      {
        "input": "s = 'aaa'",
        "output": "3",
        "explanation": "The distinct subsequences are: '', 'a', 'aa', 'aaa'. There are 3 non-empty subsequences."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dynamic programming approach to avoid redundant calculations.",
      "Think about how to use a set to track unique subsequences."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Find and Replace Pattern",
    "description": "You have a list of words and a string pattern. You need to find all the words from the list that match the given pattern. A word matches the pattern if there is a one-to-one mapping between each letter in the pattern and each letter in the word. A letter can map to only one letter, but a letter can map to multiple letters if the same letter is used multiple times in the pattern. The result should be a list of words that match the pattern.",
    "topic": "String",
    "subtopic": "Pattern Matching",
    "tags": [
      "String",
      "Pattern Matching",
      "Hash Map"
    ],
    "input_format": "A list of strings words and a string pattern.",
    "output_format": "A list of strings that match the given pattern.",
    "constraints": [
      "1 <= words.length <= 10^5",
      "1 <= words[i].length <= 20",
      "1 <= pattern.length <= 20"
    ],
    "examples": [
      {
        "input": {
          "words": [
            "abc",
            "deq",
            "mee",
            "aqq",
            "dkd",
            "ccc"
          ],
          "pattern": "abb"
        },
        "output": [
          "mee",
          "aqq"
        ],
        "explanation": "The words 'mee' and 'aqq' match the pattern 'abb'. 'm' maps to 'a', 'e' maps to 'b' and 'a' maps to 'b' respectively."
      },
      {
        "input": {
          "words": [
            "a",
            "b",
            "c",
            "d"
          ],
          "pattern": "a"
        },
        "output": [
          "a"
        ],
        "explanation": "'a' is the only word that matches the pattern 'a'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to track the mapping between letters."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Total Cost to Hire K Workers",
    "description": "You are tasked with hiring K workers from a pool of workers, each of whom has a certain cost associated with hiring them. Given an array of integers costs where costs[i] is the hiring cost of the ith worker, your goal is to determine the minimum total cost to hire K workers. You can only hire workers in pairs and must always hire a worker with the lowest cost available. Implement a function that returns this minimum total cost.",
    "topic": "Greedy",
    "subtopic": "Sorting",
    "tags": [
      "Greedy",
      "Sorting",
      "Array"
    ],
    "input_format": "An array of integers costs where costs.length >= K.",
    "output_format": "An integer representing the minimum total cost to hire K workers.",
    "constraints": [
      "1 <= costs.length <= 10^5",
      "1 <= costs[i] <= 10^4",
      "1 <= K <= costs.length"
    ],
    "examples": [
      {
        "input": "costs = [10, 20, 5, 15], K = 2",
        "output": "15",
        "explanation": "The minimum total cost is achieved by hiring worker with cost 5 and worker with cost 10. Total cost = 5 + 10 = 15."
      },
      {
        "input": "costs = [7, 3, 1, 8, 6], K = 3",
        "output": "10",
        "explanation": "The minimum total cost is achieved by hiring workers with costs 1, 3, and 6. Total cost = 1 + 3 + 6 = 10."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the array to make it easier to find the cheapest workers.",
      "You may use a min-heap to always retrieve the lowest costs efficiently."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Cherry Pickup",
    "description": "In a grid of size n x n, each cell contains either a cherry ('C'), an empty cell ('.'), or a thorn ('#'). You start at the top-left corner of the grid and want to collect as many cherries as possible while moving to the bottom-right corner. You can only move right, down, or diagonally. Additionally, there are two identical robots that start at the top-left corner and can independently move to the bottom-right corner, collecting cherries along the way. If both robots arrive at the same cell, they can only collect cherries once from that cell. Your task is to determine the maximum number of cherries that can be collected by the two robots.",
    "topic": "Dynamic Programming",
    "subtopic": "Grid DP",
    "tags": [
      "Dynamic Programming",
      "Grid",
      "Cherries"
    ],
    "input_format": "A 2D array 'grid' of size n x n where each cell contains either 'C', '.', or '#'.",
    "output_format": "An integer representing the maximum number of cherries that can be collected.",
    "constraints": [
      "1 <= n <= 50",
      "grid[i][j] is either 'C', '.', or '#'.",
      "The start cell grid[0][0] and end cell grid[n-1][n-1] are guaranteed to be '.'"
    ],
    "examples": [
      {
        "input": "grid = [['.','C','C'],['.','#','C'],['C','.','.']]",
        "output": "4",
        "explanation": "One way to collect maximum cherries is for both robots to collect from the cells (0,1), (0,2), (1,2), and (2,0). Total cherries collected = 4."
      },
      {
        "input": "grid = [['C','C','.'],['#','#','#'],['.','C','C']]",
        "output": "5",
        "explanation": "Both robots can collect cherries from the first row and then from (2,1) and (2,2), totaling 5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a 3D DP array to keep track of cherries collected.",
      "Look into the conditions of the robots reaching the same cell and adjust the count accordingly."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Count Zero Request Servers",
    "description": "You are tasked with identifying the number of servers that have received zero requests over a given period. Each server has a unique ID and the server log provides the number of requests received by each server. Given an array of integers representing the number of requests received by each server, return the count of servers that received zero requests.",
    "topic": "Array",
    "subtopic": "Counting Elements",
    "tags": [
      "Array",
      "Counting",
      "Server"
    ],
    "input_format": "An array of integers representing the number of requests received by each server.",
    "output_format": "An integer representing the count of servers that received zero requests.",
    "constraints": [
      "1 <= servers.length <= 10^5",
      "0 <= servers[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "servers = [0, 2, 5, 0, 3]",
        "output": "2",
        "explanation": "There are two servers (the first and fourth) that received zero requests."
      },
      {
        "input": "servers = [1, 2, 3, 4, 5]",
        "output": "0",
        "explanation": "All servers received at least one request; hence, the count is zero."
      },
      {
        "input": "servers = [0, 0, 0, 0]",
        "output": "4",
        "explanation": "All four servers received zero requests."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a simple loop to count occurrences of zero.",
      "Filter the array to count the zeros efficiently."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "First Missing Positive",
    "description": "Given an unsorted integer array nums, find the smallest missing positive integer. You must implement an algorithm that runs in O(n) time and uses constant extra space.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Greedy"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the smallest missing positive integer.",
    "constraints": [
      "0 <= nums.length <= 300",
      "-2^31 <= nums[i] <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 0]",
        "output": "3",
        "explanation": "The smallest missing positive integer is 3."
      },
      {
        "input": "nums = [3, 4, -1, 1]",
        "output": "2",
        "explanation": "The smallest missing positive integer is 2."
      },
      {
        "input": "nums = [7, 8, 9, 11, 12]",
        "output": "1",
        "explanation": "The smallest missing positive integer is 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider numbers outside the range of 1 to n.",
      "Use the array itself to record the presence of numbers."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "LFU Cache",
    "description": "Design and implement a data structure for a Least Frequently Used (LFU) cache. It should support the following operations: get and put. The get operation will retrieve a value from the cache. If the key does not exist, return -1. The put operation will insert or update the value in the cache. If the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item.",
    "topic": "Design",
    "subtopic": "Cache",
    "tags": [
      "Design",
      "Cache",
      "Data Structure"
    ],
    "input_format": "The LFUCache object should be constructed with a positive capacity.",
    "output_format": "The output for the get operation will be an integer representing the value associated with the key or -1 if the key does not exist.",
    "constraints": [
      "1 <= capacity <= 1000",
      "0 <= key <= 10^4",
      "0 <= value <= 10^5",
      "At most 10^4 calls will be made to get and put."
    ],
    "examples": [
      {
        "input": "LFUCache cache = new LFUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.get(3); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "1,-1,3,4",
        "explanation": "After the first two puts, the cache contains (1,1) and (2,2). The get operation returns 1. The next put for key 3 evicts key 2, so the cache contains (1,1) and (3,3). Fetching key 2 returns -1, fetching key 3 returns 3, and then adding key 4 evicts key 1, leaving keys 3 and 4 in the cache."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a hashmap for quick access to elements.",
      "Maintain a frequency count of accesses to efficiently find the LFU item."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Two Sum II - Input Array Is Sorted",
    "description": "Given a 1-indexed array of integers 'numbers' that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Return the indices of the two numbers (1-indexed). You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Binary Search"
    ],
    "input_format": "An array of integers numbers and an integer target.",
    "output_format": "An array of two integers representing the 1-indexed indices of the two numbers.",
    "constraints": [
      "2 <= numbers.length <= 3 * 10^4",
      "-10^9 <= numbers[i] <= 10^9",
      "numbers is sorted in non-decreasing order.",
      "There will be exactly one solution."
    ],
    "examples": [
      {
        "input": "numbers = [2, 7, 11, 15], target = 9",
        "output": "[1, 2]",
        "explanation": "The numbers at indices 1 and 2 add up to 9 (2 + 7 = 9)."
      },
      {
        "input": "numbers = [1, 2, 3, 4, 4, 9, 10], target = 8",
        "output": "[4, 5]",
        "explanation": "The numbers at indices 4 and 5 add up to 8 (4 + 4 = 8)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use the two-pointer technique to find the solution efficiently.",
      "Start one pointer at the beginning and one at the end of the array."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Jump Game II",
    "description": "Given an array of non-negative integers nums, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps. Write a function to calculate the minimum number of jumps required to reach the last index.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithm",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of non-negative integers nums.",
    "output_format": "An integer representing the minimum number of jumps to reach the last index.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, 1, 1, 4]",
        "output": "2",
        "explanation": "The minimum number of jumps to reach the last index is 2 (jump from index 0 to 1, and then from index 1 to 4)."
      },
      {
        "input": "nums = [2, 3, 0, 1, 4]",
        "output": "2",
        "explanation": "The minimum number of jumps to reach the last index is also 2 (jump from index 0 to 1, and then from index 1 to 4)."
      },
      {
        "input": "nums = [0]",
        "output": "0",
        "explanation": "You are already at the last index."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Keep track of the maximum index you can reach.",
      "Use a greedy approach to determine the jumps needed."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Self Crossing",
    "description": "Given an array of integers representing the distance the robot moves in each step, determine if the path will cross itself. A path crosses itself if it intersects with itself at any point (excluding the endpoints). Consider the robot starts at the origin (0,0) and faces North. The initial moves are as follows: U (up), L (left), D (down), R (right). The movement can change direction at each step following the units in the given array.",
    "topic": "Geometry",
    "subtopic": "Path Intersection",
    "tags": [
      "Geometry",
      "Path",
      "Intersection"
    ],
    "input_format": "An array of integers where each integer represents the distance moved in consecutive steps.",
    "output_format": "A boolean value indicating whether the path crosses itself.",
    "constraints": [
      "1 <= path.length <= 10^4",
      "1 <= path[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "[2, 1, 1, 2]",
        "output": "true",
        "explanation": "The robot moves up 2, left 1, down 1 and finally right 2, which crosses its original path."
      },
      {
        "input": "[1, 2, 3, 4]",
        "output": "false",
        "explanation": "The robot moves in a straight line without crossing itself."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the shape created by the moves as boundaries.",
      "Use coordinate geometry to track the position of the robot."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "DFS",
      "Matrix"
    ],
    "input_format": "A 2D grid represented as a list of lists, where each element is either '1' (land) or '0' (water).",
    "output_format": "An integer representing the total number of islands.",
    "constraints": [
      "1 <= rows, cols <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]",
        "output": "3",
        "explanation": "There are three islands: one formed by the first two rows, one isolated '1' on the third row, and one formed by the last two rows."
      },
      {
        "input": "grid = [[0,0,0,0],[0,0,0,0]]",
        "output": "0",
        "explanation": "There are no islands since all cells are water."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use DFS or BFS to explore and mark all cells of an island.",
      "Keep track of visited cells to avoid counting the same island multiple times."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Optimal Account Balancing",
    "description": "In a group of friends, some have lent money to others. You are given an array of transactions where a positive value indicates that a person has lent money and a negative value indicates that a person owes money. Your task is to determine the minimum number of transactions needed to settle all debts among the friends. Each transaction should be settled in the most optimal way possible, meaning the least number of transactions to bring everyone's balances to zero.",
    "topic": "Greedy",
    "subtopic": "Accounting",
    "tags": [
      "Greedy",
      "Math",
      "Graph"
    ],
    "input_format": "An array of integers `transactions`, where each integer represents the amount lent or owed. Positive values indicate a person has lent money, and negative values indicate a debt.",
    "output_format": "An integer representing the minimum number of transactions needed to settle all debts.",
    "constraints": [
      "1 <= transactions.length <= 10^4",
      "-10^5 <= transactions[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "[100, -50, -50]",
        "output": "1",
        "explanation": "One transaction of 100 from the lender to the borrower who owes 50 and the other who also owes 50 settles all debts."
      },
      {
        "input": "[0, 0, 0, 0]",
        "output": "0",
        "explanation": "Since there are no transactions, no debts need to be settled."
      },
      {
        "input": "[500, -300, -700]",
        "output": "2",
        "explanation": "One transaction of 300 from the lender to one borrower and another transaction of 400 from the lender to the other borrower settles the debts."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "You might want to group transactions by net balance.",
      "Think about how to minimize the number of unique balances."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of unique triplets that sum up to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The unique triplets that sum up to zero are [-1, -1, 2] and [-1, 0, 1]."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "There are no elements in the input array, thus no triplets can be formed."
      },
      {
        "input": "nums = [0, 1, 1]",
        "output": "[]",
        "explanation": "There are no triplets that sum up to zero in this case."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the array to facilitate the two-pointer technique.",
      "Use a loop to fix one element and search for the other two elements using two pointers."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Largest Rectangle in Histogram",
    "description": "Given an array of integers where each integer represents the height of a histogram bar, find the area of the largest rectangle that can be formed in the histogram. The rectangle can be formed by using one or more contiguous bars. The width of each bar is 1.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Monotonic Stack",
      "Rectangle"
    ],
    "input_format": "An array of integers heights, representing the heights of the histogram bars.",
    "output_format": "An integer representing the area of the largest rectangle.",
    "constraints": [
      "1 <= heights.length <= 10^5",
      "0 <= heights[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "heights = [2, 1, 5, 6, 2, 3]",
        "output": "10",
        "explanation": "The largest rectangle can be formed with height 5 and width 2, resulting in an area of 5 * 2 = 10."
      },
      {
        "input": "heights = [2, 4]",
        "output": "4",
        "explanation": "The largest rectangle can be formed with height 4 and width 1, resulting in an area of 4."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a stack to keep track of the bar indices.",
      "Calculate the area whenever a lower height is encountered."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Unique Paths",
    "description": "A robot is located at the top-left corner of an m x n grid and can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. How many possible unique paths are there for the robot to reach the bottom-right corner?",
    "topic": "Dynamic Programming",
    "subtopic": "Grid Traversal",
    "tags": [
      "Dynamic Programming",
      "Grid",
      "Path Counting"
    ],
    "input_format": "Two integers m and n representing the number of rows and columns in the grid, respectively.",
    "output_format": "An integer representing the number of unique paths from the top-left to the bottom-right corner of the grid.",
    "constraints": [
      "1 <= m, n <= 100"
    ],
    "examples": [
      {
        "input": "m = 3, n = 7",
        "output": "28",
        "explanation": "There are a total of 28 unique paths in a 3x7 grid."
      },
      {
        "input": "m = 3, n = 2",
        "output": "3",
        "explanation": "There are a total of 3 unique paths in a 3x2 grid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dynamic programming approach to build up the solution.",
      "The number of paths to a cell can be found by adding the number of paths to the cell above it and the cell to the left."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Frog Jump",
    "description": "A frog is initially positioned at the origin (0) and wants to jump to a river at position x. The frog can jump a distance of 1, 2, or 3 units at a time. Given the position x, determine whether the frog can reach the river exactly using a combination of these jumps. You need to return true if it's possible for the frog to reach the position x, or false otherwise.",
    "topic": "Dynamic Programming",
    "subtopic": "State Transition",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Backtracking"
    ],
    "input_format": "An integer x representing the position of the river.",
    "output_format": "A boolean value indicating whether the frog can reach position x exactly.",
    "constraints": [
      "0 <= x <= 10^6"
    ],
    "examples": [
      {
        "input": "x = 4",
        "output": "true",
        "explanation": "The frog can jump 1 + 1 + 2 or 2 + 2."
      },
      {
        "input": "x = 5",
        "output": "true",
        "explanation": "The frog can jump 2 + 3 or 3 + 2."
      },
      {
        "input": "x = 6",
        "output": "true",
        "explanation": "The frog can jump 1 + 1 + 1 + 1 + 2 or 2 + 2 + 2."
      },
      {
        "input": "x = 7",
        "output": "false",
        "explanation": "The frog cannot reach position 7 using steps of 1, 2, or 3 units."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a recursive approach combined with memoization.",
      "Think about how many ways the frog can reach each position.",
      "Explore dynamic programming to optimize the solution."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Unique Paths II",
    "description": "A robot is located at the top-left corner of a m x n grid and needs to reach the bottom-right corner. The robot can only move either down or right at any point in time. Some cells in the grid are obstacles that the robot cannot pass through. Given a m x n grid containing '0's (empty cell) and '1's (obstacle), return the number of unique paths from the top-left to the bottom-right corner, or 0 if there is no such path.",
    "topic": "Dynamic Programming",
    "subtopic": "Pathfinding",
    "tags": [
      "Dynamic Programming",
      "DFS",
      "Grid Traversal"
    ],
    "input_format": "A 2D array grid where grid[i][j] is either 0 or 1.",
    "output_format": "An integer representing the number of unique paths from the top-left to the bottom-right of the grid.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 100",
      "grid[i][j] is 0 or 1.",
      "The starting cell (0, 0) and the ending cell (m-1, n-1) are guaranteed to be unblocked (i.e., grid[0][0] == grid[m-1][n-1] == 0)."
    ],
    "examples": [
      {
        "input": "grid = [[0,0,0],[0,1,0],[0,0,0]]",
        "output": "2",
        "explanation": "There are two unique paths to the bottom-right corner: (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) and (0,0) -> (1,0) -> (2,0) -> (2,1) -> (2,2)."
      },
      {
        "input": "grid = [[0,1],[0,0]]",
        "output": "1",
        "explanation": "There is only one unique path to the bottom-right corner: (0,0) -> (1,0) -> (1,1)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to keep track of the number of paths to each cell.",
      "Start from the bottom-right corner and move towards the top-left."
    ],
    "company": "Zomato"
  },
  {
    "question_id": "",
    "title": "Snakes and Ladders",
    "description": "You are given a board represented as a 2D array with positive integers. The board represents a Snakes and Ladders game. Your task is to determine the minimum number of moves it takes to go from the start (position 1) to the end (the last square on the board). The game has snakes that will move you down and ladders that will elevate your position. If it is impossible to reach the end, return -1.",
    "topic": "Graph",
    "subtopic": "BFS",
    "tags": [
      "Graph",
      "BFS",
      "Traversal"
    ],
    "input_format": "A 2D array board representing the Snakes and Ladders game.",
    "output_format": "An integer representing the minimum number of moves to reach the end, or -1 if it's impossible.",
    "constraints": [
      "1 <= board.length == board[i].length <= 20",
      "0 <= board[i][j] <= 100",
      "There are no horizontal snakes or ladders."
    ],
    "examples": [
      {
        "input": "board = [[-1,-1,-1,-1,-1],[2,-1,-1,-1,1],[-1,-1,-1,-1,-1],[-1,-1,3,-1,-1],[-1,-1,-1,-1,-1]]",
        "output": "3",
        "explanation": "You can move from position 1 -> 2 -> 3 -> 6. The moves are 1 -> 2 (ladder), 2 -> 3, and 3 -> 6."
      },
      {
        "input": "board = [[-1,-1],[2,-1]]",
        "output": "1",
        "explanation": "A direct ladder takes you from position 1 to position 2 in one move."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use BFS to explore possible moves.",
      "Keep track of visited positions to avoid cycles."
    ],
    "company": "Zomato"
  }
]