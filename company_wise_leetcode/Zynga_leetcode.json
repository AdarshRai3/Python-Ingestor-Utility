[
  {
    "question_id": "",
    "title": "Largest Rectangle in Histogram",
    "description": "Given an array of integers representing the heights of bars in a histogram, find the area of the largest rectangle that can be formed under the histogram.",
    "topic": "Stack",
    "subtopic": "Monotonic Stack",
    "tags": [
      "Stack",
      "Monotonic Stack",
      "Array",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers heights representing the height of each bar in the histogram.",
    "output_format": "An integer representing the area of the largest rectangle under the histogram.",
    "constraints": [
      "1 <= heights.length <= 10^5",
      "0 <= heights[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "heights = [2, 1, 5, 6, 2, 3]",
        "output": "10",
        "explanation": "The largest rectangle has an area of 10, which can be formed using the heights 5 and 6."
      },
      {
        "input": "heights = [2, 4]",
        "output": "4",
        "explanation": "The largest rectangle can be formed using the height 4 only."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a stack to keep track of the indices of the histogram bars.",
      "When traversing the heights, think about when to calculate the area and when to remove bars from the stack."
    ],
    "company": "Zynga"
  },
  {
    "question_id": "",
    "title": "Asteroid Collision",
    "description": "We have an array of integers representing asteroids in a row. Each asteroid is a positive or negative integer. The positive integer represents an asteroid moving to the right, while the negative represents an asteroid moving to the left. When two asteroids collide, the smaller one will explode. If they are of equal size, both will explode. Determine the state of asteroids after all collisions are resolved.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Simulation"
    ],
    "input_format": "An array of integers asteroids where each integer represents an asteroid.",
    "output_format": "An array of integers representing the asteroids that remain after all collisions.",
    "constraints": [
      "1 <= asteroids.length <= 10^4",
      "-1000 <= asteroids[i] <= 1000",
      "Asteroids moving in the same direction will not collide."
    ],
    "examples": [
      {
        "input": "[5, 10, -5]",
        "output": "[5, 10]",
        "explanation": "The first asteroid moves to the right and the second asteroid moves to the left. They collide and the smaller asteroid (-5) explodes. The remaining asteroids are 5 and 10."
      },
      {
        "input": "[8, -8]",
        "output": "[]",
        "explanation": "Both asteroids are equal in size and collide, resulting in both exploding."
      },
      {
        "input": "[10, 2, -5]",
        "output": "[10]",
        "explanation": "The 2 collides with -5 and explodes, while 10 remains as it does not collide with anything."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the asteroids.",
      "Handle collisions by comparing the top of the stack with the incoming asteroid."
    ],
    "company": "Zynga"
  },
  {
    "question_id": "",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list and return the reversed list's head.",
    "topic": "Linked List",
    "subtopic": "Reversing Linked List",
    "tags": [
      "LinkedList",
      "Reversal",
      "Pointer Manipulation"
    ],
    "input_format": "The head of a singly linked list, where each node contains an integer value.",
    "output_format": "The head of the reversed linked list.",
    "constraints": [
      "The number of nodes in the list is in the range [0, 5000].",
      "-5000 <= Node.val <= 5000"
    ],
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5]",
        "output": "[5, 4, 3, 2, 1]",
        "explanation": "The original linked list is 1 -> 2 -> 3 -> 4 -> 5. The reversed list should be 5 -> 4 -> 3 -> 2 -> 1."
      },
      {
        "input": "head = [1]",
        "output": "[1]",
        "explanation": "A list with a single node remains unchanged when reversed."
      },
      {
        "input": "head = []",
        "output": "[]",
        "explanation": "An empty list should return an empty list."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to use an iterative approach with three pointers.",
      "You can also solve this problem using recursion."
    ],
    "company": "Zynga"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters in the string.",
    "topic": "String",
    "subtopic": "Substring",
    "tags": [
      "String",
      "Substring",
      "Sliding Window"
    ],
    "input_format": "A single string s consisting of English letters, digits, symbols, and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 5 * 10^4",
      "s consists of English letters, digits, symbols, and spaces."
    ],
    "examples": [
      {
        "input": "s = 'abcabcbb'",
        "output": "3",
        "explanation": "The answer is 'abc', with the length of 3."
      },
      {
        "input": "s = 'bbbbb'",
        "output": "1",
        "explanation": "The answer is 'b', with the length of 1."
      },
      {
        "input": "s = 'pwwkew'",
        "output": "3",
        "explanation": "The answer is 'wke', with the length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window to keep track of the substring.",
      "Utilize a data structure to store the current characters and their indices."
    ],
    "company": "Zynga"
  }
]