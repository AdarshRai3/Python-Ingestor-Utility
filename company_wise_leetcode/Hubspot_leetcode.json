[
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array. The initial part of nums1 has a length of m, which represents the number of elements that should be merged, and nums1 has a length of m + n, where the last n elements are set to 0 and should be ignored. nums2 has a length of n. You must merge the arrays in place and do not return anything from your function.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Merge",
      "Two Pointers"
    ],
    "input_format": "Two integer arrays nums1 and nums2 with lengths m and n respectively.",
    "output_format": "The merged array nums1 in place, no return value.",
    "constraints": [
      "0 <= m, n <= 200",
      "1 <= m + n <= 200",
      "nums1.length == m + n",
      "-10^9 <= nums1[i], nums2[j] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1, 2, 3, 0, 0, 0], m = 3, nums2 = [2, 5, 6], n = 3",
        "output": "[1, 2, 2, 3, 5, 6]",
        "explanation": "The merged array is [1, 2, 2, 3, 5, 6]."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "Since nums2 is empty, the merged array remains [1]."
      },
      {
        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "output": "[1]",
        "explanation": "The merged array consists of just nums2 as nums1 had no elements to start with."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to keep track of the current index in nums1 and nums2.",
      "Start merging from the end of nums1."
    ],
    "company": "Hubspot"
  },
  {
    "question_id": "",
    "title": "Merge Two Sorted Lists",
    "description": "You are given the heads of two sorted linked lists, list1 and list2. Merge the two lists into one sorted list. The merged list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.",
    "topic": "Linked List",
    "subtopic": "Merging Lists",
    "tags": [
      "Linked List",
      "Sorting",
      "Merge"
    ],
    "input_format": "The input consists of two linked lists, list1 and list2, where each list is represented by its head node.",
    "output_format": "The output will be the head of the merged linked list sorted in non-decreasing order.",
    "constraints": [
      "The number of nodes in both lists is in the range [0, 50].",
      "-100 <= Node.val <= 100",
      "Both list1 and list2 are sorted in non-decreasing order."
    ],
    "examples": [
      {
        "input": "list1 = [1, 2, 4], list2 = [1, 3, 4]",
        "output": "[1, 1, 2, 3, 4, 4]",
        "explanation": "The merged list is formed by taking the nodes from both lists: 1 -> 1 -> 2 -> 3 -> 4 -> 4."
      },
      {
        "input": "list1 = [], list2 = [0]",
        "output": "[0]",
        "explanation": "Since list1 is empty, the merged list is just list2."
      },
      {
        "input": "list1 = [], list2 = []",
        "output": "[]",
        "explanation": "Both lists are empty, so the merged list is also empty."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a dummy node to simplify list merging.",
      "Use pointers to traverse and compare the nodes in both lists."
    ],
    "company": "Hubspot"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. For example, if you have intervals [1,3], [2,6], [8,10], and [15,18], the merged intervals would be [1,6] and [8,10], and [15,18].",
    "topic": "Array",
    "subtopic": "Sorting & Intervals",
    "tags": [
      "Array",
      "Sorting",
      "Intervals"
    ],
    "input_format": "A list of intervals where each interval is represented as a pair of integers [start, end].",
    "output_format": "A list of merged intervals in the same format where there are no overlapping intervals.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "The intervals [1,3] and [2,6] overlap, so they are merged into [1,6]. The other intervals do not overlap."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] overlap at the boundary, hence they are merged into [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on the start time.",
      "Use a loop to compare the current interval with the last merged interval."
    ],
    "company": "Hubspot"
  },
  {
    "question_id": "",
    "title": "Maximum Number of Occurrences of a Substring",
    "description": "Given a string s and an array of strings words, return the maximum number of occurrences of any substring from words within s. A substring is considered to occur if it appears in s as a contiguous sequence of characters. If multiple substrings have the same maximum occurrence, return the one that appears first in s.",
    "topic": "String",
    "subtopic": "Substring Search",
    "tags": [
      "String",
      "Substring",
      "Search"
    ],
    "input_format": "The input consists of a string s and an array of strings words.",
    "output_format": "An integer representing the maximum number of occurrences of any substring from words in s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "1 <= words.length <= 1000",
      "1 <= words[i].length <= 100",
      "words[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": {
          "s": "ababa",
          "words": [
            "aba",
            "ab",
            "a"
          ]
        },
        "output": "2",
        "explanation": "The substring 'ab' occurs 2 times, while 'aba' occurs 1 time and 'a' occurs 3 times. The maximum occurrences is 'a' with 3."
      },
      {
        "input": {
          "s": "babbabba",
          "words": [
            "ba",
            "ab",
            "b"
          ]
        },
        "output": "4",
        "explanation": "The substrings 'ba' and 'ab' both occur 2 times each, while 'b' occurs 4 times. The maximum occurrences is 'b' with 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a HashMap to store occurrences.",
      "Iterate through the string and check for each word.",
      "Keep track of the maximum occurrences found."
    ],
    "company": "Hubspot"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a hash map to store the indices of elements."
    ],
    "company": "Hubspot"
  },
  {
    "question_id": "",
    "title": "Meeting Rooms II",
    "description": "Given an array of meeting time intervals where each interval is represented as a pair of integers [start, end], return the minimum number of conference rooms required to hold all the meetings. A meeting occupies one room for the entire duration of its time interval.",
    "topic": "Greedy",
    "subtopic": "Intervals",
    "tags": [
      "Greedy",
      "Intervals",
      "Sorting"
    ],
    "input_format": "An array of intervals where each interval is an array [start, end].",
    "output_format": "An integer representing the minimum number of conference rooms required.",
    "constraints": [
      "0 <= intervals.length <= 10^4",
      "0 <= intervals[i][0] < intervals[i][1] <= 10^6"
    ],
    "examples": [
      {
        "input": "intervals = [[0, 30],[5, 10],[15, 20]]",
        "output": "2",
        "explanation": "We need two rooms: one for [0, 30] and another for [5, 10] and [15, 20]."
      },
      {
        "input": "intervals = [[7,10],[2,4]]",
        "output": "1",
        "explanation": "Both meetings can be held in the same room."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a min-heap to keep track of the end times of meetings."
    ],
    "company": "Hubspot"
  },
  {
    "question_id": "",
    "title": "Top K Frequent Elements",
    "description": "Given a non-empty array of integers, return the k most frequent elements. You may return the answer in any order. Your algorithm should have a linear runtime complexity.",
    "topic": "Hash Table",
    "subtopic": "Frequency Counting",
    "tags": [
      "Hash Table",
      "Counting",
      "Heap"
    ],
    "input_format": "An array of integers nums and an integer k.",
    "output_format": "An array of integers containing the k most frequent elements.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^4",
      "k is valid and falls within the range of the number of unique elements in the array."
    ],
    "examples": [
      {
        "input": "nums = [1,1,1,2,2,3], k = 2",
        "output": "[1,2]",
        "explanation": "The element 1 appears 3 times and 2 appears 2 times. So the top 2 frequent elements are 1 and 2."
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]",
        "explanation": "There is only one element in the input array, which is also the most frequent."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to count the frequency of elements.",
      "Consider using a heap to keep track of the top k elements."
    ],
    "company": "Hubspot"
  },
  {
    "question_id": "",
    "title": "Merge k Sorted Lists",
    "description": "You are given an array of k linked-lists, each linked-list is sorted in ascending order. Your task is to merge all the linked-lists into one sorted linked-list and return it.",
    "topic": "Linked List",
    "subtopic": "Merging",
    "tags": [
      "Linked List",
      "Sorting",
      "Heap"
    ],
    "input_format": "An array of k linked-lists where each linked-list is sorted in ascending order.",
    "output_format": "A single linked-list that merges all k input linked-lists into one sorted linked-list.",
    "constraints": [
      "k == nums.length",
      "0 <= k <= 10^4",
      "0 <= nums[i].length <= 500",
      "-10^4 <= nums[i][j] <= 10^4",
      "Each linked-list is sorted in ascending order."
    ],
    "examples": [
      {
        "input": "[1->4->5, 1->3->4, 2->6]",
        "output": "1->1->2->3->4->4->5->6",
        "explanation": "Merging the three lists results in a single sorted list."
      },
      {
        "input": "[]",
        "output": "",
        "explanation": "An empty list should return an empty linked-list."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a min-heap to keep track of the smallest current nodes.",
      "You can create a dummy node to simplify the merging process."
    ],
    "company": "Hubspot"
  },
  {
    "question_id": "",
    "title": "Find the K-Sum of an Array",
    "description": "Given an array of integers and an integer k, your task is to find the k-th largest sum of any contiguous subarray. A subarray is defined as a contiguous portion of the original array. If there are fewer than k distinct sums, return the smallest sum that is achievable.",
    "topic": "Array",
    "subtopic": "Subarray Sum",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Subarray"
    ],
    "input_format": "An array of integers nums and an integer k.",
    "output_format": "An integer representing the k-th largest sum of any contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 1000",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= 10^3"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4], k = 2",
        "output": "6",
        "explanation": "The contiguous subarrays and their sums are: [1] = 1, [2] = 2, [3] = 3, [4] = 4, [1, 2] = 3, [2, 3] = 5, [3, 4] = 7, [1, 2, 3] = 6, [2, 3, 4] = 9, [1, 2, 3, 4] = 10. The distinct sums sorted are [1, 2, 3, 4, 5, 6, 7, 9, 10]. The second largest sum is 6."
      },
      {
        "input": "nums = [-1, -2, -3], k = 1",
        "output": "-1",
        "explanation": "The contiguous subarrays and their sums are: [-1] = -1, [-2] = -2, [-3] = -3, [-1, -2] = -3, [-2, -3] = -5, [-1, -2, -3] = -6. The distinct sums sorted are [-6, -5, -3, -2, -1]. The largest sum is -1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider maintaining a sorted list of sums.",
      "Use a sliding window to manage subarray sums."
    ],
    "company": "Hubspot"
  },
  {
    "question_id": "",
    "title": "Find the Celebrity",
    "description": "You are given a party of n people, where some know others. A celebrity is defined as someone who is known by everyone but knows no one at the party. Your task is to determine if there is a celebrity present in the party and return their index. If there is no celebrity, return -1. You may assume there are no two celebrities at the party.",
    "topic": "Graph",
    "subtopic": "Graph Theory",
    "tags": [
      "Graph",
      "Celebrity Problem",
      "Algorithm"
    ],
    "input_format": "A 2D array of integers `M` of size n x n where M[i][j] = 1 if person i knows person j, otherwise M[i][j] = 0.",
    "output_format": "An integer representing the index of the celebrity or -1 if there is no celebrity.",
    "constraints": [
      "2 <= n <= 100",
      "M[i][j] is either 0 or 1"
    ],
    "examples": [
      {
        "input": "M = [[0, 1, 0], [0, 0, 1], [0, 0, 0]]",
        "output": "2",
        "explanation": "Person 2 is known by persons 0 and 1, and knows no one."
      },
      {
        "input": "M = [[0, 1], [1, 0]]",
        "output": "-1",
        "explanation": "There is no celebrity as both know each other."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a two-pointer approach to identify a potential celebrity.",
      "Verify the potential celebrity by checking their relationships."
    ],
    "company": "Hubspot"
  }
]