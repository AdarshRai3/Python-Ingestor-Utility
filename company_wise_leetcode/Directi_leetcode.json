[
  {
    "question_id": "",
    "title": "Minimum Cost to Buy Apples",
    "description": "You are given two integers, cost_per_apple and max_apples. You want to buy apples in such a way that you minimize the total cost spent. You can buy at most max_apples apples and the cost of purchasing any apple is given by cost_per_apple. However, there is a discount policy where if you buy more than one apple, the total cost is halved. Calculate the minimum cost to buy the apples.",
    "topic": "Mathematics",
    "subtopic": "Optimization",
    "tags": [
      "Math",
      "Optimization",
      "Greedy"
    ],
    "input_format": "Two integers, cost_per_apple (1 <= cost_per_apple <= 1000) and max_apples (1 <= max_apples <= 100).",
    "output_format": "An integer representing the minimum cost to buy apples.",
    "constraints": [
      "1 <= cost_per_apple <= 1000",
      "1 <= max_apples <= 100"
    ],
    "examples": [
      {
        "input": "cost_per_apple = 10, max_apples = 5",
        "output": "25",
        "explanation": "Buying 5 apples costs 5 * 10 = 50. But with the discount, it costs 50 / 2 = 25."
      },
      {
        "input": "cost_per_apple = 5, max_apples = 3",
        "output": "15",
        "explanation": "Buying 3 apples costs 3 * 5 = 15. Since it's less than the discount threshold, no discount applies."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the cost breakdown based on the number of apples bought.",
      "Check how the total cost behaves with and without discounts."
    ],
    "company": "Directi"
  },
  {
    "question_id": "",
    "title": "Maximum XOR of Two Non-Overlapping Subtrees",
    "description": "Given a binary tree, you need to find the maximum XOR value that can be obtained from two non-overlapping subtrees. A subtree is defined as a tree consisting of a node and all of its descendants. The XOR value of a subtree is defined as the XOR of all node values in that subtree. Non-overlapping means the two subtrees cannot share any nodes.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Bit Manipulation"
    ],
    "input_format": "The input consists of a single integer representing the number of nodes, followed by a list of integers representing the values of each node in a level-order traversal of the tree.",
    "output_format": "An integer representing the maximum XOR value of two non-overlapping subtrees.",
    "constraints": [
      "1 <= number of nodes <= 10^5",
      "-10^5 <= node value <= 10^5"
    ],
    "examples": [
      {
        "input": "nodes = [1, 2, 3, 4, 5]",
        "output": "7",
        "explanation": "The maximum XOR is obtained from subtrees rooted at nodes 2 (XOR = 2) and 3 (XOR = 3). Their total XOR is 2 ^ 3 = 1."
      },
      {
        "input": "nodes = [5, 3, 7, 2, 4, 6, 8]",
        "output": "15",
        "explanation": "The maximum XOR is achieved by taking the subtree with root 2 (XOR = 2) and the subtree with root 8 (XOR = 8). Their total XOR results in 2 ^ 8 = 10."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a depth-first search to compute the XOR for each subtree.",
      "Use a data structure to store XOR values for quick access.",
      "Ensure that any two chosen subtrees do not overlap."
    ],
    "company": "Directi"
  },
  {
    "question_id": "",
    "title": "Difference Between Maximum and Minimum Price Sum",
    "description": "You are given a list of product prices from various vendors. Your goal is to determine the maximum possible sum of prices from a selection of products, and the minimum possible sum from another selection of products. You need to return the absolute difference between these two sums.",
    "topic": "Array",
    "subtopic": "Sorting and Greedy Algorithms",
    "tags": [
      "Array",
      "Sorting",
      "Greedy",
      "Mathematics"
    ],
    "input_format": "An array of integers prices, where each integer represents the price of a product.",
    "output_format": "An integer representing the absolute difference between the maximum and minimum price sums.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "prices = [3, 1, 4, 1, 5, 9]",
        "output": "16",
        "explanation": "The maximum sum is 4 + 5 + 9 = 18. The minimum sum is 1 + 1 + 3 = 5. The absolute difference is |18 - 5| = 13."
      },
      {
        "input": "prices = [10, 20, 30, 40]",
        "output": "50",
        "explanation": "Maximum sum using 30 and 40 gives 70, minimum sum using 10 and 20 gives 30. The absolute difference is |70 - 30| = 40."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider sorting the price array.",
      "Use the largest elements for the maximum sum.",
      "Use the smallest elements for the minimum sum."
    ],
    "company": "Directi"
  },
  {
    "question_id": "",
    "title": "Number of Sub-arrays With Odd Sum",
    "description": "Given an array of integers, find the total number of contiguous sub-arrays that have an odd sum. A sub-array is a contiguous part of an array. The problem requires you to count all such sub-arrays efficiently, considering the constraints of the input array size.",
    "topic": "Array",
    "subtopic": "Prefix Sum",
    "tags": [
      "Array",
      "Prefix Sum",
      "Sub-array"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the number of sub-arrays with an odd sum.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "4",
        "explanation": "The sub-arrays with odd sums are: [1], [2, 3], [1, 2], [3]. So, the total count is 4."
      },
      {
        "input": "nums = [2, 4, 6]",
        "output": "0",
        "explanation": "There are no sub-arrays with an odd sum as all elements are even."
      },
      {
        "input": "nums = [1, 3, 5, 7]",
        "output": "10",
        "explanation": "All sub-arrays formed from this array will have odd sums. The count is 10."
      },
      {
        "input": "nums = [1, 2, 3, 4, 5]",
        "output": "9",
        "explanation": "The sub-arrays with odd sums are [1], [2,3], [2,4,5], [3], [4,5], [1,2], [1,2,3,4], [1,3], and [5]. Total count is 9."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the parity (even or odd) of the prefix sums.",
      "Use a hashmap to store counts of prefix sum parities.",
      "Every time an odd prefix sum is encountered, it can form sub-arrays with previous even prefix sums."
    ],
    "company": "Directi"
  },
  {
    "question_id": "",
    "title": "Find the Winner of an Array Game",
    "description": "You are given an array of integers, representing the scores of different players in a game. Each player plays several rounds, and the scores are recorded in the array. Your task is to determine which player has the highest total score at the end of all rounds. If there is a tie, return the player with the smallest index (1-based).",
    "topic": "Array",
    "subtopic": "Prefix Sum",
    "tags": [
      "Array",
      "Game",
      "Score",
      "Prefix Sum"
    ],
    "input_format": "An array of integers representing scores.",
    "output_format": "An integer representing the 1-based index of the winner.",
    "constraints": [
      "1 <= scores.length <= 1000",
      "1 <= scores[i] <= 1000"
    ],
    "examples": [
      {
        "input": "scores = [1, 3, 3, 5, 2]",
        "output": "4",
        "explanation": "Player 1: 1, Player 2: 3, Player 3: 3, Player 4: 5, Player 5: 2. Player 4 has the highest score."
      },
      {
        "input": "scores = [4, 3, 4, 2, 4]",
        "output": "1",
        "explanation": "Player 1 has a total score of 4, Player 2 has 3, Player 3 has 4, Player 4 has 2, and Player 5 has 4. Both Player 1, 3, and 5 have the highest score but Player 1 has the smallest index."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a frequency map to count the scores of each player.",
      "Explore different ways to track the highest score and its corresponding player."
    ],
    "company": "Directi"
  },
  {
    "question_id": "",
    "title": "Find Longest Awesome Substring",
    "description": "Given a string s, return the length of the longest substring that can be considered 'awesome'. A substring is considered 'awesome' if the count of all characters in it has at most one character with an odd count. For example, 'aaabb' and 'abab' are awesome, while 'aabbcc' is not. The substring must be contiguous.",
    "topic": "String",
    "subtopic": "Substring Manipulation",
    "tags": [
      "String",
      "Substring",
      "HashMap"
    ],
    "input_format": "A string s containing lowercase English letters.",
    "output_format": "An integer representing the length of the longest awesome substring.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists only of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"abacaba\"",
        "output": "7",
        "explanation": "The entire string 'abacaba' is an awesome substring as it satisfies the conditions."
      },
      {
        "input": "s = \"aabbcc\"",
        "output": "4",
        "explanation": "The substring 'aabb' has an equal number of 'a's and 'b's, which are both even. Thus, it is awesome."
      },
      {
        "input": "s = \"abcde\"",
        "output": "1",
        "explanation": "Each character is unique, which means the longest awesome substring can be any single character."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a frequency map to count the occurrences of each character.",
      "Use bit manipulation to track characters with odd counts.",
      "Consider using a sliding window approach to optimize your solution."
    ],
    "company": "Directi"
  },
  {
    "question_id": "",
    "title": "Min Cost to Connect All Points",
    "description": "You are given an array points where points[i] = [xi, yi] represents a point in a 2D plane. The cost to connect two points (xi, yi) and (xj, yj) is the Manhattan distance between them: |xi - xj| + |yi - yj|. Your goal is to connect all the points together with the minimum cost and return the total cost of connecting all points.",
    "topic": "Graph",
    "subtopic": "Minimum Spanning Tree",
    "tags": [
      "Graph",
      "Minimum Spanning Tree",
      "Union Find"
    ],
    "input_format": "An array points of length n where each points[i] is a list of two integers [xi, yi].",
    "output_format": "An integer representing the minimum cost to connect all points.",
    "constraints": [
      "1 <= points.length <= 1000",
      "-10000 <= points[i][0], points[i][1] <= 10000"
    ],
    "examples": [
      {
        "input": "points = [[0,0],[2,2],[3,10],[5,2],[7,0]]",
        "output": "20",
        "explanation": "The minimum cost to connect the points is 20."
      },
      {
        "input": "points = [[-1,-1],[1,1],[1,-1],[-1,1]]",
        "output": "4",
        "explanation": "The minimum cost to connect the points is 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a minimum spanning tree algorithm.",
      "Kruskal's or Prim's algorithm are both valid approaches."
    ],
    "company": "Directi"
  },
  {
    "question_id": "",
    "title": "Largest Submatrix With Rearrangements",
    "description": "Given a binary matrix consisting of 0s and 1s, you need to find the largest rectangle containing only 1s that can be formed by rearranging rows of the matrix. Each row may be swapped with any other row but can't be modified. Return the area of this largest rectangle.",
    "topic": "Dynamic Programming",
    "subtopic": "Matrix Manipulation",
    "tags": [
      "Matrix",
      "Dynamic Programming",
      "Histogram"
    ],
    "input_format": "A 2D binary matrix of dimensions m x n where 1 <= m, n <= 100.",
    "output_format": "An integer representing the area of the largest rectangle that can be formed.",
    "constraints": [
      "1 <= m, n <= 100",
      "matrix[i][j] is either 0 or 1"
    ],
    "examples": [
      {
        "input": "[[1,0,1],[1,1,1],[1,0,1]]",
        "output": "6",
        "explanation": "By rearranging rows, you can form the following matrix: [[1,1,1],[1,1,1]]. The largest rectangle of 1s has an area of 2 * 3 = 6."
      },
      {
        "input": "[[0,0],[0,0]]",
        "output": "0",
        "explanation": "There are no 1s in the matrix, hence the largest rectangle area is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider utilizing a histogram approach to compute heights for each column.",
      "Think about how sorting rows can help in maximizing rectangle areas."
    ],
    "company": "Directi"
  },
  {
    "question_id": "",
    "title": "Binary Tree Maximum Path Sum",
    "description": "Given a non-empty binary tree, return the maximum path sum. A path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root. The path sum of a path is the sum of the node values in the path.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "DFS",
      "Recursion"
    ],
    "input_format": "The input is a binary tree represented by its root node.",
    "output_format": "An integer representing the maximum path sum.",
    "constraints": [
      "The number of nodes in the tree is in the range [1, 3 * 10^4].",
      "-1000 <= Node.val <= 1000"
    ],
    "examples": [
      {
        "input": "root = [-10, 9, 20, null, null, 15, 7]",
        "output": "42",
        "explanation": "The maximum path sum is obtained by the path 15 -> 20 -> 7, which is 15 + 20 + 7 = 42."
      },
      {
        "input": "root = [1, 2, 3]",
        "output": "6",
        "explanation": "The maximum path sum is obtained by the path 2 -> 1 -> 3, which is 2 + 1 + 3 = 6."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider each node as a potential endpoint of a path.",
      "Try to calculate the maximum path sum from each node to its children.",
      "Keep track of the maximum value encountered during the tree traversal."
    ],
    "company": "Directi"
  }
]