[
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers that add up to target.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "The numbers at indices 0 and 1 are 2 and 7, which add up to 9."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "The numbers at indices 1 and 2 are 2 and 4, which add up to 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash table to store the difference between the target and the current number."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Palindrome Number",
    "description": "Given an integer, determine whether it is a palindrome. An integer is a palindrome when it reads the same backward as forward. For example, 121 is a palindrome while 123 is not.",
    "topic": "Math",
    "subtopic": "Number Theory",
    "tags": [
      "Palindrome",
      "Math",
      "Number Theory"
    ],
    "input_format": "An integer n.",
    "output_format": "A boolean value indicating whether n is a palindrome.",
    "constraints": [
      "-2^31 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "n = 121",
        "output": "true",
        "explanation": "The number 121 reads the same backward as forward."
      },
      {
        "input": "n = -121",
        "output": "false",
        "explanation": "The number -121 when reversed becomes 121-, which is not the same as the original number."
      },
      {
        "input": "n = 10",
        "output": "false",
        "explanation": "The number 10 reads 01 backward, which is not the same as the original number."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try converting the number to a string."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Majority Element",
    "description": "Given an array of size n, the majority element is the element that appears more than n/2 times. Design an algorithm to find the majority element in the array. You may assume that the majority element always exists in the array.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Majority Element"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the majority element.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [2, 2, 1, 1, 1, 2, 2]",
        "output": "2",
        "explanation": "The majority element is 2, which appears 4 times."
      },
      {
        "input": "nums = [3, 3, 4, 2, 4, 4, 2, 4, 4]",
        "output": "4",
        "explanation": "The majority element is 4, which appears 5 times."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try using a hash map to count the occurrences of each element.",
      "Consider a more efficient approach like Boyer-Moore Voting Algorithm."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the i-th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices where 1 <= prices.length <= 10^5 and 0 <= prices[i] <= 10^4.",
    "output_format": "An integer representing the maximum profit.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price seen so far.",
      "Calculate potential profit at each step."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Subarray"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the largest sum of a contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum = 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The only subarray is [1], which has the largest sum = 1."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The subarray [5,4,-1,7,8] has the largest sum = 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a variable to keep track of the current maximum sum.",
      "Update the maximum sum whenever the current maximum exceeds it."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Longest Common Prefix",
    "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \"\".",
    "topic": "String",
    "subtopic": "Prefix",
    "tags": [
      "String",
      "Prefix",
      "Common Substring"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A string representing the longest common prefix.",
    "constraints": [
      "0 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "strs[i] consists of only lower-case English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"flower\",\"flow\",\"flight\"]",
        "output": "\"fl\"",
        "explanation": "The longest common prefix is \"fl\"."
      },
      {
        "input": "strs = [\"dog\",\"racecar\",\"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the strings."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Vertical scanning is one way to compare characters at the same position.",
      "If the first string is empty, return \"\"."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Rotate Array",
    "description": "Given an array of integers `nums` and an integer `k`, rotate the array to the right by `k` steps, where `k` is non-negative. You must do this in-place, which means modifying the input array directly.",
    "topic": "Array",
    "subtopic": "In-place Rotation",
    "tags": [
      "Array",
      "Rotation",
      "In-place"
    ],
    "input_format": "An array of integers `nums` followed by a non-negative integer `k`.",
    "output_format": "The modified array after rotating to the right by `k` steps.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9",
      "0 <= k <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7], k = 3",
        "output": "[5, 6, 7, 1, 2, 3, 4]",
        "explanation": "Rotating the array [1, 2, 3, 4, 5, 6, 7] by 3 steps results in [5, 6, 7, 1, 2, 3, 4]."
      },
      {
        "input": "nums = [-1, -100, 3, 99], k = 2",
        "output": "[3, 99, -1, -100]",
        "explanation": "After rotating the array [-1, -100, 3, 99] by 2 steps, we get [3, 99, -1, -100]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the reverse technique to achieve the rotation.",
      "The effective rotation count might be less than the length of the array."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Fibonacci Number",
    "description": "The Fibonacci numbers are defined by the recurrence relation: F(0) = 0, F(1) = 1, and F(n) = F(n - 1) + F(n - 2) for n > 1. Write a function to compute the nth Fibonacci number.",
    "topic": "Dynamic Programming",
    "subtopic": "Recursion",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Fibonacci"
    ],
    "input_format": "An integer n where 0 <= n <= 30.",
    "output_format": "An integer representing the nth Fibonacci number.",
    "constraints": [
      "0 <= n <= 30"
    ],
    "examples": [
      {
        "input": "n = 5",
        "output": "5",
        "explanation": "The Fibonacci sequence is 0, 1, 1, 2, 3, 5. The 5th number is 5."
      },
      {
        "input": "n = 10",
        "output": "55",
        "explanation": "The first 10 Fibonacci numbers are 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55. The 10th number is 55."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a recursive approach to simplify the problem.",
      "Memoization can greatly improve efficiency."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Move Zeroes",
    "description": "Given an array of integers, you need to move all the 0's to the end of it while maintaining the relative order of the non-zero elements. Do this in-place and without making a copy of the array.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "In-place"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "The modified array with all 0's moved to the end.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [0, 1, 0, 3, 12]",
        "output": "[1, 3, 12, 0, 0]",
        "explanation": "The non-zero elements are 1, 3, and 12 which maintain their order, while all 0's are moved to the end."
      },
      {
        "input": "nums = [0]",
        "output": "[0]",
        "explanation": "There are no non-zero elements, so the array remains the same."
      },
      {
        "input": "nums = [1, 0, 2, 0, 3]",
        "output": "[1, 2, 3, 0, 0]",
        "explanation": "The non-zero elements are 1, 2, and 3 which maintain their order, and 0's are moved to the end."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to keep track of the non-zero index.",
      "Iterate through the array and move non-zero elements to the front."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Subarray Sum Equals K",
    "description": "Given an array of integers and an integer k, return the total number of continuous subarrays whose sum equals to k.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Hashmap",
      "Prefix Sum"
    ],
    "input_format": "An integer array nums and an integer k.",
    "output_format": "An integer representing the total number of continuous subarrays whose sum equals to k.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "-10^4 <= nums[i] <= 10^4",
      "-10^7 <= k <= 10^7"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 1], k = 2",
        "output": "2",
        "explanation": "The subarrays [1, 1] (index 0 to 1) and [1, 1] (index 1 to 2) both sum to 2."
      },
      {
        "input": "nums = [1, 2, 3], k = 3",
        "output": "2",
        "explanation": "The subarrays [3] (index 2) and [1, 2] (index 0 to 1) both sum to 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hashmap to store the cumulative sum and its frequency.",
      "You can iterate through the array while keeping track of the cumulative sum."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Count the Digits That Divide a Number",
    "description": "Given an integer n, return the number of digits in n that evenly divide n. An integer d is said to divide n if n % d == 0. Note that the digit 0 cannot be used for division.",
    "topic": "Math",
    "subtopic": "Number Theory",
    "tags": [
      "Math",
      "Number Theory",
      "Division"
    ],
    "input_format": "An integer n.",
    "output_format": "An integer representing the count of digits that divide n.",
    "constraints": [
      "1 <= n <= 10^9"
    ],
    "examples": [
      {
        "input": "n = 1012",
        "output": "3",
        "explanation": "The digits are 1, 0, 1, 2. The digits 1 (two times) and 2 divide 1012, while 0 cannot be used for division."
      },
      {
        "input": "n = 123",
        "output": "2",
        "explanation": "The digits are 1, 2, 3. The digits 1 and 3 divide 123, while 2 does not."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Convert the number to a string to iterate through its digits.",
      "Skip division by 0."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Jump Game",
    "description": "You are given an array of non-negative integers nums. Each element in the array represents your maximum jump length at that position, and you start at the first index of the array. Write a function to determine if you can reach the last index starting from the first index.",
    "topic": "Array",
    "subtopic": "Greedy Algorithm",
    "tags": [
      "Array",
      "Greedy",
      "Dynamic Programming"
    ],
    "input_format": "An array of non-negative integers nums.",
    "output_format": "A boolean value indicating whether you can reach the last index.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, 1, 1, 4]",
        "output": "true",
        "explanation": "Jump 1 step from index 0 to 1, then 2 steps to reach the last index."
      },
      {
        "input": "nums = [3, 2, 1, 0, 4]",
        "output": "false",
        "explanation": "You will always arrive at index 3, which cannot reach the last index."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to keep track of the farthest index you can reach at each step.",
      "If at any point the current index is greater than the maximum reachable index, return false."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Maximum Ascending Subarray Sum",
    "description": "Given an array of integers, find the maximum sum of an ascending subarray. An ascending subarray is defined as a contiguous subarray where each element is strictly greater than the previous one. Your task is to return the maximum sum of all such subarrays in the given array.",
    "topic": "Array",
    "subtopic": "Subarray",
    "tags": [
      "Array",
      "Subarray",
      "Sum"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum sum of any ascending subarray.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [10, 20, 30, 5, 10, 50]",
        "output": "65",
        "explanation": "The ascending subarrays are [10, 20, 30] and [5, 10, 50]. The maximum sum is 10 + 20 + 30 + 5 + 10 + 50 = 65."
      },
      {
        "input": "nums = [1, 2, 3, 2, 5]",
        "output": "12",
        "explanation": "The ascending subarrays are [1, 2, 3] and [2, 5]. The maximum sum is 1 + 2 + 3 + 2 + 5 = 12."
      },
      {
        "input": "nums = [-1, 0, 1, -2, 2, 3]",
        "output": "6",
        "explanation": "The ascending subarray is [0, 1, -2, 2, 3]. The maximum sum is 0 + 1 + -2 + 2 + 3 = 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider iterating through the array while keeping track of the current ascending sum.",
      "Reset the current sum whenever you encounter a non-ascending condition."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Single Number",
    "description": "Given a non-empty array of integers, every element appears twice except for one. Find that single one.",
    "topic": "Array",
    "subtopic": "Bit Manipulation",
    "tags": [
      "Array",
      "Bit Manipulation",
      "Unique Element"
    ],
    "input_format": "An array of integers nums where each element appears twice except for one.",
    "output_format": "An integer representing the single number that appears only once.",
    "constraints": [
      "1 <= nums.length <= 3 * 10^4",
      "-3 * 10^4 <= nums[i] <= 3 * 10^4",
      "Each input has exactly one single number"
    ],
    "examples": [
      {
        "input": "nums = [2, 2, 1]",
        "output": "1",
        "explanation": "The number 1 appears once while 2 appears twice."
      },
      {
        "input": "nums = [4, 1, 2, 1, 2]",
        "output": "4",
        "explanation": "The number 4 appears once while 1 and 2 appear twice."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using bit manipulation to solve the problem efficiently.",
      "Think about how the XOR operation can help you."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Reverse Integer",
    "description": "Given a 32-bit signed integer, reverse the digits of the integer. If the reversed integer overflows, return 0. For example, if the input is 123, the output should be 321; if the input is -123, the output should be -321.",
    "topic": "Math",
    "subtopic": "Integer Manipulation",
    "tags": [
      "Math",
      "Integer",
      "String Manipulation"
    ],
    "input_format": "A single integer x (-2^31 <= x <= 2^31 - 1).",
    "output_format": "An integer representing the reversed digits of the input integer.",
    "constraints": [
      "-2^31 <= x <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "x = 123",
        "output": "321",
        "explanation": "Reversing the digits of 123 gives 321."
      },
      {
        "input": "x = -123",
        "output": "-321",
        "explanation": "Reversing the digits of -123 gives -321."
      },
      {
        "input": "x = 120",
        "output": "21",
        "explanation": "Reversing the digits of 120 gives 021, which equals 21."
      },
      {
        "input": "x = 1534236469",
        "output": "0",
        "explanation": "Reversing the digits of 1534236469 exceeds the range of 32-bit signed integer, thus the output is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to handle negative numbers.",
      "Think about the overflow condition when reversing."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string s consisting of just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Every opening bracket must have a corresponding closing bracket of the same type.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Valid Parentheses"
    ],
    "input_format": "A single string s of length n (1 <= n <= 10^4).",
    "output_format": "Return true if the string is valid, otherwise return false.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only '()', '{}', '[]'"
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The parentheses are correctly matched and nested."
      },
      {
        "input": "s = '([{}])'",
        "output": "true",
        "explanation": "All brackets are correctly matched and nested."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The brackets are not closed in the correct order."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Pop the stack when you find a matching closing bracket."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Unique Paths",
    "description": "You are given a grid of size m x n, where m is the number of rows and n is the number of columns. You start at the top-left corner (0, 0) and want to reach the bottom-right corner (m-1, n-1). You can only move either down or right at any point in time. Determine how many unique paths there are to reach the bottom-right corner.",
    "topic": "Dynamic Programming",
    "subtopic": "Grid Paths",
    "tags": [
      "Dynamic Programming",
      "Grid",
      "Path Finding"
    ],
    "input_format": "Two integers m and n representing the number of rows and columns.",
    "output_format": "An integer representing the number of unique paths from the top-left to the bottom-right corner.",
    "constraints": [
      "1 <= m, n <= 100"
    ],
    "examples": [
      {
        "input": "m = 3, n = 7",
        "output": "28",
        "explanation": "There are 28 unique paths to reach the bottom-right corner from the top-left corner in a 3x7 grid."
      },
      {
        "input": "m = 3, n = 2",
        "output": "3",
        "explanation": "There are 3 unique paths to reach the bottom-right corner from the top-left corner in a 3x2 grid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a cache to store previously computed results.",
      "Think about how many ways you can reach each cell in the grid."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Minimum Cuts to Divide a Circle",
    "description": "Given an integer n representing the number of pieces, determine the minimum number of straight cuts required to divide a circle into n pieces. Each cut can intersect any number of existing pieces and can extend indefinitely. The goal is to minimize the number of cuts needed to achieve exactly n pieces.",
    "topic": "Geometry",
    "subtopic": "Circle Division",
    "tags": [
      "Geometry",
      "Circle",
      "Division"
    ],
    "input_format": "An integer n (1 <= n <= 1000) representing the number of pieces.",
    "output_format": "An integer representing the minimum number of cuts required to divide the circle into n pieces.",
    "constraints": [
      "1 <= n <= 1000"
    ],
    "examples": [
      {
        "input": "n = 1",
        "output": "0",
        "explanation": "No cuts are needed to achieve one whole piece."
      },
      {
        "input": "n = 2",
        "output": "1",
        "explanation": "One straight cut can divide the circle into two equal halves."
      },
      {
        "input": "n = 3",
        "output": "2",
        "explanation": "Two cuts intersecting each other at the center can create three pieces."
      },
      {
        "input": "n = 5",
        "output": "3",
        "explanation": "Three cuts can be arranged to create five pieces geometrically."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how the number of pieces increases with each additional cut.",
      "Explore the relationship between the number of cuts and the maximum pieces they can create."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Remove Letter To Equalize Frequency",
    "description": "Given a string s, you need to determine the minimum number of letters you must remove from s to make the frequency of all remaining letters equal. If it is impossible to achieve equality, return -1. A letter's frequency is the number of times it appears in the string.",
    "topic": "String",
    "subtopic": "Frequency Count",
    "tags": [
      "String",
      "Frequency",
      "Count"
    ],
    "input_format": "A single string s consisting of lowercase English letters.",
    "output_format": "An integer representing the minimum number of letters to remove, or -1 if it's impossible.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "aabbcc",
        "output": "0",
        "explanation": "All letters appear twice, so no letters need to be removed."
      },
      {
        "input": "aaabbbcc",
        "output": "2",
        "explanation": "Remove 2 'a's or 2 'b's to make the remaining frequencies equal (1 of each type)."
      },
      {
        "input": "abc",
        "output": "-1",
        "explanation": "It is impossible to make the frequency of all letters equal."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how many different frequencies there are in the string.",
      "If there's a frequency that can be made equal to others by removing a certain number of letters, calculate the removals."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "You are given two sorted arrays, nums1 and nums2, of size m and n respectively. You need to merge nums2 into nums1 as one sorted array. Initially, nums1 has a size of m + n, but only the first m elements contain actual values. The remaining elements are filled with 0s. You should merge the two arrays in-place, meaning you must not use extra space, and you should modify nums1 directly.",
    "topic": "Array",
    "subtopic": "Merging",
    "tags": [
      "Array",
      "Merging",
      "In-place"
    ],
    "input_format": "Two arrays, nums1 and nums2, with integers, and their sizes m and n.",
    "output_format": "The first array, nums1, after merging and sorting.",
    "constraints": [
      "0 <= m, n <= 200",
      "1 <= m + n <= 200",
      "nums1.length == m + n",
      "nums1 and nums2 are sorted in non-decreasing order."
    ],
    "examples": [
      {
        "input": "nums1 = [1, 2, 3, 0, 0, 0], m = 3, nums2 = [2, 5, 6], n = 3",
        "output": "[1, 2, 2, 3, 5, 6]",
        "explanation": "After merging, the sorted array is [1, 2, 2, 3, 5, 6]."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "nums2 is empty, so nums1 remains unchanged."
      },
      {
        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "output": "[1]",
        "explanation": "Only nums2 has values, so nums1 becomes [1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Start merging from the end of nums1 to avoid overwriting.",
      "Compare elements from the end of both arrays."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Roman to Integer",
    "description": "Given a string representing a Roman numeral, convert it to an integer. The Roman numerals are represented by the characters 'I', 'V', 'X', 'L', 'C', 'D', and 'M', representing the values 1, 5, 10, 50, 100, 500, and 1000, respectively. The following rules should be followed: For instance, 'IV' is 4 because 'I' is before 'V', and 'IX' is 9; however, 'VI' is 6 because 'V' comes before 'I'. Therefore, the method should determine the integer value of the given Roman numeral string.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Conversion",
      "Roman Numerals"
    ],
    "input_format": "A string s containing the Roman numeral.",
    "output_format": "An integer representing the converted integer value.",
    "constraints": [
      "1 <= s.length <= 15",
      "s consists of valid Roman numeral characters."
    ],
    "examples": [
      {
        "input": "s = 'III'",
        "output": "3",
        "explanation": "The Roman numeral 'III' represents 1 + 1 + 1 = 3."
      },
      {
        "input": "s = 'IV'",
        "output": "4",
        "explanation": "The Roman numeral 'IV' represents 5 - 1 = 4."
      },
      {
        "input": "s = 'IX'",
        "output": "9",
        "explanation": "The Roman numeral 'IX' represents 10 - 1 = 9."
      },
      {
        "input": "s = 'LVIII'",
        "output": "58",
        "explanation": "The Roman numeral 'LVIII' represents 50 + 5 + 1 + 1 + 1 = 58."
      },
      {
        "input": "s = 'MCMXCIV'",
        "output": "1994",
        "explanation": "The Roman numeral 'MCMXCIV' represents 1000 + (1000 - 100) + (1000 - 10) + 5 - 1 = 1994."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a mapping of Roman numerals to their integer values.",
      "Traverse the string from left to right and keep track of the last value."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Minimum Operations to Exceed Threshold Value I",
    "description": "You are given an array of integers and a threshold value. Your task is to find the minimum number of operations required to change the elements of the array such that their sum exceeds the threshold value. In one operation, you can increase any element of the array by 1. If it is not possible to exceed the threshold with the provided elements, return -1.",
    "topic": "Array",
    "subtopic": "Prefix Sum",
    "tags": [
      "Array",
      "Prefix Sum",
      "Greedy"
    ],
    "input_format": "An integer array `nums` followed by an integer `threshold`.",
    "output_format": "An integer representing the minimum number of operations needed, or -1 if it is not possible.",
    "constraints": [
      "1 <= nums.length <= 1000",
      "1 <= nums[i] <= 1000",
      "1 <= threshold <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3], threshold = 7",
        "output": "1",
        "explanation": "The sum of nums is 6, which requires 1 operation to exceed the threshold of 7."
      },
      {
        "input": "nums = [3, 4], threshold = 15",
        "output": "8",
        "explanation": "The sum of nums is 7, requiring 8 operations to exceed the threshold of 15."
      },
      {
        "input": "nums = [1, 1, 1], threshold = 5",
        "output": "2",
        "explanation": "The sum of nums is 3, which requires 2 operations to exceed the threshold of 5."
      },
      {
        "input": "nums = [1, 1, 1], threshold = 3",
        "output": "0",
        "explanation": "The sum of nums is already equal to the threshold, thus no operations are needed."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Calculate the current sum of the array.",
      "The difference between the current sum and the threshold will determine the number of operations needed.",
      "Consider the case when the current sum is already greater than the threshold."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Minimum Operations to Exceed Threshold Value II",
    "description": "You are given an array of integers and an integer threshold value. Your task is to determine the minimum number of operations required to make the sum of the elements in the array exceed the given threshold value. In one operation, you can increase any element of the array by 1. If it is impossible to exceed the threshold, return -1.",
    "topic": "Array",
    "subtopic": "Greedy",
    "tags": [
      "Array",
      "Greedy",
      "Math"
    ],
    "input_format": "Two inputs: an array of integers nums and an integer threshold.",
    "output_format": "An integer representing the minimum number of operations required, or -1 if it's impossible.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "1 <= nums[i] <= 10^3",
      "1 <= threshold <= 10^7"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3], threshold = 8",
        "output": "2",
        "explanation": "The current sum is 1 + 2 + 3 = 6. We need to increase this to exceed 8, which requires at least 2 operations."
      },
      {
        "input": "nums = [5, 5, 5], threshold = 20",
        "output": "5",
        "explanation": "The current sum is 15. We can perform 5 operations to make the sum 20."
      },
      {
        "input": "nums = [1, 1, 1], threshold = 5",
        "output": "-1",
        "explanation": "The maximum sum we can achieve is 3, which is less than the threshold."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Calculate the current sum of the array.",
      "Determine how much you need to exceed the threshold.",
      "If necessary, consider the maximum possible sum."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Palindrome Partitioning IV",
    "description": "Given a string s, you need to determine if it is possible to partition the string into exactly four parts such that each part is a palindrome. If it is possible, return true; otherwise, return false.",
    "topic": "String",
    "subtopic": "Palindrome",
    "tags": [
      "String",
      "Palindrome",
      "Partitioning"
    ],
    "input_format": "A single string s, consisting of lowercase English letters.",
    "output_format": "A boolean value indicating whether it is possible to partition the string into four palindromic parts.",
    "constraints": [
      "1 <= s.length <= 100",
      "s consists only of lowercase English letters."
    ],
    "examples": [
      {
        "input": "ababa",
        "output": "false",
        "explanation": "It is impossible to divide 'ababa' into four non-empty palindromic parts."
      },
      {
        "input": "aaabaaa",
        "output": "true",
        "explanation": "The string can be divided into 'a', 'a', 'a', 'baab' which are all palindromic."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the properties of palindromes and how to check them efficiently.",
      "You may want to precompute whether substrings are palindromes."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an array of integers nums, determine all unique triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Note that the solution set must not contain duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of unique triplets that sum to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The distinct triplets which sum to zero are [-1, -1, 2] and [-1, 0, 1]."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "There are no triplets in an empty array."
      },
      {
        "input": "nums = [0, 1, 1]",
        "output": "[]",
        "explanation": "There are no triplets that sum to zero."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sorting approach to simplify finding triplets.",
      "Use a set to avoid duplicates when adding triplets."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Find the Index of the First Occurrence in a String",
    "description": "Given two strings, needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.",
    "topic": "String",
    "subtopic": "Searching",
    "tags": [
      "String",
      "Searching",
      "Two Pointers"
    ],
    "input_format": "Two strings, haystack and needle. (0 <= haystack.length <= 10^4, 0 <= needle.length <= 100)",
    "output_format": "An integer representing the index of the first occurrence of needle in haystack, or -1 if needle is not found.",
    "constraints": [
      "0 <= haystack.length <= 10^4",
      "0 <= needle.length <= 100"
    ],
    "examples": [
      {
        "input": "haystack = 'sadbutsad', needle = 'sad'",
        "output": "0",
        "explanation": "The first occurrence of 'sad' is at index 0."
      },
      {
        "input": "haystack = 'leetcode', needle = 'leeto'",
        "output": "-1",
        "explanation": "'leeto' is not found in 'leetcode'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try using a substring search method.",
      "Consider edge cases when needle is empty."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "topic": "Dynamic Programming",
    "subtopic": "Fibonacci Sequence",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Mathematics"
    ],
    "input_format": "An integer n representing the number of steps in the staircase.",
    "output_format": "An integer representing the number of distinct ways to climb to the top.",
    "constraints": [
      "1 <= n <= 45"
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step or 2 steps."
      },
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "There are three ways to climb to the top: 1+1+1, 1+2, or 2+1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a dynamic programming approach to store previously computed values.",
      "The problem resembles the Fibonacci sequence."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Bitwise ORs of Subarrays",
    "description": "Given an array of integers, return the count of distinct values obtained by performing a bitwise OR operation on all possible subarrays of the array. A subarray is defined as a contiguous part of the array, and the bitwise OR operation combines two numbers by performing an OR operation on each corresponding bit of the numbers.",
    "topic": "Array",
    "subtopic": "Bit Manipulation",
    "tags": [
      "Array",
      "Bit Manipulation",
      "Subarray"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the count of distinct values obtained from bitwise OR of all possible subarrays.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "6",
        "explanation": "The subarrays are [1], [2], [3], [1,2], [2,3], and [1,2,3]. The distinct OR results are 1, 2, 3, 3 (1|2), 3 (2|3), and 3 (1|2|3) with a total of 6 distinct results."
      },
      {
        "input": "nums = [1, 1, 2]",
        "output": "3",
        "explanation": "The distinct OR results from subarrays [1], [1], [2], [1, 1], [1, 2], and [1, 1, 2] give us 1, 2, and 3 (1|2) with a total of 3 distinct results."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a set to track distinct OR values.",
      "A bitwise OR operation combines bits; consecutive elements' OR results may yield new distinct values."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, return true if t is an anagram of s and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Sorting and Character Count",
    "tags": [
      "String",
      "Anagram",
      "Hash Table"
    ],
    "input_format": "Two strings s and t, where 1 <= s.length, t.length <= 5 * 10^4.",
    "output_format": "A boolean value indicating whether t is an anagram of s.",
    "constraints": [
      "The input strings consist of lowercase English letters.",
      "s.length == t.length"
    ],
    "examples": [
      {
        "input": "s = 'anagram', t = 'nagaram'",
        "output": "true",
        "explanation": "The characters in 'anagram' can be rearranged to form 'nagaram'."
      },
      {
        "input": "s = 'rat', t = 'car'",
        "output": "false",
        "explanation": "'rat' cannot be rearranged to form 'car'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider counting the occurrences of each character.",
      "Two strings are anagrams if they have the same character counts."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Remove Duplicates from Sorted Array",
    "description": "Given a sorted array of integers, you need to remove the duplicates in-place such that each element appears only once and returns the new length of the array. Do not use additional space for another array.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "In-place"
    ],
    "input_format": "A sorted array of integers nums.",
    "output_format": "An integer representing the new length of the array after removing duplicates.",
    "constraints": [
      "0 <= nums.length <= 3 * 10^4",
      "-100 <= nums[i] <= 100",
      "nums is sorted in increasing order."
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 2]",
        "output": "2",
        "explanation": "The array after removing duplicates is [1, 2], which has a length of 2."
      },
      {
        "input": "nums = [0, 0, 1, 1, 2, 2, 3, 3, 4]",
        "output": "5",
        "explanation": "The array after removing duplicates is [0, 1, 2, 3, 4], which has a length of 5."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Think about using two pointers to traverse the array.",
      "You can modify the array in-place without using extra space."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Length of Last Word",
    "description": "Given a string 's' consisting of words and spaces, return the length of the last word in the string. A word is defined as a maximal substring consisting of non-space characters only. If there are no words in the string, return 0.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Word Count"
    ],
    "input_format": "A single string 's' that may contain leading, trailing, or multiple spaces separating the words.",
    "output_format": "An integer representing the length of the last word.",
    "constraints": [
      "0 <= s.length <= 10^4"
    ],
    "examples": [
      {
        "input": "Hello World",
        "output": "5",
        "explanation": "The last word is 'World', which has length 5."
      },
      {
        "input": "   fly me   to   the moon  ",
        "output": "4",
        "explanation": "The last word is 'moon', which has length 4."
      },
      {
        "input": "luffy is still joyboy",
        "output": "6",
        "explanation": "The last word is 'joyboy', which has length 6."
      },
      {
        "input": "   ",
        "output": "0",
        "explanation": "There are no words in the string, so the length is 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Trim the string to remove leading and trailing spaces.",
      "Split the string by spaces and get the last element."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A substring is a contiguous sequence of characters within the string. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A single string s, where 1 <= s.length <= 1000.",
    "output_format": "A string representing the longest palindromic substring.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consist of only digits and English letters."
    ],
    "examples": [
      {
        "input": "babad",
        "output": "bab",
        "explanation": "The longest palindromic substrings are 'bab' and 'aba'. Therefore, either 'bab' or 'aba' is a valid answer."
      },
      {
        "input": "cbbd",
        "output": "bb",
        "explanation": "The longest palindromic substring is 'bb'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around the center of the palindrome.",
      "Check both even and odd-length palindromes."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Plus One",
    "description": "Given a non-empty array of digits representing a non-negative integer, increment the integer by one and return the resulting array of digits. The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit. You may assume that the integer does not contain any leading zeros, except for the number 0 itself.",
    "topic": "Array",
    "subtopic": "Mathematics",
    "tags": [
      "Array",
      "Mathematics",
      "Simulation"
    ],
    "input_format": "An array of integers digits where 0 <= digits[i] <= 9.",
    "output_format": "An array of integers representing the resulting digits after incrementing the number by one.",
    "constraints": [
      "1 <= digits.length <= 100",
      "0 <= digits[i] <= 9",
      "digits does not contain any leading zeros."
    ],
    "examples": [
      {
        "input": "digits = [1, 2, 3]",
        "output": "[1, 2, 4]",
        "explanation": "The array represents the number 123. Incrementing it by one gives 124, which is represented as [1, 2, 4]."
      },
      {
        "input": "digits = [4, 3, 2, 1]",
        "output": "[4, 3, 2, 2]",
        "explanation": "The array represents the number 4321. Incrementing it by one gives 4322, which is represented as [4, 3, 2, 2]."
      },
      {
        "input": "digits = [9]",
        "output": "[1, 0]",
        "explanation": "The array represents the number 9. Incrementing it by one gives 10, which is represented as [1, 0]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how you handle carrying over when the last digit is 9.",
      "You may need to update digits starting from the last one towards the first."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Sort Colors",
    "description": "Given an array containing n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. You must solve this problem without using the library's sort function. The colors are represented by integers: 0 for red, 1 for white, and 2 for blue.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Sorting",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums where each integer is either 0, 1, or 2.",
    "output_format": "The input array should be sorted in-place in the order 0s, 1s, and 2s.",
    "constraints": [
      "n == nums.length",
      "1 <= n <= 300",
      "0 <= nums[i] <= 2"
    ],
    "examples": [
      {
        "input": "nums = [2, 0, 2, 1, 1, 0]",
        "output": "[0, 0, 1, 1, 2, 2]",
        "explanation": "After sorting, the array is rearranged to [0, 0, 1, 1, 2, 2]."
      },
      {
        "input": "nums = [2, 0, 1]",
        "output": "[0, 1, 2]",
        "explanation": "After sorting, the array is rearranged to [0, 1, 2]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the Dutch National Flag algorithm.",
      "Use three pointers to track the position of red, white, and blue."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Second Highest Salary",
    "description": "Write a SQL query to find the second highest salary from the 'Employee' table. If there is no second highest salary, the query should return null.",
    "topic": "Database",
    "subtopic": "SQL Query",
    "tags": [
      "SQL",
      "Database",
      "Query"
    ],
    "input_format": "The query will be run on the 'Employee' table which contains at least one column named 'salary'.",
    "output_format": "Return a single value representing the second highest salary. If no such salary exists, return null.",
    "constraints": [
      "The table will have at least one employee record.",
      "Salaries will be unique."
    ],
    "examples": [
      {
        "input": "SELECT salary FROM Employee",
        "output": "2000",
        "explanation": "The highest salary is 3000, and the second highest salary is 2000."
      },
      {
        "input": "SELECT salary FROM Employee",
        "output": "null",
        "explanation": "In this case, there is only one unique salary present in the table."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the DISTINCT keyword.",
      "Think about using LIMIT and OFFSET."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which together with the x-axis forms a container, such that the container contains the most water. Return the maximum amount of water a container can store.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy"
    ],
    "input_format": "An array of non-negative integers heights representing the heights of the lines.",
    "output_format": "An integer representing the maximum area of water that can be contained.",
    "constraints": [
      "2 <= heights.length <= 3 * 10^4",
      "0 <= heights[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "heights = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The maximum area is formed between the lines at index 1 and index 8, with a height of 7 and a width of 7, giving an area of 7 * 7 = 49."
      },
      {
        "input": "heights = [1,1]",
        "output": "1",
        "explanation": "The only area formed is between the two lines, both with height 1 and width 1, thus the area is 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using two pointers to iterate from both ends of the array.",
      "Always move the pointer pointing to the shorter line inwards."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Sliding Window Maximum",
    "description": "Given an integer array nums and an integer k, return the maximum sliding window value for each sliding window of size k. Each time the window slides by one position to the right, you must return the current maximum element in the window.",
    "topic": "Data Structure",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Deque"
    ],
    "input_format": "An array of integers nums followed by an integer k.",
    "output_format": "An array of integers representing the maximum values for each sliding window of size k.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [1,3,-1,-3,5,3,6,7], k = 3",
        "output": "[3,3,5,5,6,7]",
        "explanation": "The sliding windows are [1,3,-1], [3,-1,-3], [-1,3,5], [3,5,3], [5,3,6], and [3,6,7]. The max values are 3, 3, 5, 5, 6, and 7 respectively."
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]",
        "explanation": "Only one element, so the max is 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a deque to maintain the maximums efficiently.",
      "The window slides to the right as you iterate through the array."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Happy Number",
    "description": "A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. Those numbers for which this process ends in 1 are happy numbers, while those that do not end in 1 are unhappy numbers. Write a function to determine if a given number n is a happy number.",
    "topic": "Math",
    "subtopic": "Number Theory",
    "tags": [
      "Math",
      "Number Theory",
      "Cycle Detection"
    ],
    "input_format": "An integer n (1 <= n <= 2^31 - 1) representing the number to check.",
    "output_format": "Return true if n is a happy number, otherwise return false.",
    "constraints": [
      "1 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "n = 19",
        "output": "true",
        "explanation": "1^2 + 9^2 = 1 + 81 = 82; 8^2 + 2^2 = 64 + 4 = 68; 6^2 + 8^2 = 36 + 64 = 100; 1^2 + 0^2 + 0^2 = 1."
      },
      {
        "input": "n = 2",
        "output": "false",
        "explanation": "2 leads to a cycle that does not include 1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a set to track seen numbers to detect cycles.",
      "Calculate the sum of the squares of the digits repeatedly."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Add Two Numbers",
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contains a single digit. Add the two numbers and return it as a linked list.",
    "topic": "Linked List",
    "subtopic": "Addition",
    "tags": [
      "Linked List",
      "Math",
      "Addition"
    ],
    "input_format": "Two linked lists l1 and l2 representing two integers.",
    "output_format": "A linked list representing the sum of the two integers.",
    "constraints": [
      "The number of nodes in each linked list is between 1 and 100.",
      "0 <= Node.val <= 9",
      "It is guaranteed that the input numbers do not have leading zeros."
    ],
    "examples": [
      {
        "input": "l1 = [2, 4, 3], l2 = [5, 6, 4]",
        "output": "[7, 0, 8]",
        "explanation": "342 + 465 = 807, thus the linked list should return [7,0,8]."
      },
      {
        "input": "l1 = [0], l2 = [0]",
        "output": "[0]",
        "explanation": "0 + 0 = 0, thus the linked list should return [0]."
      },
      {
        "input": "l1 = [9, 9, 9, 9, 9, 9], l2 = [1]",
        "output": "[0, 0, 0, 0, 0, 1]",
        "explanation": "999999 + 1 = 1000000, thus the linked list should return [0,0,0,0,0,1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "You can use a dummy node to simplify the addition process.",
      "Keep track of the carry during the addition of each pair of digits."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Spiral Matrix",
    "description": "Given an m x n matrix, return all elements of the matrix in spiral order. The spiral order starts from the top-left element and proceeds clockwise around the edges of the matrix.",
    "topic": "Array",
    "subtopic": "Matrix Traversal",
    "tags": [
      "Array",
      "Matrix",
      "Spiral"
    ],
    "input_format": "A 2D list of integers representing the matrix with dimensions m x n.",
    "output_format": "A list of integers representing the elements of the matrix in spiral order.",
    "constraints": [
      "1 <= m, n <= 10^4",
      "m * n <= 10^4",
      "-10^5 <= matrix[i][j] <= 10^5"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "[1, 2, 3, 6, 9, 8, 7, 4, 5]",
        "explanation": "The elements are traversed in the following order: 1 -> 2 -> 3 -> 6 -> 9 -> 8 -> 7 -> 4 -> 5."
      },
      {
        "input": "matrix = [[1, 2], [3, 4]]",
        "output": "[1, 2, 4, 3]",
        "explanation": "The elements are traversed in the following order: 1 -> 2 -> 4 -> 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how you can define the boundaries of the spiral traversal.",
      "Consider using four pointers to keep track of the current top, bottom, left, and right boundaries."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Reverse Words in a String",
    "description": "Given an input string s, reverse the order of the words. A word is defined as a sequence of non-space characters. The words in the reversed string must be separated by a single space, while leading and trailing spaces should be removed.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Reverse"
    ],
    "input_format": "A single string s, which may contain leading and trailing spaces.",
    "output_format": "A string consisting of the words in reverse order, separated by a single space.",
    "constraints": [
      "0 <= s.length <= 10^4",
      "s consists of English letters (upper/lowercase), digits, and spaces.",
      "There are no two consecutive spaces in the input string."
    ],
    "examples": [
      {
        "input": "s = '  hello world  '",
        "output": "'world hello'",
        "explanation": "The words 'hello' and 'world' are reversed and the leading/trailing spaces are removed."
      },
      {
        "input": "s = 'a good   example'",
        "output": "'example good a'",
        "explanation": "The words 'a', 'good', and 'example' are reversed with appropriate spacing."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using built-in string split and join methods.",
      "Trim leading and trailing spaces before processing."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Pow(x, n)",
    "description": "Implement the function myPow(x, n), which calculates x raised to the power n (i.e., x^n). You must implement a solution with a time complexity of O(log n). The function should handle edge cases, such as when n is negative.",
    "topic": "Mathematics",
    "subtopic": "Exponentiation",
    "tags": [
      "Mathematics",
      "Recursion",
      "Exponentiation"
    ],
    "input_format": "A float x representing the base and an integer n representing the exponent.",
    "output_format": "A float representing the result of x raised to the power n.",
    "constraints": [
      "-100.0 <= x <= 100.0",
      "-2^31 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "x = 2.0, n = 10",
        "output": "1024.0",
        "explanation": "2^10 = 1024."
      },
      {
        "input": "x = 2.1, n = 3",
        "output": "9.261",
        "explanation": "2.1^3 = 9.261."
      },
      {
        "input": "x = 2.0, n = -2",
        "output": "0.25",
        "explanation": "2^-2 = 1/(2^2) = 1/4 = 0.25."
      },
      {
        "input": "x = 0.5, n = 0",
        "output": "1.0",
        "explanation": "Any number raised to the power of 0 is 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the properties of exponents.",
      "Use recursion to break down the problem."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Missing Number",
    "description": "You are given an array containing n distinct numbers taken from 0, 1, 2, ..., n. Find the one number that is missing from this array. For example, if the input array is [3, 0, 1], the missing number is 2.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Bit Manipulation"
    ],
    "input_format": "An array of distinct integers nums where 0 <= nums[i] <= n and nums.length == n.",
    "output_format": "An integer representing the missing number.",
    "constraints": [
      "1 <= n <= 10^4",
      "0 <= nums[i] <= n"
    ],
    "examples": [
      {
        "input": "nums = [3, 0, 1]",
        "output": "2",
        "explanation": "The array contains numbers from 0 to 3, but the number 2 is missing."
      },
      {
        "input": "nums = [0, 1]",
        "output": "2",
        "explanation": "The array contains numbers from 0 to 1, but the number 2 is missing."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using the mathematical formula for the sum of the first n natural numbers.",
      "Try using XOR to find the missing number."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Reverse String",
    "description": "Write a function that takes a string as input and returns the string reversed. The input string can contain any printable ASCII characters. Your algorithm should run in O(n) time complexity, where n is the length of the string.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Reversal"
    ],
    "input_format": "A single string s, where 1 <= s.length <= 10^5.",
    "output_format": "A string representing the reversed input string.",
    "constraints": [
      "1 <= s.length <= 10^5"
    ],
    "examples": [
      {
        "input": "s = \"hello\"",
        "output": "\"olleh\"",
        "explanation": "Reversing the string 'hello' gives 'olleh'."
      },
      {
        "input": "s = \"LeetCode\"",
        "output": "\"edoCteeL\"",
        "explanation": "Reversing the string 'LeetCode' gives 'edoCteeL'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Think about using a two-pointer approach to reverse the string."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Contains Duplicate",
    "description": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hash Set",
      "Searching"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A boolean value indicating whether there are any duplicates in the array.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "true",
        "explanation": "The number 1 appears twice in the array."
      },
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "false",
        "explanation": "All elements are distinct."
      },
      {
        "input": "nums = [1, 0, 1, 1]",
        "output": "true",
        "explanation": "The number 1 appears multiple times in the array."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash set to track seen numbers.",
      "If a number is already in the set, return true."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. Your solution should be efficient in both time and space complexity.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A string s consisting of English letters, digits, symbols, and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s consists of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"abc\", with a length of 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The longest substring without repeating characters is \"b\", with a length of 1."
      },
      {
        "input": "s = \"pwwkew\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"wke\", with a length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window approach to maintain the current substring.",
      "Utilize a HashSet or HashMap to track characters and their indices."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Toeplitz Matrix",
    "description": "A matrix is Toeplitz if every descending diagonal from left to right is constant. Given an m x n matrix, return true if the matrix is Toeplitz. A matrix is represented as a 2D array, where each element can be accessed by its row and column indices.",
    "topic": "Matrix",
    "subtopic": "2D Arrays",
    "tags": [
      "Matrix",
      "2D Arrays",
      "Diagonal"
    ],
    "input_format": "A 2D matrix represented as an array of arrays, where each inner array has the same number of elements.",
    "output_format": "A boolean value indicating whether the matrix is a Toeplitz matrix.",
    "constraints": [
      "1 <= m, n <= 20",
      "-100 <= matrix[i][j] <= 100"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 2, 3, 4], [5, 1, 2, 3], [9, 5, 1, 2]]",
        "output": "true",
        "explanation": "In this matrix, every diagonal has the same value: 1, 5, 9, 2, 3, and 4."
      },
      {
        "input": "matrix = [[1, 2], [2, 2]]",
        "output": "false",
        "explanation": "The diagonal from top-left to bottom-right contains two different values: 1 and 2."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Check if each element matches the one that's diagonally above it."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Max Consecutive Ones III",
    "description": "Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's to 1's.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums (containing 0s and 1s), followed by an integer k.",
    "output_format": "An integer representing the maximum number of consecutive 1's possible after flipping at most k 0's.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "nums[i] is 0 or 1",
      "0 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 0, 0, 1], k = 2",
        "output": "5",
        "explanation": "We can flip the two 0's to 1's, resulting in [1, 1, 1, 1, 1], which has 5 consecutive 1's."
      },
      {
        "input": "nums = [0, 0, 1, 1, 1, 0, 1, 1, 0], k = 1",
        "output": "4",
        "explanation": "Flipping one of the 0's (the last one) gives us [0, 0, 1, 1, 1, 1, 1, 1, 0], which has 4 consecutive 1's."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach.",
      "Keep track of the number of 0's in the current window."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Sqrt(x)",
    "description": "Implement a function to compute and return the integer square root of a given non-negative integer x. The integer square root of x is defined as the largest integer y such that y^2 <= x. If x is 0, return 0.",
    "topic": "Math",
    "subtopic": "Binary Search",
    "tags": [
      "Math",
      "Binary Search",
      "Square Root"
    ],
    "input_format": "A single non-negative integer x.",
    "output_format": "An integer representing the largest integer y such that y^2 <= x.",
    "constraints": [
      "0 <= x <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "x = 4",
        "output": "2",
        "explanation": "2^2 = 4, which is equal to x."
      },
      {
        "input": "x = 8",
        "output": "2",
        "explanation": "The largest integer y such that y^2 <= 8 is 2, as 2^2 = 4 and 3^2 = 9 (which is greater than 8)."
      },
      {
        "input": "x = 0",
        "output": "0",
        "explanation": "The integer square root of 0 is 0."
      },
      {
        "input": "x = 1",
        "output": "1",
        "explanation": "1^2 = 1, which is equal to x."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using binary search to efficiently find the result."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Set Matrix Zeroes",
    "description": "Given an m x n matrix, if an element is 0, set its entire row and its entire column to 0. You must do it in place. Do not use extra space for another matrix.",
    "topic": "Array",
    "subtopic": "Matrix Manipulation",
    "tags": [
      "Array",
      "Matrix",
      "In-place"
    ],
    "input_format": "An m x n matrix represented as a 2D list of integers.",
    "output_format": "The matrix after setting the rows and columns to zero in place.",
    "constraints": [
      "1 <= m, n <= 200",
      "-10^9 <= matrix[i][j] <= 10^9"
    ],
    "examples": [
      {
        "input": "matrix = [[1,1,1],[1,0,1],[1,1,1]]",
        "output": "[[1,0,1],[0,0,0],[1,0,1]]",
        "explanation": "The element at (1,1) is 0, thus entire row 1 and column 1 are set to 0."
      },
      {
        "input": "matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]",
        "output": "[[0,0,0,0],[0,4,5,0],[0,3,1,0]]",
        "explanation": "The elements at (0,0) and (0,3) are 0. Therefore, row 0 and column 0 and column 3 are set to 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use sets to track which rows and columns need to be zeroed.",
      "Consider the first row and first column as your markers."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Merge Two Sorted Lists",
    "description": "You are given two linked lists, each representing a sorted list of integers. Your task is to merge these two lists into one sorted linked list and return the merged list. The merged list should be made by splicing together the nodes of the first two lists.",
    "topic": "Linked List",
    "subtopic": "Merging Linked Lists",
    "tags": [
      "Linked List",
      "Sorting",
      "Merge"
    ],
    "input_format": "Two linked lists, `l1` and `l2`, where each node contains an integer value.",
    "output_format": "A linked list representing the merged sorted list.",
    "constraints": [
      "Both linked lists may be null.",
      "The number of nodes in the first list is in the range [0, 50].",
      "The number of nodes in the second list is in the range [0, 50].",
      "-10^4 <= Node.val <= 10^4"
    ],
    "examples": [
      {
        "input": "l1 = [1, 2, 4], l2 = [1, 3, 4]",
        "output": "[1, 1, 2, 3, 4, 4]",
        "explanation": "The merged list contains all elements from both lists in sorted order."
      },
      {
        "input": "l1 = [], l2 = [0]",
        "output": "[0]",
        "explanation": "When one list is empty, the result is the other list."
      },
      {
        "input": "l1 = [], l2 = []",
        "output": "[]",
        "explanation": "When both lists are empty, the result is also an empty list."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a dummy node to simplify the merge process.",
      "Iterate through both lists, comparing the values in each node."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of integers representing the height of bars in a histogram, compute how much rainwater can be trapped after raining. The width of each bar is 1. The challenge is to find an efficient solution to determine the total amount of trapped rainwater.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "input_format": "An array of non-negative integers representing the height of bars.",
    "output_format": "An integer representing the total units of trapped rainwater.",
    "constraints": [
      "0 <= heights.length <= 10^5",
      "0 <= heights[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "heights = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The image of the histogram shows that the trapped rainwater amounts to 6 units."
      },
      {
        "input": "heights = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The valleys can trap 9 units of water."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how much water can be trapped above each bar.",
      "Use two pointers to efficiently calculate the water trapped."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Check if Array Is Sorted and Rotated",
    "description": "Given an array of integers, determine if the array has been sorted in non-decreasing order and then rotated some number of times. For example, the array [3, 4, 5, 1, 2] is sorted and rotated, while [1, 2, 3, 5, 4] is not. Your task is to implement a function that checks for this condition.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Rotation"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A boolean value indicating whether the array is sorted and rotated.",
    "constraints": [
      "1 <= nums.length <= 100",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [3, 4, 5, 1, 2]",
        "output": "true",
        "explanation": "The array can be viewed as a sorted array [1, 2, 3, 4, 5] that has been rotated."
      },
      {
        "input": "nums = [1, 2, 3, 5, 4]",
        "output": "false",
        "explanation": "The array is not sorted in a non-decreasing order, thus it's not sorted and rotated."
      },
      {
        "input": "nums = [2, 3, 4, 5, 1]",
        "output": "true",
        "explanation": "The array is sorted in non-decreasing order and rotated."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Check the number of times the array has dropped into a smaller value.",
      "Count the transition points where the order breaks."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "K-diff Pairs in an Array",
    "description": "Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array. A k-diff pair is defined as an integer pair (nums[i], nums[j]) such that |nums[i] - nums[j]| == k and i != j. Note that the pairs (1, 2) and (2, 1) are considered the same pair, and should be counted only once.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashmap",
      "Two Pointers"
    ],
    "input_format": "An integer array nums and an integer k.",
    "output_format": "An integer representing the number of unique k-diff pairs.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= k <= 10^7",
      "-10^7 <= nums[i] <= 10^7"
    ],
    "examples": [
      {
        "input": "nums = [3, 1, 4, 1, 5], k = 2",
        "output": "2",
        "explanation": "There are two unique pairs (1, 3) and (3, 5)."
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], k = 1",
        "output": "4",
        "explanation": "There are four unique pairs (1, 2), (2, 3), (3, 4), and (4, 5)."
      },
      {
        "input": "nums = [1, 3, 1, 5, 4], k = 0",
        "output": "1",
        "explanation": "There is one unique pair (1, 1)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hashmap to store the frequency of each number.",
      "Be aware of the case when k is 0."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Find Customer Referee",
    "description": "You are given a list of customer sales records. Each record is represented as an array where the first item is the customer ID and the second item is the referee ID. Your task is to find all customer IDs that have at least one referee who is also a customer. A customer is a referee for themselves if they appear as both a customer and a referee. Return the list of unique customer IDs sorted in ascending order.",
    "topic": "Database",
    "subtopic": "SQL Queries",
    "tags": [
      "SQL",
      "Database",
      "Set Operations"
    ],
    "input_format": "A list of arrays where each array consists of two integers [customer_id, referee_id].",
    "output_format": "A list of unique customer IDs sorted in ascending order.",
    "constraints": [
      "1 <= sales_records.length <= 10^4",
      "1 <= customer_id, referee_id <= 10^6"
    ],
    "examples": [
      {
        "input": "[[1, 2], [2, 3], [3, 1], [4, 5], [5, 4]]",
        "output": "[1, 2, 3, 4, 5]",
        "explanation": "All customers have referees who are also customers."
      },
      {
        "input": "[[1, 2], [2, 3], [3, 4], [5, 6]]",
        "output": "[2, 3]",
        "explanation": "Only customers 2 and 3 have referees that are also customers."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a set to track customer and referee IDs."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Binary Search",
    "description": "Implement a binary search algorithm that finds the position of a target value within a sorted array. If the target value exists in the array, return its index; otherwise, return -1. The function should use iterative or recursive binary search methods.",
    "topic": "Searching",
    "subtopic": "Binary Search",
    "tags": [
      "Searching",
      "Binary Search",
      "Algorithm"
    ],
    "input_format": "A sorted array of integers nums and an integer target.",
    "output_format": "An integer, the index of target in nums, or -1 if target is not found.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5",
      "nums is sorted in ascending order."
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5], target = 3",
        "output": "2",
        "explanation": "The target value 3 is located at index 2."
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], target = 6",
        "output": "-1",
        "explanation": "The target value 6 does not exist in the array."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider the mid-point of the array.",
      "If the target is less than the mid-value, search in the left half.",
      "If the target is greater than the mid-value, search in the right half."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "N-th Tribonacci Number",
    "description": "The Tribonacci sequence is defined as follows: T(0) = 0, T(1) = 1, T(2) = 1, and T(n) = T(n - 1) + T(n - 2) + T(n - 3) for n > 2. Given an integer n, return the n-th Tribonacci number.",
    "topic": "Dynamic Programming",
    "subtopic": "Recursion",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Mathematics"
    ],
    "input_format": "A single integer n (0 <= n <= 37).",
    "output_format": "An integer representing the n-th Tribonacci number.",
    "constraints": [
      "0 <= n <= 37"
    ],
    "examples": [
      {
        "input": "n = 4",
        "output": "4",
        "explanation": "The Tribonacci sequence starts: 0, 1, 1, 2, 4, ... thus T(4) = 4."
      },
      {
        "input": "n = 25",
        "output": "1389537",
        "explanation": "Following the Tribonacci sequence, T(25) evaluates to 1389537."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how to build T(n) from previous calculated values.",
      "You can use an array to store already computed values."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Article Views I",
    "description": "You are given a list of article views where each view is represented by a positive integer. Your task is to determine the total number of views for all articles. Additionally, you should find out how many unique articles were viewed. Return the total views and the count of unique articles as an array.",
    "topic": "Array",
    "subtopic": "Aggregation",
    "tags": [
      "Array",
      "Counting",
      "Aggregation"
    ],
    "input_format": "An array of integers views, where each integer represents views for a specific article.",
    "output_format": "An array containing two integers: the total number of views and the count of unique articles.",
    "constraints": [
      "1 <= views.length <= 10^4",
      "0 <= views[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "views = [100, 200, 100, 300, 200]",
        "output": "[900, 3]",
        "explanation": "The total views are 100 + 200 + 100 + 300 + 200 = 900 and unique articles viewed are 100, 200, and 300."
      },
      {
        "input": "views = [150, 150, 150]",
        "output": "[450, 1]",
        "explanation": "The total views are 150 + 150 + 150 = 450 and the unique article viewed is 150."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a set to keep track of unique articles.",
      "Sum the elements of the array for total views."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Fizz Buzz",
    "description": "Write a program that prints the numbers from 1 to n. But for multiples of three print 'Fizz' instead of the number and for the multiples of five print 'Buzz'. For numbers which are multiples of both three and five print 'FizzBuzz'.",
    "topic": "Math",
    "subtopic": "Iterations",
    "tags": [
      "Math",
      "Iteration",
      "String"
    ],
    "input_format": "An integer n (1 <= n <= 10^4).",
    "output_format": "An array of strings representing the results of Fizz Buzz from 1 to n.",
    "constraints": [
      "1 <= n <= 10^4"
    ],
    "examples": [
      {
        "input": "n = 15",
        "output": "[\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\", \"Fizz\", \"7\", \"8\", \"Fizz\", \"Buzz\", \"11\", \"Fizz\", \"13\", \"14\", \"FizzBuzz\"]",
        "explanation": "Numbers from 1 to 15 are listed, with Fizz replacing multiples of 3, Buzz for multiples of 5, and FizzBuzz for multiples of both."
      },
      {
        "input": "n = 5",
        "output": "[\"1\", \"2\", \"Fizz\", \"4\", \"Buzz\"]",
        "explanation": "Here, the output lists the numbers from 1 to 5, replacing 3 with Fizz and 5 with Buzz."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a loop to iterate through the numbers.",
      "Check for divisibility using the modulo operator.",
      "Use conditions to print 'Fizz', 'Buzz', or 'FizzBuzz'."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Generate Parentheses",
    "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
    "topic": "Backtracking",
    "subtopic": "Combinatorial Generation",
    "tags": [
      "Backtracking",
      "Recursion",
      "String"
    ],
    "input_format": "An integer n representing the number of pairs of parentheses.",
    "output_format": "A list of all combinations of well-formed parentheses.",
    "constraints": [
      "1 <= n <= 8"
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]",
        "explanation": "There are five combinations of well-formed parentheses for n = 3."
      },
      {
        "input": "n = 1",
        "output": "[\"()\"]",
        "explanation": "Only one combination exists for n = 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use backtracking to build the combinations.",
      "Maintain a count of open and close parentheses."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Department Top Three Salaries",
    "description": "Write a SQL query to find the third highest salary in the 'Employee' table. If there is no third highest salary, the query should return null. The 'Employee' table has the following structure: | Column Name | Type    | |-------------|---------| | id          | int     | | salary      | decimal | Note: The 'id' column is the primary key for this table. Each salary is guaranteed to be unique.",
    "topic": "Database",
    "subtopic": "SQL",
    "tags": [
      "SQL",
      "Database",
      "Salary"
    ],
    "input_format": "The input is a table named 'Employee' with columns 'id' and 'salary'.",
    "output_format": "A single decimal value representing the third highest salary or null if it doesn't exist.",
    "constraints": [
      "The number of records in the table is between 1 and 10^5.",
      "Each salary is unique."
    ],
    "examples": [
      {
        "input": "SELECT salary FROM Employee ORDER BY salary DESC LIMIT 1 OFFSET 2;",
        "output": "3000",
        "explanation": "The salaries in descending order are 5000, 4000, and 3000. Hence, the third highest salary is 3000."
      },
      {
        "input": "SELECT salary FROM Employee ORDER BY salary DESC LIMIT 1 OFFSET 2;",
        "output": "null",
        "explanation": "There are only two unique salaries in the table, hence there is no third highest salary."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use the ORDER BY clause to sort the salaries in descending order.",
      "Consider using LIMIT and OFFSET to retrieve specific ranks."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
    "topic": "Linked List",
    "subtopic": "Reversal",
    "tags": [
      "Linked List",
      "Reversal",
      "Recursion"
    ],
    "input_format": "The input consists of a singly linked list represented by its head node.",
    "output_format": "The head node of the reversed singly linked list.",
    "constraints": [
      "The number of nodes in the list is in the range [0, 5000]",
      "-5000 <= Node.val <= 5000"
    ],
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5]",
        "output": "[5, 4, 3, 2, 1]",
        "explanation": "Reversing the linked list gives us: 5 -> 4 -> 3 -> 2 -> 1."
      },
      {
        "input": "head = [1, 2]",
        "output": "[2, 1]",
        "explanation": "Reversing the linked list gives us: 2 -> 1."
      },
      {
        "input": "head = []",
        "output": "[]",
        "explanation": "An empty list remains empty after reversal."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to reverse the links between the nodes.",
      "Use a previous, current, and next node approach."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "4Sum",
    "description": "Given an array of integers 'nums' and an integer 'target', return all unique quadruplets (a, b, c, d) such that a + b + c + d equals 'target'. Each quadruplet should be returned in ascending order. The solution set must not contain duplicate quadruplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Backtracking"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "A list of unique quadruplets that sum up to target.",
    "constraints": [
      "0 <= nums.length <= 200",
      "-10^9 <= nums[i] <= 10^9",
      "Each input would have at least one solution."
    ],
    "examples": [
      {
        "input": "nums = [1, 0, -1, 0, -2, 2], target = 0",
        "output": "[[-2, -1, 0, 1], [-2, 0, 0, 2], [-1, 0, 0, 1]]",
        "explanation": "The quadruplets that sum to 0 are: [-2, -1, 0, 1], [-2, 0, 0, 2], and [-1, 0, 0, 1]."
      },
      {
        "input": "nums = [2, 2, 2, 2, 2], target = 8",
        "output": "[[2, 2, 2, 2]]",
        "explanation": "The only quadruplet is [2, 2, 2, 2]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the array to handle duplicates more easily.",
      "Use two pointers to find pairs that sum to a specific value.",
      "Avoid duplicate quadruplets by skipping identical elements."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Same Tree",
    "description": "Given two binary trees, write a function to check if they are the same or not. Two binary trees are considered the same if they are structurally identical and the nodes have the same value.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Recursion"
    ],
    "input_format": "Two binary tree nodes, root1 and root2.",
    "output_format": "A boolean value indicating whether the two trees are the same.",
    "constraints": [
      "The number of nodes in both trees is in the range [0, 100].",
      "-10^4 <= Node.val <= 10^4"
    ],
    "examples": [
      {
        "input": "root1 = [1,2,3], root2 = [1,2,3]",
        "output": "true",
        "explanation": "Both trees are structurally identical and have the same node values."
      },
      {
        "input": "root1 = [1,2], root2 = [1,null,2]",
        "output": "false",
        "explanation": "The structure of the two trees is different."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a recursive function to check the values and structure of both trees.",
      "Consider the base cases where one or both trees are null."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Employee Bonus",
    "description": "You are given a list of employee records, where each record contains an employee's name and their performance score. Your task is to calculate the total bonus amount to be distributed among the employees who scored above a certain threshold. The bonus for each qualifying employee is calculated as a percentage of their score. Implement a function that takes the employee records, the score threshold, and the bonus percentage, and returns the total bonus amount to be distributed.",
    "topic": "Array",
    "subtopic": "Aggregation",
    "tags": [
      "Array",
      "Aggregation",
      "Bonus Calculation"
    ],
    "input_format": "A list of employee records, a threshold score, and a bonus percentage.",
    "output_format": "An integer representing the total bonus amount.",
    "constraints": [
      "1 <= records.length <= 1000",
      "0 <= score <= 100",
      "0 <= bonus_percentage <= 100"
    ],
    "examples": [
      {
        "input": "[{'name':'Alice', 'score': 85}, {'name':'Bob', 'score': 92}, {'name':'Charlie', 'score': 78}], 80, 10",
        "output": "17",
        "explanation": "Both Alice and Bob scored above 80. Alice's bonus is 8.5 and Bob's is 9.2. Total is 8.5 + 9.2 = 17."
      },
      {
        "input": "[{'name':'David', 'score': 60}, {'name':'Eve', 'score': 75}], 70, 20",
        "output": "0",
        "explanation": "No employee scored above the threshold of 70, so the total bonus is 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Filter the employees based on the score threshold.",
      "Multiply each qualifying score by the bonus percentage and sum the results."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Next Permutation",
    "description": "Implement the function nextPermutation that takes an array of integers nums and rearranges the numbers to produce the next lexicographical permutation of all the possible permutations. If such arrangement is not possible, it must rearrange it to the lowest possible order (i.e., sorted in ascending order). The rearrangement must be done in place and should not allocate extra memory for another array.",
    "topic": "Array",
    "subtopic": "Permutation",
    "tags": [
      "Array",
      "Permutation",
      "In-place"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "The modified array nums, which is the next permutation.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 100"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "[1, 3, 2]",
        "explanation": "The next permutation of [1, 2, 3] is [1, 3, 2]."
      },
      {
        "input": "nums = [3, 2, 1]",
        "output": "[1, 2, 3]",
        "explanation": "Since [3, 2, 1] is the last permutation, the next permutation is the first permutation: [1, 2, 3]."
      },
      {
        "input": "nums = [1, 1, 5]",
        "output": "[1, 5, 1]",
        "explanation": "The next permutation of [1, 1, 5] is [1, 5, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Find the largest index k such that nums[k] < nums[k + 1].",
      "Find the largest index l greater than k such that nums[k] < nums[l].",
      "Swap nums[k] and nums[l], then reverse the sequence from nums[k + 1] to the end."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Find First and Last Position of Element in Sorted Array",
    "description": "Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value. If the target is not found in the array, return [-1, -1]. You must write an algorithm with O(log n) runtime complexity.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Searching"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the starting and ending position of the target.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9",
      "nums is a non-decreasing array."
    ],
    "examples": [
      {
        "input": "nums = [5, 7, 7, 8, 8, 10], target = 8",
        "output": "[3, 4]",
        "explanation": "The target 8 appears at indices 3 and 4."
      },
      {
        "input": "nums = [5, 7, 7, 8, 8, 10], target = 6",
        "output": "[-1, -1]",
        "explanation": "The target 6 is not present in the array."
      },
      {
        "input": "nums = [], target = 0",
        "output": "[-1, -1]",
        "explanation": "An empty array does not contain any elements, hence the target cannot be found."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to find the first and last positions.",
      "You may want to perform two binary searches: one for the first position and one for the last."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Sort Array by Increasing Frequency",
    "description": "Given an array of integers, sort the array by the frequency of each integer. If two integers have the same frequency, sort them in increasing order. Return the sorted array.",
    "topic": "Sorting",
    "subtopic": "Frequency Sorting",
    "tags": [
      "Sorting",
      "Frequency",
      "Array"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An array of integers sorted by increasing frequency.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 2, 2, 2, 3]",
        "output": "[3, 1, 1, 2, 2, 2]",
        "explanation": "The frequency of elements are: 1 appears twice, 2 appears three times, and 3 appears once. Sorting by frequency gives us 3 (frequency 1), followed by 1 (frequency 2), and then 2 (frequency 3)."
      },
      {
        "input": "nums = [2, 3, 1, 3, 2]",
        "output": "[1, 2, 2, 3, 3]",
        "explanation": "The frequency of elements are: 1 appears once, 2 appears twice, and 3 appears twice. Since 1 has the lowest frequency, it comes first, followed by 2 and 3 which are sorted in increasing order."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hashmap to count the frequency of each number.",
      "Sort the array based on the frequency and then by value."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Edit Distance",
    "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. The allowed operations are insert a character, delete a character, or replace a character.",
    "topic": "Dynamic Programming",
    "subtopic": "String Manipulation",
    "tags": [
      "Dynamic Programming",
      "String",
      "Edit Distance"
    ],
    "input_format": "Two strings word1 and word2, where 0 <= word1.length, word2.length <= 500.",
    "output_format": "An integer representing the minimum number of operations required to convert word1 to word2.",
    "constraints": [
      "0 <= word1.length, word2.length <= 500",
      "The characters of each string are lowercase letters."
    ],
    "examples": [
      {
        "input": "word1 = 'horse', word2 = 'ros'",
        "output": "3",
        "explanation": "horse -> rorse (replace 'h' with 'r') -> roese (replace 'r' with 'e') -> rose (remove 'e')."
      },
      {
        "input": "word1 = 'intention', word2 = 'execution'",
        "output": "5",
        "explanation": "intention -> inention (remove 't') -> enention (replace 'i' with 'e') -> exention (replace 'n' with 'x') -> exection (replace 't' with 'c') -> execution (add 'u')."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dynamic programming approach.",
      "Use a 2D array to store the minimum operations for substrings.",
      "Identify the base cases for empty strings."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Subsets",
    "description": "Given a set of distinct integers, return all possible subsets (the power set). The solution set must not contain duplicate subsets. You may return the answer in any order.",
    "topic": "Backtracking",
    "subtopic": "Subsets Generation",
    "tags": [
      "Backtracking",
      "Recursion",
      "Bit Manipulation"
    ],
    "input_format": "A list of distinct integers nums.",
    "output_format": "A list of lists representing all possible subsets.",
    "constraints": [
      "1 <= nums.length <= 10",
      "-10 <= nums[i] <= 10"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]",
        "explanation": "The subsets of the set {1, 2, 3} include the empty set and all combinations of its elements."
      },
      {
        "input": "nums = [0]",
        "output": "[[], [0]]",
        "explanation": "The subsets of the set {0} include the empty set and the set itself."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how you would build up the subsets recursively.",
      "Try to use bit manipulation to generate the subsets."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Longest Common Subsequence",
    "description": "Given two strings text1 and text2, return the length of their longest common subsequence. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. For example, 'ace' is a subsequence of 'abcde' while 'aec' is not. If there is no common subsequence, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "String Manipulation",
    "tags": [
      "Dynamic Programming",
      "String",
      "Subsequence"
    ],
    "input_format": "Two strings text1 and text2 (1 <= text1.length, text2.length <= 1000).",
    "output_format": "An integer representing the length of the longest common subsequence.",
    "constraints": [
      "1 <= text1.length, text2.length <= 1000",
      "text1 and text2 consist of English letters."
    ],
    "examples": [
      {
        "input": "text1 = 'abcde', text2 = 'ace'",
        "output": "3",
        "explanation": "The longest common subsequence is 'ace' with length 3."
      },
      {
        "input": "text1 = 'abc', text2 = 'def'",
        "output": "0",
        "explanation": "There is no common subsequence, hence the output is 0."
      },
      {
        "input": "text1 = 'abc', text2 = 'abc'",
        "output": "3",
        "explanation": "The longest common subsequence is 'abc', which has length 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use dynamic programming to build a 2D array that tracks lengths of common subsequences.",
      "Consider using recursion with memoization as an alternative approach."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Remove Duplicates from Sorted Array II",
    "description": "Given a sorted array `nums`, remove the duplicates in-place such that each element appears at most twice. The relative order of the elements should be kept the same. Since it is impossible to change the length of the array in-place, you must instead have the result be placed in the first part of the array. Return the new length of the array. Do not allocate extra space for another array.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "In-Place"
    ],
    "input_format": "An array of integers `nums` sorted in non-decreasing order.",
    "output_format": "An integer representing the new length of the modified array after removing duplicates.",
    "constraints": [
      "0 <= nums.length <= 3 * 10^4",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [1,1,1,2,2,3]",
        "output": "5",
        "explanation": "The modified array is [1,1,2,2,3], and the new length is 5."
      },
      {
        "input": "nums = [0,0,1,1,1,1,2,3,3]",
        "output": "7",
        "explanation": "The modified array is [0,0,1,1,2,3,3], and the new length is 7."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a two-pointer technique to track the position of elements.",
      "The first pointer can iterate through the array, while the second pointer can record the position for the new length."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Largest Rectangle in Histogram",
    "description": "Given an array of integers representing the heights of bars in a histogram, return the area of the largest rectangle that can be formed in the histogram. The width of each bar is 1 unit.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers heights where heights[i] represents the height of the i-th bar in the histogram.",
    "output_format": "An integer representing the area of the largest rectangle that can be formed.",
    "constraints": [
      "1 <= heights.length <= 10^5",
      "0 <= heights[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "heights = [2, 1, 5, 6, 2, 3]",
        "output": "10",
        "explanation": "The largest rectangle can be formed with height 5 and width 2, resulting in an area of 10."
      },
      {
        "input": "heights = [2, 4]",
        "output": "4",
        "explanation": "The largest rectangle can be formed with height 2 and width 2, resulting in an area of 4."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a stack to keep track of the indices of the histogram bars.",
      "For each bar, calculate the area considering it as the shortest bar in the rectangle."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Partition List",
    "description": "Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x. You should preserve the original relative order of the nodes in each of the two partitions.",
    "topic": "Linked List",
    "subtopic": "Partitioning",
    "tags": [
      "Linked List",
      "Partitioning",
      "Two Pointers"
    ],
    "input_format": "A singly linked list represented by its head node and an integer x.",
    "output_format": "The head of the modified linked list after partition.",
    "constraints": [
      "The number of nodes in the linked list is in the range [0, 200].",
      "-100 <= Node.val <= 100",
      "-200 <= x <= 200"
    ],
    "examples": [
      {
        "input": "head = [1, 4, 3, 2, 5, 2], x = 3",
        "output": "[1, 2, 2, 4, 3, 5]",
        "explanation": "The nodes less than 3 (1, 2, 2) come before the nodes greater than or equal to 3 (4, 3, 5)."
      },
      {
        "input": "head = [2, 1], x = 2",
        "output": "[1, 2]",
        "explanation": "The nodes less than 2 (1) should come before the nodes greater than or equal to 2 (2)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using two separate lists to collect nodes based on their value relative to x.",
      "You may need to connect the end of the first list to the start of the second list."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Rotate String",
    "description": "Given a string s and an integer k, rotate the string to the right by k positions. For example, with s = 'abcdef' and k = 2, the result should be 'efabcd'. Keep in mind that rotating the string by its length will result in no change.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Rotation",
      "Manipulation"
    ],
    "input_format": "A string s and an integer k.",
    "output_format": "A string representing the rotated version of s.",
    "constraints": [
      "1 <= s.length <= 100",
      "0 <= k <= 10^5"
    ],
    "examples": [
      {
        "input": "s = 'abcdef', k = 2",
        "output": "efabcd",
        "explanation": "Rotating 'abcdef' by 2 positions to the right results in 'efabcd'."
      },
      {
        "input": "s = 'hello', k = 10",
        "output": "hello",
        "explanation": "Rotating 'hello' by 10 positions (which is equal to rotating by 5 positions due to the length of the string) results in 'hello'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider the effective number of rotations needed by taking k % s.length.",
      "Utilize string slicing to achieve rotation efficiently."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Power of Two",
    "description": "Given an integer n, write a function to determine if it is a power of two. An integer n is considered a power of two if there exists some integer x such that n == 2^x. You must implement your solution using O(1) time complexity.",
    "topic": "Math",
    "subtopic": "Bit Manipulation",
    "tags": [
      "Math",
      "Bit Manipulation",
      "Power"
    ],
    "input_format": "An integer n where n is the number to check.",
    "output_format": "A boolean value indicating whether n is a power of two.",
    "constraints": [
      "0 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "n = 16",
        "output": "true",
        "explanation": "16 is equal to 2^4, hence it is a power of two."
      },
      {
        "input": "n = 5",
        "output": "false",
        "explanation": "5 is not a power of two."
      },
      {
        "input": "n = 1",
        "output": "true",
        "explanation": "1 is equal to 2^0, thus it is a power of two."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use bitwise operations to check if only one bit is set in the binary representation.",
      "Consider the property of numbers that are power of two."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock II",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. However, you are allowed to buy and sell the stock multiple times (i.e., you can buy the stock on multiple days and sell it on different days). The goal is to maximize your total profit. Write a function that returns the maximum profit you can achieve.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithm",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices, where prices[i] represents the price of a stock on day i.",
    "output_format": "An integer representing the maximum profit you can achieve.",
    "constraints": [
      "1 <= prices.length <= 3 * 10^4",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "7",
        "explanation": "Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5 - 1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6 - 3 = 3. Total profit = 4 + 3 = 7."
      },
      {
        "input": "prices = [1, 2, 3, 4, 5]",
        "output": "4",
        "explanation": "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5 - 1 = 4."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "No transactions are done because the prices are in descending order."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the day-to-day changes in price.",
      "Only buy if the price is lower than the next day's price."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Maximum Product Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest product, and return that product. It is guaranteed that the answer will fit in a 32-bit integer.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Product"
    ],
    "input_format": "An integer array nums.",
    "output_format": "An integer representing the maximum product of a contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "-10 <= nums[i] <= 10"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, -2, 4]",
        "output": "6",
        "explanation": "The subarray [2, 3] has the largest product 6."
      },
      {
        "input": "nums = [-2, 0, -1]",
        "output": "0",
        "explanation": "The subarray [0] has the largest product 0."
      },
      {
        "input": "nums = [-2, 3, -4]",
        "output": "24",
        "explanation": "The subarray [3, -4] has the largest product 12, but the entire array has a product of -2 * 3 * -4 = 24."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Keep track of both the maximum and minimum products at each step.",
      "Negative numbers can turn the minimum product into a maximum when multiplied."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Add Binary",
    "description": "Given two binary strings a and b, return their sum as a binary string. The input strings are both non-empty and contain only characters 1 or 0.",
    "topic": "String",
    "subtopic": "Binary Operations",
    "tags": [
      "String",
      "Binary",
      "Math"
    ],
    "input_format": "Two binary strings a and b.",
    "output_format": "A binary string representing the sum of a and b.",
    "constraints": [
      "1 <= a.length, b.length <= 10^4",
      "Both a and b consist only of '0' and '1'."
    ],
    "examples": [
      {
        "input": "a = '1010', b = '1011'",
        "output": "'10101'",
        "explanation": "Decimal equivalent of '1010' is 10 and '1011' is 11. Their sum is 21, which is '10101' in binary."
      },
      {
        "input": "a = '11', b = '1'",
        "output": "'100'",
        "explanation": "Decimal equivalent of '11' is 3 and '1' is 1. Their sum is 4, which is '100' in binary."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Initialize a carry variable to handle sums greater than 2.",
      "Iterate backwards through both strings to add corresponding bits."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Longest Consecutive Sequence",
    "description": "Given an unsorted array of integers, find the length of the longest consecutive elements sequence. The algorithm should run in O(n) time complexity. You must not use extra space for storing elements other than the input.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Consecutive Sequence"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest consecutive elements sequence.",
    "constraints": [
      "0 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [100, 4, 200, 1, 3, 2]",
        "output": "4",
        "explanation": "The longest consecutive sequence is [1, 2, 3, 4]. Its length is 4."
      },
      {
        "input": "nums = [0, -1]",
        "output": "2",
        "explanation": "The longest consecutive sequence is [-1, 0]. Its length is 2."
      },
      {
        "input": "nums = []",
        "output": "0",
        "explanation": "There are no elements in the array, so the length is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a set to track the numbers for O(1) look-up.",
      "Iterate over each number and expand on both sides to find the full range.",
      "Keep a count of the longest sequence found."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Largest Number",
    "description": "Given a list of non-negative integers, you are to arrange them such that they form the largest possible number. The result should be returned as a string. For example, given the numbers [3, 30, 34, 5, 9], the largest number formed is '9534330'.",
    "topic": "String",
    "subtopic": "Sorting",
    "tags": [
      "String",
      "Sorting",
      "Greedy"
    ],
    "input_format": "A list of non-negative integers.",
    "output_format": "A string representing the largest number formed by arranging the input integers.",
    "constraints": [
      "0 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "[3, 30, 34, 5, 9]",
        "output": "9534330",
        "explanation": "The largest number can be formed by arranging the numbers as 9, 5, 34, 3, 30."
      },
      {
        "input": "[10, 2]",
        "output": "210",
        "explanation": "The largest number can be formed by arranging the numbers as 2, 10."
      },
      {
        "input": "[1]",
        "output": "1",
        "explanation": "The largest number is just 1 since there is only one number."
      },
      {
        "input": "[0, 0]",
        "output": "0",
        "explanation": "The largest number that can be formed is just 0 since all elements are zero."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the order of numbers when concatenating them.",
      "Custom sorting logic can help determine the order.",
      "Handle cases where the largest number may consist only of zeros."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Sort Characters By Frequency",
    "description": "Given a string s, sort it in decreasing order based on the frequency of the characters. The letter with the highest frequency should appear first. If two characters have the same frequency, they should be sorted in alphabetical order.",
    "topic": "String",
    "subtopic": "Sorting",
    "tags": [
      "String",
      "Sorting",
      "Frequency"
    ],
    "input_format": "A string s consisting of uppercase and lowercase English letters.",
    "output_format": "A string representing the sorted characters according to their frequency.",
    "constraints": [
      "1 <= s.length <= 20000",
      "s consists of English letters."
    ],
    "examples": [
      {
        "input": "tree",
        "output": "eert",
        "explanation": "The character 'e' appears twice, while 't' and 'r' appear once. So, the output is 'eert'."
      },
      {
        "input": "cccaaa",
        "output": "aaaccc",
        "explanation": "The character 'a' appears three times and 'c' appears three times. Both characters are sorted lexicographically, resulting in 'aaaccc'."
      },
      {
        "input": "Aabb",
        "output": "bbAa",
        "explanation": "The character 'b' appears twice, 'A' and 'a' appear once each. Hence, after sorting based on frequency and then alphabetically, we get 'bbAa'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hashmap to count the frequencies of each character.",
      "You can use a sorting function that utilizes the frequency as the key."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Single Element in a Sorted Array",
    "description": "You are given a sorted array where every element appears exactly twice, except for one element that appears only once. Your task is to find that single element. The solution should have a time complexity of O(log n).",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Search"
    ],
    "input_format": "An array of integers 'nums' sorted in ascending order.",
    "output_format": "An integer representing the single element that appears once.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^5",
      "The input array is guaranteed to consist of pairs of numbers and one single number."
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 4, 5]",
        "output": "5",
        "explanation": "The only number that appears once is 5."
      },
      {
        "input": "nums = [2, 2, 3, 3, 7, 8, 8]",
        "output": "7",
        "explanation": "The only number that appears once is 7."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search.",
      "Take advantage of the sorted property of the array."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Number of Employees Who Met the Target",
    "description": "You are given a list of integers representing the number of sales made by each employee in a company and an integer target. Your task is to determine how many employees met or exceeded this target sales number.",
    "topic": "Array",
    "subtopic": "Counting",
    "tags": [
      "Array",
      "Counting",
      "Threshold"
    ],
    "input_format": "An array of integers representing sales and an integer target representing the sales goal.",
    "output_format": "An integer representing the number of employees who met or exceeded the target sales.",
    "constraints": [
      "1 <= sales.length <= 100",
      "0 <= sales[i] <= 1000",
      "0 <= target <= 1000"
    ],
    "examples": [
      {
        "input": "sales = [100, 200, 300, 400, 500], target = 300",
        "output": "3",
        "explanation": "The employees who met or exceeded the target sales of 300 are: 300, 400, and 500."
      },
      {
        "input": "sales = [50, 60, 70, 80], target = 100",
        "output": "0",
        "explanation": "No employee met the target sales of 100."
      },
      {
        "input": "sales = [150, 250, 350, 450, 550], target = 400",
        "output": "3",
        "explanation": "The employees who met or exceeded the target sales of 400 are: 450, and 550."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Iterate through the sales array.",
      "Count how many sales are greater than or equal to the target."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Path with Maximum Probability",
    "description": "Given a directed graph where each edge has a probability associated with it, find the path from a source node to a destination node that has the maximum probability of success. Return the maximum probability of reaching the destination node from the source node. If there is no path, return 0.",
    "topic": "Graph",
    "subtopic": "Pathfinding",
    "tags": [
      "Graph",
      "Probability",
      "Pathfinding"
    ],
    "input_format": "An integer n representing the number of nodes, a 2D array edges where edges[i] = [u, v, p] represents a directed edge from node u to node v with probability p, and two integers source and destination.",
    "output_format": "A double representing the maximum probability of reaching the destination from the source.",
    "constraints": [
      "1 <= n <= 100",
      "0 <= edges.length <= n * (n - 1)",
      "0 <= u, v < n",
      "0 <= p <= 1",
      "source and destination are distinct nodes."
    ],
    "examples": [
      {
        "input": "n = 3, edges = [[0, 1, 0.5], [1, 2, 0.5], [0, 2, 0.2]], source = 0, destination = 2",
        "output": "0.25",
        "explanation": "The maximum probability path is via node 1: 0 -> 1 with probability 0.5 and 1 -> 2 with probability 0.5, giving a total probability of 0.5 * 0.5 = 0.25."
      },
      {
        "input": "n = 3, edges = [[0, 1, 0.5], [1, 2, 0.5]], source = 0, destination = 2",
        "output": "0.25",
        "explanation": "Only the path 0 -> 1 -> 2 exists, resulting in a total probability of 0.5 * 0.5 = 0.25."
      },
      {
        "input": "n = 2, edges = [[0, 1, 0.3]], source = 0, destination = 1",
        "output": "0.3",
        "explanation": "Direct path from 0 to 1 with probability 0.3."
      },
      {
        "input": "n = 3, edges = [[0, 1, 0.5]], source = 0, destination = 2",
        "output": "0.0",
        "explanation": "No path exists from 0 to 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Dijkstra's algorithm variant to maximize probabilities.",
      "Use a priority queue to explore paths in the order of maximum probability.",
      "Maintain a probability array to store the maximum probability to reach each node."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Coin Change",
    "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. You need to determine the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin.",
    "topic": "Dynamic Programming",
    "subtopic": "Coin Change",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "The first line contains an integer amount (0 <= amount <= 5000). The second line contains an array of integers coins (1 <= coins.length <= 300) where each coin is unique and (1 <= coins[i] <= 5000).",
    "output_format": "An integer representing the minimum number of coins needed to make up the amount, or -1 if it is not possible.",
    "constraints": [
      "0 <= amount <= 5000",
      "1 <= coins.length <= 300",
      "1 <= coins[i] <= 5000"
    ],
    "examples": [
      {
        "input": "amount = 11\ncoins = [1, 2, 5]",
        "output": "3",
        "explanation": "The minimum number of coins to make up amount 11 is 3 (5 + 5 + 1)."
      },
      {
        "input": "amount = 3\ncoins = [2]",
        "output": "-1",
        "explanation": "The amount 3 cannot be made up by using coin denominations of 2."
      },
      {
        "input": "amount = 0\ncoins = [1, 2, 5]",
        "output": "0",
        "explanation": "No coins are needed to make up amount 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dynamic programming approach to keep track of minimum coins needed.",
      "Use an array where the index represents the amount and the value at that index represents the minimum coins needed."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Big Countries",
    "description": "You are given a list of countries, each represented by its name, population, and area. Your task is to identify which countries are considered 'big'. A country is 'big' if it has a population greater than 25 million or an area greater than 3 million square kilometers. Return a list of the names of all 'big' countries sorted by their names in alphabetical order.",
    "topic": "Sorting",
    "subtopic": "Filtering",
    "tags": [
      "Sorting",
      "Filtering",
      "Arrays"
    ],
    "input_format": "A list of countries, where each country is represented as a tuple (name: string, population: integer, area: integer).",
    "output_format": "A list of strings representing the names of the 'big' countries, sorted in alphabetical order.",
    "constraints": [
      "1 <= countries.length <= 1000",
      "0 <= population <= 10^9",
      "0 <= area <= 10^9"
    ],
    "examples": [
      {
        "input": "[('CountryA', 30000000, 2500000), ('CountryB', 20000000, 4000000), ('CountryC', 15000000, 5000000)]",
        "output": "['CountryA', 'CountryB', 'CountryC']",
        "explanation": "CountryA is 'big' because it has a population greater than 25 million. CountryB is 'big' due to its area. CountryC is 'big' because its area exceeds 3 million square kilometers."
      },
      {
        "input": "[('CountryD', 10000000, 1000000), ('CountryE', 50000000, 6000000), ('CountryF', 25000000, 2900000)]",
        "output": "['CountryE']",
        "explanation": "Only CountryE is 'big' because it has a population greater than 25 million and neither CountryD nor CountryF meets the requirement."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a loop to filter out the countries based on population and area.",
      "Sort the resultant list of country names alphabetically before returning."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Sum of Unique Elements",
    "description": "Given an array of integers, return the sum of all unique elements in the array. An element is considered unique if it appears exactly once in the array.",
    "topic": "Array",
    "subtopic": "HashMap",
    "tags": [
      "Array",
      "HashMap",
      "Uniqueness",
      "Sum"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the sum of all unique elements.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 2, 3, 4, 4]",
        "output": "4",
        "explanation": "The unique elements are 1 and 3. Their sum is 1 + 3 = 4."
      },
      {
        "input": "nums = [5, 1, 1, 2, 2, 3]",
        "output": "8",
        "explanation": "The unique elements are 5 and 3. Their sum is 5 + 3 = 8."
      },
      {
        "input": "nums = [0]",
        "output": "0",
        "explanation": "The only element is 0 and it is unique. The sum is 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a frequency map to count occurrences of each element.",
      "Only add elements to the sum if their count is exactly one."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Intersection of Two Arrays",
    "description": "Given two arrays of integers nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.",
    "topic": "Array",
    "subtopic": "Set Operations",
    "tags": [
      "Array",
      "Set",
      "Intersection"
    ],
    "input_format": "Two integer arrays nums1 and nums2.",
    "output_format": "An array of integers representing the unique intersection of nums1 and nums2.",
    "constraints": [
      "0 <= nums1.length, nums2.length <= 1000",
      "-1000 <= nums1[i], nums2[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums1 = [1, 2, 2, 1], nums2 = [2, 2]",
        "output": "[2]",
        "explanation": "The intersection of nums1 and nums2 is [2] since it's the only number that appears in both arrays."
      },
      {
        "input": "nums1 = [4, 9, 5], nums2 = [9, 4, 9, 8, 4]",
        "output": "[9, 4]",
        "explanation": "The intersection of nums1 and nums2 is [9, 4] which can be returned in any order."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a set to store unique elements."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "How Many Numbers Are Smaller Than the Current Number",
    "description": "Given an array of numbers, for each element in the array, you need to find out how many elements are smaller than that element. You need to return an array where each index i contains the count of numbers that are smaller than nums[i].",
    "topic": "Array",
    "subtopic": "Counting Elements",
    "tags": [
      "Array",
      "Counting",
      "Elements"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An array of integers representing the count of numbers smaller than each number in nums.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [8, 1, 2, 2, 3]",
        "output": "[4, 0, 1, 1, 3]",
        "explanation": "For each number in the input array, the counts of numbers smaller than them are: [8:4, 1:0, 2:1, 2:1, 3:3]."
      },
      {
        "input": "nums = [6, 5, 4, 8]",
        "output": "[2, 1, 0, 3]",
        "explanation": "There are 2 numbers smaller than 6, 1 number smaller than 5, 0 numbers smaller than 4, and 3 numbers smaller than 8."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider sorting the array to help determine counts more easily.",
      "Use a hashmap to track the frequency of each number."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Students and Examinations",
    "description": "You are given a list of students and their corresponding scores in a mathematics examination. Your task is to identify the top scoring students who scored above a specified passing mark. Return a list of students who are above the passing mark, sorted in descending order of their scores. If multiple students have the same score, they should be sorted alphabetically by their names.",
    "topic": "Sorting",
    "subtopic": "Custom Sorting",
    "tags": [
      "Sorting",
      "Array",
      "Strings"
    ],
    "input_format": "An array of strings, each containing the student's name followed by their score, and an integer representing the passing mark.",
    "output_format": "An array of strings representing the names of the top scoring students above the passing mark.",
    "constraints": [
      "1 <= students.length <= 1000",
      "0 <= scores[i] <= 100",
      "1 <= passingMark <= 100"
    ],
    "examples": [
      {
        "input": "students = ['Alice 90', 'Bob 85', 'Charlie 95'], passingMark = 85",
        "output": "['Charlie 95', 'Alice 90']",
        "explanation": "Charlie scored 95, Alice scored 90, and both scored above the passing mark of 85."
      },
      {
        "input": "students = ['David 60', 'Eve 70', 'Frank 70'], passingMark = 60",
        "output": "['Eve 70', 'Frank 70', 'David 60']",
        "explanation": "All students scored above 60, sorted by score descending and names alphabetically for the same scores."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use sorting techniques to rearrange the list based on scores and names."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Combination Sum",
    "description": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order. The same number may be chosen from candidates an unlimited number of times. It is guaranteed that the number of unique combinations that sum up to the target is less than 150 combinations for the given input.",
    "topic": "Backtracking",
    "subtopic": "Combination Sum",
    "tags": [
      "Backtracking",
      "Array",
      "Recursion"
    ],
    "input_format": "An array of distinct integers candidates and an integer target.",
    "output_format": "A list of lists containing all unique combinations of candidates that sum up to target.",
    "constraints": [
      "1 <= candidates.length <= 30",
      "1 <= candidates[i] <= 200",
      "All elements of candidates are distinct.",
      "1 <= target <= 500"
    ],
    "examples": [
      {
        "input": "candidates = [2, 3, 6, 7], target = 7",
        "output": "[[2, 2, 3], [7]]",
        "explanation": "The combinations that sum up to target 7 are [2, 2, 3] and [7]."
      },
      {
        "input": "candidates = [2, 3, 5], target = 8",
        "output": "[[2, 2, 2, 2], [2, 3, 3], [3, 5]]",
        "explanation": "The combinations that sum up to target 8 are [2, 2, 2, 2], [2, 3, 3], and [3, 5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using backtracking to explore all possible combinations.",
      "Make sure to avoid duplicate combinations by using a combination of an index and looping."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Peak Index in a Mountain Array",
    "description": "You are given a mountain array, an array that strictly increases and then strictly decreases. Your task is to find the index of the peak element in the mountain array. The peak element is defined as the element which is greater than its neighbors. If the array is [0, 2, 1, 0], then 2 is the peak index because it is greater than 1 and 0.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Peak Element"
    ],
    "input_format": "An array of integers nums representing the mountain array.",
    "output_format": "An integer representing the peak index of the mountain array.",
    "constraints": [
      "3 <= nums.length <= 10^5",
      "1 <= nums[i] <= 10^6",
      "The array is guaranteed to be a mountain array."
    ],
    "examples": [
      {
        "input": "nums = [0, 2, 1, 0]",
        "output": "1",
        "explanation": "The peak element is 2 at index 1."
      },
      {
        "input": "nums = [0, 10, 5, 2]",
        "output": "1",
        "explanation": "The peak element is 10 at index 1."
      },
      {
        "input": "nums = [1, 3, 8, 12, 4, 2]",
        "output": "3",
        "explanation": "The peak element is 12 at index 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to reduce the time complexity.",
      "A peak element is larger than its neighbors."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "First Unique Character in a String",
    "description": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.",
    "topic": "String",
    "subtopic": "Character Frequency",
    "tags": [
      "String",
      "Frequency",
      "Hash Table"
    ],
    "input_format": "A string s consisting of lowercase English letters.",
    "output_format": "An integer representing the index of the first non-repeating character, or -1 if none exists.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'leetcode'",
        "output": "0",
        "explanation": "The first non-repeating character is 'l' at index 0."
      },
      {
        "input": "s = 'loveleetcode'",
        "output": "2",
        "explanation": "The first non-repeating character is 'v' at index 2."
      },
      {
        "input": "s = 'aabb'",
        "output": "-1",
        "explanation": "There are no non-repeating characters in the string."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to count the frequency of each character.",
      "Iterate through the string a second time to find the first character with a count of one."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Count Primes",
    "description": "Given an integer n, return the number of prime numbers that are strictly less than n.",
    "topic": "Mathematics",
    "subtopic": "Prime Numbers",
    "tags": [
      "Mathematics",
      "Prime",
      "Counting"
    ],
    "input_format": "An integer n, where n >= 2.",
    "output_format": "An integer representing the number of prime numbers less than n.",
    "constraints": [
      "2 <= n <= 10^6"
    ],
    "examples": [
      {
        "input": "n = 10",
        "output": "4",
        "explanation": "The prime numbers less than 10 are 2, 3, 5, and 7. Thus, there are 4 primes."
      },
      {
        "input": "n = 0",
        "output": "0",
        "explanation": "There are no prime numbers less than 0."
      },
      {
        "input": "n = 1",
        "output": "0",
        "explanation": "There are no prime numbers less than 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the Sieve of Eratosthenes for efficient prime counting.",
      "Check divisibility of numbers when determining if they are prime."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Pascal's Triangle",
    "description": "Given a non-negative integer numRows, generate the first numRows of Pascal's triangle. In Pascal's triangle, each number is the sum of the two numbers directly above it. The triangle starts with a '1' at the top.",
    "topic": "Arrays",
    "subtopic": "2D Arrays",
    "tags": [
      "Arrays",
      "Dynamic Programming",
      "Mathematics"
    ],
    "input_format": "A single integer numRows representing the number of rows in Pascal's triangle.",
    "output_format": "A list of lists of integers representing the first numRows of Pascal's triangle.",
    "constraints": [
      "0 <= numRows <= 30"
    ],
    "examples": [
      {
        "input": "numRows = 5",
        "output": "[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]",
        "explanation": "The first 5 rows of Pascal's triangle are generated as shown."
      },
      {
        "input": "numRows = 1",
        "output": "[[1]]",
        "explanation": "Only the top row of Pascal's triangle is generated."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a nested loop to construct the rows based on the previous row."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Product of Array Except Self",
    "description": "Given an integer array nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. Solve it without using division and in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Product Calculation",
    "tags": [
      "Array",
      "Product",
      "Multiplication"
    ],
    "input_format": "An integer array nums where 2 <= nums.length <= 10^5.",
    "output_format": "An integer array output where output[i] is the product of all numbers in nums except nums[i].",
    "constraints": [
      "2 <= nums.length <= 10^5",
      "-30 <= nums[i] <= 30",
      "The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer."
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "[24, 12, 8, 6]",
        "explanation": "The product of all elements except the first element is 2 * 3 * 4 = 24 for index 0, and similarly for the other indices."
      },
      {
        "input": "nums = [-1, 1, 0, -3, 3]",
        "output": "[0, 0, 9, 0, 0]",
        "explanation": "At index 0: output = 1 * 0 * -3 * 3 = 0, and so on."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using prefix and suffix products to avoid division.",
      "Think about how you could store the intermediate results."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Word Search",
    "description": "Given a 2D board and a word, find if the word exists in the grid. The word can be constructed from adjoining cells (horizontally or vertically). A cell can only be used once in the search.",
    "topic": "Backtracking",
    "subtopic": "Depth-First Search",
    "tags": [
      "Backtracking",
      "DFS",
      "Matrix"
    ],
    "input_format": "A 2D board of characters and a string word to search within the board.",
    "output_format": "A boolean indicating whether the word exists in the grid or not.",
    "constraints": [
      "1 <= board.length, board[i].length <= 200",
      "board[i][j] is a lowercase English letter.",
      "1 <= word.length <= 6 * 10^4"
    ],
    "examples": [
      {
        "input": "board = [['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], word = 'ABCCED'",
        "output": "true",
        "explanation": "The word 'ABCCED' can be found in the grid by moving to adjacent cells."
      },
      {
        "input": "board = [['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], word = 'SEE'",
        "output": "true",
        "explanation": "The word 'SEE' can be found in the grid by moving downwards."
      },
      {
        "input": "board = [['A', 'B', 'C', 'E'], ['S', 'F', 'C', 'S'], ['A', 'D', 'E', 'E']], word = 'ABCB'",
        "output": "false",
        "explanation": "The word 'ABCB' cannot be constructed since the cell containing 'B' at (0, 1) cannot be used twice."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a recursive DFS approach to explore adjacent cells.",
      "Use a visited set to track cells that have already been used in the current word path."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "3Sum Closest",
    "description": "Given an array of integers nums and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution, and you may not use the same element twice. Your solution should be O(n^2) time complexity.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting",
      "Sum"
    ],
    "input_format": "An integer array nums and an integer target.",
    "output_format": "An integer representing the sum of the three integers closest to the target.",
    "constraints": [
      "3 <= nums.length <= 10^3",
      "-10^4 <= nums[i] <= 10^4",
      "-10^5 <= target <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 2, 1, -4], target = 1",
        "output": "2",
        "explanation": "The sum that is closest to the target 1 is -1 + 2 + 1 = 2."
      },
      {
        "input": "nums = [0, 0, 0], target = 1",
        "output": "0",
        "explanation": "The only combination is 0 + 0 + 0, which gives the sum of 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try sorting the array first to use two pointers.",
      "Consider how to adjust pointers based on the sum compared to the target."
    ],
    "company": "TCS"
  },
  {
    "question_id": "",
    "title": "Search a 2D Matrix II",
    "description": "Write an efficient algorithm to search for a target value in an m x n integer matrix. This matrix has the following properties: Integers in each row are sorted from left to right, and integers in each column are sorted from top to bottom. Your goal is to determine if the target value exists in the matrix. If it exists, return true; otherwise, return false.",
    "topic": "Matrix",
    "subtopic": "Search",
    "tags": [
      "Matrix",
      "Binary Search",
      "Search"
    ],
    "input_format": "A 2D list of integers matrix and an integer target.",
    "output_format": "A boolean value indicating whether the target exists in the matrix.",
    "constraints": [
      "m == matrix.length",
      "n == matrix[i].length",
      "1 <= m, n <= 100",
      "-10^4 <= matrix[i][j] <= 10^4",
      "All integers in matrix are unique.",
      "The target value is an integer."
    ],
    "examples": [
      {
        "input": "matrix = [[1, 4, 7, 11], [2, 5, 8, 12], [3, 6, 9, 16], [10, 13, 14, 17]], target = 5",
        "output": "true",
        "explanation": "The target value 5 exists in the matrix."
      },
      {
        "input": "matrix = [[1, 4, 7, 11], [2, 5, 8, 12], [3, 6, 9, 16], [10, 13, 14, 17]], target = 20",
        "output": "false",
        "explanation": "The target value 20 does not exist in the matrix."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "You can start searching from the top-right corner of the matrix.",
      "If the current number is greater than the target, move left.",
      "If the current number is less than the target, move down."
    ],
    "company": "TCS"
  }
]