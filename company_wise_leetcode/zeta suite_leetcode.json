[
  {
    "question_id": "",
    "title": "Count Equal and Divisible Pairs in an Array",
    "description": "Given an array of integers, count the number of pairs (i, j) such that i < j and nums[i] == nums[j] and both are divisible by a given integer k.",
    "topic": "Array",
    "subtopic": "Counting Pairs",
    "tags": [
      "Array",
      "Counting",
      "Pairs"
    ],
    "input_format": "An array of integers nums and an integer k.",
    "output_format": "An integer representing the count of valid pairs.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5",
      "1 <= k <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 2, 3, 4, 4, 4], k = 2",
        "output": "3",
        "explanation": "The valid pairs are (1, 2), (2, 2), and (4, 4)."
      },
      {
        "input": "nums = [1, 1, 1, 1], k = 1",
        "output": "6",
        "explanation": "All pairs of indices with value 1 are valid. (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)"
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "You can use a hashmap to count occurrences of each number.",
      "Iterate through the hashmap to calculate pairs."
    ],
    "company": "zeta suite"
  },
  {
    "question_id": "",
    "title": "Task Scheduler",
    "description": "Given a list of tasks and a positive integer 'n', return the least number of units of time required to finish all tasks. There are 'n' units of time that must pass between two same tasks. If it is not possible to schedule the tasks, return -1.",
    "topic": "Greedy",
    "subtopic": "Task Scheduling",
    "tags": [
      "Greedy",
      "Heap",
      "Simulation"
    ],
    "input_format": "An array of characters representing tasks and an integer n.",
    "output_format": "An integer representing the least number of units of time required to finish all tasks, or -1 if not possible.",
    "constraints": [
      "1 <= tasks.length <= 10^4",
      "0 <= n <= 26",
      "tasks[i] is a uppercase English letter."
    ],
    "examples": [
      {
        "input": "tasks = ['A', 'A', 'A', 'B', 'B', 'B'], n = 2",
        "output": "8",
        "explanation": "One possible schedule is: A -> B -> idle -> A -> B -> idle -> A -> B."
      },
      {
        "input": "tasks = ['A', 'A', 'A', 'B', 'B', 'B'], n = 0",
        "output": "6",
        "explanation": "With no cooldown time, we can schedule them back-to-back."
      },
      {
        "input": "tasks = ['A', 'A', 'A', 'A', 'A', 'A'], n = 2",
        "output": "-1",
        "explanation": "It's impossible to schedule these tasks with the required cooldown."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Count the frequency of each task.",
      "Use a max-heap to schedule tasks efficiently.",
      "Consider the idle time needed when scheduling."
    ],
    "company": "zeta suite"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array prices of integers where 0 <= prices.length <= 10^5 and 0 <= prices[i] <= 10^4.",
    "output_format": "An integer representing the maximum profit.",
    "constraints": [
      "0 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 1 (price = 1) and sell on day 4 (price = 6). Profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Track the minimum price encountered so far.",
      "Calculate profit based on the current price and the minimum price."
    ],
    "company": "zeta suite"
  }
]