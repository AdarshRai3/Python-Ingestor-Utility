[
  {
    "question_id": "",
    "title": "Maximum Earnings From Taxi",
    "description": "You are a taxi driver who can choose to drive for a limited number of hours. Each hour, you can choose to either continue driving or take a break. If you take a break, you will lose potential earnings for that hour. Given an array of integers where each integer represents the earnings you can make for each consecutive hour of driving, return the maximum earnings possible by choosing the optimal hours to drive and take breaks.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithms",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Maximum Subarray"
    ],
    "input_format": "An array of integers earnings, where earnings[i] represents the earnings for the i-th hour of driving.",
    "output_format": "An integer representing the maximum earnings possible.",
    "constraints": [
      "1 <= earnings.length <= 1000",
      "0 <= earnings[i] <= 1000"
    ],
    "examples": [
      {
        "input": "earnings = [5, 1, 2, 10, 6]",
        "output": "21",
        "explanation": "Driving for all hours gives a maximum earning of 5 + 1 + 2 + 10 + 6 = 24, but taking a break after the third hour (2) maximizes profit to 5 + 1 + 10 + 6 = 22. The maximum is achieved at hour 4."
      },
      {
        "input": "earnings = [3, 5, 1, 7, 8, 6]",
        "output": "22",
        "explanation": "Choose to drive for hours 1, 2, 4, and 5. Maximum earnings is 3 + 5 + 7 + 8 = 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to store maximum earnings up to each hour.",
      "Think about how to decide whether to take a break or not."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Asteroid Collision",
    "description": "We have an array of integers asteroids, where each asteroid size is represented by an integer. A positive integer represents a moving asteroid to the right, and a negative integer represents a moving asteroid to the left. When two asteroids meet, the smaller one will explode. If they are of the same size, both will explode. The collision happens for each pair of asteroids in the array in order, from left to right. Return an array of the remaining asteroids after all collisions have been resolved.",
    "topic": "Stack",
    "subtopic": "Monotonic Stack",
    "tags": [
      "Array",
      "Stack",
      "Collision"
    ],
    "input_format": "An array of integers asteroids.",
    "output_format": "An array of integers representing the remaining asteroids after all collisions.",
    "constraints": [
      "1 <= asteroids.length <= 10^4",
      "-10^5 <= asteroids[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "asteroids = [5, 10, -5]",
        "output": "[5, 10]",
        "explanation": "The asteroid 5 and 10 do not collide with each other. The asteroid -5 will collide with asteroid 10 and explode, hence the remaining asteroids are [5, 10]."
      },
      {
        "input": "asteroids = [8, -8]",
        "output": "[]",
        "explanation": "Both asteroids collide and explode each other, resulting in an empty array."
      },
      {
        "input": "asteroids = [10, 2, -5]",
        "output": "[10]",
        "explanation": "Asteroid 10 will collide with -5 causing -5 to explode. Asteroid 2 will remain as it does not collide with any other asteroid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of asteroid sizes.",
      "Only compare the top of the stack when a negative asteroid is encountered.",
      "Keep track of the collisions and progress through the array."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the height of bars in a histogram, compute how much water can be trapped after raining. Your goal is to find the total water that can be trapped after a rainfall, given that the bars are aligned next to each other.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Water Trapping"
    ],
    "input_format": "An array of non-negative integers representing the height of the bars.",
    "output_format": "An integer representing the total amount of trapped water.",
    "constraints": [
      "n == height.length",
      "0 <= n <= 10^2",
      "0 <= height[i] <= 10^0"
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The water trapped is represented between bars: (0, 1), (1, 2), (2, 1), (2, 3), (2, 1), and (2, 1), totaling 6."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The water trapped when bars are as described is from height 2 and 3 between the higher bars, totaling 9."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using two pointers to track the left and right boundaries.",
      "Use the min of the maximum heights from both sides for water calculation."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Geometry"
    ],
    "input_format": "An integer array heights representing the height of each line.",
    "output_format": "An integer representing the maximum area of water the container can hold.",
    "constraints": [
      "2 <= heights.length <= 10^5",
      "0 <= heights[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "heights = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The lines at indices 1 and 8 form a container that can hold water of height 7, giving an area of 7 * (8 - 1) = 49."
      },
      {
        "input": "heights = [1,1]",
        "output": "1",
        "explanation": "There's only one container formed by the two lines, so the area is 1 * (1 - 0) = 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to use two pointers to find the solution efficiently.",
      "The area is determined by the shorter line, so adjust your pointers accordingly."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Rotting Oranges",
    "description": "You are given a grid of m x n cells where each cell can have one of three values: 0 representing an empty cell, 1 representing a fresh orange, or 2 representing a rotten orange. Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no fresh oranges remain. If it is impossible for all oranges to rot, return -1.",
    "topic": "Graph",
    "subtopic": "BFS",
    "tags": [
      "Breadth-First Search",
      "Graph",
      "Matrix"
    ],
    "input_format": "A 2D grid represented as a list of lists, where each inner list contains integers (0, 1, or 2).",
    "output_format": "An integer representing the minimum number of minutes until no fresh oranges remain, or -1 if it is impossible.",
    "constraints": [
      "1 <= m, n <= 10",
      "grid[i][j] is 0, 1, or 2."
    ],
    "examples": [
      {
        "input": "grid = [[2,1,1],[1,1,0],[0,1,2]]",
        "output": "4",
        "explanation": "After 1 minute, the oranges at (0,1) become rotten. In the next 3 minutes, the remaining fresh oranges become rotten, totaling 4 minutes."
      },
      {
        "input": "grid = [[2,1,1],[0,1,1],[1,0,2]]",
        "output": "-1",
        "explanation": "The fresh orange at (1,1) cannot rot because it is not adjacent to any rotten oranges."
      },
      {
        "input": "grid = [[0,2]]",
        "output": "0",
        "explanation": "There are no fresh oranges, so the answer is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use BFS to explore and rot adjacent fresh oranges.",
      "Track the time taken for each layer of BFS."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "An array of integers nums, where 0 <= nums.length <= 3000.",
    "output_format": "A list of unique triplets that sum up to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The triplets that sum to zero are [-1, -1, 2] and [-1, 0, 1]."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "Since there are no numbers, no triplets can be formed."
      },
      {
        "input": "nums = [0, 1, 1]",
        "output": "[]",
        "explanation": "There are not enough unique numbers to form a triplet."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the array first to make it easier to find triplets.",
      "Use a two-pointer technique to find pairs that complement the current number.",
      "Skip duplicate elements to avoid duplicate triplets in the result."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "First Missing Positive",
    "description": "Given an unsorted integer array nums, find the smallest positive integer that is missing from the array. You must implement an algorithm that runs in O(n) time and uses constant extra space.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Mathematics"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the smallest missing positive integer.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^6 <= nums[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [3, 4, -1, 1]",
        "output": "2",
        "explanation": "The smallest missing positive integer is 2."
      },
      {
        "input": "nums = [1, 2, 0]",
        "output": "3",
        "explanation": "The smallest missing positive integer is 3."
      },
      {
        "input": "nums = [7, 8, 9, 11, 12]",
        "output": "1",
        "explanation": "The smallest missing positive integer is 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using the index of the array for marking presence.",
      "Only positive integers are of interest."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Largest Rectangle in Histogram",
    "description": "Given an array of integers representing the heights of bars in a histogram, return the area of the largest rectangle that can be fully contained within the histogram. The histogram is represented by the array 'heights', where each element is the height of a bar, and the width of each bar is 1.",
    "topic": "Stack",
    "subtopic": "Monotonic Stack",
    "tags": [
      "Stack",
      "Array",
      "Dynamic Programming",
      "Monotonic Stack"
    ],
    "input_format": "An array of integers 'heights' where 1 <= heights.length <= 10^5 and 0 <= heights[i] <= 10^4.",
    "output_format": "An integer representing the area of the largest rectangle that can be formed in the histogram.",
    "constraints": [
      "1 <= heights.length <= 10^5",
      "0 <= heights[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "heights = [2,1,5,6,2,3]",
        "output": "10",
        "explanation": "The largest rectangle can be formed using heights 5 and 6, which gives an area of 5 * 2 = 10."
      },
      {
        "input": "heights = [2,4]",
        "output": "4",
        "explanation": "The largest rectangle can be formed with height 4, which gives an area of 4 * 1 = 4."
      },
      {
        "input": "heights = [1,1,1,1,1]",
        "output": "5",
        "explanation": "The largest rectangle can span all bars, giving an area of 1 * 5 = 5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a stack to keep track of the indices of the bars.",
      "For each bar, determine the width of the rectangle that can be formed with that height.",
      "Make sure to handle the edge cases when the stack becomes empty."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Deepest Leaves Sum",
    "description": "Given a binary tree, return the sum of values of its deepest leaves. A leaf is a node with no children. The deepest leaves are the leaves that are farthest from the root (the top node in the tree).",
    "topic": "Tree",
    "subtopic": "Depth-First Search",
    "tags": [
      "Tree",
      "Depth-First Search",
      "BFS"
    ],
    "input_format": "The input is the root node of a binary tree.",
    "output_format": "An integer representing the sum of values of the deepest leaves.",
    "constraints": [
      "The number of nodes in the tree is in the range [1, 10^4].",
      "0 <= Node.val <= 100."
    ],
    "examples": [
      {
        "input": "root = [1, 2, 3, 4, 5, null, 6, 7, null, null, null, null, 8]",
        "output": "15",
        "explanation": "The deepest leaves are 7 and 8. Their sum is 7 + 8 = 15."
      },
      {
        "input": "root = [1]",
        "output": "1",
        "explanation": "The only leaf is the root itself which is also the deepest leaf."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a breadth-first search approach to traverse the tree level by level.",
      "Keep track of the sum of the nodes at the current deepest level."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Repeated Substring Pattern",
    "description": "Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together. Return true if it can be done, otherwise return false.",
    "topic": "String",
    "subtopic": "Pattern Matching",
    "tags": [
      "String",
      "Substring",
      "Pattern"
    ],
    "input_format": "A single string s, where 1 <= s.length <= 10^4.",
    "output_format": "A boolean value indicating whether the string can be constructed from a substring.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"abab\"",
        "output": "true",
        "explanation": "The string can be constructed by taking the substring \"ab\" and repeating it twice."
      },
      {
        "input": "s = \"aba\"",
        "output": "false",
        "explanation": "The string cannot be constructed by repeating any substring."
      },
      {
        "input": "s = \"abcabcabcabc\"",
        "output": "true",
        "explanation": "The string can be constructed by taking the substring \"abc\" and repeating it four times."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to find the length of the repeating substring.",
      "Consider using string manipulation techniques to check for repetitions."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Largest Number",
    "description": "Given a list of non-negative integers, arrange them such that they form the largest possible number. The result is returned as a string. Since the resulting number can be very large, you should not convert it to an integer directly.",
    "topic": "Sorting",
    "subtopic": "Custom Sorting",
    "tags": [
      "Sorting",
      "Greedy",
      "String"
    ],
    "input_format": "An array of non-negative integers nums.",
    "output_format": "A string representing the largest number possible.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [3, 30, 34, 5, 9]",
        "output": "9534330",
        "explanation": "By arranging the numbers as 9, 5, 34, 3, 30, the largest number formed is 9534330."
      },
      {
        "input": "nums = [10, 2]",
        "output": "210",
        "explanation": "Arranging the numbers as 2, 10 gives 210 which is the largest number that can be formed."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to compare numbers based on their concatenated results.",
      "You may need to define a custom comparison method for sorting."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design a data structure that implements a Least Recently Used (LRU) cache. It should support the following operations: get and put:\n\n- get(key): Returns the value of the key if the key exists in the cache, otherwise returns -1.\n- put(key, value): If the key already exists, update the value. If the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.\n\nThe cache should be initialized with a positive capacity.",
    "topic": "Design",
    "subtopic": "Cache",
    "tags": [
      "Design",
      "Hash Table",
      "Linked List",
      "Cache"
    ],
    "input_format": "A positive integer capacity and a series of operations, where each operation is either 'get' or 'put'.",
    "output_format": "The return value of the 'get' operation, or nothing for 'put'.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key, value <= 10^4",
      "The operations will be called at most 10000 times."
    ],
    "examples": [
      {
        "input": "cache = LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1, -1, -1, 4]",
        "explanation": "Cache capacity is 2. After the operations, the cache contains {3=3, 4=4}. The results of the get operations are 1 for get(1), -1 for get(2), -1 for get(2), and 4 for get(4)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hashmap for fast access and a linked list to maintain the order of usage."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Lowest Common Ancestor of a Binary Tree",
    "description": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. The LCA is defined as the deepest node that is an ancestor of both nodes. A node is considered an ancestor of itself.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Lowest Common Ancestor"
    ],
    "input_format": "The input consists of the root of the binary tree and two nodes, p and q, represented as tree nodes.",
    "output_format": "Return the lowest common ancestor of the two nodes.",
    "constraints": [
      "The number of nodes in the tree is in the range [1, 10^5].",
      "All Node.val are unique.",
      "p and q are distinct nodes and both values will exist in the binary tree."
    ],
    "examples": [
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1",
        "output": "3",
        "explanation": "The LCA of nodes 5 and 1 is 3."
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4",
        "output": "5",
        "explanation": "The LCA of nodes 5 and 4 is 5 since 5 is an ancestor of 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a recursive approach to traverse the tree.",
      "Check if the current node is equal to either p or q.",
      "If both left and right subtrees return non-null values, the current node is the LCA."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You may return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Hashing",
    "tags": [
      "String",
      "Hashing",
      "Anagrams"
    ],
    "input_format": "An array of strings 'strs'.",
    "output_format": "A list of lists of strings, where each sublist contains anagrams grouped together.",
    "constraints": [
      "1 <= strs.length <= 1000",
      "1 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"bat\"], [\"nat\", \"tan\"], [\"ate\", \"eat\", \"tea\"]]",
        "explanation": "The anagrams are grouped together: 'eat', 'tea', and 'ate' are anagrams. 'tan' and 'nat' are anagrams. 'bat' does not have any anagram."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to group the anagrams.",
      "Sort the characters in each string as a key."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Minimum Time to Collect All Apples in a Tree",
    "description": "You are given a binary tree where each node contains a specified number of apples. Each apple takes one unit of time to collect. Your task is to determine the minimum time required to collect all the apples starting from the root of the tree. You may traverse the tree and collect any number of apples from each node. Note that you must return to the root after collecting all apples.",
    "topic": "Tree",
    "subtopic": "Binary Tree Traversal",
    "tags": [
      "Tree",
      "Binary Tree",
      "Traversal",
      "DFS",
      "BFS"
    ],
    "input_format": "The input consists of two elements: a list of integers representing the number of apples at each node, and a list of lists representing edges between the nodes.",
    "output_format": "An integer representing the minimum time required to collect all apples.",
    "constraints": [
      "1 <= number of nodes <= 100",
      "0 <= number of apples at each node <= 100",
      "The tree is a valid binary tree."
    ],
    "examples": [
      {
        "input": "[0, 1, 2, 0, 3] , [[0, 1], [0, 2], [1, 3], [2, 4]]",
        "output": "8",
        "explanation": "To collect all apples, you would traverse from the root (0) to node 1 (1 apple), then to node 3 (0 apples), back to node 1, then to node 2 (2 apples), and finally to node 4 (3 apples), making a total of 8 time units."
      },
      {
        "input": "[0, 0, 0] , [[0, 1], [0, 2]]",
        "output": "0",
        "explanation": "Since there are no apples in the tree, the minimum time to collect all is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use Depth-First Search (DFS) or Breadth-First Search (BFS) for traversal.",
      "Consider returning to the root after collecting apples in a subtree.",
      "Keep track of the time as you collect apples while traversing."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Maximal Square",
    "description": "Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.",
    "topic": "Dynamic Programming",
    "subtopic": "Matrix",
    "tags": [
      "Dynamic Programming",
      "Matrix",
      "Square"
    ],
    "input_format": "A 2D binary matrix represented as a list of lists, where each inner list contains only '0' or '1'.",
    "output_format": "An integer representing the area of the largest square containing only 1's.",
    "constraints": [
      "1 <= matrix.length <= 300",
      "1 <= matrix[i].length <= 300",
      "matrix[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "[['1', '0', '1', '0', '0'], ['1', '0', '1', '1', '1'], ['1', '1', '1', '1', '1'], ['1', '0', '0', '1', '0']]",
        "output": "4",
        "explanation": "The largest square has a side length of 2, thus the area is 2 * 2 = 4."
      },
      {
        "input": "[['0', '1'], ['1', '1']]",
        "output": "1",
        "explanation": "The largest square has a side length of 1, thus the area is 1 * 1 = 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to keep track of the largest square ending at each cell.",
      "The area of the square can be computed by squaring the side length."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Wiggle Sort",
    "description": "Given an integer array nums, rearrange the elements of the array such that nums[0] < nums[1] > nums[2] < nums[3] ... and so on. You may assume the input array always has a valid solution. You must do this in O(n) time complexity and O(1) extra space.",
    "topic": "Array",
    "subtopic": "Sorting and Rearranging",
    "tags": [
      "Array",
      "Sorting",
      "Rearranging"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "Return the rearranged array satisfying the wiggle sort condition.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, 2, 2, 3, 1]",
        "output": "[1, 3, 1, 3, 2, 2]",
        "explanation": "One valid wiggle sort is 1 < 3 > 1 < 3 > 2 < 2."
      },
      {
        "input": "nums = [4, 5, 5, 6]",
        "output": "[4, 6, 5, 5]",
        "explanation": "A valid arrangement is 4 < 6 > 5 < 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider finding the median of the array.",
      "You can use the two-pointer technique for rearranging."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Target Sum",
    "description": "Given an array of integers and a target integer, return the number of ways to assign symbols to all the integers in the array such that they sum to the target. You may use '+' or '-' as the symbols. The problem can be solved using dynamic programming.",
    "topic": "Dynamic Programming",
    "subtopic": "Subset Sum",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Backtracking"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An integer representing the number of ways to reach the target sum by adding '+' or '-' to each number.",
    "constraints": [
      "1 <= nums.length <= 20",
      "-1000 <= nums[i] <= 1000",
      "-1000 <= target <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 1, 1, 1], target = 3",
        "output": "5",
        "explanation": "There are 5 ways to assign '+' and '-' symbols to achieve the target sum of 3."
      },
      {
        "input": "nums = [1], target = 1",
        "output": "1",
        "explanation": "The only way is to use the '+' sign for the single element to reach the target of 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a recursive strategy to explore all combinations.",
      "You can use memoization to optimize the recursive calls."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Minimum Moves to Equal Array Elements II",
    "description": "Given an integer array nums of size n, you are allowed to perform a series of moves. In each move, you can increment or decrement any element by 1. Your goal is to minimize the total number of moves required to make all elements of the array equal. Return the minimum number of moves required.",
    "topic": "Array",
    "subtopic": "Minimization",
    "tags": [
      "Array",
      "Minimization",
      "Optimization"
    ],
    "input_format": "An integer array nums, where 1 <= nums.length <= 10^5 and -10^5 <= nums[i] <= 10^5.",
    "output_format": "An integer representing the minimum number of moves required to make all elements equal.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "2",
        "explanation": "We can move 1 to 2 and 3 to 2 which requires 1 move and 1 move respectively, total 2 moves."
      },
      {
        "input": "nums = [1, 10, 2, 9]",
        "output": "16",
        "explanation": "To make all numbers equal to 5, we need to move: 1 -> 5 (4 moves), 10 -> 5 (5 moves), 2 -> 5 (3 moves), 9 -> 5 (4 moves). Total moves = 4 + 5 + 3 + 4 = 16."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the median of the array.",
      "Minimizing moves often relates to the distribution of values in the array."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers 'nums' and an integer 'target', return the indices of the two numbers such that they add up to 'target'. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two-pointer"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to keep track of the numbers you've seen.",
      "Check if the complement (target - current number) exists in the hash map."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Flatten Binary Tree to Linked List",
    "description": "Given a binary tree, flatten it to a linked list in-place. The linked list should use the right child's pointer to point to the next node in the pre-order traversal of the binary tree, and all left children should be set to null.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "DFS",
      "In-place"
    ],
    "input_format": "The root node of the binary tree.",
    "output_format": "The root node of the modified tree with left child pointers set to null.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 2000].",
      "-100 <= Node.val <= 100"
    ],
    "examples": [
      {
        "input": "root = [1, 2, 5, 3, 4]",
        "output": "[1,null,2,null,3,null,4,null,5]",
        "explanation": "The pre-order traversal is [1, 2, 3, 4, 5]. The flattened tree will have the structure: 1 -> 2 -> 3 -> 4 -> 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to facilitate a pre-order traversal.",
      "You can use recursive DFS to visit nodes and re-link them."
    ],
    "company": "Myntra"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices representing the stock prices.",
    "output_format": "An integer representing the maximum profit.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this scenario, no transactions are done and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Think about how you can keep track of the minimum price encountered so far.",
      "Calculate the profit for each day based on the minimum price."
    ],
    "company": "Myntra"
  }
]