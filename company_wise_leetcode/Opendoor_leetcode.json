[
  {
    "question_id": "",
    "title": "Game of Life",
    "description": "The Game of Life is a cellular automaton devised by the British mathematician John Horton Conway. It consists of a grid of cells that can be either 'alive' (1) or 'dead' (0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\n\n1. Any live cell with fewer than two live neighbors dies as if caused by under-population.\n2. Any live cell with two or three live neighbors lives on to the next generation.\n3. Any live cell with more than three live neighbors dies, as if by over-population.\n4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n\nYou need to write a function that takes the current state of the game and updates it to its next state according to the rules above. The function should modify the input grid in place, ensuring it satisfies the final state after the update.",
    "topic": "Array",
    "subtopic": "Simulation",
    "tags": [
      "Array",
      "Simulation",
      "Game Theory"
    ],
    "input_format": "A 2D grid representing the current state of the board, where grid[i][j] is the state of the cell (1 for live, 0 for dead).",
    "output_format": "The input grid modified to represent the next state of the Game of Life.",
    "constraints": [
      "The dimensions of the grid are m x n where 1 <= m, n <= 25.",
      "Each cell's state is either 0 or 1."
    ],
    "examples": [
      {
        "input": "grid = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]",
        "output": "[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]",
        "explanation": "The state of the cells changes according to the Game of Life rules."
      },
      {
        "input": "grid = [[1,1],[1,0]]",
        "output": "[[1,1],[1,1]]",
        "explanation": "All live cells are surrounded by live cells resulting in them continuing to live."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how to count neighbors efficiently.",
      "You may need to use temporary states to avoid overwriting the original grid."
    ],
    "company": "Opendoor"
  },
  {
    "question_id": "",
    "title": "Design Excel Sum Formula",
    "description": "You are tasked with implementing a function that simulates the behavior of the Excel SUM formula. Your function should take in a string representing a cell range and return the sum of all numbers contained in that range. The cell range can include individual cell references (e.g., 'A1', 'B2') or ranges (e.g., 'A1:A3', 'B1:B10'). The cells can contain integers or decimal numbers. Your solution must handle overlapping ranges and nested ranges correctly, summing the values only once for overlapping cells.",
    "topic": "Simulation",
    "subtopic": "Range Summation",
    "tags": [
      "Excel",
      "Simulation",
      "Range",
      "Summation"
    ],
    "input_format": "A string 'range' representing the cell references and ranges.",
    "output_format": "A floating-point number representing the sum of the cells in the given range.",
    "constraints": [
      "The input range is a valid Excel range with a maximum length of 100 characters.",
      "Cell references consist of alphabetical column labels followed by row numbers (e.g., 'A1', 'B2').",
      "Cell values can be positive, negative, or decimal numbers.",
      "Invalid or non-numeric cell values should be ignored."
    ],
    "examples": [
      {
        "input": "range = 'A1:A3'",
        "output": "6.5",
        "explanation": "If A1 = 1.5, A2 = 2, A3 = 3, then the sum is 1.5 + 2 + 3 = 6.5."
      },
      {
        "input": "range = 'A1:B2'",
        "output": "10",
        "explanation": "If A1 = 4, A2 = 2, B1 = 3, and B2 = 1, then the sum is 4 + 2 + 3 + 1 = 10."
      },
      {
        "input": "range = 'A1:A5, B1:B3'",
        "output": "15",
        "explanation": "If A1 = 1, A2 = 2, A3 = 3, B1 = 4, and B2 = 5, then summing A column values and overlapping B column values gives 1 + 2 + 3 + 4 + 5 = 15."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a data structure to store unique cell values.",
      "Don\u2019t forget to parse the input string to extract cell references.",
      "Handle nested and overlapping ranges carefully."
    ],
    "company": "Opendoor"
  }
]