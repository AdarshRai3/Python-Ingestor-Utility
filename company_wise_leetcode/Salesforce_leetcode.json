[
  {
    "question_id": "",
    "title": "Word Break",
    "description": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words.",
    "topic": "Dynamic Programming",
    "subtopic": "String Segmentation",
    "tags": [
      "Dynamic Programming",
      "String",
      "Backtracking"
    ],
    "input_format": "A string s and an array of strings wordDict.",
    "output_format": "A boolean indicating whether the string can be segmented into words from the dictionary.",
    "constraints": [
      "1 <= s.length <= 300",
      "1 <= wordDict.length <= 1000",
      "1 <= wordDict[i].length <= 20",
      "s and wordDict[i] consist of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'leetcode', wordDict = ['leet', 'code']",
        "output": "true",
        "explanation": "The string 'leetcode' can be segmented as 'leet' and 'code' from the word dictionary."
      },
      {
        "input": "s = 'applepenapple', wordDict = ['apple', 'pen']",
        "output": "true",
        "explanation": "'applepenapple' can be segmented as 'apple', 'pen', 'apple'."
      },
      {
        "input": "s = 'catsandog', wordDict = ['cats', 'dog', 'sand', 'and', 'cat']",
        "output": "false",
        "explanation": "'catsandog' cannot be segmented into words from the dictionary."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming for optimal substructure.",
      "Use a boolean array to track the segmentable status of the string."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Subarray Product Less Than K",
    "description": "Given an array of positive integers nums and a positive integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is less than k.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Product"
    ],
    "input_format": "An array of positive integers nums and a positive integer k.",
    "output_format": "An integer representing the number of contiguous subarrays with a product less than k.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "1 <= nums[i] <= 100",
      "0 < k <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [10, 5, 2, 6], k = 100",
        "output": "8",
        "explanation": "The subarrays with products less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [10, 5, 2]."
      },
      {
        "input": "nums = [1, 2, 3], k = 0",
        "output": "0",
        "explanation": "No subarray product can be less than 0."
      },
      {
        "input": "nums = [1, 2, 3], k = 4",
        "output": "4",
        "explanation": "The valid subarrays are: [1], [2], [3], [1, 2]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window approach to maintain the product of the current subarray.",
      "If the product exceeds k, shrink the window from the left."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Distinct Subsequences",
    "description": "Given two strings s and t, return the number of distinct subsequences of s which equals t. A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., 'ACE' is a subsequence of 'ABCDE' while 'AEC' is not).",
    "topic": "Dynamic Programming",
    "subtopic": "Subsequence",
    "tags": [
      "Dynamic Programming",
      "String",
      "Subsequence"
    ],
    "input_format": "Two strings s and t where 0 <= s.length <= 100 and 0 <= t.length <= 100.",
    "output_format": "An integer representing the number of distinct subsequences of s that equals t.",
    "constraints": [
      "0 <= s.length, t.length <= 100",
      "s and t consist of English letters."
    ],
    "examples": [
      {
        "input": "s = 'rabbbit', t = 'rabbit'",
        "output": "3",
        "explanation": "There are three ways to form 'rabbit' by deleting characters from 'rabbbit': 'rabb' + 'bit', 'rab' + 'b' + 'bit', and 'ra' + 'b' + 'b' + 'bit'."
      },
      {
        "input": "s = 'abc', t = 'abc'",
        "output": "1",
        "explanation": "The only way to form 'abc' from 'abc' is to use all characters of s."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use dynamic programming to keep track of the number of ways to form t from prefixes of s."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "LFU Cache",
    "description": "Design and implement a Least Frequently Used (LFU) Cache. The LFU Cache should support the following operations: get and put. The get operation retrieves a value from the cache, and the put operation adds a value to the cache. The LFU cache evicts the least frequently used item when the cache reaches its capacity. If there is a tie, the least recently used item among them should be removed.",
    "topic": "Design",
    "subtopic": "Cache",
    "tags": [
      "Cache",
      "Design",
      "LFU"
    ],
    "input_format": "An LFU Cache object initialized with a positive capacity.",
    "output_format": "Return the value of the key if the key exists, otherwise return -1.",
    "constraints": [
      "The capacity of the LFU Cache is a positive integer.",
      "A maximum of 10^4 calls to get and put will be made.",
      "All keys and values used in put will be positive integers."
    ],
    "examples": [
      {
        "input": "LFUCache cache = new LFUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.get(3); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1,-1,3,4]",
        "explanation": "After the operations: (1,1), (2,2), (3,3) evicts (2,2) because it is the least frequently used. The cache is now: (1,1), (3,3). Finally, adding (4,4) evicts (1,1) since it was used least frequently."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider data structures that allow for quick retrieval of least frequently used items.",
      "Keep track of usage frequency and the order of item addition."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. For example, if you have intervals [1,3], [2,6], [8,10], and [15,18], the merged intervals would be [1,6], [8,10], and [15,18]. The goal is to reduce the number of intervals by merging those that overlap.",
    "topic": "Array",
    "subtopic": "Sorting and Merging",
    "tags": [
      "Array",
      "Sorting",
      "Intervals"
    ],
    "input_format": "A 2D list of integers intervals where intervals[i] = [start_i, end_i] represents the start and end of the i-th interval.",
    "output_format": "A 2D list of integers representing the merged intervals.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= start_i < end_i <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "The intervals [1,3] and [2,6] overlap, so they merge into [1,6]. The other intervals do not overlap."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] touch at the endpoint, hence they are merged into [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on the starting times.",
      "Use a list to store merged intervals and compare the current interval with the last merged one."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "String Compression",
    "description": "Given a string s, compress it using the counts of repeated characters. The resulting string should be a concatenation of the character plus the count of occurrences if that count is greater than 1. If the compressed string is not shorter than the original string, return the original string. You must write an algorithm that uses O(1) extra space.",
    "topic": "String",
    "subtopic": "Compression",
    "tags": [
      "String",
      "Compression",
      "Algorithm"
    ],
    "input_format": "A string s consisting of only lowercase letters, uppercase letters, and digits.",
    "output_format": "A string representing the compressed version of the input string.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of letters and digits."
    ],
    "examples": [
      {
        "input": "s = 'aabbcc'",
        "output": "a2b2c2",
        "explanation": "The characters 'a', 'b', and 'c' each appear 2 times in the input string."
      },
      {
        "input": "s = 'abc'",
        "output": "abc",
        "explanation": "Since no character is repeated, the compressed string is the same as the input."
      },
      {
        "input": "s = 'aaabaaa'",
        "output": "a3b1a3",
        "explanation": "The character 'a' appears 3 times followed by 'b' which appears once, then 'a' again appears 3 times."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a counter to track the number of consecutive characters.",
      "Iterate through the string and append to the result.",
      "Consider edge cases where the compression may not reduce the size."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design a data structure that implements a Least Recently Used (LRU) cache. It should support the following operations: get and put. The get operation retrieves the value of the key if the key exists in the cache, otherwise it returns -1. The put operation will insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Data Structure",
    "subtopic": "Cache",
    "tags": [
      "HashMap",
      "Linked List",
      "Design"
    ],
    "input_format": "A set of operations to perform on the LRU Cache.",
    "output_format": "The result of each get operation, as an integer.",
    "constraints": [
      "The capacity of the cache will be a positive integer.",
      "The key and value in each put operation will be a positive integer.",
      "The number of operations will not exceed 10^4."
    ],
    "examples": [
      {
        "input": "LRUCache cache = new LRUCache(2);\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);   // returns 1\ncache.put(3, 3);    // evicts key 2\ncache.get(2);       // returns -1 (not found)",
        "output": "1, -1",
        "explanation": "After inserting 1 and 2, the cache is full. When we access key 1, it returns 1. After inserting 3, key 2 is evicted since it was the least recently used. Accessing key 2 then returns -1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a combination of a HashMap and a doubly linked list to maintain the order."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Hashing",
    "tags": [
      "String",
      "Hashing",
      "Array"
    ],
    "input_format": "An array of strings 'strs'.",
    "output_format": "A list of groups of anagrams, where each group is an array of strings.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "0 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "explanation": "The anagrams are grouped together as follows: 'eat', 'tea', and 'ate' are anagrams of each other; 'nat' and 'tan' are also anagrams of each other; 'bat' does not have any anagram group."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "An empty string is its own anagram, so it groups alone."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "Single character strings are also their own anagrams."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the characters of each string to find anagrams.",
      "Use a hash map to group the sorted strings."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "DFS",
      "Matrix"
    ],
    "input_format": "A 2D grid represented as a list of lists, where grid[i][j] is '1' or '0'.",
    "output_format": "An integer representing the number of islands.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [['1','1','0','0','0'], ['1','1','0','0','0'], ['0','0','1','0','0'], ['0','0','0','1','1']]",
        "output": "3",
        "explanation": "The grid contains three islands: one at the top left, one single '1' in the middle, and the last at the bottom right."
      },
      {
        "input": "grid = [['0','0','0','0','0'], ['0','0','0','0','0'], ['0','0','0','0','0']]",
        "output": "0",
        "explanation": "The grid contains no islands."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using DFS or BFS to explore the islands.",
      "Mark the visited parts of the island to avoid counting them again."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Design a Text Editor",
    "description": "You are tasked with designing a simple text editor. The text editor can perform the following operations: append a character, delete a character, and function to get the current text state. You need to implement a class `TextEditor` that supports these operations efficiently. The editor starts with an empty string. Implement the following methods:\n\n1. `append(char: char)`: Appends the character `char` to the end of the current text.\n2. `delete()`: Deletes the last character from the current text. If the text is already empty, do nothing.\n3. `currentText()`: Returns the current state of the text as a string.",
    "topic": "Design",
    "subtopic": "Data Structure Design",
    "tags": [
      "Design",
      "Data Structures",
      "String Manipulation"
    ],
    "input_format": "Each operation is given as an independent call to the respective method.",
    "output_format": "Return the result of `currentText()` method calls.",
    "constraints": [
      "The `append` method will be called at most 10^5 times.",
      "The `delete` method can be called up to the length of the current text.",
      "Characters are lowercase English letters."
    ],
    "examples": [
      {
        "input": "editor.append('a'); editor.append('b'); editor.currentText();",
        "output": "'ab'",
        "explanation": "Appending 'a' and 'b' results in 'ab'."
      },
      {
        "input": "editor.append('c'); editor.delete(); editor.currentText();",
        "output": "'a'",
        "explanation": "After appending 'c', deleting the last character leaves 'a'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a stack-like structure to manage the text efficiently.",
      "Be mindful of string manipulation and current state retrieval efficiency."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is defined as a contiguous sequence of characters within the string. Implement an efficient approach to determine the maximum length of such a substring.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Hashmap"
    ],
    "input_format": "A string s consisting of English letters, digits, symbols, and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 5 * 10^4",
      "s consists of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"abc\", which has a length of 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The longest substring without repeating characters is \"b\", with a length of 1."
      },
      {
        "input": "s = \"pwwkew\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"wke\", which has a length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window approach to track the current substring.",
      "Utilize a set or hashmap to store characters and their indices."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Palindromic Substrings",
    "description": "Given a string s, return the number of distinct palindromic substrings in it. A substring is considered palindromic if it reads the same backward as forward. Note that two substrings are considered distinct if their starting or ending indices are different.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Palindrome",
      "Dynamic Programming"
    ],
    "input_format": "A string s containing only lowercase English letters.",
    "output_format": "An integer representing the number of distinct palindromic substrings.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"abc\"",
        "output": "3",
        "explanation": "The distinct palindromic substrings are \"a\", \"b\", and \"c\"."
      },
      {
        "input": "s = \"aaa\"",
        "output": "6",
        "explanation": "The distinct palindromic substrings are \"a\", \"aa\", \"aaa\"."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around the center of each substring.",
      "Use a set to store unique palindromic substrings."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Count the Number of Fair Pairs",
    "description": "You are given an array of integers nums and a target integer target. A pair of indices (i, j) is called a fair pair if i < j and nums[i] + nums[j] == target. Your task is to count how many such fair pairs exist in the array.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Counting"
    ],
    "input_format": "An array of integers nums followed by an integer target.",
    "output_format": "An integer representing the number of fair pairs found.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5",
      "-10^5 <= target <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5], target = 5",
        "output": "2",
        "explanation": "The fair pairs are (1, 3) => 2 + 3 = 5 and (0, 4) => 1 + 4 = 5."
      },
      {
        "input": "nums = [0, 0, 0, 0], target = 0",
        "output": "6",
        "explanation": "The fair pairs are (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3) - total 6 pairs."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the array first.",
      "Use two pointers to find pairs efficiently."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Maximum Frequency Stack",
    "description": "Design a stack that supports the following operations: push, pop, and maxFrequency. The maxFrequency operation should return the maximum frequency among all elements currently in the stack. An element's frequency is defined as the number of times it has been pushed onto the stack. When there is a tie for maximum frequency, the element with the higher value should be returned. Implement the MaxFrequencyStack class with the following methods: \n\n- push(int val): Pushes an integer val onto the stack.\n- pop(): Removes and returns the most frequent element in the stack. If there is a tie, the element with the higher value is removed first.\n- maxFrequency(): Returns the maximum frequency of any element currently in the stack.",
    "topic": "Design",
    "subtopic": "Data Structure Design",
    "tags": [
      "Stack",
      "Design",
      "Data Structure"
    ],
    "input_format": "The input consists of a series of operations on the MaxFrequencyStack class: push and pop.",
    "output_format": "The output should be the resulting values from pop and maxFrequency operations.",
    "constraints": [
      "1 <= val <= 10^9",
      "The number of operations will not exceed 10^4."
    ],
    "examples": [
      {
        "input": [
          "MaxFrequencyStack stack = new MaxFrequencyStack();",
          "stack.push(5);",
          "stack.push(7);",
          "stack.push(5);",
          "stack.push(7);",
          "stack.push(4);",
          "stack.push(5);",
          "stack.pop();",
          "stack.maxFrequency();"
        ],
        "output": "5",
        "explanation": "The maximum frequency element is 5 and it has been pushed 3 times. The last pop removes it."
      },
      {
        "input": [
          "MaxFrequencyStack stack = new MaxFrequencyStack();",
          "stack.push(1);",
          "stack.push(1);",
          "stack.push(2);",
          "stack.push(2);",
          "stack.push(2);",
          "stack.pop();",
          "stack.maxFrequency();"
        ],
        "output": "2",
        "explanation": "The maximum frequency element is 2 and it has been pushed 3 times."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a frequency map to store the frequency of elements.",
      "Maintain a stack for each frequency level."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Course Schedule II",
    "description": "There are `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array of prerequisites where prerequisites[i] = [a, b] indicates that you must take course `b` before course `a`. Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.",
    "topic": "Graph",
    "subtopic": "Topological Sorting",
    "tags": [
      "Graph",
      "Topological Sort",
      "DFS",
      "BFS"
    ],
    "input_format": "The integer numCourses followed by a 2D array prerequisites.",
    "output_format": "An array representing the order of courses to take or an empty array if it's impossible.",
    "constraints": [
      "1 <= numCourses <= 2000",
      "0 <= prerequisites.length <= 5000",
      "prerequisites[i].length == 2",
      "0 <= prerequisites[i][0], prerequisites[i][1] < numCourses",
      "All prerequisite pairs are unique."
    ],
    "examples": [
      {
        "input": "numCourses = 4, prerequisites = [[2,0],[1,0],[3,1],[3,2]]",
        "output": "[0,1,2,3]",
        "explanation": "Taking course 0 first allows taking courses 1 and 2, which in turn allows course 3."
      },
      {
        "input": "numCourses = 2, prerequisites = [[1,0],[0,1]]",
        "output": "[]",
        "explanation": "There is a cycle between courses 0 and 1, making it impossible to complete all courses."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth First Search (DFS) or Kahn's algorithm for topological sorting.",
      "Keep track of the number of prerequisites each course has."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Beautiful Towers II",
    "description": "You are tasked with building a set of beautiful towers using blocks of different heights. Each tower must have a height that is strictly greater than the tower to its left and strictly less than the tower to its right. Given an integer array representing the heights of available blocks, determine the maximum number of towers you can build following the beauty rule. You can use any block height at most once. Return the number of beautiful towers that can be built.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithms",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An integer array heights where 1 <= heights.length <= 1000 and 1 <= heights[i] <= 10^6.",
    "output_format": "An integer representing the maximum number of beautiful towers that can be built.",
    "constraints": [
      "1 <= heights.length <= 1000",
      "1 <= heights[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "heights = [5, 1, 3, 2, 4]",
        "output": "4",
        "explanation": "You can build towers with heights 1, 2, 3, and 4 in increasing order."
      },
      {
        "input": "heights = [1, 1, 1, 1, 1]",
        "output": "1",
        "explanation": "All blocks are of the same height, you can only build one tower."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how you can create a strictly increasing and decreasing sequence.",
      "Try to sort the array and then find the longest valid sequence."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Check Whether Two Strings are Almost Equivalent",
    "description": "Given two strings, string1 and string2, determine if they are 'almost equivalent'. Two strings are considered almost equivalent if they can be made equal by replacing at most one character in either string. You need to implement a function that checks this condition.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Comparison",
      "Manipulation"
    ],
    "input_format": "Two strings, string1 and string2, where 1 <= string1.length, string2.length <= 100.",
    "output_format": "A boolean value indicating whether the two strings are almost equivalent.",
    "constraints": [
      "1 <= string1.length, string2.length <= 100",
      "Both strings consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "string1 = 'abc', string2 = 'abd'",
        "output": "true",
        "explanation": "The strings can be made equal by changing 'c' in string1 to 'd'."
      },
      {
        "input": "string1 = 'abc', string2 = 'ab'",
        "output": "false",
        "explanation": "The strings are of different lengths and cannot be made equal by changing a single character."
      },
      {
        "input": "string1 = 'a', string2 = 'b'",
        "output": "true",
        "explanation": "Both strings can become equal by replacing 'a' with 'b' or vice versa."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the differences between the two strings.",
      "If the length differs by more than 1, they cannot be almost equivalent."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Split Array Largest Sum",
    "description": "You are given an array of integers nums and an integer k. Your task is to split the array into k non-empty contiguous subarrays. Determine the maximum sum among these k subarrays, and return the minimum of all the maximum sums. The maximum sum is the largest among the sums of each subarray that you have formed.",
    "topic": "Array",
    "subtopic": "Divide and Conquer",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Binary Search"
    ],
    "input_format": "An array of integers nums and an integer k.",
    "output_format": "An integer representing the minimum largest sum among k subarrays.",
    "constraints": [
      "1 <= k <= nums.length",
      "1 <= nums[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [7, 2, 5, 10, 8], k = 2",
        "output": "18",
        "explanation": "One possible split is [7, 2, 5] and [10, 8]. The sums are 14 and 18, so the largest sum is 18."
      },
      {
        "input": "nums = [1, 4, 4], k = 3",
        "output": "4",
        "explanation": "Each element can be a subarray: [1], [4], [4]. The largest sum is 4."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the worst-case scenario where you can only have one element per subarray.",
      "Use binary search to find the minimum possible largest sum."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Beautiful Towers I",
    "description": "You are tasked with arranging blocks of different heights to form a beautiful tower. A tower is defined as beautiful if each block is of a different height and the heights are in strictly increasing order when viewed from the base to the top. Given an array of integers representing the heights of blocks available, determine the maximum number of blocks that can be used to form such a beautiful tower.",
    "topic": "Dynamic Programming",
    "subtopic": "Longest Increasing Subsequence",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Longest Increasing Subsequence"
    ],
    "input_format": "An integer array heights where heights[i] represents the height of the i-th block.",
    "output_format": "An integer representing the maximum number of blocks that can be used to form a beautiful tower.",
    "constraints": [
      "1 <= heights.length <= 1000",
      "1 <= heights[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "heights = [1, 2, 3, 4, 3, 5]",
        "output": "5",
        "explanation": "You can select the blocks with heights [1, 2, 3, 4, 5] to create a beautiful tower of height 5."
      },
      {
        "input": "heights = [5, 1, 2, 3, 4]",
        "output": "4",
        "explanation": "You can select the blocks with heights [1, 2, 3, 4] to create a beautiful tower of height 4."
      },
      {
        "input": "heights = [3, 3, 3]",
        "output": "1",
        "explanation": "Only one block can be used since all blocks are of the same height."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider finding the longest increasing subsequence.",
      "You may want to use dynamic programming or binary search."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Beautiful Arrangement",
    "description": "Suppose you have an integer n. We define a 'beautiful arrangement' as an array of size n that meets the following criteria: For each i (1 <= i <= n), the number at position i is divisible by i or i is divisible by the number at position i. Given an integer n, return the total number of different 'beautiful arrangements' that can be constructed.",
    "topic": "Backtracking",
    "subtopic": "Permutations",
    "tags": [
      "Backtracking",
      "Permutations",
      "Mathematics"
    ],
    "input_format": "An integer n (1 <= n <= 15).",
    "output_format": "An integer representing the total number of beautiful arrangements.",
    "constraints": [
      "1 <= n <= 15"
    ],
    "examples": [
      {
        "input": "2",
        "output": "2",
        "explanation": "The two beautiful arrangements are [1, 2] and [2, 1]."
      },
      {
        "input": "1",
        "output": "1",
        "explanation": "The only beautiful arrangement is [1]."
      },
      {
        "input": "3",
        "output": "3",
        "explanation": "The three beautiful arrangements are [1, 2, 3], [1, 3, 2], and [2, 1, 3]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider a recursive approach to build arrangements.",
      "Keep track of which numbers have been used in an arrangement."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: Open brackets must be closed by the corresponding closing brackets. Open brackets must be closed in the correct order.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "Stack",
      "String",
      "Validation"
    ],
    "input_format": "A single string s that consists of parentheses characters.",
    "output_format": "Return true if the string is valid, otherwise return false.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only '()[]{}'"
    ],
    "examples": [
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "All open brackets are closed correctly."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The parentheses '(' and ']' are not matched."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The parentheses are closed in the wrong order."
      },
      {
        "input": "s = '{[]}'",
        "output": "true",
        "explanation": "All open brackets are closed correctly."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "If you encounter a closing bracket, check if it matches the top of the stack."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the height of bars in a histogram, compute how much water can be trapped after raining. The width of each bar is 1. For each bar, water can be trapped if there are taller bars on both the left and right sides.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "input_format": "An array of non-negative integers heights, where heights[i] represents the height of the ith bar.",
    "output_format": "An integer representing the total amount of water trapped.",
    "constraints": [
      "0 <= heights.length <= 2 * 10^4",
      "0 <= heights[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "heights = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The trapped water can be visualized between the bars, leading to a total of 6 units of water."
      },
      {
        "input": "heights = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The trapped water above the bars sums to 9 units."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the left and right maximum heights while iterating.",
      "Use a two-pointer technique to efficiently calculate trapped water."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array where the ith element is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices representing the stock prices on different days.",
    "output_format": "An integer representing the maximum profit that can be achieved.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit is 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price encountered so far.",
      "Calculate potential profit at each price and update the maximum profit."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Kth Largest Element in an Array",
    "description": "Given an integer array nums and an integer k, return the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element. You must solve it in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Sorting & Searching",
    "tags": [
      "Array",
      "Sorting",
      "Searching"
    ],
    "input_format": "An array of integers nums and an integer k.",
    "output_format": "An integer representing the kth largest element in the array.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 1, 5, 6, 4], k = 2",
        "output": "5",
        "explanation": "The second largest element in the sorted array [1, 2, 3, 4, 5, 6] is 5."
      },
      {
        "input": "nums = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4",
        "output": "4",
        "explanation": "The fourth largest element in the sorted array [1, 2, 2, 3, 3, 4, 5, 5, 6] is 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a quickselect algorithm.",
      "Utilize a max-heap to keep track of the largest elements."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Binary Tree Maximum Path Sum",
    "description": "Given a non-empty binary tree, find the maximum path sum. A path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root. The maximum path sum is the maximum total sum of any such path.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Depth First Search"
    ],
    "input_format": "The input consists of the root node of a binary tree.",
    "output_format": "An integer representing the maximum path sum.",
    "constraints": [
      "The number of nodes in the tree is in the range [1, 3 * 10^4].",
      "-1000 <= Node.val <= 1000"
    ],
    "examples": [
      {
        "input": "root = [-10, 9, 20, null, null, 15, 7]",
        "output": "42",
        "explanation": "The maximum path sum is 15 + 20 + 7 = 42."
      },
      {
        "input": "root = [1, 2, 3]",
        "output": "6",
        "explanation": "The maximum path sum is 2 + 1 + 3 = 6."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider paths that can start and end at any node.",
      "Use Depth First Search (DFS) to traverse the tree."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Meeting Rooms II",
    "description": "Given an array of meeting time intervals where intervals[i] = [start_i, end_i], return the minimum number of conference rooms required to hold all meetings. An interval is defined by its start and end time, and you may assume the meetings do not overlap.",
    "topic": "Greedy",
    "subtopic": "Interval Scheduling",
    "tags": [
      "Greedy",
      "Interval",
      "Sorting"
    ],
    "input_format": "A list of intervals represented as a 2D array where each interval is an array of two integers [start, end].",
    "output_format": "An integer representing the minimum number of conference rooms required.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "0 <= start_i < end_i <= 10^6"
    ],
    "examples": [
      {
        "input": "intervals = [[0, 30], [5, 10], [15, 20]]",
        "output": "2",
        "explanation": "You need two rooms: Room 1 for [0, 30] and Room 2 for [5, 10] and [15, 20]."
      },
      {
        "input": "intervals = [[7, 10], [2, 4]]",
        "output": "1",
        "explanation": "Only one room is needed since the meetings do not overlap."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the intervals by starting times.",
      "Use a priority queue to keep track of the end times of meetings."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Largest Number",
    "description": "Given a list of non-negative integers, arrange them such that they form the largest possible number. The result is returned as a string.",
    "topic": "String",
    "subtopic": "Sorting",
    "tags": [
      "String",
      "Sorting",
      "Greedy"
    ],
    "input_format": "A list of non-negative integers nums.",
    "output_format": "A string representing the largest number that can be formed.",
    "constraints": [
      "0 <= nums.length <= 100",
      "0 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [10, 2]",
        "output": "210",
        "explanation": "By arranging '2' and '10', the largest number we can form is '210'."
      },
      {
        "input": "nums = [3, 30, 34, 5, 9]",
        "output": "9534330",
        "explanation": "The combination '9', '5', '34', '3', '30' produces the largest number '9534330'."
      },
      {
        "input": "nums = [0, 0]",
        "output": "0",
        "explanation": "The largest number that can be formed is '0'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how to order the numbers based on string comparison.",
      "Consider implementing a custom comparison function for sorting."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Asteroid Collision",
    "description": "We have a list of integers representing asteroids in a row. Each asteroid is either moving left (-ve values) or right (+ve values). When two asteroids collide, the larger one survives. If they are of the same size, both are destroyed. Write a function that returns the state of asteroids after all collisions have occurred.",
    "topic": "Stack",
    "subtopic": "Simulation",
    "tags": [
      "Stack",
      "Simulation",
      "Array"
    ],
    "input_format": "An array of integers representing the asteroids.",
    "output_format": "An array of integers representing the remaining asteroids after all collisions.",
    "constraints": [
      "1 <= asteroids.length <= 10^4",
      "-10^4 <= asteroids[i] <= 10^4",
      "Asteroids moving left and right can collide."
    ],
    "examples": [
      {
        "input": "asteroids = [5, 10, -5]",
        "output": "[5, 10]",
        "explanation": "The asteroid 10 survives against -5, so we are left with 5 and 10."
      },
      {
        "input": "asteroids = [8, -8]",
        "output": "[]",
        "explanation": "Both asteroids collide and destroy each other."
      },
      {
        "input": "asteroids = [10, 2, -5]",
        "output": "[10]",
        "explanation": "Asteroid 2 is destroyed by the collision with -5."
      },
      {
        "input": "asteroids = [-2, -1, 1, 2]",
        "output": "[-2, -1, 1, 2]",
        "explanation": "There are no collisions; all asteroids survive."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the current state of asteroids.",
      "Check the direction of movement to determine collision outcomes.",
      "Iterate through the array and handle collisions appropriately."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Integer to Roman",
    "description": "Given an integer, convert it to a Roman numeral. Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. For example, 2 is represented as 'II' and 12 is 'XII'. There are no zero in the Roman numeral system. The conversion should be done in accordance with the rules of Roman numeral formation.",
    "topic": "Math",
    "subtopic": "Conversion",
    "tags": [
      "Math",
      "String",
      "Conversion"
    ],
    "input_format": "An integer num in the range from 1 to 3999.",
    "output_format": "A string representing the Roman numeral equivalent of the given integer.",
    "constraints": [
      "1 <= num <= 3999"
    ],
    "examples": [
      {
        "input": "num = 3",
        "output": "III",
        "explanation": "3 is represented as 'III' in Roman numerals."
      },
      {
        "input": "num = 58",
        "output": "LVIII",
        "explanation": "58 is represented as 'LVIII' (50 + 5 + 3)."
      },
      {
        "input": "num = 1994",
        "output": "MCMXCIV",
        "explanation": "1994 is represented as 'MCMXCIV' (1000 + (1000 - 100) + (1000 - 10) + (5 - 1))."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a lookup table for Roman numerals.",
      "Start converting from the largest value down to the smallest.",
      "Pay attention to subtractive notation like IV, IX, XL, etc."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Task Scheduler",
    "description": "You are given a list of tasks you need to perform in a specific order, where some tasks may be identical. You are also given a cooldown time 'n' that specifies how many intervals must pass before you can perform the same task again. Your goal is to find the minimum intervals of time required to finish all tasks.",
    "topic": "Greedy",
    "subtopic": "Task Scheduling",
    "tags": [
      "Greedy",
      "Scheduling",
      "Array"
    ],
    "input_format": "An array of characters representing tasks and an integer n for the cooldown period.",
    "output_format": "An integer representing the minimum number of intervals needed to finish all tasks.",
    "constraints": [
      "1 <= tasks.length <= 100",
      "0 <= n <= 26"
    ],
    "examples": [
      {
        "input": "tasks = ['A', 'A', 'A', 'B', 'B', 'B'], n = 2",
        "output": "8",
        "explanation": "A valid order could be A -> B -> idle -> A -> B -> idle -> A -> B."
      },
      {
        "input": "tasks = ['A', 'A', 'A', 'B', 'B', 'B'], n = 0",
        "output": "6",
        "explanation": "No cooldown required, so we can execute tasks consecutively."
      },
      {
        "input": "tasks = ['A', 'A', 'A', 'A', 'A', 'B', 'C', 'D'], n = 2",
        "output": "7",
        "explanation": "A valid order could be A -> B -> C -> A -> D -> A -> A."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the frequency of each task.",
      "Use a heap to manage tasks efficiently."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Count Palindromic Subsequences",
    "description": "Given a string s, return the number of distinct palindromic subsequences in s. A palindromic subsequence is a sequence that can be derived from s by deleting some characters without changing the order of the remaining characters and reads the same backward as forward. Two sequences are considered distinct if they are not the same as a string, even if they have the same characters with the same frequencies.",
    "topic": "Dynamic Programming",
    "subtopic": "Count Distinct Subsequences",
    "tags": [
      "Dynamic Programming",
      "String",
      "Count"
    ],
    "input_format": "A single string s, consisting of lowercase English letters.",
    "output_format": "An integer representing the number of distinct palindromic subsequences in the string.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists only of lowercase English letters."
    ],
    "examples": [
      {
        "input": "abba",
        "output": "6",
        "explanation": "The distinct palindromic subsequences are: 'a', 'b', 'bb', 'aba', 'abba', and 'a'."
      },
      {
        "input": "abc",
        "output": "3",
        "explanation": "The distinct palindromic subsequences are: 'a', 'b', and 'c'."
      },
      {
        "input": "aaa",
        "output": "5",
        "explanation": "The distinct palindromic subsequences are: 'a', 'aa', 'aaa', and '' (empty string)."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using dynamic programming to count subsequences.",
      "Keep track of previously computed results to avoid redundant calculations."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Maximum Product of Three Numbers",
    "description": "Given an integer array nums, find three numbers whose product is maximum and return the maximum product.",
    "topic": "Array",
    "subtopic": "Calculating Products",
    "tags": [
      "Array",
      "Math",
      "Product"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum product of three numbers.",
    "constraints": [
      "3 <= nums.length <= 10^4",
      "-1000 <= nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "6",
        "explanation": "The maximum product is 1 * 2 * 3 = 6."
      },
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "24",
        "explanation": "The maximum product is 2 * 3 * 4 = 24."
      },
      {
        "input": "nums = [-10, -10, 5, 2]",
        "output": "500",
        "explanation": "The maximum product is -10 * -10 * 5 = 500."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider both positive and negative numbers.",
      "Sort the array to find candidates for the maximum product."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Coin Change",
    "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. You want to determine the minimum number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume you have an infinite number of each kind of coin.",
    "topic": "Dynamic Programming",
    "subtopic": "Coin Change Problem",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Optimization"
    ],
    "input_format": "An integer array coins and an integer amount.",
    "output_format": "An integer representing the minimum number of coins needed to make up the amount or -1 if it is not possible.",
    "constraints": [
      "1 <= coins.length <= 12",
      "1 <= coins[i] <= 2 * 10^4",
      "0 <= amount <= 10^4"
    ],
    "examples": [
      {
        "input": "coins = [1, 2, 5], amount = 11",
        "output": "3",
        "explanation": "11 can be made up with two 5s and one 1, totaling to 3 coins."
      },
      {
        "input": "coins = [2], amount = 3",
        "output": "-1",
        "explanation": "3 cannot be made up with only 2."
      },
      {
        "input": "coins = [1], amount = 0",
        "output": "0",
        "explanation": "0 can be made without any coins."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dynamic programming approach to solve the problem efficiently.",
      "Think about how you can build up to the desired amount using smaller amounts."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Hash Table"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of unique triplets that sum up to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The triplets that sum to zero are [-1, -1, 2] and [-1, 0, 1]."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "No triplets can be formed from an empty array."
      },
      {
        "input": "nums = [0, 1, 1]",
        "output": "[]",
        "explanation": "No triplet can sum to zero in this array."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the array to make it easier to avoid duplicates.",
      "Use a two-pointer approach to find pairs that sum to the negative of the current element."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A string is considered a palindrome if it reads the same backward as forward.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A string s of length n.",
    "output_format": "A string representing the longest palindromic substring in s.",
    "constraints": [
      "1 <= n <= 1000",
      "s consists of only digits and English letters."
    ],
    "examples": [
      {
        "input": "s = 'babad'",
        "output": "'bab' or 'aba'",
        "explanation": "Both 'bab' and 'aba' are valid palindromic substrings of maximum length 3."
      },
      {
        "input": "s = 'cbbd'",
        "output": "'bb'",
        "explanation": "'bb' is the longest palindromic substring of length 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around potential palindrome centers.",
      "Check for both odd and even length palindromes."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Minimum Window Substring",
    "description": "Given two strings s and t, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such window in s that covers all characters in t, return the empty string \"\". The solution must run in O(n) time complexity.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Hash Table"
    ],
    "input_format": "Two strings s and t.",
    "output_format": "A string representing the minimum window substring. If no such substring exists, return an empty string.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "1 <= t.length <= 10^5",
      "s and t consist of English letters, digits, symbols and spaces."
    ],
    "examples": [
      {
        "input": "s = \"ADOBECODEBANC\", t = \"ABC\"",
        "output": "\"BANC\"",
        "explanation": "The minimum window substring is \"BANC\" which contains all the characters of t."
      },
      {
        "input": "s = \"a\", t = \"a\"",
        "output": "\"a\"",
        "explanation": "The minimum window substring is the entire string s which also equals t."
      },
      {
        "input": "s = \"a\", t = \"aa\"",
        "output": "\"\"",
        "explanation": "The minimum window substring does not exist because there's not enough characters in s to meet the requirements of t."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use two pointers to form a window.",
      "Keep track of character counts in the current window.",
      "Expand and contract the window to find the minimum size."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Capacity To Ship Packages Within D Days",
    "description": "You are given an array of integers weights where weights[i] is the weight of the ith package. You are also given an integer D which represents the number of days within which you need to ship all the packages. Your task is to find the minimum capacity of the ship that will allow you to ship all the packages within the given number of days. The ship can carry a maximum weight of 'capacity' at a time. You may assume that each day, you can ship packages in the order they arrive. Multiple packages can be shipped in a single day, but the total weight must not exceed 'capacity'.",
    "topic": "Binary Search",
    "subtopic": "Optimal Capacity",
    "tags": [
      "Binary Search",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of integers weights followed by an integer D.",
    "output_format": "An integer representing the minimum ship capacity required.",
    "constraints": [
      "1 <= weights.length <= 50000",
      "1 <= weights[i] <= 500"
    ],
    "examples": [
      {
        "input": "weights = [1,2,3,4,5], D = 2",
        "output": "9",
        "explanation": "The minimum capacity needed is 9, which allows shipping 5 weight in the first day and 4 in the second day."
      },
      {
        "input": "weights = [3,2,2,4,1,4], D = 3",
        "output": "6",
        "explanation": "You can ship the first three packages with capacity 6 in one day, and the leftovers on the second day."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the total weight required and the number of days available.",
      "Use binary search to find the optimal capacity."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Min Stack",
    "description": "Design a stack that supports the following operations: push, pop, top, and retrieving the minimum element. Implement the MinStack class with the following methods:  \n- `void push(int val)`: Pushes the element val onto the stack.  \n- `void pop()`: Removes the element on the top of the stack.  \n- `int top()`: Gets the top element of the stack.  \n- `int getMin()`: Retrieves the minimum element in the stack.  \nAll operations should be done in constant time O(1).",
    "topic": "Stack",
    "subtopic": "Design",
    "tags": [
      "Stack",
      "Design",
      "Data Structure"
    ],
    "input_format": "Operations are given as a list, where each operation is either 'push', 'pop', 'top', or 'getMin' followed by the necessary parameters.",
    "output_format": "Return the results of the `top()` and `getMin()` functions when called.",
    "constraints": [
      "The number of operations will be in the range of [1, 10^4].",
      "All push operations will be valid integers."
    ],
    "examples": [
      {
        "input": [
          "push",
          "push",
          "getMin",
          "pop",
          "top",
          "getMin"
        ],
        "parameters": [
          [
            -2
          ],
          [
            0
          ],
          [],
          [],
          [],
          []
        ],
        "output": [
          -2,
          0
        ],
        "explanation": "After pushing -2 and 0, the minimum is -2. After a pop, the top is 0."
      },
      {
        "input": [
          "push",
          "push",
          "push",
          "getMin",
          "pop",
          "getMin"
        ],
        "parameters": [
          [
            1
          ],
          [
            2
          ],
          [
            3
          ],
          [],
          [],
          []
        ],
        "output": [
          1,
          1
        ],
        "explanation": "The minimum after three pushes is 1. Even after pop, the minimum remains 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using an auxiliary stack to store the minimum values.",
      "Think about how to maintain the minimum value when popping from the stack."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Top K Frequent Elements",
    "description": "Given a non-empty array of integers, return the k most frequent elements. You may return the answer in any order. The frequency of an element is the number of times it appears in the array.",
    "topic": "Hash Table",
    "subtopic": "Frequency Counting",
    "tags": [
      "Hash Table",
      "Sorting",
      "Top K"
    ],
    "input_format": "An array of integers nums and an integer k.",
    "output_format": "An array of the k most frequent elements.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "k is in the range [1, the number of unique elements in the array]"
    ],
    "examples": [
      {
        "input": "nums = [1,1,1,2,2,3], k = 2",
        "output": "[1,2]",
        "explanation": "The element 1 appears 3 times and the element 2 appears 2 times. Therefore, the two most frequent elements are 1 and 2."
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]",
        "explanation": "There is only one element in the array, so the most frequent element is 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hashmap to count the frequency of each element.",
      "Consider using a heap to efficiently get the top k elements."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Jump Game",
    "description": "You are given an array of non-negative integers nums. Each element in the array represents your maximum jump length at that position. Your goal is to determine if you can reach the last index starting from the first index. You can assume you can always reach the last index if you are on or beyond it.",
    "topic": "Array",
    "subtopic": "Greedy",
    "tags": [
      "Array",
      "Greedy",
      "Dynamic Programming"
    ],
    "input_format": "An array of non-negative integers, nums.",
    "output_format": "A boolean value indicating whether you can reach the last index.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, 1, 1, 4]",
        "output": "true",
        "explanation": "You can jump to index 1 (value = 3), then jump to the last index."
      },
      {
        "input": "nums = [3, 2, 1, 0, 4]",
        "output": "false",
        "explanation": "You will always get stuck at index 3 as you cannot jump forward."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about the farthest position you can reach at each step.",
      "Use a greedy approach to track the furthest reachable index."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Maximal Square",
    "description": "Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.",
    "topic": "Dynamic Programming",
    "subtopic": "Matrix",
    "tags": [
      "Dynamic Programming",
      "Matrix",
      "Square"
    ],
    "input_format": "A 2D binary matrix represented as a list of lists of integers, where each integer is either 0 or 1.",
    "output_format": "An integer representing the area of the largest square containing only 1's.",
    "constraints": [
      "1 <= matrix.length <= 300",
      "1 <= matrix[i].length <= 300",
      "matrix[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": [
          [
            "1",
            "0",
            "1",
            "0",
            "0"
          ],
          [
            "1",
            "0",
            "1",
            "1",
            "1"
          ],
          [
            "1",
            "1",
            "1",
            "1",
            "1"
          ],
          [
            "1",
            "0",
            "0",
            "1",
            "0"
          ]
        ],
        "output": "4",
        "explanation": "The largest square has a side length of 2, resulting in an area of 2 * 2 = 4."
      },
      {
        "input": [
          [
            "0",
            "0",
            "0",
            "0"
          ],
          [
            "0",
            "1",
            "0",
            "0"
          ],
          [
            "0",
            "0",
            "0",
            "1"
          ]
        ],
        "output": "1",
        "explanation": "The largest square has a side length of 1, resulting in an area of 1 * 1 = 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try using dynamic programming to keep track of the size of the square ending at each point.",
      "The size of the square at any point is determined by the minimum of the three neighboring squares."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Validate Binary Search Tree",
    "description": "Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees.",
    "topic": "Tree",
    "subtopic": "Binary Search Tree",
    "tags": [
      "Tree",
      "Binary Search Tree",
      "Recursion"
    ],
    "input_format": "The input consists of a single parameter root, which is the root node of the binary tree.",
    "output_format": "Return true if the tree is a valid binary search tree, otherwise return false.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 10^4].",
      "-10^4 <= Node.val <= 10^4"
    ],
    "examples": [
      {
        "input": "root = [2, 1, 3]",
        "output": "true",
        "explanation": "This tree is a valid BST. The root is 2, with left child 1 and right child 3."
      },
      {
        "input": "root = [5, 1, 4, null, null, 3, 6]",
        "output": "false",
        "explanation": "This tree is not a valid BST because the root 5 has a right child 4 which is less than 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use recursion to traverse the tree.",
      "Keep track of the valid range of values for each node."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Decode Ways",
    "description": "A message containing letters from A-Z can be encoded into numbers using the following mapping: 'A' -> 1, 'B' -> 2, ..., 'Z' -> 26. For example, the encoded message '12' may represent 'AB' (1 2) or 'L' (12). Given a string s representing a message encoded with these mappings, return the total number of ways to decode it. The input string may contain leading zeros, which do not correspond to any letters.",
    "topic": "Dynamic Programming",
    "subtopic": "Decoding Ways",
    "tags": [
      "Dynamic Programming",
      "String",
      "Combinatorics"
    ],
    "input_format": "A string s consisting of digits.",
    "output_format": "An integer representing the total number of ways to decode the string.",
    "constraints": [
      "1 <= s.length <= 100",
      "s consists of only digits and may contain leading zeros."
    ],
    "examples": [
      {
        "input": "s = '12'",
        "output": "2",
        "explanation": "'12' can be decoded as 'AB' (1 2) or 'L' (12), hence the output is 2."
      },
      {
        "input": "s = '226'",
        "output": "3",
        "explanation": "'226' can be decoded as 'BZ' (2 26), 'VF' (22 6), or 'BBF' (2 2 6), hence the output is 3."
      },
      {
        "input": "s = '0'",
        "output": "0",
        "explanation": "The string '0' cannot be decoded into any letters, hence the output is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to store the number of ways to decode the string up to each index.",
      "Remember to handle cases with leading zeros carefully."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Reconstruct Original Digits from English",
    "description": "Given a string containing letters from 'a' to 'z' representing the digits from '0' to '9' in English (where 'zero' corresponds to '0', 'one' corresponds to '1', and so on), return a string representing the digits in ascending order. The reconstruction can include multiple occurrences of the same digit, depending on the number of times its corresponding English representation appears in the input string.",
    "topic": "String",
    "subtopic": "Frequency Count",
    "tags": [
      "String",
      "Counting",
      "Sorting"
    ],
    "input_format": "A string s consisting of lowercase English letters, representing the digits from '0' to '9'.",
    "output_format": "A string of digits in ascending order.",
    "constraints": [
      "0 <= s.length <= 1000",
      "s consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "oiseonzt",
        "output": "012",
        "explanation": "The string can be used to form 'zero' (0), 'one' (1), and 'two' (2). Hence, the output is '012'."
      },
      {
        "input": "nneeotnwo",
        "output": "112",
        "explanation": "The string can be used to form 'one' (1) twice and 'two' (2) once. Hence, the output is '112'."
      },
      {
        "input": "ninesxegztwo",
        "output": "0229",
        "explanation": "The string can form 'two' (2) and 'nine' (9) once, and 'zero' (0) twice. Hence, the output is '0229'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how many times each digit's representation can be formed.",
      "Use a counting technique to track how many letters correspond to each digit."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Count Binary Substrings",
    "description": "Given a string consisting of zeros and ones, return the count of substrings that have the same number of consecutive 0's and 1's. A substring is a contiguous sequence of characters within the string.",
    "topic": "String",
    "subtopic": "Substring",
    "tags": [
      "String",
      "Substring",
      "Counting"
    ],
    "input_format": "A binary string s consisting of '0's and '1's.",
    "output_format": "An integer representing the count of binary substrings with equal consecutive 0's and 1's.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s[i] is either '0' or '1'."
    ],
    "examples": [
      {
        "input": "s = '00110011'",
        "output": "6",
        "explanation": "The substrings are '0011', '01', '1100', '10', '0011', '01'."
      },
      {
        "input": "s = '10101'",
        "output": "4",
        "explanation": "The substrings are '10', '01', '10', '01'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use the concept of counting groups of consecutive characters.",
      "Maintain a count for the previous group and current group of characters."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Partition Array Into Two Arrays to Minimize Sum Difference",
    "description": "Given an array of integers, partition the array into two subsets such that the absolute difference between the sum of the two subsets is minimized. You need to return the minimum absolute difference that can be achieved. The subsets must be formed by selecting some elements from the original array, and they can hold zero or more elements.",
    "topic": "Dynamic Programming",
    "subtopic": "Subset Sum",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of integers nums, where 1 <= nums.length <= 200 and 0 <= nums[i] <= 1000.",
    "output_format": "An integer representing the minimum absolute difference between the sums of the two subsets.",
    "constraints": [
      "1 <= nums.length <= 200",
      "0 <= nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 5]",
        "output": "1",
        "explanation": "The two subsets can be [1, 2] and [3, 5], which yields sums of 3 and 8, respectively. The absolute difference is |3 - 8| = 5."
      },
      {
        "input": "nums = [3, 9, 7, 3]",
        "output": "2",
        "explanation": "The subsets can be [3, 9] and [7, 3], leading to sums of 12 and 10. The absolute difference is |12 - 10| = 2."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the total sum of the array and the possible sums of subsets.",
      "Use dynamic programming to solve the subset sum problem.",
      "Try to find all possible subset sums that can be formed."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Search in Rotated Sorted Array",
    "description": "You are given a rotated sorted array 'nums' and an integer 'target'. Your task is to determine if 'target' is in 'nums'. If it is, return its index; otherwise, return -1. The array was originally sorted in increasing order and then rotated at some pivot unknown to you beforehand.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Search"
    ],
    "input_format": "An integer array nums, followed by an integer target.",
    "output_format": "An integer representing the index of target in nums, or -1 if target is not found.",
    "constraints": [
      "1 <= nums.length <= 5000",
      "10^4 <= nums[i] <= 10^4",
      "All integers in nums are unique."
    ],
    "examples": [
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 0",
        "output": "4",
        "explanation": "The target 0 is at index 4."
      },
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 3",
        "output": "-1",
        "explanation": "The target 3 is not present in the array."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to take advantage of the sorted nature of the array.",
      "Identify the sorted half of the array at each step."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Populating Next Right Pointers in Each Node",
    "description": "Given a binary tree, populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL. Initially, all next pointers are set to NULL. You may assume that it is a perfect binary tree (i.e., all leaves are at the same level, and every parent has two children).",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Next Right Pointer"
    ],
    "input_format": "The root of a perfect binary tree.",
    "output_format": "The modified tree with populated next pointers.",
    "constraints": [
      "The number of nodes is in the range [0, 2^12 - 1].",
      "All nodes contain unique values."
    ],
    "examples": [
      {
        "input": "root = [1, 2, 3, 4, 5, 6, 7]",
        "output": "The tree with next pointers populated correctly.",
        "explanation": "After populating, each node will point to its right neighbor, and the last node in each level will point to NULL."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a level order traversal technique.",
      "You can utilize a queue to keep track of nodes at the current level.",
      "Remember to connect the current node's next pointer to the next node in the same level."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "IPO",
    "description": "Suppose you are a venture capitalist and you want to allocate money for various projects. Each project has a profit associated with it. You can invest in multiple projects sequentially, but you have a limited budget. Your goal is to maximize the total profit within the constraints of your budget. Given an array of profits and an integer representing the budget, return the maximum total profit you can achieve.",
    "topic": "Dynamic Programming",
    "subtopic": "Knapsack Problem",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Knapsack"
    ],
    "input_format": "An integer array profits representing the profits of the projects and an integer budget which is your maximum investment.",
    "output_format": "An integer representing the maximum profit you can achieve without exceeding the budget.",
    "constraints": [
      "1 <= profits.length <= 500",
      "0 <= profits[i] <= 1000",
      "0 <= budget <= 5000"
    ],
    "examples": [
      {
        "input": "profits = [300, 200, 500], budget = 500",
        "output": "800",
        "explanation": "Investing in the projects with profits of 300 and 500 gives the maximum profit of 800."
      },
      {
        "input": "profits = [100, 200, 300], budget = 250",
        "output": "200",
        "explanation": "The optimal choice is to invest in the project with a profit of 200 because it does not exceed the budget."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a greedy approach to select the most profitable projects within budget.",
      "Sort the projects by profit before deciding which to invest in.",
      "Think about the order of selections and how it affects the total profit."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Maximize Greatness of an Array",
    "description": "Given an array of integers, you need to maximize the 'greatness' of this array. The greatness is defined as the number of elements in the array that are strictly greater than their preceding elements after reordering the array. Your task is to determine the maximum greatness that can be achieved by any possible rearrangement of the array.",
    "topic": "Array",
    "subtopic": "Sorting and Rearranging",
    "tags": [
      "Array",
      "Sorting",
      "Greedy"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum greatness of the array.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, 5, 4, 2]",
        "output": "3",
        "explanation": "One optimal arrangement could be [1, 2, 3, 4, 5]. The greatness is 3 because 2 > 1, 3 > 2, and 4 > 3."
      },
      {
        "input": "nums = [1, 2, 3]",
        "output": "2",
        "explanation": "The optimal arrangement is [1, 2, 3]. The greatness is 2 because 2 > 1 and 3 > 2."
      },
      {
        "input": "nums = [5, 1, 1, 1, 1]",
        "output": "1",
        "explanation": "The optimal arrangement is [1, 1, 1, 1, 5]. The greatness is 1 because only 5 is greater than its preceding elements."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to sort the array first for easier management.",
      "Consider the greedy approach for optimal rearrangement."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Is Subsequence",
    "description": "Given two strings s and t, determine if s is a subsequence of t. A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., 'ace' is a subsequence of 'abcde' while 'aec' is not).",
    "topic": "String",
    "subtopic": "Subsequence & Pointer Technique",
    "tags": [
      "String",
      "Subsequence",
      "Two Pointers"
    ],
    "input_format": "Two strings s and t where 0 <= s.length <= 100 and 0 <= t.length <= 10^4.",
    "output_format": "A boolean value indicating if s is a subsequence of t.",
    "constraints": [
      "0 <= s.length <= 100",
      "0 <= t.length <= 10^4",
      "s and t consist of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"abc\", t = \"ahbgdc\"",
        "output": "true",
        "explanation": "The characters 'a', 'b', and 'c' can be found in t in the same order, so s is a subsequence of t."
      },
      {
        "input": "s = \"axc\", t = \"ahbgdc\"",
        "output": "false",
        "explanation": "The characters 'a', 'x', and 'c' cannot be found in t in the same order, so s is not a subsequence of t."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to track positions in both strings.",
      "If characters match, move the pointer in s."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Max Area of Island",
    "description": "You are given a 2D grid of 0s and 1s, where 0 represents water and 1 represents land. Your task is to find the maximum area of an island in the grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. Return the maximum area of any island found in the grid.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "Depth-First Search",
      "Matrix"
    ],
    "input_format": "A 2D grid of integers grid (where grid[i][j] is either 0 or 1).",
    "output_format": "An integer representing the maximum area of an island.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 50",
      "grid[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "grid = [[0,0,0,0,0],[0,1,1,0,0],[0,1,0,1,1],[0,0,0,1,0]]",
        "output": "5",
        "explanation": "The longest island has coordinates (1,1), (1,2), (2,1), (2,3), (2,4) resulting in an area of 5."
      },
      {
        "input": "grid = [[0,0,0],[0,0,0],[0,0,0]]",
        "output": "0",
        "explanation": "There are no lands in the grid, therefore the maximum area of any island is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use Depth-First Search (DFS) to explore the area of each island.",
      "Keep track of the area encountered during each DFS call.",
      "Consider marking visited cells to avoid counting them multiple times."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Degree of an Array",
    "description": "Given a non-empty array of integers, the degree of this array is defined as the maximum frequency of any of its elements. Your task is to return the length of the smallest subarray that has the same degree as the original array. A subarray is defined as a contiguous part of an array. If there are multiple subarrays with the same degree, return the length of the shortest one.",
    "topic": "Array",
    "subtopic": "Subarray",
    "tags": [
      "Array",
      "HashMap",
      "Subarray"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the smallest subarray with the same degree as the original array.",
    "constraints": [
      "1 <= nums.length <= 50,000",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 2, 3, 1]",
        "output": "2",
        "explanation": "The degree of the array is 2 (the number 1 appears twice). The smallest subarray that includes both occurrences of 1 is [1, 2, 2, 3, 1], with length 5. The length of the shortest subarray that has the same degree is the subarray [1, 2], which has a length of 2."
      },
      {
        "input": "nums = [1, 2, 2, 3, 1, 4, 2]",
        "output": "6",
        "explanation": "The degree of the array is 3 (the number 2 appears three times). The smallest subarray that has the same degree is [2, 2, 3, 1, 4, 2], which has a length of 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to count the frequency of elements.",
      "Keep track of the first and last indices of each element."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Daily Temperatures",
    "description": "Given an array of integers representing temperatures, return an array such that for each element in the input array, represents the number of days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Temperature"
    ],
    "input_format": "An array of integers temperatures where 1 <= temperatures.length <= 30000 and 30 <= temperatures[i] <= 100.",
    "output_format": "An array of integers where each integer represents the number of days to wait for a warmer temperature.",
    "constraints": [
      "1 <= temperatures.length <= 30000",
      "30 <= temperatures[i] <= 100"
    ],
    "examples": [
      {
        "input": "temperatures = [73, 74, 75, 71, 69, 72, 76, 73]",
        "output": "[1, 1, 4, 2, 1, 1, 0, 0]",
        "explanation": "In this case, the next warmer day after 73 is 74 (1 day), after 74 is 75 (1 day), after 75 is 76 (4 days), and so on. The last two days do not have warmer days in the future, so they both return 0."
      },
      {
        "input": "temperatures = [30, 40, 50, 60]",
        "output": "[1, 1, 1, 0]",
        "explanation": "Each temperature has a warmer day immediately after it until the last one, which has no warmer day."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the indices of the temperatures.",
      "Pop from the stack when you find a warmer temperature."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Combination Sum",
    "description": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order. The same number may be chosen from candidates an unlimited number of times. It is guaranteed that the sum of the elements in any combination will not exceed target.",
    "topic": "Backtracking",
    "subtopic": "Combination Sum",
    "tags": [
      "Backtracking",
      "Recursion",
      "Dynamic Programming"
    ],
    "input_format": "An array of distinct integers 'candidates' and an integer 'target'.",
    "output_format": "A list of lists of integers representing all unique combinations that sum up to the target.",
    "constraints": [
      "1 <= candidates.length <= 30",
      "1 <= candidates[i] <= 200",
      "All elements of candidates are distinct.",
      "1 <= target <= 500"
    ],
    "examples": [
      {
        "input": "candidates = [2, 3, 6, 7], target = 7",
        "output": "[[2, 2, 3], [7]]",
        "explanation": "The combinations that sum to 7 are [2, 2, 3] and [7]."
      },
      {
        "input": "candidates = [2, 3, 5], target = 8",
        "output": "[[2, 2, 2, 2], [2, 3, 3], [3, 5]]",
        "explanation": "The combinations that sum to 8 are [2, 2, 2, 2], [2, 3, 3], and [3, 5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using backtracking to explore combinations.",
      "You can include the same candidate multiple times in a combination.",
      "Think about how to avoid duplicates when generating combinations."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Container With Most Water",
    "description": "You are given an integer array height where height[i] represents the height of a vertical line at index i. Find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store. Note that you may not be able to form a container with the first and last line's heights if they are not the same form.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy"
    ],
    "input_format": "An array of integers height.",
    "output_format": "An integer representing the maximum area of water that can be contained.",
    "constraints": [
      "2 <= height.length <= 10^5",
      "0 <= height[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "height = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The maximum area is formed between the lines at index 1 and 8, which have heights 8 and 7, respectively."
      },
      {
        "input": "height = [1,1]",
        "output": "1",
        "explanation": "The only container can be formed between the two lines, both have height 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider iterating from both ends towards the center.",
      "The area is determined by the shorter of the two lines."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Decode String",
    "description": "Given an encoded string containing digits and letters, your task is to decode the string. The encoding rule is that the string 'k[encoded_string]' means that the encoded_string inside the square brackets is being repeated exactly k times. You need to return the decoded string.",
    "topic": "String",
    "subtopic": "Decoding",
    "tags": [
      "String",
      "Decoding",
      "Stack"
    ],
    "input_format": "A string s representing the encoded string.",
    "output_format": "A string representing the decoded output.",
    "constraints": [
      "1 <= s.length <= 100",
      "s consists of digits, lowercase English letters, and characters `[` and `]`."
    ],
    "examples": [
      {
        "input": "s = \"3[a2[c]]\"",
        "output": "accaccacc",
        "explanation": "The string can be decoded as follows: 'a2[c]' is decoded as 'acc', and then '3[acc]' means to repeat it 3 times."
      },
      {
        "input": "s = \"2[abc]3[cd]ef\"",
        "output": "abcabccdcdcdef",
        "explanation": "Decoded, it becomes 'abcabc' for '2[abc]', 'cdcdcd' for '3[cd]', combined with 'ef' yields the final string."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a stack to solve this problem.",
      "Track the current number and the current string separately as you parse through the input."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Roman to Integer",
    "description": "Given a string representing a Roman numeral, convert it to an integer. The Roman numerals are 7 characters: I, V, X, L, C, D, and M. In this system, the order of symbols matters. For example, II is 2, while IV is 4 because 1 is before 5. Your task is to implement a function that takes a Roman numeral as input and returns its integer value.",
    "topic": "String",
    "subtopic": "Parsing",
    "tags": [
      "String",
      "Parsing",
      "Math"
    ],
    "input_format": "A string s representing a Roman numeral, with a length between 1 and 15.",
    "output_format": "An integer representing the converted value of the Roman numeral.",
    "constraints": [
      "1 <= s.length <= 15",
      "s consists of valid Roman numeral characters only."
    ],
    "examples": [
      {
        "input": "s = 'III'",
        "output": "3",
        "explanation": "The Roman numeral III represents 3."
      },
      {
        "input": "s = 'IV'",
        "output": "4",
        "explanation": "The Roman numeral IV represents 4, as it is 5 - 1."
      },
      {
        "input": "s = 'IX'",
        "output": "9",
        "explanation": "The Roman numeral IX represents 9, as it is 10 - 1."
      },
      {
        "input": "s = 'LVIII'",
        "output": "58",
        "explanation": "The Roman numeral LVIII represents 58, calculated as 50 + 5 + 3."
      },
      {
        "input": "s = 'MCMXCIV'",
        "output": "1994",
        "explanation": "The Roman numeral MCMXCIV represents 1994, calculated as 1000 + (1000 - 100) + (100 - 10) + 5."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Check the position of each character to determine if you should add or subtract its value.",
      "Consider using a mapping of Roman characters to their integer values."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Maximum Difference Between Increasing Elements",
    "description": "You are given an array of integers where each element represents the price of a product on a specific day. You want to maximize your profit by choosing two days: one day to buy the product and another day in the future to sell it. The goal is to find the maximum possible difference between the selling price and the buying price. If no profit is possible, return 0.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices, where prices[i] represents the price of the product on the ith day.",
    "output_format": "An integer representing the maximum profit possible. Return 0 if no profitable transaction is possible.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done since prices are decreasing."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price encountered so far.",
      "At each step, calculate the potential profit by subtracting the minimum price from the current price."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Construct Binary Tree from Preorder and Inorder Traversal",
    "description": "Given two integer arrays, preorder and inorder, where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Recursion"
    ],
    "input_format": "Two integer arrays, preorder and inorder, representing the preorder and inorder traversals of a binary tree.",
    "output_format": "A binary tree constructed from the given preorder and inorder traversals.",
    "constraints": [
      "1 <= preorder.length <= 3000",
      "inorder.length == preorder.length",
      "-3000 <= preorder[i], inorder[i] <= 3000",
      "preorder and inorder consist of unique values."
    ],
    "examples": [
      {
        "input": "preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]",
        "output": "[3,9,20,null,null,15,7]",
        "explanation": "The constructed binary tree is: 3 is the root, 9 is the left child of 3, and 20 is the right child of 3. 15 is the left child of 20 and 7 is the right child of 20."
      },
      {
        "input": "preorder = [1], inorder = [1]",
        "output": "[1]",
        "explanation": "The tree consists of a single node which is 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use the first element of preorder as the root of the tree.",
      "Find the index of the root in inorder to determine left and right subtrees.",
      "Recursively construct the left and right subtrees using slices of the preorder and inorder arrays."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Design In-Memory File System",
    "description": "You are tasked with designing an in-memory file system that supports the following operations: create, read, and delete files and directories. Each file and directory has a unique path. The file system should support nested directories and file operations. Implement a class FileSystem that provides methods to perform these operations.",
    "topic": "Design",
    "subtopic": "File System",
    "tags": [
      "Design",
      "File System",
      "Data Structure"
    ],
    "input_format": "N/A",
    "output_format": "N/A",
    "constraints": [
      "The total number of operations performed will not exceed 1000.",
      "Path strings will have at most length 100."
    ],
    "examples": [
      {
        "input": "fs = FileSystem()\nfs.create('/a/b/c', 'hello')\nfs.read('/a/b/c')",
        "output": "'hello'",
        "explanation": "A file 'c' is created inside directory '/a/b' with content 'hello'."
      },
      {
        "input": "fs.delete('/a/b/c')\nfs.read('/a/b/c')",
        "output": "File not found",
        "explanation": "The file 'c' is deleted, so trying to read it returns 'File not found'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a Trie-like structure for storing paths.",
      "Use a map to store file contents indexed by their path."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Smallest Subtree with all the Deepest Nodes",
    "description": "Given a binary tree, return the subtree with all the deepest nodes. A subtree of a node is it and all of its descendants. The deepest nodes are the nodes that are farthest away from the root. If there is a tie, return any of the deepest subtrees.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Depth"
    ],
    "input_format": "The input will be a binary tree represented by its root node.",
    "output_format": "The output will be the root of the smallest subtree containing all the deepest nodes.",
    "constraints": [
      "The number of nodes in the tree is in the range [1, 1000].",
      "All node values are unique."
    ],
    "examples": [
      {
        "input": "[1, 2, 3, 4, 5, null, 6, 7, null, null, null, null, 8]",
        "output": "4",
        "explanation": "The deepest nodes are 7 and 8. The smallest subtree containing both of these nodes is rooted at node 4."
      },
      {
        "input": "[1, 2, 3, 4, null, null, 5]",
        "output": "5",
        "explanation": "The deepest node is 5. The smallest subtree containing the deepest node is rooted at node 5 itself."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Find the maximum depth of the tree first.",
      "Use a bottom-up approach starting from the leaves.",
      "Track the deepest nodes during traversal."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Rotting Oranges",
    "description": "You are given an m x n grid where each cell can have one of three values: 0 representing an empty cell, 1 representing a fresh orange, or 2 representing a rotten orange. Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange will rot. Return the minimum number of minutes that must elapse until no fresh oranges remain. If it is impossible to rot all the fresh oranges, return -1.",
    "topic": "Breadth-First Search",
    "subtopic": "Graph Traversal",
    "tags": [
      "BFS",
      "Graph",
      "Matrix"
    ],
    "input_format": "A 2D grid of integers representing the cells in the grid.",
    "output_format": "An integer representing the minimum number of minutes needed to rot all the oranges, or -1 if it's impossible.",
    "constraints": [
      "1 <= m, n <= 300",
      "grid[i][j] is either 0, 1, or 2."
    ],
    "examples": [
      {
        "input": "grid = [[2,1,1],[1,1,0],[0,1,1]]",
        "output": "4",
        "explanation": "Initially, the rotten orange in (0,0) can rot (0,1) in 1 minute, (1,0) can be rotted in the next minute, and so forth."
      },
      {
        "input": "grid = [[2,1,1],[0,1,1],[1,0,2]]",
        "output": "-1",
        "explanation": "The fresh orange in (2,0) cannot be rotted due to the blocked path."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using BFS to track the minutes passed.",
      "Count how many fresh oranges are there at the start."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Sort Colors",
    "description": "Given an array nums consisting of only 0s, 1s, and 2s, sort the array in-place so that all 0s come first, followed by all 1s, and all 2s. You must solve this problem without using the sort function.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "In-Place"
    ],
    "input_format": "An array of integers nums where each integer is either 0, 1, or 2.",
    "output_format": "The same array nums sorted in non-decreasing order.",
    "constraints": [
      "1 <= nums.length <= 300",
      "nums[i] is either 0, 1, or 2."
    ],
    "examples": [
      {
        "input": "nums = [2,0,2,1,1,0]",
        "output": "[0,0,1,1,2,2]",
        "explanation": "After sorting the array, the 0s come first, followed by the 1s and finally the 2s."
      },
      {
        "input": "nums = [2,0,1]",
        "output": "[0,1,2]",
        "explanation": "Sorting the input results in the order 0, 1, 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a three-pointer approach to segregate the colors."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Longest Valid Parentheses",
    "description": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring. For example, in the string '(()', the longest valid substring is '()' with a length of 2. In the string ')()())', the longest valid substring is '()' with a length of 2.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Stack"
    ],
    "input_format": "A string s consisting of characters '(' and ')'.",
    "output_format": "An integer representing the length of the longest valid parentheses substring.",
    "constraints": [
      "0 <= s.length <= 10^4",
      "s[i] is '(' or ')'."
    ],
    "examples": [
      {
        "input": "s = '(()))())('",
        "output": "4",
        "explanation": "The longest valid substring is '()()' with a length of 4."
      },
      {
        "input": "s = ')('",
        "output": "0",
        "explanation": "There are no valid substrings."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a stack to keep track of indices of characters.",
      "Consider using a dynamic programming approach to solve the problem."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Find Median from Data Stream",
    "description": "Design a data structure that supports the following two operations: Add a number from the data stream and find the median of all elements added so far. The median is the value separating the higher half from the lower half of a data sample. If there is an even number of elements, the median is the average of the two middle values.",
    "topic": "Design",
    "subtopic": "Data Stream",
    "tags": [
      "Median",
      "Data Structure",
      "Stream"
    ],
    "input_format": "A stream of integers, where each integer is given as an input to the addNum function.",
    "output_format": "A floating-point number representing the median after each call to findMedian.",
    "constraints": [
      "-10^5 <= num <= 10^5",
      "The total number of integers will not exceed 10^4."
    ],
    "examples": [
      {
        "input": "addNum(1); addNum(2); findMedian();",
        "output": "1.5",
        "explanation": "The numbers added are 1 and 2. The median is (1 + 2) / 2 = 1.5."
      },
      {
        "input": "addNum(3); findMedian();",
        "output": "2.0",
        "explanation": "The numbers added are 1, 2, and 3. The median is 2."
      },
      {
        "input": "addNum(4); findMedian();",
        "output": "2.5",
        "explanation": "The numbers added are 1, 2, 3, and 4. The median is (2 + 3) / 2 = 2.5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use two heaps to maintain the lower half and the upper half.",
      "Consider the scenarios for both even and odd total numbers."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Lowest Common Ancestor of a Binary Tree",
    "description": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes A and B in the tree. The LCA is defined between two nodes A and B as the lowest node that has both A and B as descendants (where we allow a node to be a descendant of itself). You may assume that both A and B exist in the tree.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "LCA"
    ],
    "input_format": "The input consists of the root of the binary tree and two nodes A and B.",
    "output_format": "Return the node that is the lowest common ancestor of nodes A and B.",
    "constraints": [
      "The number of nodes in the tree is in the range [2, 10^5].",
      "-10^5 <= Node.val <= 10^5",
      "All Node.val are unique."
    ],
    "examples": [
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], A = 5, B = 1",
        "output": "3",
        "explanation": "The LCA of nodes 5 and 1 is 3."
      },
      {
        "input": "root = [1,2], A = 1, B = 2",
        "output": "1",
        "explanation": "The LCA of nodes 1 and 2 is 1 since 1 is an ancestor of 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to traverse the tree to find both nodes.",
      "If you find either node during traversal, consider it a potential ancestor."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Move Zeroes",
    "description": "Given an array of integers, write a function that moves all zeroes in the array to the end while maintaining the relative order of the non-zero elements. You must do this in-place without making a copy of the array.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "In-Place"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "The modified array with all zeroes moved to the end.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [0, 1, 0, 3, 12]",
        "output": "[1, 3, 12, 0, 0]",
        "explanation": "After moving the zeroes, the array is [1, 3, 12, 0, 0]."
      },
      {
        "input": "nums = [0]",
        "output": "[0]",
        "explanation": "The array only contains one element which is zero, so it remains unchanged."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to use a two-pointer technique to solve the problem efficiently."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Range Addition",
    "description": "You are given an integer length 'n' and an array 'updates' of size 'm', where 'updates[i] = [startIdx, endIdx, inc]' means that you should increment all numbers in the array from index 'startIdx' to 'endIdx' (inclusive) by 'inc'. After applying all updates, you need to return the final modified array of size 'n'.",
    "topic": "Array",
    "subtopic": "Range Update",
    "tags": [
      "Array",
      "Increment",
      "Range Update"
    ],
    "input_format": "An integer n representing the size of the array, and an array updates of size m where each update is of the form [startIdx, endIdx, inc].",
    "output_format": "An array of integers representing the final modified array after all updates.",
    "constraints": [
      "1 <= n <= 10^4",
      "0 <= m <= 10^4",
      "0 <= startIdx <= endIdx < n",
      "-1000 <= inc <= 1000"
    ],
    "examples": [
      {
        "input": "n = 5, updates = [[1, 3, 2], [2, 4, 3]]",
        "output": "[0, 2, 5, 5, 3]",
        "explanation": "Initially, the array is [0, 0, 0, 0, 0]. After the first update, it becomes [0, 2, 2, 2, 0]. After the second update, it becomes [0, 2, 5, 5, 3]."
      },
      {
        "input": "n = 10, updates = [[0, 2, 1], [2, 4, 2], [0, 9, 3]]",
        "output": "[3, 3, 6, 6, 5, 3, 3, 3, 3, 3]",
        "explanation": "The final array after applying all the updates is [3, 3, 6, 6, 5, 3, 3, 3, 3, 3]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a difference array to optimize the range updates.",
      "Iterate through the updates and adjust the starting and ending indices accordingly."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "House Robber",
    "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected. If two adjacent houses are broken into, the system will automatically contact the police. Given an integer array 'nums' representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.",
    "topic": "Dynamic Programming",
    "subtopic": "Memoization",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of integers nums, where 0 <= nums.length <= 100.",
    "output_format": "An integer representing the maximum amount of money that can be robbed.",
    "constraints": [
      "0 <= nums.length <= 100",
      "0 <= nums[i] <= 400"
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 9, 3, 1]",
        "output": "12",
        "explanation": "Robbing house 1 (2) and house 3 (9) and house 4 (1) gives 2 + 9 + 1 = 12."
      },
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "4",
        "explanation": "Robbing house 2 (2) and house 4 (1) gives 2 + 1 = 3, but robbing house 1 (1) and house 3 (3) gives 1 + 3 = 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "You can use dynamic programming to solve this problem efficiently.",
      "Consider using an array to store the maximum amount that can be robbed up to each house."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Product of Array Except Self",
    "description": "Given an integer array nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. You must do this in O(n) time complexity and without using the division operation.",
    "topic": "Array",
    "subtopic": "Prefix and Suffix Products",
    "tags": [
      "Array",
      "Prefix-Suffix",
      "Product"
    ],
    "input_format": "An integer array nums of length n.",
    "output_format": "An integer array output of length n.",
    "constraints": [
      "2 <= n <= 10^5",
      "-30 <= nums[i] <= 30",
      "The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer."
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "[24, 12, 8, 6]",
        "explanation": "The output is calculated as follows: output[0] = 2 * 3 * 4, output[1] = 1 * 3 * 4, output[2] = 1 * 2 * 4, output[3] = 1 * 2 * 3."
      },
      {
        "input": "nums = [-1, 1, 0, -3, 3]",
        "output": "[0, 0, 9, 0, 0]",
        "explanation": "For nums = [-1, 1, 0, -3, 3], the output is calculated based on the product excluding each index."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using two separate passes to store the product of elements before and after the current index.",
      "You can define two auxiliary arrays to help with the product calculations."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Serialize and Deserialize Binary Tree",
    "description": "Design a serialization and deserialization algorithm for a binary tree. A binary tree can be represented as a string and later reconstructed from that string. Implement two functions: `serialize(root)` to convert a binary tree into a string, and `deserialize(data)` to convert that string back into the original binary tree structure. The string representation should be efficient and allow for accurate reconstruction of the tree.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Serialization",
      "Deserialization"
    ],
    "input_format": "A binary tree node denoted as root, where each node has a value, and pointers to left and right child nodes.",
    "output_format": "A string representation of the binary tree when serialized and a binary tree node (root of the reconstructed tree) when deserialized.",
    "constraints": [
      "The binary tree has at most 1000 nodes.",
      "Node values are in the range of [-10^5, 10^5]."
    ],
    "examples": [
      {
        "input": "root = [1,2,3,null,null,4,5]",
        "output": "'1,2,#,#,3,4,#,#,5,#,#'",
        "explanation": "The binary tree is serialized to a string in pre-order traversal format."
      },
      {
        "input": "data = '1,2,#,#,3,#,#'",
        "output": "[1,2,3]",
        "explanation": "The string is deserialized back to a binary tree with a root value of 1, left child 2, and right child 3."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using pre-order or level-order traversal for serialization.",
      "Use a special character to denote null nodes in the serialization."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Pow(x, n)",
    "description": "Implement function myPow(x, n), which calculates x raised to the power n (i.e., x^n). The function should follow the rules for handling edge cases such as negative exponents and large integers.",
    "topic": "Math",
    "subtopic": "Exponentiation",
    "tags": [
      "Math",
      "Exponentiation",
      "Recursion"
    ],
    "input_format": "Two inputs: a floating-point number x and an integer n.",
    "output_format": "A floating-point number representing x raised to the power n.",
    "constraints": [
      "-100.0 < x < 100.0",
      "-2^31 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "x = 2.0, n = 10",
        "output": "1024.00000",
        "explanation": "2 raised to the power of 10 is 1024."
      },
      {
        "input": "x = 2.1, n = 3",
        "output": "9.26100",
        "explanation": "2.1 raised to the power of 3 is approximately 9.261."
      },
      {
        "input": "x = 2.0, n = -2",
        "output": "0.25000",
        "explanation": "2 raised to the power of -2 is 1/(2^2) = 0.25."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the case when n is negative.",
      "Use divide and conquer to reduce the number of multiplications."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Kth Smallest Element in a Sorted Matrix",
    "description": "Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix. Note that it is the kth smallest element in the sorted order, not the kth distinct element.",
    "topic": "Matrix",
    "subtopic": "Binary Search",
    "tags": [
      "Matrix",
      "Binary Search",
      "Sorting"
    ],
    "input_format": "A 2D array of integers matrix where each row and column is sorted, and an integer k.",
    "output_format": "An integer representing the kth smallest element in the matrix.",
    "constraints": [
      "n == matrix.length",
      "n == matrix[i].length",
      "1 <= n <= 300",
      "1 <= matrix[i][j] <= 10^4",
      "k is in the range [1, n * n]"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 5, 9], [10, 11, 13], [12, 13, 15]], k = 8",
        "output": "13",
        "explanation": "The sorted order of elements is [1, 5, 9, 10, 11, 12, 13, 13, 15]. The 8th smallest element is 13."
      },
      {
        "input": "matrix = [[-5]], k = 1",
        "output": "-5",
        "explanation": "There is only one element in the matrix, which is -5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to find the kth smallest element.",
      "Think about the range of possible values for the kth smallest element."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Wildcard Matching",
    "description": "Given an input string s and a pattern p, implement wildcard pattern matching with support for '?' and '*'. A '*' matches any sequence of characters (including the empty sequence), while a '?' matches exactly one character. The matching should cover the entire input string (not partial).",
    "topic": "Dynamic Programming",
    "subtopic": "String Matching",
    "tags": [
      "Dynamic Programming",
      "String",
      "Matching"
    ],
    "input_format": "Two strings, s and p, where 0 <= s.length, p.length <= 100.",
    "output_format": "Return true if the string matches the pattern, otherwise return false.",
    "constraints": [
      "0 <= s.length, p.length <= 100",
      "s contains only lowercase English letters.",
      "p contains lowercase English letters, '?' and '*' characters."
    ],
    "examples": [
      {
        "input": "s = \"aa\", p = \"a\"",
        "output": "false",
        "explanation": "The pattern 'a' does not match the string 'aa'."
      },
      {
        "input": "s = \"aa\", p = \"*\"",
        "output": "true",
        "explanation": "The pattern '*' matches any string, including 'aa'."
      },
      {
        "input": "s = \"cb\", p = \"?a\"",
        "output": "false",
        "explanation": "The pattern '?a' requires a character followed by 'a', which does not match 'cb'."
      },
      {
        "input": "s = \"adceb\", p = \"*a*b\"",
        "output": "true",
        "explanation": "The '*' matches 'dce', resulting in 'adceb' matching '*a*b'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using dynamic programming to store intermediate results.",
      "Think about how to handle the '*' character effectively."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Graph Valid Tree",
    "description": "You are given a graph represented by an undirected edge list and a number of nodes. Write a program to determine if the given graph forms a valid tree. A valid tree is a connected graph with no cycles, meaning there should be exactly n-1 edges for n nodes, and every node must be reachable from any other node.",
    "topic": "Graph",
    "subtopic": "Tree Validation",
    "tags": [
      "Graph",
      "Tree",
      "DFS",
      "BFS"
    ],
    "input_format": "An integer n representing the number of nodes and an array of edges where each edge is a list of two integers representing a bidirectional connection between two nodes.",
    "output_format": "A boolean value: return true if the graph forms a valid tree, otherwise return false.",
    "constraints": [
      "1 <= n <= 1000",
      "0 <= edges.length <= n * (n - 1) / 2"
    ],
    "examples": [
      {
        "input": "n = 5, edges = [[0, 1], [0, 2], [0, 3], [1, 4]]",
        "output": "true",
        "explanation": "There are 5 nodes and 4 edges, which means it can form a valid tree structure."
      },
      {
        "input": "n = 5, edges = [[0, 1], [1, 2], [2, 3], [1, 3]]",
        "output": "false",
        "explanation": "The presence of a cycle (1-2-3-1) makes it invalid."
      },
      {
        "input": "n = 1, edges = []",
        "output": "true",
        "explanation": "A single node with no edges is considered a valid tree."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Check if the number of edges is exactly n - 1.",
      "Use Depth First Search (DFS) or Breadth First Search (BFS) to check connectivity."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "The Skyline Problem",
    "description": "You are to find the skyline formed by a number of rectangular buildings in a 2D plane. Each building can be defined by three integers, left (x-coordinate of the left edge), height (height of the building), and right (x-coordinate of the right edge). The skyline should represent the outline of the collective shape of these buildings when viewed from a distance. Return the coordinates of the critical points in the skyline in the order they appear from left to right.",
    "topic": "Geometry",
    "subtopic": "Sweep Line Algorithm",
    "tags": [
      "Geometry",
      "Algorithm",
      "Sweep Line"
    ],
    "input_format": "A list of tuples where each tuple contains three integers (left, height, right) representing a building.",
    "output_format": "A list of lists where each inner list represents a critical point in the format [x, height].",
    "constraints": [
      "1 <= buildings.length <= 10^4",
      "0 <= left < right <= 10^9",
      "1 <= height <= 10^4"
    ],
    "examples": [
      {
        "input": "buildings = [[2, 10, 4], [3, 15, 5], [7, 12, 9], [8, 0, 10]]",
        "output": "[[2, 10], [3, 15], [5, 0], [7, 12], [9, 0]]",
        "explanation": "The skyline is formed at x=2 with height 10, then increases to height 15 at x=3, drops to 0 at x=5, reaches height 12 at x=7, and returns to 0 at x=9."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a priority queue to keep track of building heights.",
      "Focus on the left edges and right edges of buildings to find critical points.",
      "Combine overlapping intervals effectively."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Insert Delete GetRandom O(1)",
    "description": "Implement a data structure that supports the following operations: insert, remove, and getRandom, all in O(1) time complexity. The data structure should allow duplicate values. The insert operation will add an item to the collection, the remove operation will remove a single instance of the item, and the getRandom operation will return a random element from the current collection of elements.",
    "topic": "Design",
    "subtopic": "Data Structures",
    "tags": [
      "Array",
      "Hash Table",
      "Random"
    ],
    "input_format": "The operations will be provided in the form of a list of strings, where each string is an operation followed by optional parameters.",
    "output_format": "For 'getRandom', return a random element from the collection.",
    "constraints": [
      "The number of operations performed will be at most 10^4.",
      "Each insert or remove operation will be followed by an element that is an integer.",
      "The getRandom operation should return elements from the collection if it is not empty; otherwise, it can return null."
    ],
    "examples": [
      {
        "input": [
          "insert(1)",
          "insert(2)",
          "insert(3)",
          "getRandom()",
          "remove(1)",
          "getRandom()"
        ],
        "output": "randomly returns 2 or 3",
        "explanation": "After inserting 1, 2, and 3, the collection contains [1, 2, 3]. 'getRandom()' could return 2 or 3. After removing 1, the collection may contain [2, 3]."
      },
      {
        "input": [
          "insert(1)",
          "insert(1)",
          "remove(1)",
          "getRandom()"
        ],
        "output": "1",
        "explanation": "After inserting 1 twice and removing one instance, the collection still contains [1]. Thus, 'getRandom()' returns 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Utilize a hash table to keep track of the elements and their indices.",
      "To get a random element efficiently, maintain a list of elements."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Number of Matching Subsequences",
    "description": "Given a string 's' and an array of words 'words', return the number of words in 'words' that are a subsequence of 's'. A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
    "topic": "String",
    "subtopic": "Subsequence",
    "tags": [
      "String",
      "Subsequence",
      "Counting"
    ],
    "input_format": "A string 's' and an array of strings 'words'.",
    "output_format": "An integer representing the number of words that are subsequences of 's'.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "1 <= words.length <= 10^4",
      "1 <= words[i].length <= 50"
    ],
    "examples": [
      {
        "input": "s = 'abcde', words = ['a', 'bb', 'acd', 'ace', 'f']",
        "output": "3",
        "explanation": "The words 'a', 'acd', and 'ace' are subsequences of 'abcde'."
      },
      {
        "input": "s = 'dsahjpjauf', words = ['ahjpjau', 'ahjp', 'a', 'd', 'h']",
        "output": "2",
        "explanation": "The words 'ahjpjau' and 'ahjp' are subsequences of 'dsahjpjauf'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a two-pointer technique.",
      "You can preprocess the string 's' to create an index map for character positions."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Majority Element II",
    "description": "Given an integer array of size n, find all elements that appear more than n/3 times in the array. You may return the answer in any order.",
    "topic": "Array",
    "subtopic": "Counting Elements",
    "tags": [
      "Array",
      "Hash Map",
      "Counting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of integers representing the elements that appear more than n/3 times.",
    "constraints": [
      "1 <= nums.length <= 5 * 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 3]",
        "output": "[3]",
        "explanation": "The element 3 appears 2 times, which is more than n/3 (where n = 3)."
      },
      {
        "input": "nums = [1, 1, 1, 3, 3, 2, 2, 2]",
        "output": "[1, 2]",
        "explanation": "The element 1 appears 3 times and 2 appears 3 times, which is more than n/3 (where n = 8)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to count occurrences.",
      "You need to find elements that have a frequency above n/3."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Middle of the Linked List",
    "description": "Given a singly linked list, return the middle node of the linked list. If there are two middle nodes, return the second middle node.",
    "topic": "Linked List",
    "subtopic": "Traversal",
    "tags": [
      "Linked List",
      "Two Pointers",
      "Fast and Slow Pointers"
    ],
    "input_format": "A linked list represented by its head node.",
    "output_format": "The middle node of the linked list.",
    "constraints": [
      "The number of nodes in the list is in the range [1, 100]",
      "1 <= Node.val <= 100"
    ],
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5]",
        "output": "[3, 4, 5]",
        "explanation": "The list has 5 nodes, so the middle node is 3."
      },
      {
        "input": "head = [1, 2, 3, 4, 5, 6]",
        "output": "[4, 5, 6]",
        "explanation": "The list has 6 nodes, so the middle node is 4."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers with different speeds to find the middle.",
      "When the fast pointer reaches the end, the slow pointer will be at the middle."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Subsets",
    "description": "Given an integer array nums, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the solution in any order.",
    "topic": "Backtracking",
    "subtopic": "Power Set",
    "tags": [
      "Backtracking",
      "Subsets",
      "Array"
    ],
    "input_format": "An array of integers nums, where each element can appear multiples times.",
    "output_format": "A list of lists, representing all unique subsets of the input array.",
    "constraints": [
      "0 <= nums.length <= 10^10",
      "-10 <= nums[i] <= 10"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 2]",
        "output": "[[], [1], [1, 2], [1, 2, 2], [2], [2, 2]]",
        "explanation": "All possible subsets including duplicates are returned."
      },
      {
        "input": "nums = [0]",
        "output": "[[], [0]]",
        "explanation": "For a single element, the power set has the empty set and the element itself."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using backtracking to explore all combinations.",
      "Sort the array to handle duplicates smoothly."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Count Primes",
    "description": "Given an integer n, return the number of prime numbers that are strictly less than n. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers.",
    "topic": "Math",
    "subtopic": "Number Theory",
    "tags": [
      "Math",
      "Primes",
      "Counting"
    ],
    "input_format": "An integer n representing the upper limit.",
    "output_format": "An integer representing the count of prime numbers less than n.",
    "constraints": [
      "0 <= n <= 10^6"
    ],
    "examples": [
      {
        "input": "n = 10",
        "output": "4",
        "explanation": "The prime numbers less than 10 are 2, 3, 5, and 7. Therefore, the count is 4."
      },
      {
        "input": "n = 0",
        "output": "0",
        "explanation": "There are no prime numbers less than 0."
      },
      {
        "input": "n = 1",
        "output": "0",
        "explanation": "There are no prime numbers less than 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the Sieve of Eratosthenes for efficient prime counting.",
      "Check if a number is prime by testing its divisibility."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Pairs of Songs With Total Durations Divisible by 60",
    "description": "You are given a list of song durations in seconds. Your task is to find the number of unique pairs of songs such that the sum of their durations is divisible by 60. Each song can only be used once in a pair. Return the total count of such pairs.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Counting Pairs"
    ],
    "input_format": "An array of integers nums where 1 <= nums.length <= 10^4 and 1 <= nums[i] <= 500.",
    "output_format": "An integer representing the total count of unique pairs of songs whose durations sum up to a multiple of 60.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "1 <= nums[i] <= 500"
    ],
    "examples": [
      {
        "input": "nums = [30, 20, 150, 100, 40]",
        "output": "3",
        "explanation": "The pairs are (30, 150), (20, 100), and (40, 30). Each pair sums to a multiple of 60."
      },
      {
        "input": "nums = [60, 60, 60]",
        "output": "3",
        "explanation": "The pairs are (60, 60), (60, 60) repeated. Any two 60s create a multiple of 60."
      },
      {
        "input": "nums = [10, 50, 30, 70, 20]",
        "output": "2",
        "explanation": "The pairs are (10, 50) and (30, 30). Both pairs sum to 60."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the remainders when each duration is divided by 60.",
      "A pair of durations (a, b) is valid if (a + b) % 60 == 0."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "First Missing Positive",
    "description": "Given an unsorted integer array, find the smallest missing positive integer. Your algorithm should run in O(n) time and use constant extra space. Consider only positive integers, ignoring negative numbers and zeros.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Hashing"
    ],
    "input_format": "An unsorted array of integers nums.",
    "output_format": "An integer representing the first missing positive integer.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [3, 4, -1, 1]",
        "output": "2",
        "explanation": "The positive integers present are 1, 3, and 4. The smallest missing positive is 2."
      },
      {
        "input": "nums = [1, 2, 0]",
        "output": "3",
        "explanation": "The positive integers present are 1 and 2. The smallest missing positive is 3."
      },
      {
        "input": "nums = [7, 8, 9, 11, 12]",
        "output": "1",
        "explanation": "No positive integers 1 to 6 present. The smallest missing positive is 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use the given array to place each number in its corresponding index.",
      "Consider how you can ignore numbers larger than the size of the array."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Isomorphic Strings",
    "description": "Given two strings s and t, determine whether they are isomorphic. Two strings s and t are isomorphic if the characters in s can be replaced to get t. All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.",
    "topic": "String",
    "subtopic": "Character Mapping",
    "tags": [
      "String",
      "HashMap",
      "Isomorphic"
    ],
    "input_format": "Two strings s and t, each containing only letters from a-z.",
    "output_format": "Return true if s and t are isomorphic, false otherwise.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "0 <= t.length <= 10^5",
      "s and t contain only English letters."
    ],
    "examples": [
      {
        "input": "s = \"egg\", t = \"add\"",
        "output": "true",
        "explanation": "Each 'e' maps to 'a' and each 'g' maps to 'd'."
      },
      {
        "input": "s = \"foo\", t = \"add\"",
        "output": "false",
        "explanation": "The 'o' in 'foo' cannot map to 'd' as it conflicts with the mapping of 'f' to 'a'."
      },
      {
        "input": "s = \"paper\", t = \"title\"",
        "output": "true",
        "explanation": "Each 'p' maps to 't', 'a' maps to 'i', 'p' maps to 't', 'e' maps to 'l', 'r' maps to 'e'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to track character mappings.",
      "Make sure to handle reverse mappings as well."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "2 Keys Keyboard",
    "description": "You are initially given a screen with one character 'A' on it. Your task is to perform a series of operations to create as many 'A's as possible on the screen. The allowed operations are: 'Copy All' (which copies all characters on the screen), 'Paste' (which pastes the copied characters), and you can only perform each operation once per cycle. You need to determine the minimum number of operations required to reach exactly N 'A's on the screen.",
    "topic": "Dynamic Programming",
    "subtopic": "Mathematical Manipulation",
    "tags": [
      "Dynamic Programming",
      "Mathematics",
      "Optimization"
    ],
    "input_format": "An integer N (1 <= N <= 1000), representing the target number of 'A's.",
    "output_format": "An integer representing the minimum number of operations required to form exactly N 'A's.",
    "constraints": [
      "1 <= N <= 1000"
    ],
    "examples": [
      {
        "input": "N = 3",
        "output": "3",
        "explanation": "Operations: Copy All (1), Paste (2), Paste (3)."
      },
      {
        "input": "N = 1",
        "output": "0",
        "explanation": "No operations needed as we already have 1 'A'."
      },
      {
        "input": "N = 10",
        "output": "7",
        "explanation": "Operations: Copy All (1), Paste (2), Copy All (3), Paste (4), Paste (5), Paste (6), Paste (7), Paste (8), Paste (9), Paste (10)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about prime factors of N.",
      "Consider how many times you can copy and paste in relation to N."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Longest Common Prefix",
    "description": "Write a function that determines the longest common prefix string among an array of strings. If there is no common prefix, return an empty string \"\".",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Prefix",
      "Array"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A string representing the longest common prefix.",
    "constraints": [
      "0 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "All strings consist of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"flower\", \"flow\", \"flight\"]",
        "output": "\"fl\"",
        "explanation": "The longest common prefix is \"fl\"."
      },
      {
        "input": "strs = [\"dog\", \"racecar\", \"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the strings."
      },
      {
        "input": "strs = []",
        "output": "\"\"",
        "explanation": "An empty array has no common prefix."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider the first string as a base for comparison.",
      "Iterate through the characters until a mismatch is found."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Different Ways to Add Parentheses",
    "description": "Given a string of numbers and operators, you need to return all possible results from computing all the different possible ways to group numbers and operators using parentheses. The input string will be composed of digits and one of the operators: '+', '-', or '*'. You can assume that the input is always valid and that all operators will be followed by a number.",
    "topic": "Dynamic Programming",
    "subtopic": "Recursion",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Backtracking"
    ],
    "input_format": "A string expression containing non-negative integers and operators.",
    "output_format": "A list of integers representing all possible results.",
    "constraints": [
      "1 <= expression.length <= 20",
      "The expression will only contain digits and the operators: '+', '-', '*'."
    ],
    "examples": [
      {
        "input": "expression = \"2-1-1\"",
        "output": "[0, 2]",
        "explanation": "There are two ways to group the numbers and operators: (2-1)-1 = 0 and 2-(1-1) = 2."
      },
      {
        "input": "expression = \"2*3-4*5\"",
        "output": "[-34, -14, -10, -10, 6]",
        "explanation": "The possible results from all different groupings are: [(2*3)-(4*5)] = -34, [(2*(3-4))*5] = -14, etc."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using recursion to evaluate different possible groupings.",
      "Think about how to split the expression by operators and evaluate each part."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock II",
    "description": "You are given an array where the ith element is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. However, you are allowed to make as many transactions as you like (i.e., buy one and sell one share of the stock multiple times). You need to write a function that computes the maximum profit you can achieve. Note that you cannot engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices representing the stock prices on different days.",
    "output_format": "An integer representing the maximum profit you can achieve.",
    "constraints": [
      "1 <= prices.length <= 3 * 10^4",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "7",
        "explanation": "Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5 - 1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6 - 3 = 3. Total profit = 4 + 3 = 7."
      },
      {
        "input": "prices = [1, 2, 3, 4, 5]",
        "output": "4",
        "explanation": "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5 - 1 = 4."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "No transactions are done, profit = 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Look for local minima and maxima in the prices to decide buy and sell points.",
      "Consider the difference between consecutive days and sum up the positive differences."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Walls and Gates",
    "description": "You are given a grid represented as a 2D array where each cell can contain either an integer representing a wall (represented by -1), a gate (represented by 0), or an empty room (represented by INF, which is represented by 2147483647 or a very large number). Your task is to fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, the cell should remain as INF.",
    "topic": "Graph",
    "subtopic": "BFS",
    "tags": [
      "Graph",
      "BFS",
      "Matrix"
    ],
    "input_format": "A 2D grid represented by a list of lists, where each element is an integer.",
    "output_format": "The same 2D grid with empty rooms filled with the distance to the nearest gate.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 250",
      "grid[i][j] is either -1, 0, or 2147483647"
    ],
    "examples": [
      {
        "input": "grid = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]",
        "output": "[[3,-1,0,1],[2,1,2,-1],[1,-1,3,-1],[0,-1,4,5]]",
        "explanation": "The distances to the nearest gates are filled in the empty rooms."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use BFS starting from all gates at once to propagate the distances.",
      "Track the current distance as you explore the grid.",
      "Use a queue to manage the cells being processed."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Reverse Words in a String III",
    "description": "Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Reverse"
    ],
    "input_format": "A single string s containing words separated by spaces.",
    "output_format": "A single string with the words in reversed order.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of printable ASCII characters and spaces."
    ],
    "examples": [
      {
        "input": "Let's take LeetCode contest",
        "output": "s'teL ekat edoCteeL tsetnoc",
        "explanation": "Each word is reversed, while the original order of the words is maintained."
      },
      {
        "input": "Hello World",
        "output": "olleH dlroW",
        "explanation": "The words 'Hello' and 'World' are reversed individually."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider splitting the string into words.",
      "You can reverse each word using character manipulation."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Flatten Binary Tree to Linked List",
    "description": "Given a binary tree, flatten it to a linked list in-place. The linked list should be in the same order as a preorder traversal of the binary tree. This means that each node in the linked list should point to the next node as a right child, and all left children should be null.",
    "topic": "Tree",
    "subtopic": "Tree Traversal",
    "tags": [
      "Binary Tree",
      "Linked List",
      "Preorder Traversal"
    ],
    "input_format": "The root of a binary tree.",
    "output_format": "The root of the flattened binary tree.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 2000].",
      "-100 <= TreeNode.val <= 100"
    ],
    "examples": [
      {
        "input": "root = [1,2,5,3,4,null,6]",
        "output": "[1,null,2,null,3,null,4,null,5,null,6]",
        "explanation": "The tree is flattened to a linked list like this: 1 -> 2 -> 3 -> 4 -> 5 -> 6."
      },
      {
        "input": "root = []",
        "output": "[]",
        "explanation": "An empty tree is still an empty linked list."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to handle the left and right subtrees separately.",
      "You may need to use a stack to facilitate the preorder traversal."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "N-Queens",
    "description": "The N-Queens puzzle is the problem of placing N chess queens on an N\u00d7N chessboard such that no two queens threaten each other. Thus, a solution requires that no two queens share the same row, column, or diagonal. Given an integer N, return all distinct solutions to the N-Queens puzzle. Each solution should be represented as a list of strings, where 'Q' and '.' both indicate a queen and an empty space, respectively. For example, a solution for N = 4 could be represented as:\n[\n  \".Q..\",\n  \"...Q\",\n  \"Q...\",\n  \"..Q.\"\n]",
    "topic": "Backtracking",
    "subtopic": "Combinatorial",
    "tags": [
      "Backtracking",
      "Recursion",
      "Chess"
    ],
    "input_format": "An integer N representing the size of the chessboard.",
    "output_format": "A list of lists containing solutions in the specified string format.",
    "constraints": [
      "1 <= N <= 10"
    ],
    "examples": [
      {
        "input": "N = 4",
        "output": "[[\".Q..\", \"...Q\", \"Q...\", \"..Q.\"], [\"..Q.\", \"Q...\", \"...Q\", \".Q..\"]]",
        "explanation": "There are two distinct solutions for the 4-Queens problem. The first uses the first queen in the first row and the second in the last row, while the second uses the last row for the first queen and the first row for the second."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Try placing queens row by row.",
      "Use a backtracking approach to explore all possible placements."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Minimum Path Sum",
    "description": "You are given a grid of non-negative integers representing the cost of moving from one cell to another. Your task is to find the path from the top-left cell to the bottom-right cell which minimizes the sum of the costs along the path. You can only move either down or right at any point in time.",
    "topic": "Dynamic Programming",
    "subtopic": "Grid Paths",
    "tags": [
      "Dynamic Programming",
      "Grid",
      "Pathfinding"
    ],
    "input_format": "A 2D array of non-negative integers grid where grid[i][j] represents the cost of moving to that cell.",
    "output_format": "An integer representing the minimum path sum from the top-left corner to the bottom-right corner.",
    "constraints": [
      "1 <= grid.length <= 200",
      "1 <= grid[i].length <= 200",
      "0 <= grid[i][j] <= 100"
    ],
    "examples": [
      {
        "input": "grid = [[1,3,1],[1,5,1],[4,2,1]]",
        "output": "7",
        "explanation": "The path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 has the minimum sum = 7."
      },
      {
        "input": "grid = [[1,2,3],[4,5,6]]",
        "output": "12",
        "explanation": "The path 1 \u2192 2 \u2192 3 \u2192 6 has the minimum sum = 12."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider storing intermediate results to avoid recomputing them.",
      "Start from the bottom-right corner and move towards the top-left."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Predict the Winner",
    "description": "You are given an array of integers representing points scored by two players, Player A and Player B. The players take turns taking points from either end of the array. The player who takes the maximum sum of points wins. Your task is to determine if Player A can win given they play optimally. Return true if Player A can win, otherwise return false.",
    "topic": "Dynamic Programming",
    "subtopic": "Minimax Algorithm",
    "tags": [
      "Dynamic Programming",
      "Minimax",
      "Game Theory"
    ],
    "input_format": "An array of integers 'points' representing the points scored by both players.",
    "output_format": "A boolean value indicating whether Player A can win.",
    "constraints": [
      "1 <= points.length <= 20",
      "0 <= points[i] <= 1000"
    ],
    "examples": [
      {
        "input": "points = [1, 5, 2]",
        "output": "false",
        "explanation": "Player A can take 1 or 2, leading Player B to always have a higher score."
      },
      {
        "input": "points = [1, 5, 233, 7]",
        "output": "true",
        "explanation": "Player A can take 1 or 7, leading to a situation where Player A can always win."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to store results of subproblems.",
      "Think about the game's strategy: what choices lead to Player A's win?"
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Triangle",
    "description": "Given an array of integers representing the lengths of sticks, determine if they can form a triangle. A triangle can be formed if the sum of the lengths of any two sides is greater than the length of the third side. Return true if a triangle can be formed, otherwise return false.",
    "topic": "Geometry",
    "subtopic": "Triangle Inequality Theorem",
    "tags": [
      "Geometry",
      "Triangle",
      "Inequality"
    ],
    "input_format": "An array of integers, sticks, representing the lengths of the sticks.",
    "output_format": "A boolean value: true if the lengths can form a triangle, false otherwise.",
    "constraints": [
      "3 <= sticks.length <= 10^4",
      "1 <= sticks[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "sticks = [3, 4, 5]",
        "output": "true",
        "explanation": "The lengths satisfy the triangle inequality: 3 + 4 > 5, 3 + 5 > 4, and 4 + 5 > 3."
      },
      {
        "input": "sticks = [1, 2, 3]",
        "output": "false",
        "explanation": "The lengths do not satisfy the triangle inequality: 1 + 2 is not greater than 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Check pairs of sides to ensure they satisfy the triangle inequality condition."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Reverse Words in a String",
    "description": "Given an input string, you need to reverse the order of the words. A word is defined as a sequence of non-space characters. The words in the output should be separated by a single space. You need to remove any leading or trailing spaces in the output.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Reversal"
    ],
    "input_format": "A single line string s that may contain leading or trailing spaces and multiple spaces between words.",
    "output_format": "A string representing the input words in reverse order, separated by a single space.",
    "constraints": [
      "0 <= s.length <= 10^4",
      "s consists of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = '  Hello World  '",
        "output": "'World Hello'",
        "explanation": "The input string has leading and trailing spaces. The words 'Hello' and 'World' are reversed."
      },
      {
        "input": "s = 'the sky is blue'",
        "output": "'blue is sky the'",
        "explanation": "The words in the input string are reversed and joined with a single space."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use split() to divide the string into words.",
      "Use reverse() to reverse the list of words.",
      "Join the reversed list using join() with a space."
    ],
    "company": "Salesforce"
  },
  {
    "question_id": "",
    "title": "Majority Element",
    "description": "Given an array of size n, find the majority element. The majority element is the element that appears more than n/2 times in the array. You may assume that the majority element always exists in the array.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Voting Algorithm"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the majority element.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 3]",
        "output": "3",
        "explanation": "The majority element is 3, which appears 2 times in the array, more than 3/2."
      },
      {
        "input": "nums = [2, 2, 1, 1, 1, 2, 2]",
        "output": "2",
        "explanation": "The majority element is 2, which appears 4 times in the array, more than 7/2."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Think about what a majority means and how to identify it effectively.",
      "Consider using a hash map to count occurrences."
    ],
    "company": "Salesforce"
  }
]