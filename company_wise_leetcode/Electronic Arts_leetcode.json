[
  {
    "question_id": "",
    "title": "Wiggle Subsequence",
    "description": "A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. Given an integer array nums, return the length of the longest wiggle subsequence. A subsequence is derived from another sequence by deleting some or no elements without changing the order of the remaining elements.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Subsequence"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest wiggle subsequence.",
    "constraints": [
      "1 <= nums.length <= 1000",
      "-1000 <= nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [1, 7, 4, 9, 2, 5]",
        "output": "6",
        "explanation": "The entire array forms a wiggle sequence: 1 -> 7 -> 4 -> 9 -> 2 -> 5."
      },
      {
        "input": "nums = [1, 17, 5, 10, 13, 15]",
        "output": "7",
        "explanation": "The longest wiggle subsequence is 1 -> 17 -> 10 -> 13 -> 15."
      },
      {
        "input": "nums = [1, 2, 3, 4, 5]",
        "output": "2",
        "explanation": "A wiggle subsequence can only be [1, 5] or [1, 2]. Both have a length of 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Maintain two variables to track the length of the sequence with a positive and a negative difference.",
      "Iterate through the array and compare the current and previous elements."
    ],
    "company": "Electronic Arts"
  },
  {
    "question_id": "",
    "title": "Relative Ranks",
    "description": "Given an array of scores representing the scores of various participants, return an array of their rankings with the appropriate rank designation: 'Gold Medal' for the highest score, 'Silver Medal' for the second highest, 'Bronze Medal' for the third highest, and 'Participant' for all other scores.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Ranking"
    ],
    "input_format": "An array of integers scores representing the scores of participants.",
    "output_format": "An array of strings representing the ranks of each participant.",
    "constraints": [
      "1 <= scores.length <= 10^4",
      "0 <= scores[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "scores = [5, 3, 8, 6, 2]",
        "output": "[\"Gold Medal\", \"Bronze Medal\", \"Silver Medal\", \"4th\", \"5th\"]",
        "explanation": "The scores in descending order are [8, 6, 5, 3, 2]. Participant with the highest score (8) gets 'Gold Medal', the second highest (6) gets 'Silver Medal', the third highest (5) gets 'Bronze Medal', and the rest are ranked as '4th' and '5th'."
      },
      {
        "input": "scores = [10, 20, 30]",
        "output": "[\"Bronze Medal\", \"Silver Medal\", \"Gold Medal\"]",
        "explanation": "The scores in descending order are [30, 20, 10]. The participant with the highest score (30) gets 'Gold Medal', second highest (20) gets 'Silver Medal', and the third highest (10) gets 'Bronze Medal'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Sort the scores while keeping track of their original indices.",
      "Use a ranking system based on the sorted array."
    ],
    "company": "Electronic Arts"
  },
  {
    "question_id": "",
    "title": "Is Subsequence",
    "description": "Given two strings s and t, return true if s is a subsequence of t, or false otherwise. A string s is a subsequence of string t if you can remove some characters from t (possibly none) so that the remaining characters in t are in the same order as the characters in s.",
    "topic": "String",
    "subtopic": "Subsequence",
    "tags": [
      "String",
      "Two Pointers",
      "Subsequence"
    ],
    "input_format": "Two strings s and t, where 0 <= s.length <= 100 and 0 <= t.length <= 10^4.",
    "output_format": "A boolean value; return true if s is a subsequence of t, otherwise return false.",
    "constraints": [
      "0 <= s.length <= 100",
      "0 <= t.length <= 10^4"
    ],
    "examples": [
      {
        "input": "s = \"abc\", t = \"ahbgdc\"",
        "output": "true",
        "explanation": "The characters a, b, c can be found in t in the same order, hence s is a subsequence of t."
      },
      {
        "input": "s = \"axc\", t = \"ahbgdc\"",
        "output": "false",
        "explanation": "Although a and c can be found in t, the character x cannot be matched, hence s is not a subsequence of t."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to traverse both strings.",
      "If characters match, move both pointers forward."
    ],
    "company": "Electronic Arts"
  }
]