[
  {
    "question_id": "",
    "title": "Reward Top K Students",
    "description": "You are given a list of student scores and an integer k. Your task is to find the top k students with the highest scores. Each student's score is associated with their name. If multiple students have the same score, they should be ordered by their names in lexicographical order. Return a list of the top k students.",
    "topic": "Sorting",
    "subtopic": "Top K Elements",
    "tags": [
      "Sorting",
      "Heap",
      "Top K"
    ],
    "input_format": "A list of student objects, each containing a name (string) and a score (integer), followed by an integer k.",
    "output_format": "A list of strings representing the names of the top k students, ordered by score and then by name.",
    "constraints": [
      "1 <= scores.length <= 1000",
      "0 <= scores[i].score <= 10000",
      "1 <= k <= scores.length",
      "1 <= len(scores[i].name) <= 100"
    ],
    "examples": [
      {
        "input": "[{'name': 'Alice', 'score': 90}, {'name': 'Bob', 'score': 85}, {'name': 'Charlie', 'score': 90}, {'name': 'David', 'score': 80}], 2",
        "output": "['Alice', 'Charlie']",
        "explanation": "Alice and Charlie have the highest scores of 90, so they are the top 2 students."
      },
      {
        "input": "[{'name': 'Eve', 'score': 95}, {'name': 'Frank', 'score': 95}, {'name': 'Grace', 'score': 80}], 1",
        "output": "['Eve']",
        "explanation": "Both Eve and Frank have the same score, but Eve comes first lexicographically."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a data structure that allows you to maintain a sorted list of students.",
      "Using a min-heap can help efficiently retrieve the top k elements."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Delete Duplicate Folders in System",
    "description": "You are given a list of folder paths in a file system. Each path is a string that represents the tree structure of folders, with subfolders nested within their parent folders. Your task is to delete duplicate folders, keeping only one instance of each unique folder structure. A folder is considered a duplicate if its contents, including all its subfolders, are the same as another folder. After processing, return a list of paths without duplicates, sorted in lexicographical order.",
    "topic": "Tree",
    "subtopic": "Folder Structure",
    "tags": [
      "Tree",
      "Recursion",
      "String Manipulation"
    ],
    "input_format": "A list of strings representing folder paths.",
    "output_format": "A list of strings representing the unique folder paths, sorted in lexicographical order.",
    "constraints": [
      "1 <= folder.length <= 10^4",
      "Each folder path is a valid string representing a folder structure."
    ],
    "examples": [
      {
        "input": "folder = ['/a', '/a/b', '/a/b/c', '/a/b/c/d', '/a/b/c', '/a/b/c/d']",
        "output": "['/a', '/a/b', '/a/b/c', '/a/b/c/d']",
        "explanation": "The folder structure is repeated. The unique folder paths are '/a', '/a/b', '/a/b/c', and '/a/b/c/d'."
      },
      {
        "input": "folder = ['/a', '/a/b', '/c', '/c/d']",
        "output": "['/a', '/a/b', '/c', '/c/d']",
        "explanation": "All provided folder paths are unique, so they are returned as they are."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a hash map to store folder structures.",
      "Use recursion to traverse and compare folder contents."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Sliding Window Maximum",
    "description": "Given an integer array nums and an integer k, return the maximum sliding window for each contiguous subarray of size k. The sliding window moves from the far left to the far right of the array, and at each position, it returns the maximum value of that window.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Maximum"
    ],
    "input_format": "An array of integers nums and an integer k (1 <= k <= nums.length).",
    "output_format": "An array of integers representing the maximum values of each sliding window of size k.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [1,3,-1,-3,5,3,6,7], k = 3",
        "output": "[3,3,5,5,6,7]",
        "explanation": "Sliding windows are [1,3,-1], [3,-1,-3], [-1,3,5], [3,5,3], [5,3,6], [3,6,7]. Maximums are 3, 3, 5, 5, 6, 7."
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]",
        "explanation": "Only one element exists, so the maximum is itself."
      },
      {
        "input": "nums = [1,-1], k = 1",
        "output": "[1,-1]",
        "explanation": "Sliding windows are [1], [-1]. Maximums are 1, -1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a deque to store the indices of useful elements.",
      "The double-ended queue can help maintain the maximum in the current window.",
      "Make sure to remove indices that are out of the bounds of the sliding window."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Coloring A Border",
    "description": "You are given a 2D grid representing a matrix of integers. Each integer represents a color. You also have a starting cell (r, c) in the grid and a target color. Your task is to change the color of the cells that are connected to the starting cell to the target color, but only if they share the same initial color as the starting cell. Additionally, you need to color the border cells of this shape with a distinct border color. Return the modified grid after coloring.",
    "topic": "Matrix",
    "subtopic": "Depth-First Search",
    "tags": [
      "Matrix",
      "DFS",
      "Coloring"
    ],
    "input_format": "A 2D list grid representing the matrix and integers r, c indicating the starting cell coordinates, and an integer targetColor for the new color.",
    "output_format": "Return a 2D list representing the modified grid after coloring.",
    "constraints": [
      "1 <= grid.length, grid[0].length <= 50",
      "0 <= grid[i][j] <= 100",
      "0 <= r < grid.length",
      "0 <= c < grid[0].length",
      "0 <= targetColor <= 100"
    ],
    "examples": [
      {
        "input": "grid = [[1,1,1],[1,1,0],[1,0,1]], r = 1, c = 1, targetColor = 2",
        "output": "[[2,2,2],[2,2,0],[2,0,1]]",
        "explanation": "After coloring, the shape connected to (1,1) is filled with color 2. The border of the shape is also distinctly colored."
      },
      {
        "input": "grid = [[0,0,0],[0,0,0]], r = 0, c = 0, targetColor = 1",
        "output": "[[1,1,1],[1,1,1]]",
        "explanation": "All the connected cells share the same initial color and thus they are all colored with the target color."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use Depth-First Search (DFS) to explore connected cells.",
      "Keep track of visited cells to avoid coloring the same cell multiple times.",
      "Ensure that the border is distinctly colored."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Two Out of Three",
    "description": "You are given three integer arrays, arr1, arr2, and arr3. Your task is to return a list of integers that appear in at least two out of the three arrays. The integers in the resulting list should be unique and sorted in ascending order.",
    "topic": "Array",
    "subtopic": "Set Operations",
    "tags": [
      "Array",
      "Set",
      "Sorting"
    ],
    "input_format": "Three arrays of integers, arr1, arr2, arr3.",
    "output_format": "A list of integers that appear in at least two of the three arrays, sorted in ascending order.",
    "constraints": [
      "1 <= arr1.length, arr2.length, arr3.length <= 100",
      "-100 <= arr1[i], arr2[i], arr3[i] <= 100"
    ],
    "examples": [
      {
        "input": "arr1 = [1, 2, 3], arr2 = [2, 3, 4], arr3 = [3, 4, 5]",
        "output": "[2, 3]",
        "explanation": "The integers that appear in at least two arrays are 2 and 3."
      },
      {
        "input": "arr1 = [1, 1, 2], arr2 = [2, 3], arr3 = [4]",
        "output": "[2]",
        "explanation": "Only the integer 2 appears in two arrays."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use sets to keep track of the numbers.",
      "Count the occurrences of each number across the three arrays."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "K Highest Ranked Items Within a Price Range",
    "description": "You are given a list of items, each with a name, rank, and price. Your task is to find the top K highest ranked items that fall within a specified price range [low, high]. If multiple items have the same rank, return them in the order they appear in the input list. If less than K items are found, return all of them sorted by rank in descending order.",
    "topic": "Sorting",
    "subtopic": "Ranking and Filtering",
    "tags": [
      "Sorting",
      "Greedy",
      "Priority Queue"
    ],
    "input_format": "A list of items, where each item is a tuple of (name: str, rank: int, price: int), and two integers low and high representing the price range, and K indicating the number of top items to return.",
    "output_format": "A list of item names representing the top K highest ranked items within the price range.",
    "constraints": [
      "1 <= items.length <= 1000",
      "1 <= K <= 100",
      "1 <= price <= 10^5",
      "0 <= rank <= 10^5"
    ],
    "examples": [
      {
        "input": "items = [('apple', 5, 50), ('banana', 7, 30), ('pear', 5, 20), ('grape', 6, 60)], low = 20, high = 50, K = 2",
        "output": "['banana', 'pear']",
        "explanation": "Items within the range [20, 50]: [('banana', 7, 30), ('pear', 5, 20), ('apple', 5, 50)]. The highest ranked two are ['banana', 'pear']."
      },
      {
        "input": "items = [('apple', 1, 20), ('banana', 1, 10)], low = 15, high = 25, K = 1",
        "output": "['apple']",
        "explanation": "The only item within the range [15, 25] is 'apple'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Filter items based on the price range first.",
      "Use a sorting method to rank the items after filtering."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Order Two Columns Independently",
    "description": "You are given a 2D array of integers where each row contains two columns. Your task is to rearrange the values in each column independently, while keeping the original row structure intact. After sorting, return the new array. The first column should be sorted in ascending order, and the second column should be sorted in descending order.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "2D Array"
    ],
    "input_format": "A 2D array of integers where each row contains exactly two integers.",
    "output_format": "A 2D array of integers sorted as described above.",
    "constraints": [
      "1 <= rows <= 10^4",
      "1 <= cols <= 2",
      "-10^5 <= array[i][j] <= 10^5"
    ],
    "examples": [
      {
        "input": "[[3, 5], [1, 2], [4, 8]]",
        "output": "[[1, 8], [3, 5], [4, 2]]",
        "explanation": "The first column sorted in ascending order: [1, 3, 4]. The second column sorted in descending order: [8, 5, 2]."
      },
      {
        "input": "[[10, 25], [7, 14], [15, 5]]",
        "output": "[[7, 25], [10, 14], [15, 5]]",
        "explanation": "The first column sorted in ascending order: [7, 10, 15]. The second column sorted in descending order: [25, 14, 5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using separate arrays to hold the values of each column.",
      "Use built-in sorting functions for efficient sorting."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Reconstruct Itinerary",
    "description": "Given a list of airline tickets represented by pairs of departure and arrival airports, reconstruct the itinerary in order. All tickets belong to a single traveler and they must be used exactly once. The itinerary must start at a specific airport and must visit the airports in such a way that it uses all the tickets exactly once and is lexicographically smallest if there are multiple possible itineraries.",
    "topic": "Graph",
    "subtopic": "Depth First Search",
    "tags": [
      "Graph",
      "DFS",
      "Backtracking"
    ],
    "input_format": "A list of strings representing tickets, where each ticket is a string formatted as 'from->to'.",
    "output_format": "A list of strings representing the ordered itinerary.",
    "constraints": [
      "1 <= tickets.length <= 3000",
      "The format of each ticket is guaranteed to be valid."
    ],
    "examples": [
      {
        "input": "tickets = [['MUC', 'LHR'], ['JFK', 'MUC'], ['SFO', 'SJC'], ['LHR', 'JFK']]",
        "output": "['JFK', 'MUC', 'LHR', 'JFK', 'SFO', 'SJC']",
        "explanation": "The lexicographically smallest itinerary that visits all the airports is ['JFK', 'MUC', 'LHR', 'JFK', 'SFO', 'SJC']."
      },
      {
        "input": "tickets = [['JFK', 'SFO'], ['JFK', 'ATL'], ['SFO', 'ATL'], ['ATL', 'JFK']]",
        "output": "['JFK', 'ATL', 'JFK', 'SFO', 'ATL']",
        "explanation": "The itinerary must start from JFK and ensure all tickets are used exactly once."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a graph to represent the flights.",
      "Utilize a priority queue or sorting to maintain the lexicographic order while reconstructing the itinerary."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Maximal Square",
    "description": "Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.",
    "topic": "Dynamic Programming",
    "subtopic": "Matrix",
    "tags": [
      "Dynamic Programming",
      "Matrix",
      "Square"
    ],
    "input_format": "A 2D binary matrix represented as an array of strings.",
    "output_format": "An integer representing the area of the largest square containing only 1's.",
    "constraints": [
      "1 <= matrix.length <= 300",
      "1 <= matrix[i].length <= 300",
      "matrix[i][j] is '0' or '1'"
    ],
    "examples": [
      {
        "input": "matrix = [['1','0','1','0','0'], ['1','0','1','1','1'], ['1','1','1','1','1'], ['1','0','0','1','0']]",
        "output": "4",
        "explanation": "The largest square has a side length of 2, so the area is 2 * 2 = 4."
      },
      {
        "input": "matrix = [['0','0','0','0'], ['0','0','0','0']]",
        "output": "0",
        "explanation": "There are no 1's in the matrix, so the maximal square area is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a DP array to keep track of the square size ending at (i, j).",
      "The size of the square is determined by the minimum of the squares to the left, above, and diagonally up-left."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Integer to Roman",
    "description": "Given an integer, convert it to a Roman numeral representation. Roman numerals are represented by seven symbols: I, V, X, L, C, D, M. For example, the integer 3 is represented as 'III', and the integer 4 is represented as 'IV'. The goal is to convert the provided integer into its Roman equivalent.",
    "topic": "Mathematics",
    "subtopic": "Number Representation",
    "tags": [
      "Math",
      "String",
      "Conversion"
    ],
    "input_format": "An integer num (1 <= num <= 3999).",
    "output_format": "A string representing the Roman numeral equivalent of the integer.",
    "constraints": [
      "1 <= num <= 3999"
    ],
    "examples": [
      {
        "input": "num = 3",
        "output": "III",
        "explanation": "The integer 3 corresponds to the Roman numeral III."
      },
      {
        "input": "num = 4",
        "output": "IV",
        "explanation": "The integer 4 corresponds to the Roman numeral IV."
      },
      {
        "input": "num = 9",
        "output": "IX",
        "explanation": "The integer 9 corresponds to the Roman numeral IX."
      },
      {
        "input": "num = 58",
        "output": "LVIII",
        "explanation": "The integer 58 corresponds to the Roman numeral LVIII (L = 50, V = 5, III = 3)."
      },
      {
        "input": "num = 1994",
        "output": "MCMXCIV",
        "explanation": "The integer 1994 corresponds to the Roman numeral MCMXCIV (M = 1000, CM = 900, XC = 90, IV = 4)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the symbols and their values in descending order.",
      "Use a greedy algorithm to build the result."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Binary Tree Maximum Path Sum",
    "description": "Given a non-empty binary tree, return the maximum path sum. A path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root. The maximum path sum is the largest sum of values along any such path in the tree.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "DFS",
      "Dynamic Programming"
    ],
    "input_format": "The input consists of a binary tree represented by its root node.",
    "output_format": "An integer representing the maximum path sum.",
    "constraints": [
      "The number of nodes in the tree is in the range [1, 3 * 10^4].",
      "-10^4 <= Node.val <= 10^4"
    ],
    "examples": [
      {
        "input": "root = [-10, 9, 20, null, null, 15, 7]",
        "output": "42",
        "explanation": "The maximum path sum is 15 + 20 + 7 = 42."
      },
      {
        "input": "root = [1, 2, 3]",
        "output": "6",
        "explanation": "The maximum path sum is 1 + 2 + 3 = 6."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how to use depth-first search (DFS) to explore all paths.",
      "Keep track of the maximum sum found during the traversal of the tree."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Least Number of Unique Integers after K Removals",
    "description": "Given an array of integers, you need to remove exactly K integers from the array. The goal is to minimize the number of unique integers left in the array after the removals. Return the minimum number of unique integers that remain after performing the K removals.",
    "topic": "Array",
    "subtopic": "Frequency Count",
    "tags": [
      "Array",
      "HashMap",
      "Greedy"
    ],
    "input_format": "An integer array nums followed by an integer K, where nums[i] represents the integers in the array and K is the number of integers to remove.",
    "output_format": "An integer representing the minimum number of unique integers remaining in the array after K removals.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= K <= nums.length",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [5, 5, 4, 4, 3], K = 2",
        "output": "2",
        "explanation": "By removing two instances of '5', we can leave [4, 4, 3], which contains 2 unique integers."
      },
      {
        "input": "nums = [1, 2, 1, 2, 3], K = 2",
        "output": "1",
        "explanation": "Removing two '1's or two '2's will leave one type of integer (either [2, 2, 3] or [1, 1, 3])."
      },
      {
        "input": "nums = [1, 1, 1, 1], K = 3",
        "output": "1",
        "explanation": "Removing 3 '1's will leave only one '1' left."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a frequency map to count occurrences of each number.",
      "Sort the unique integers based on their frequencies.",
      "Removing the most frequent integers might help achieve the desired result."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Longest Increasing Subsequence",
    "description": "Given an integer array nums, return the length of the longest strictly increasing subsequence.",
    "topic": "Dynamic Programming",
    "subtopic": "Subsequence",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Subsequence"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest increasing subsequence.",
    "constraints": [
      "1 <= nums.length <= 2500",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [10, 9, 2, 5, 3, 7, 101, 18]",
        "output": "4",
        "explanation": "The longest increasing subsequence is [2, 3, 7, 101], with a length of 4."
      },
      {
        "input": "nums = [0, 1, 0, 3, 2, 3]",
        "output": "4",
        "explanation": "The longest increasing subsequence is [0, 1, 2, 3], with a length of 4."
      },
      {
        "input": "nums = [7, 7, 7, 7, 7, 7, 7]",
        "output": "1",
        "explanation": "The longest increasing subsequence is any single 7, with a length of 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try using dynamic programming.",
      "Consider using a binary search to optimize your approach."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Backspace String Compare",
    "description": "Given two strings, s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character. Note that after backspacing an empty text, the text will continue empty.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Backspace",
      "Two Pointers"
    ],
    "input_format": "Two strings s and t.",
    "output_format": "A boolean value indicating whether the two strings are equal after applying backspaces.",
    "constraints": [
      "1 <= s.length, t.length <= 200",
      "s and t consist of lowercase letters and '#' characters."
    ],
    "examples": [
      {
        "input": "s = \"ab#c\", t = \"ad#c\"",
        "output": "true",
        "explanation": "Both strings become 'ac' after processing backspaces."
      },
      {
        "input": "s = \"ab##\", t = \"c#d#\"",
        "output": "true",
        "explanation": "Both strings become empty after processing backspaces."
      },
      {
        "input": "s = \"a#c\", t = \"b\"",
        "output": "false",
        "explanation": "After processing, s becomes 'c' and t is 'b', thus they are not equal."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to traverse each string from the end.",
      "Count backspaces while comparing characters.",
      "Handle cases where the strings have unequal lengths."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Permutations",
    "description": "Given a collection of distinct integers, return all possible permutations. You can return the answer in any order. The order of the numbers in the permutations should remain the order in the input array.",
    "topic": "Backtracking",
    "subtopic": "Permutations",
    "tags": [
      "Backtracking",
      "Permutation",
      "Recursion"
    ],
    "input_format": "A list of distinct integers nums.",
    "output_format": "A list of all possible permutations of the input list.",
    "constraints": [
      "1 <= nums.length <= 6",
      "-10 <= nums[i] <= 10"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",
        "explanation": "All the permutations of the numbers 1, 2, and 3 are listed."
      },
      {
        "input": "nums = [0, 1]",
        "output": "[[0,1],[1,0]]",
        "explanation": "The two permutations are the two possible arrangements of 0 and 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using backtracking to build permutations.",
      "Track the used elements to avoid duplicates.",
      "Permutations can be built by swapping elements."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "DFS",
      "BFS",
      "Matrix"
    ],
    "input_format": "A 2D grid represented as a list of lists, where each sublist contains '1's or '0's.",
    "output_format": "An integer representing the number of islands.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [['1', '1', '0', '0', '0'], ['1', '1', '0', '0', '0'], ['0', '0', '1', '0', '0'], ['0', '0', '0', '1', '1']]",
        "output": "3",
        "explanation": "There are three islands: one with the first two rows, one isolated '1' in the third row, and one in the last row."
      },
      {
        "input": "grid = [['1', '1', '1', '1', '0'], ['0', '0', '0', '1', '0'], ['1', '1', '1', '0', '0']]",
        "output": "1",
        "explanation": "All the land is connected and forms a single island."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use Depth-First Search to explore the grid.",
      "Keep track of visited nodes to avoid counting the same island multiple times."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string consisting of just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Every opening bracket must have a corresponding closing bracket of the same type.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s containing only the characters '(', ')', '{', '}', '[' and ']'",
    "output_format": "A boolean value indicating whether the input string is valid.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = \"()\"",
        "output": "true",
        "explanation": "The string contains a pair of parentheses that are correctly matched."
      },
      {
        "input": "s = \"(]\"",
        "output": "false",
        "explanation": "The string contains mismatched parentheses."
      },
      {
        "input": "s = \"{[()]}\"",
        "output": "true",
        "explanation": "The string contains correctly matched pairs of different types of brackets."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Pop from the stack when you encounter a closing bracket."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for a Least Recently Used (LRU) cache. It should support the following operations: get and put.\n\n- get(key): Return the value of the key if the key exists, otherwise return -1.\n- put(key, value): Update or set the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Data Structure",
    "subtopic": "Caching",
    "tags": [
      "Cache",
      "Data Structure",
      "Design"
    ],
    "input_format": "Initialize the LRUCache with a positive capacity.\nThe put method takes two parameters, key (int) and value (int).\nThe get method takes one parameter, key (int).",
    "output_format": "Output for the get method will be an integer representing the value associated with the key or -1 if the key does not exist.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10^4",
      "-10^5 <= value <= 10^5",
      "At most 2 * 10^5 calls will be made to get and put."
    ],
    "examples": [
      {
        "input": "LRUCache lruCache = new LRUCache(2);\nlruCache.put(1, 1);\nlruCache.put(2, 2);\nlruCache.get(1);",
        "output": "1",
        "explanation": "The cache is {1=1, 2=2}. The value for key 1 is 1."
      },
      {
        "input": "lruCache.put(3, 3);\nlruCache.get(2);",
        "output": "-1",
        "explanation": "Since the cache reached its capacity, 2 was evicted. Key 2 does not exist."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to store keys and their corresponding node in a doubly linked list.",
      "You can maintain the order of access using a doubly linked list."
    ],
    "company": "Booking.com"
  },
  {
    "question_id": "",
    "title": "Roman to Integer",
    "description": "Given a string representing a Roman numeral, convert it to an integer. The Roman numerals are represented by the following characters: 'I', 'V', 'X', 'L', 'C', 'D', and 'M', each corresponding to a specific value. The rules of Roman numerals dictate that some numerals can be subtracted if they precede a higher value numeral.",
    "topic": "String",
    "subtopic": "Parsing",
    "tags": [
      "String",
      "Parsing",
      "Conversion"
    ],
    "input_format": "A string s representing the Roman numeral.",
    "output_format": "An integer representing the integer value of the Roman numeral.",
    "constraints": [
      "1 <= s.length <= 15",
      "s consists of valid Roman numeral characters."
    ],
    "examples": [
      {
        "input": "s = 'III'",
        "output": "3",
        "explanation": "The Roman numeral 'III' is equivalent to 1 + 1 + 1 = 3."
      },
      {
        "input": "s = 'IX'",
        "output": "9",
        "explanation": "The Roman numeral 'IX' is 10 - 1 = 9."
      },
      {
        "input": "s = 'LVIII'",
        "output": "58",
        "explanation": "The Roman numeral 'LVIII' is 50 + 5 + 1 + 1 + 1 = 58."
      },
      {
        "input": "s = 'MCMXCIV'",
        "output": "1994",
        "explanation": "The Roman numeral 'MCMXCIV' is 1000 + (1000 - 100) + (1000 - 10) + 5 - 1 = 1994."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how Roman numeral rules apply when one character is less than another."
    ],
    "company": "Booking.com"
  }
]