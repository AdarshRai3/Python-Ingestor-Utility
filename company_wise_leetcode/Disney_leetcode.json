[
  {
    "question_id": "",
    "title": "Ransom Note",
    "description": "Given two strings, `ransomNote` and `magazine`, return true if `ransomNote` can be constructed from the letters in `magazine`. Each letter in `magazine` can only be used once in `ransomNote`.",
    "topic": "String",
    "subtopic": "Frequency Count",
    "tags": [
      "String",
      "Hash Table",
      "Counting"
    ],
    "input_format": "Two strings, `ransomNote` and `magazine`, where 1 <= ransomNote.length, magazine.length <= 10^5.",
    "output_format": "A boolean indicating whether `ransomNote` can be constructed from `magazine`.",
    "constraints": [
      "1 <= ransomNote.length, magazine.length <= 10^5",
      "The input strings consist of lowercase English letters.",
      "The input strings are non-empty."
    ],
    "examples": [
      {
        "input": "ransomNote = 'a', magazine = 'b'",
        "output": "false",
        "explanation": "'a' cannot be constructed from 'b'."
      },
      {
        "input": "ransomNote = 'aa', magazine = 'ab'",
        "output": "false",
        "explanation": "'aa' cannot be constructed from 'ab', because 'b' can only be used once."
      },
      {
        "input": "ransomNote = 'aa', magazine = 'aab'",
        "output": "true",
        "explanation": "'aa' can be constructed from 'aab' by using both 'a's in 'aab'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the frequency of each character in the magazine.",
      "Check if each character in ransomNote can be satisfied by the characters in magazine."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. For example, if you have intervals [1,3], [2,6], and [8,10], the merged intervals would be [1,6] and [8,10]. The intervals are represented as arrays of integers where each array contains two integers representing the start and end of the interval.",
    "topic": "Array",
    "subtopic": "Sorting and Merging",
    "tags": [
      "Array",
      "Sorting",
      "Interval"
    ],
    "input_format": "A list of intervals, where each interval is represented as an array of two integers [start, end].",
    "output_format": "A list of merged intervals in the same format.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "The intervals [1,3] and [2,6] overlap, so they merge to form [1,6]. The other intervals do not overlap."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] touch at point 4, so they merge to form [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals by their starting points before merging.",
      "Use a list to keep track of the merged intervals."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for Least Recently Used (LRU) Cache. It should support the following operations: get and put.\n\n- `get(key)` - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.\n- `put(key, value)` - Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.\n\nThe cache should be initialized with a positive capacity.",
    "topic": "Data Structures",
    "subtopic": "Cache",
    "tags": [
      "Design",
      "Cache",
      "Linked List",
      "Hash Map"
    ],
    "input_format": "The constructor of the LRUCache class will take an integer 'capacity' as an input parameter. The `get` method will take an integer 'key', and the `put` method will take an integer 'key' and 'value'.",
    "output_format": "For the `get` method, return the value associated with the key, or -1 if the key does not exist. For the `put` method, there is no return value.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10000",
      "0 <= value <= 10000",
      "At most 1000 calls will be made to get and put"
    ],
    "examples": [
      {
        "input": [
          "LRUCache",
          "put",
          "put",
          "get",
          "put",
          "get",
          "put",
          "get",
          "get"
        ],
        "output": [
          null,
          null,
          null,
          1,
          null,
          -1,
          null,
          3,
          4
        ],
        "explanation": "LRUCache is initialized with capacity 2.\nput(1, 1) caches key 1 with value 1. \nput(2, 2) caches key 2 with value 2. \nget(1) returns 1.\nput(3, 3) evicts key 2 as it is the least recently used.\nget(2) returns -1 (not found). \nput(4, 4) evicts key 1 and saves key 4.\nget(1) returns -1 (not found). \nget(3) returns 3.\nget(4) returns 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to store key-value pairs for O(1) access.",
      "Keep track of the order of usage to identify the least recently used item."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Max Area of Island",
    "description": "You are given a 2D grid of 0s and 1s, where 0 represents water and 1 represents land. An island is defined as a group of connected 1s (horizontal or vertical connections). Your task is to write a function that returns the maximum area of an island in the given grid. If there is no island, return 0.",
    "topic": "Depth-First Search",
    "subtopic": "Graph Traversal",
    "tags": [
      "DFS",
      "Graph",
      "Matrix"
    ],
    "input_format": "A 2D grid represented as a list of lists containing integers (0s and 1s).",
    "output_format": "An integer representing the maximum area of an island.",
    "constraints": [
      "1 <= grid.length <= 50",
      "1 <= grid[0].length <= 50",
      "grid[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "grid = [[0,0,0,0,0],[0,1,1,0,0],[0,1,0,0,1],[0,0,1,1,1]]",
        "output": "5",
        "explanation": "The largest island consists of 5 cells that are connected."
      },
      {
        "input": "grid = [[0,0,0],[0,0,0],[0,0,0]]",
        "output": "0",
        "explanation": "There are no islands in this grid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth-First Search (DFS) to explore the grid.",
      "Track visited cells to avoid counting them multiple times."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Remove All Adjacent Duplicates in String II",
    "description": "Given a string s, you need to remove all adjacent duplicates in the string which are exactly 2 duplicates. For example, for the string 'deeedbbcccbdaa', you will remove the 'ee' (as it is adjacent duplicates), resulting in 'ddbbbda' and then you will remove another set of adjacent duplicates 'bbb', resulting in 'dda'. You need to repeat this process until no more adjacent duplicates exist and return the final modified string.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Stack",
      "Two Pointers"
    ],
    "input_format": "A string s, consisting of lowercase English letters.",
    "output_format": "A string representing the final output after removing all adjacent duplicates.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'deeedbbcccbdaa'",
        "output": "d",
        "explanation": "The final string after removing all adjacent duplicates is 'd'."
      },
      {
        "input": "s = 'pbbcggttciiippooaais'",
        "output": "ps",
        "explanation": "The final string after removing all adjacent duplicates is 'ps'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to efficiently manage the characters.",
      "Keep track of the count of consecutive characters."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Every opening bracket must have a corresponding closing bracket of the same type.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Balanced Parentheses"
    ],
    "input_format": "A string s consisting of parentheses.",
    "output_format": "A boolean value indicating whether the string is valid.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The string contains a valid pair of parentheses."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "The string contains a valid combination of different types of brackets."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The string contains mismatched brackets."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The order of closing brackets is incorrect."
      },
      {
        "input": "s = '{[]}'",
        "output": "true",
        "explanation": "The string contains valid nested pairs of brackets."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "For each closing bracket, check if it matches the top of the stack.",
      "An empty stack at the end indicates valid parentheses."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Search in Rotated Sorted Array",
    "description": "Given a rotated sorted array 'nums' of unique elements and a target value 'target', write a function to search for 'target' in 'nums'. If 'target' exists, return its index. Otherwise, return -1. You must write an algorithm with O(log n) runtime complexity.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Searching"
    ],
    "input_format": "An integer array nums representing the rotated sorted array and an integer target.",
    "output_format": "An integer representing the index of target in nums if found, otherwise -1.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^4 <= nums[i] <= 10^4",
      "All elements of nums are unique.",
      "nums is rotated at some pivot."
    ],
    "examples": [
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 0",
        "output": "4",
        "explanation": "Target 0 is found at index 4."
      },
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 3",
        "output": "-1",
        "explanation": "Target 3 is not present in the array."
      },
      {
        "input": "nums = [1], target = 0",
        "output": "-1",
        "explanation": "The array contains one element that isn't the target."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the properties of a rotated sorted array.",
      "Use binary search, but account for the pivot."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Subarray Sum Equals K",
    "description": "Given an integer array nums and an integer k, return the total number of continuous subarrays whose sum equals to k.",
    "topic": "Array",
    "subtopic": "Prefix Sum",
    "tags": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "input_format": "An array of integers nums followed by an integer k.",
    "output_format": "An integer representing the total number of continuous subarrays whose sum equals k.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "-1000 <= nums[i] <= 1000",
      "-10^7 <= k <= 10^7"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 1], k = 2",
        "output": "2",
        "explanation": "The subarrays [1, 1] (from index 0 to 1) and [1, 1] (from index 1 to 2) both sum up to 2."
      },
      {
        "input": "nums = [1, 2, 3], k = 3",
        "output": "2",
        "explanation": "The subarrays [3] (from index 2 to 2) and [1, 2] (from index 0 to 1) both sum up to 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to store the cumulative sum.",
      "Consider using a prefix sum approach to optimize the search."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromic substrings, return any of them.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A string s of length n (1 <= n <= 1000).",
    "output_format": "A string representing the longest palindromic substring.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only digits and English letters."
    ],
    "examples": [
      {
        "input": "babad",
        "output": "bab",
        "explanation": "'bab' is a valid palindrome and is the longest one. 'aba' is also a valid answer."
      },
      {
        "input": "cbbd",
        "output": "bb",
        "explanation": "'bb' is the longest palindromic substring in 'cbbd'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around possible centers of the palindrome.",
      "A single character can be a center for odd-length palindromes.",
      "Two adjacent characters can be a center for even-length palindromes."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Hashing",
    "tags": [
      "String",
      "Hashing",
      "Sorting"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A list of lists of strings where each sublist contains strings that are anagrams of each other.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "0 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"eat\",\"tea\",\"ate\"],[\"tan\",\"nat\"],[\"bat\"]]",
        "explanation": "The strings 'eat', 'tea', and 'ate' are anagrams of each other, while 'tan' and 'nat' are also anagrams. 'bat' has no anagrams."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "A single empty string is an anagram of itself."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "A single letter 'a' is an anagram of itself."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort each string and use the sorted string as a key.",
      "You can use a hash map to group the anagrams.",
      "Consider using a list to collect the grouped anagrams."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Longest Common Prefix",
    "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \"\".",
    "topic": "String",
    "subtopic": "Prefix",
    "tags": [
      "String",
      "Prefix",
      "Array"
    ],
    "input_format": "An array of strings strs where 0 <= strs.length <= 200, and 0 <= strs[i].length <= 200.",
    "output_format": "A string representing the longest common prefix.",
    "constraints": [
      "0 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "All strings in strs are in lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"flower\", \"flow\", \"flight\"]",
        "output": "\"fl\"",
        "explanation": "The longest common prefix is \"fl\"."
      },
      {
        "input": "strs = [\"dog\", \"racecar\", \"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the strings."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider the first string as a potential prefix and check against the others.",
      "Iterate through the characters of the strings to compare."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Reverse Linked List II",
    "description": "Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.",
    "topic": "Linked List",
    "subtopic": "Reversing Linked List",
    "tags": [
      "Linked List",
      "Reversing",
      "In-place"
    ],
    "input_format": "The first input is the head of a singly linked list, the second and third inputs are integers left and right.",
    "output_format": "The head of the modified linked list after reversing the specified segment.",
    "constraints": [
      "1 <= left <= right <= the length of the linked list.",
      "The number of nodes in the list is within the range [1, 500]."
    ],
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5], left = 2, right = 4",
        "output": "[1, 4, 3, 2, 5]",
        "explanation": "Reversing nodes from position 2 to 4 results in the list [1, 4, 3, 2, 5]."
      },
      {
        "input": "head = [5], left = 1, right = 1",
        "output": "[5]",
        "explanation": "No nodes to reverse, the list remains the same."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a dummy node to simplify edge cases.",
      "Keep track of the previous node at the position just before 'left'.",
      "Reverse the sublist in place and reconnect it to the main list."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "topic": "Dynamic Programming",
    "subtopic": "Fibonacci Sequence",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Fibonacci"
    ],
    "input_format": "An integer n representing the total number of steps.",
    "output_format": "An integer representing the number of distinct ways to climb to the top.",
    "constraints": [
      "1 <= n <= 45"
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "There are two ways to climb to the top: (1 step + 1 step) or (2 steps)."
      },
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "There are three ways to climb to the top: (1 step + 1 step + 1 step), (1 step + 2 steps), (2 steps + 1 step)."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider breaking the problem down into smaller subproblems."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Generate Parentheses",
    "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. A pair of parentheses is well-formed if every opening bracket has a corresponding closing bracket and they are correctly nested.",
    "topic": "Backtracking",
    "subtopic": "Combinatorial Generation",
    "tags": [
      "Backtracking",
      "Recursion",
      "String"
    ],
    "input_format": "An integer n representing the number of pairs of parentheses.",
    "output_format": "An array of strings representing all combinations of well-formed parentheses.",
    "constraints": [
      "1 <= n <= 8"
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[\"((()))\", \"(()())\", \"(())()\", \"()(())\", \"()()()\"]",
        "explanation": "For n = 3, the valid parentheses combinations are '((()))', '(()())', '(())()', '()(())', and '()()()'."
      },
      {
        "input": "n = 1",
        "output": "[\"()\"]",
        "explanation": "For n = 1, there is only one valid combination: '()'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a backtracking approach to explore all combinations.",
      "Keep track of the count of open and close parentheses used."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, write a function to determine if t is an anagram of s. An anagram is a word formed by rearranging the letters of a different word using all the original letters exactly once. For example, 'anagram' is an anagram of 'nagaram'.",
    "topic": "String",
    "subtopic": "Sorting",
    "tags": [
      "String",
      "Sorting",
      "Anagram"
    ],
    "input_format": "Two strings s and t.",
    "output_format": "A boolean value, true if t is an anagram of s, false otherwise.",
    "constraints": [
      "1 <= s.length, t.length <= 5 * 10^4",
      "s and t consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'anagram', t = 'nagaram'",
        "output": "true",
        "explanation": "'nagaram' is an anagram of 'anagram'."
      },
      {
        "input": "s = 'rat', t = 'car'",
        "output": "false",
        "explanation": "'car' is not an anagram of 'rat'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the letters in both strings and compare the counts.",
      "Sorting both strings can help determine if they are anagrams."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Egg Drop With 2 Eggs and N Floors",
    "description": "You are given two identical eggs and you want to find the highest floor from which you can drop an egg without breaking it. The building has N floors, and you need to determine the minimum number of drops required to find this critical floor in the worst case. Assume that the eggs break when dropped from the critical floor or any floor above it, and do not break when dropped from any floor below it.",
    "topic": "Dynamic Programming",
    "subtopic": "Optimization",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Binary Search"
    ],
    "input_format": "An integer N representing the number of floors in the building.",
    "output_format": "An integer representing the minimum number of egg drops required in the worst case.",
    "constraints": [
      "1 <= N <= 1000"
    ],
    "examples": [
      {
        "input": "N = 10",
        "output": "4",
        "explanation": "In the worst case, you can determine the critical floor in a maximum of 4 drops."
      },
      {
        "input": "N = 2",
        "output": "2",
        "explanation": "You can drop from the 1st floor and then the 2nd floor in the worst case."
      },
      {
        "input": "N = 100",
        "output": "14",
        "explanation": "Using a strategic approach, 14 drops suffice to guarantee finding the critical floor."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to minimize the worst-case scenario.",
      "Think about how the number of floors reduces with each drop."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "DFS/BFS",
    "tags": [
      "Graph",
      "Depth-First Search",
      "Breadth-First Search"
    ],
    "input_format": "A 2D grid of '0's and '1's where grid[i][j] is either '1' or '0'.",
    "output_format": "An integer representing the number of islands.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]",
        "output": "3",
        "explanation": "There are 3 islands in the grid."
      },
      {
        "input": "grid = [[1,1,1,1,0],[1,1,0,1,0],[1,1,0,0,0],[0,0,0,0,0]]",
        "output": "1",
        "explanation": "There is 1 island in the grid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try using Depth-First Search (DFS) to explore the islands.",
      "Iterate through each cell and trigger a DFS when you find a land cell ('1').",
      "Mark the visited cells to avoid counting them again."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Valid Word Abbreviation",
    "description": "Given a word and an abbreviation, determine whether the abbreviation is valid for the word. A valid abbreviation means that it can represent the word by replacing any letters in the word with digits (the number represents the number of letters skipped). For example, 'a' can be abbreviated to 'a', 'b' can be abbreviated to 'b', 'ab' can be abbreviated to 'ab', but 'word' can be abbreviated to 'w1d' (where 1 represents the 'o' and 'r' skipped). You need to check if the abbreviation correctly maps to the intended word.",
    "topic": "String",
    "subtopic": "Abbreviation",
    "tags": [
      "String",
      "Abbreviation",
      "Validation"
    ],
    "input_format": "A string word, followed by a string abbreviation.",
    "output_format": "Return a boolean value indicating if the abbreviation is valid for the word.",
    "constraints": [
      "1 <= word.length <= 100",
      "1 <= abbreviation.length <= 100",
      "The input strings contain only lowercase English letters and digits."
    ],
    "examples": [
      {
        "input": "word = 'international', abbreviation = 'i12l'",
        "output": "true",
        "explanation": "The abbreviation 'i12l' means skip 12 letters between 'i' and 'l', which maps correctly to 'international'."
      },
      {
        "input": "word = 'apple', abbreviation = 'a2e'",
        "output": "false",
        "explanation": "The abbreviation 'a2e' means skip 2 letters, which does not correctly map to the letters 'p' in 'apple'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how string lengths relate to abbreviations.",
      "Count skipped letters and match starting letters."
    ],
    "company": "Disney"
  },
  {
    "question_id": "",
    "title": "Product of Array Except Self",
    "description": "Given an array of integers nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i]. You must solve it without using the division operator and in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Product of Array",
    "tags": [
      "Array",
      "Product",
      "Two Pass"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An array of integers representing the product of all elements except the current index.",
    "constraints": [
      "2 <= nums.length <= 10^5",
      "-30 <= nums[i] <= 30"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "[24, 12, 8, 6]",
        "explanation": "The output[i] is the product of all numbers except nums[i]: [2*3*4, 1*3*4, 1*2*4, 1*2*3] = [24, 12, 8, 6]."
      },
      {
        "input": "nums = [-1, 1, 0, -3, 3]",
        "output": "[0, 0, 9, 0, 0]",
        "explanation": "The output[i] is the product of all numbers except nums[i]: [1*0*-3*3, -1*0*-3*3, -1*1*-3*3, -1*1*0*3, -1*1*0*-3] = [0, 0, 9, 0, 0]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider building a product from the left and right of each index.",
      "Use two separate arrays to store the products from both directions."
    ],
    "company": "Disney"
  }
]