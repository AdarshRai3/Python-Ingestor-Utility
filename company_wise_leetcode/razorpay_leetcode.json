[
  {
    "question_id": "",
    "title": "Minimum Total Cost to Make Arrays Unequal",
    "description": "You are given two arrays, A and B, both containing n integers. Your task is to make the two arrays unequal by making a minimum number of changes, where each change consists of modifying one element in either array to any integer. The total cost of changes is defined as the sum of the absolute differences of modified elements. Your goal is to return the minimum total cost to make the arrays unequal.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Minimization"
    ],
    "input_format": "Two arrays of integers A and B of equal length n.",
    "output_format": "An integer representing the minimum total cost to make the arrays unequal.",
    "constraints": [
      "1 <= n <= 1000",
      "-10^5 <= A[i], B[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "A = [1, 2, 3], B = [1, 2, 3]",
        "output": "1",
        "explanation": "Modifying any element in either A or B by 1 will result in the arrays being unequal, with a minimum cost of 1."
      },
      {
        "input": "A = [5, 6, 7], B = [5, 6, 8]",
        "output": "0",
        "explanation": "The arrays are already unequal, so no changes are required and the cost is 0."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how many elements need to be changed to achieve unequal arrays.",
      "Think about the cost-benefit of changing each element.",
      "Try to minimize the changes while ensuring the arrays are unequal."
    ],
    "company": "razorpay"
  },
  {
    "question_id": "",
    "title": "Two Best Non-Overlapping Events",
    "description": "You are given a list of events, where each event is represented as a pair of integers (start, end). Your task is to find the maximum profit you can obtain by selecting at most two non-overlapping events. Each event has a profit associated with it, and you must ensure that the events you choose do not overlap in time. Return the maximum profit. Events are represented as a list of tuples, where each tuple contains (start_time, end_time, profit).",
    "topic": "Dynamic Programming",
    "subtopic": "Interval Scheduling",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Intervals"
    ],
    "input_format": "A list of tuples, where each tuple contains three integers (start_time, end_time, profit).",
    "output_format": "An integer representing the maximum profit from selecting at most two non-overlapping events.",
    "constraints": [
      "1 <= events.length <= 10^5",
      "0 <= start_time < end_time <= 10^9",
      "0 <= profit <= 10^4"
    ],
    "examples": [
      {
        "input": "events = [(1, 3, 50), (2, 4, 10), (3, 5, 20), (4, 6, 70)]",
        "output": "120",
        "explanation": "Select events (1, 3, 50) and (4, 6, 70). The profit is 50 + 70 = 120."
      },
      {
        "input": "events = [(1, 2, 30), (3, 4, 20), (2, 5, 40)]",
        "output": "70",
        "explanation": "Select events (1, 2, 30) and (3, 4, 20). The profit is 30 + 20 = 50. If (2, 5, 40) is selected, we can only select events before or after it."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the events by their end times.",
      "Use a greedy approach to select events."
    ],
    "company": "razorpay"
  },
  {
    "question_id": "",
    "title": "Most Beautiful Item for Each Query",
    "description": "You are given a list of items, each with a beauty value. For a series of queries, each defined by a range (left, right), you need to find the item with the maximum beauty value in that range. If there are multiple items with the maximum beauty, return the one with the smallest index. If the range is invalid, return -1.",
    "topic": "Array",
    "subtopic": "Range Queries",
    "tags": [
      "Array",
      "Range Queries",
      "Maximum"
    ],
    "input_format": "An integer array beauty representing the beauty values of the items and an array of queries, where each query is represented by a pair of integers (left, right).",
    "output_format": "An array of integers representing the maximum beauty item index (0-based) for each query. If the query is invalid, return -1 for that query.",
    "constraints": [
      "1 <= beauty.length <= 10^5",
      "1 <= queries.length <= 10^4",
      "0 <= left <= right < beauty.length"
    ],
    "examples": [
      {
        "input": {
          "beauty": [
            1,
            3,
            5,
            2,
            6
          ],
          "queries": [
            [
              0,
              2
            ],
            [
              1,
              4
            ],
            [
              2,
              2
            ],
            [
              3,
              4
            ],
            [
              10,
              15
            ]
          ]
        },
        "output": [
          2,
          4,
          2,
          4,
          -1
        ],
        "explanation": "For the first query (0, 2), the max beauty is 5 at index 2. For the second query (1, 4), the max is 6 at index 4. The third query (2, 2) returns index 2, which is the only index in that range. The fourth query returns index 4 for the max beauty of 6. The last query is out of bounds, hence -1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a data structure that allows efficient range maximum queries.",
      "Preprocessing might help to answer queries faster."
    ],
    "company": "razorpay"
  },
  {
    "question_id": "",
    "title": "Shortest Subarray to be Removed to Make Array Sorted",
    "description": "Given an unsorted array of integers, you need to find the length of the shortest subarray that, when removed, makes the remaining array sorted in non-decreasing order. If the array is already sorted, return 0. If no such subarray exists, return -1.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Subarray"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the shortest subarray to be removed, or -1 if no such subarray exists.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 10, 4, 2, 3, 5]",
        "output": "5",
        "explanation": "Removing the subarray [10, 4, 2, 3, 5] makes the array sorted."
      },
      {
        "input": "nums = [5, 4, 3, 2, 1]",
        "output": "5",
        "explanation": "Removing the entire array makes it sorted (empty)."
      },
      {
        "input": "nums = [1, 2, 3]",
        "output": "0",
        "explanation": "The array is already sorted."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the leftmost and rightmost indices where the order breaks.",
      "Utilize two pointers to find the longest possible sorted prefix and suffix."
    ],
    "company": "razorpay"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. For example, if you have intervals [1,3], [2,6], [8,10], and [15,18], then the merged intervals would be [1,6], [8,10], and [15,18].",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Interval"
    ],
    "input_format": "A list of intervals, where each interval is represented as a pair of integers [start, end].",
    "output_format": "A list of merged intervals in the format [[start1, end1], [start2, end2], ...].",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "-10^4 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3], [2,6], [8,10], [15,18]]",
        "output": "[[1,6], [8,10], [15,18]]",
        "explanation": "The intervals [1,3] and [2,6] overlap, so they are merged into [1,6]."
      },
      {
        "input": "intervals = [[1,4], [4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] touch, so they are considered overlapping and merged into [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on their starting points.",
      "Use a loop to check for overlaps between the current interval and the last merged interval."
    ],
    "company": "razorpay"
  },
  {
    "question_id": "",
    "title": "Excel Sheet Column Number",
    "description": "Given a column title as it appears in an Excel sheet, return its corresponding column number. For example, 'A' -> 1, 'B' -> 2, ..., 'Z' -> 26, 'AA' -> 27, 'AB' -> 28, ..., 'AZ' -> 52, 'BA' -> 53, and so on. The columns are represented in a base-26 numeral system, where 'A' represents 1 and 'Z' represents 26.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Mathematics",
      "Base Conversion"
    ],
    "input_format": "A string representing the column title in an Excel sheet.",
    "output_format": "An integer representing the corresponding column number.",
    "constraints": [
      "The input string is non-empty and contains only uppercase English letters.",
      "The length of the input string will not exceed 7."
    ],
    "examples": [
      {
        "input": "'A'",
        "output": "1",
        "explanation": "'A' is the first column in Excel."
      },
      {
        "input": "'Z'",
        "output": "26",
        "explanation": "'Z' is the 26th column in Excel."
      },
      {
        "input": "'AA'",
        "output": "27",
        "explanation": "'AA' corresponds to the 27th column."
      },
      {
        "input": "'AB'",
        "output": "28",
        "explanation": "'AB' corresponds to the 28th column."
      },
      {
        "input": "'ZY'",
        "output": "701",
        "explanation": "'ZY' corresponds to the 701st column."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider each character in the string and its positional value.",
      "Use a loop to compute the total value based on its position."
    ],
    "company": "razorpay"
  },
  {
    "question_id": "",
    "title": "Decode String",
    "description": "Given an encoded string, return its decoded string. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. You may assume that the input string is always valid; no extra white spaces, square brackets are well-formed, etc.",
    "topic": "String",
    "subtopic": "Decoding",
    "tags": [
      "String",
      "Decoding",
      "Stack"
    ],
    "input_format": "A string s representing the encoded string.",
    "output_format": "A string that represents the decoded version of the input string.",
    "constraints": [
      "1 <= s.length <= 30",
      "s consists of digits, lowercase English letters, and square brackets."
    ],
    "examples": [
      {
        "input": "s = \"3[a2[c]]\"",
        "output": "accaccacc",
        "explanation": "The decoded string is formed by decoding 'a2[c]' to 'acc', which is repeated 3 times."
      },
      {
        "input": "s = \"2[abc]3[cd]ef\"",
        "output": "abcabccdcdcdef",
        "explanation": "Decoded as 'abc' twice and 'cd' three times followed by 'ef'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to handle nested structures.",
      "Keep track of the current number and string."
    ],
    "company": "razorpay"
  },
  {
    "question_id": "",
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which together with the x-axis forms a container, such that the container contains the most water. Return the area of the container. Notice that you may not slant the container.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Geometry"
    ],
    "input_format": "An array of integers height where height[i] represents the height of the i-th line.",
    "output_format": "An integer representing the maximum area of water the container can hold.",
    "constraints": [
      "2 <= height.length <= 10^5",
      "0 <= height[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "height = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The lines at index 1 (height 8) and index 8 (height 7) form a container that can hold 49 units of water."
      },
      {
        "input": "height = [1,1]",
        "output": "1",
        "explanation": "The only container formed by the two lines has an area of 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Start with two pointers at the ends of the array and move towards the center.",
      "The area is determined by the shorter line."
    ],
    "company": "razorpay"
  },
  {
    "question_id": "",
    "title": "Rotate Array",
    "description": "Given an array of integers and an integer k, rotate the array to the right by k steps, where k is non-negative. For example, with an array [1, 2, 3, 4, 5, 6, 7] and k = 3, the result should be [5, 6, 7, 1, 2, 3, 4].",
    "topic": "Array",
    "subtopic": "Rotation",
    "tags": [
      "Array",
      "Rotation",
      "In-place"
    ],
    "input_format": "An integer array nums and an integer k.",
    "output_format": "The rotated integer array.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^7 <= nums[i] <= 10^7",
      "0 <= k <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5, 6, 7], k = 3",
        "output": "[5, 6, 7, 1, 2, 3, 4]",
        "explanation": "Rotating the array [1, 2, 3, 4, 5, 6, 7] by 3 steps results in [5, 6, 7, 1, 2, 3, 4]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how you can achieve the rotation in O(1) space.",
      "Think about rotating the array in parts."
    ],
    "company": "razorpay"
  }
]