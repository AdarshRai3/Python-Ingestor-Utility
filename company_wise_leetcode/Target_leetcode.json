[
  {
    "question_id": "",
    "title": "Longest Path With Different Adjacent Characters",
    "description": "Given a grid of characters, find the length of the longest path which consists of characters that are different from adjacent (horizontally or vertically) characters. The path can start from any cell of the grid and can move in any of the four directions (up, down, left, right). You should not revisit any cell in the path.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "DFS",
      "Backtracking"
    ],
    "input_format": "A 2D grid of characters represented as a list of strings.",
    "output_format": "An integer representing the length of the longest path.",
    "constraints": [
      "1 <= grid.length <= 20",
      "1 <= grid[i].length <= 20",
      "grid[i][j] is a lowercase English letter."
    ],
    "examples": [
      {
        "input": "grid = [[\"a\", \"b\", \"c\"], [\"b\", \"a\", \"d\"], [\"c\", \"d\", \"e\"]]",
        "output": "5",
        "explanation": "One possible longest path is 'abcde' which consists of 5 different adjacent characters."
      },
      {
        "input": "grid = [[\"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\"], [\"a\", \"a\", \"a\"]]",
        "output": "1",
        "explanation": "All characters are the same, so the longest path has only one character."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using Depth-First Search to explore all paths.",
      "Keep track of visited nodes to avoid cycles.",
      "Think about using a set to check for adjacency."
    ],
    "company": "Target"
  },
  {
    "question_id": "",
    "title": "Product of the Last K Numbers",
    "description": "You are given an array of integers and a positive integer k. Your task is to compute the product of the last k numbers in the array. If k is greater than the length of the array, return -1. The product should be computed as the multiplication of the numbers, and you must return the result modulo 10^9 + 7 to avoid overflow.",
    "topic": "Array",
    "subtopic": "Calculations",
    "tags": [
      "Array",
      "Mathematics",
      "Product"
    ],
    "input_format": "An array of integers nums, followed by a positive integer k.",
    "output_format": "An integer representing the product of the last k numbers modulo 10^9 + 7.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "1 <= k <= nums.length",
      "-10^6 <= nums[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5], k = 3",
        "output": "60",
        "explanation": "The last 3 numbers are 3, 4, and 5. Their product is 3 * 4 * 5 = 60."
      },
      {
        "input": "nums = [1, 2, 3], k = 5",
        "output": "-1",
        "explanation": "k is greater than the length of the array, so the output should be -1."
      },
      {
        "input": "nums = [2, 3, 5, 7], k = 2",
        "output": "21",
        "explanation": "The last 2 numbers are 5 and 7. Their product is 5 * 7 = 35."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a loop to multiply the last k numbers.",
      "Don't forget to apply the modulo operation to avoid large numbers."
    ],
    "company": "Target"
  },
  {
    "question_id": "",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Divide and Conquer"
    ],
    "input_format": "An integer array nums of length n.",
    "output_format": "An integer representing the maximum sum of the contiguous subarray.",
    "constraints": [
      "1 <= n <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The subarray [4,-1,2,1] has the largest sum 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The only subarray is [1] with sum 1."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The entire array is the maximum subarray with sum 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to maintain a running sum and update the maximum when necessary.",
      "Consider how negative numbers impact the sum of a subarray."
    ],
    "company": "Target"
  },
  {
    "question_id": "",
    "title": "Sort Colors",
    "description": "Given an array nums consisting of 0s, 1s, and 2s, sort the array in-place so that all 0s come first, followed by all 1s, and then all 2s. You must solve this problem without using the library's sort function.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "In-place"
    ],
    "input_format": "An array of integers nums where each element is either 0, 1, or 2.",
    "output_format": "The sorted array in-place.",
    "constraints": [
      "1 <= nums.length <= 300",
      "nums[i] is either 0, 1, or 2."
    ],
    "examples": [
      {
        "input": "nums = [2, 0, 2, 1, 1, 0]",
        "output": "[0, 0, 1, 1, 2, 2]",
        "explanation": "After sorting, all 0s come first, followed by 1s and then 2s."
      },
      {
        "input": "nums = [2, 0, 1]",
        "output": "[0, 1, 2]",
        "explanation": "Sorting results in 0 followed by 1 and 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a three-pointer approach.",
      "Think about how you can partition the array."
    ],
    "company": "Target"
  }
]