[
  {
    "question_id": "",
    "title": "Number of Connected Components in an Undirected Graph",
    "description": "Given an undirected graph represented as an adjacency list, count the number of connected components in the graph. A connected component is a maximal group of vertices such that there is a path between any two vertices in the group. If the input graph is disconnected, the output should reflect each distinct component.",
    "topic": "Graph",
    "subtopic": "Connected Components",
    "tags": [
      "Graph",
      "DFS",
      "BFS",
      "Connected Components"
    ],
    "input_format": "An array of edges, where each edge is represented as a pair of integers [u, v], meaning there is an edge between vertex u and vertex v.",
    "output_format": "An integer representing the number of connected components in the graph.",
    "constraints": [
      "1 <= edges.length <= 10^4",
      "0 <= u, v < 10^5"
    ],
    "examples": [
      {
        "input": "edges = [[0, 1], [1, 2], [3, 4]]",
        "output": "2",
        "explanation": "There are two connected components: [0, 1, 2] and [3, 4]."
      },
      {
        "input": "edges = [[0, 1], [0, 2], [1, 2], [3, 4]]",
        "output": "2",
        "explanation": "The first component consists of [0, 1, 2] and the second one of [3, 4]."
      },
      {
        "input": "edges = []",
        "output": "0",
        "explanation": "There are no edges, so there are no connected components."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use DFS or BFS to explore each component.",
      "Track visited nodes to avoid counting the same component multiple times."
    ],
    "company": "General Motors"
  },
  {
    "question_id": "",
    "title": "Minimum Path Sum",
    "description": "Given a m x n grid filled with non-negative numbers, find a path from the top left to the bottom right, which minimizes the sum of the numbers along the path. Only move either down or right at any point in time.",
    "topic": "Dynamic Programming",
    "subtopic": "Grid Paths",
    "tags": [
      "Dynamic Programming",
      "Grid",
      "Pathfinding"
    ],
    "input_format": "A 2D array of integers grid where 0 <= grid[i][j] <= 100.",
    "output_format": "An integer representing the minimum path sum.",
    "constraints": [
      "1 <= m, n <= 200",
      "1 <= grid[i][j] <= 100"
    ],
    "examples": [
      {
        "input": "grid = [[1,3,1],[1,5,1],[4,2,1]]",
        "output": "7",
        "explanation": "The path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum: 1 + 3 + 1 + 1 + 1 = 7."
      },
      {
        "input": "grid = [[1,2,3],[4,5,6]]",
        "output": "12",
        "explanation": "The path 1 \u2192 2 \u2192 3 \u2192 6 minimizes the sum: 1 + 2 + 3 + 6 = 12."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about dynamic programming and how you can build the solution from smaller subproblems.",
      "Consider how to choose paths that minimize the current sum at each point."
    ],
    "company": "General Motors"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. Implement the LRUCache class with the following methods:  \n\n- LRUCache(int capacity): Initialize the LRU cache with positive size capacity.  \n- int get(int key): Return the value of the key if the key exists, otherwise return -1.  \n- void put(int key, int value): Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.",
    "topic": "Design",
    "subtopic": "Caching",
    "tags": [
      "Design",
      "Cache",
      "LRU"
    ],
    "input_format": "You will be given a series of operations on the LRUCache. The operations can be 'get' or 'put'.",
    "output_format": "For each 'get' operation, return the value associated with the key or -1 if the key doesn't exist.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10^4",
      "0 <= value <= 10^4",
      "The functions get and put will be called at most 10^4 times."
    ],
    "examples": [
      {
        "input": "LRUCache cache = new LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1,-1,3,4]",
        "explanation": "After the operations, the cache contains keys 1, 3, and 4. The key 2 was evicted. So, get(1) returns 1, get(2) returns -1, get(3) returns 3, and get(4) returns 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to store key-value pairs and a doubly linked list to track usage order."
    ],
    "company": "General Motors"
  },
  {
    "question_id": "",
    "title": "The Number of Full Rounds You Have Played",
    "description": "You are given an integer array rounds, where rounds[i] represents the round number you completed. Your task is to determine how many full rounds you have played. A full round is defined as completing all rounds from 1 to n (inclusive), where n is the largest round number mentioned in the rounds array. Return the total number of full rounds played.",
    "topic": "Array",
    "subtopic": "Counting",
    "tags": [
      "Array",
      "Counting",
      "Simulation"
    ],
    "input_format": "An integer array rounds of length n (1 <= n <= 10^5).",
    "output_format": "An integer representing the number of full rounds played.",
    "constraints": [
      "1 <= rounds.length <= 10^5",
      "1 <= rounds[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "[1, 2, 3, 4, 2, 3, 1]",
        "output": "1",
        "explanation": "The rounds 1 to 4 were completed, counting as one full round."
      },
      {
        "input": "[5, 4, 3, 2, 1, 3, 2]",
        "output": "1",
        "explanation": "The rounds completed are from 1 to 5. Thus, 1 full round is completed."
      },
      {
        "input": "[1, 1, 1]",
        "output": "0",
        "explanation": "Only round 1 is completed, thus no full rounds."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Track the maximum round number completed.",
      "Use a set to keep track of distinct rounds.",
      "Consider how to determine when all rounds from 1 to n are completed."
    ],
    "company": "General Motors"
  },
  {
    "question_id": "",
    "title": "First Missing Positive",
    "description": "Given an unsorted integer array nums, find the smallest missing positive integer. You must implement an algorithm that runs in O(n) time and uses constant extra space.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Hashing"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the first missing positive integer.",
    "constraints": [
      "0 <= nums.length <= 300",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [3, 4, -1, 1]",
        "output": "2",
        "explanation": "The smallest missing positive integer is 2."
      },
      {
        "input": "nums = [1, 2, 0]",
        "output": "3",
        "explanation": "The smallest missing positive integer is 3."
      },
      {
        "input": "nums = [7, 8, 9, 11, 12]",
        "output": "1",
        "explanation": "The smallest missing positive integer is 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use index to store the presence of numbers in the array.",
      "The first missing positive must be in the range [1, n].",
      "Try to place each number at its correct index."
    ],
    "company": "General Motors"
  },
  {
    "question_id": "",
    "title": "Last Visited Integers",
    "description": "Given a list of integers, each representing a page number visited by a user in the order they were accessed, return the last `k` unique page numbers visited. The result should be in the order they were last visited, with the most recent page appearing first.",
    "topic": "Array",
    "subtopic": "Unique Elements",
    "tags": [
      "Array",
      "Hashing",
      "Last Visited",
      "Unique"
    ],
    "input_format": "The input consists of two parts: an array of integers `pages` representing visited page numbers and an integer `k` representing the number of unique pages to return.",
    "output_format": "An array of integers representing the last `k` unique pages visited in the order of most recent.",
    "constraints": [
      "1 <= pages.length <= 10^5",
      "0 <= pages[i] <= 10^6",
      "1 <= k <= total number of unique pages visited"
    ],
    "examples": [
      {
        "input": {
          "pages": [
            1,
            2,
            3,
            2,
            4,
            1
          ],
          "k": 2
        },
        "output": [
          1,
          4
        ],
        "explanation": "The unique pages are [1, 2, 3, 4]. The last 2 unique pages visited were 1 and 4."
      },
      {
        "input": {
          "pages": [
            5,
            6,
            5,
            7,
            8,
            6,
            9
          ],
          "k": 3
        },
        "output": [
          9,
          6,
          8
        ],
        "explanation": "The unique pages are [5, 6, 7, 8, 9]. The last 3 unique pages visited were 9, 6 and 8."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash set to track unique pages while iterating from the end.",
      "Consider using a list to maintain the order of last visited pages."
    ],
    "company": "General Motors"
  },
  {
    "question_id": "",
    "title": "Widest Vertical Area Between Two Points Containing No Points",
    "description": "Given a 2D plane with a set of points, you need to find the widest vertical area between two points such that no points lie within this area. A vertical area is defined by two vertical lines that extend infinitely upwards and downwards. You should return the width of the widest vertical area between two such lines.",
    "topic": "Geometry",
    "subtopic": "Geometry Problems",
    "tags": [
      "Geometry",
      "Plane",
      "Vertical Area"
    ],
    "input_format": "A list of points on a 2D plane, where each point is represented as [x, y].",
    "output_format": "An integer representing the width of the widest vertical area between two lines.",
    "constraints": [
      "1 <= points.length <= 10^5",
      "-10^9 <= points[i][0] <= 10^9",
      "-10^9 <= points[i][1] <= 10^9"
    ],
    "examples": [
      {
        "input": "points = [[1, 2], [3, 4], [5, 1]]",
        "output": "1",
        "explanation": "The widest vertical area is between x = 1 and x = 3 (width = 2), but there is a point at x = 3, so the next valid area is between x = 3 and x = 5 (width = 1)."
      },
      {
        "input": "points = [[1, 3], [2, 5], [4, 2], [6, 1]]",
        "output": "1",
        "explanation": "The widest area available without any points in between is between x = 4 and x = 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider sorting the points based on their x-coordinates.",
      "Calculate the distance between each pair of consecutive points."
    ],
    "company": "General Motors"
  },
  {
    "question_id": "",
    "title": "Dot Product of Two Sparse Vectors",
    "description": "Given two sparse vectors represented by two arrays, calculate their dot product. The dot product is the sum of the products of their corresponding elements. If either vector is sparse, we can assume that most elements are zero, which allows us to treat them efficiently without allocating memory for the entire vector.",
    "topic": "Mathematics",
    "subtopic": "Vector Operations",
    "tags": [
      "Vector",
      "Mathematics",
      "Dot Product"
    ],
    "input_format": "Two arrays of integers, representing two sparse vectors.",
    "output_format": "An integer representing the dot product of the two sparse vectors.",
    "constraints": [
      "1 <= nums1.length, nums2.length <= 10^6",
      "-100 <= nums1[i], nums2[i] <= 100"
    ],
    "examples": [
      {
        "input": "nums1 = [1, 0, 0, 2, 3], nums2 = [0, 3, 0, 4, 0]",
        "output": "8",
        "explanation": "Calculating: (1*0) + (0*3) + (0*0) + (2*4) + (3*0) = 0 + 0 + 0 + 8 + 0 = 8."
      },
      {
        "input": "nums1 = [0, 1, 0, 0, 2], nums2 = [0, 0, 0, 3, 0]",
        "output": "0",
        "explanation": "Calculating: (0*0) + (1*0) + (0*0) + (0*3) + (2*0) = 0 + 0 + 0 + 0 + 0 = 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider iterating only over non-zero elements.",
      "Use a hashmap to store the indices of non-zero elements."
    ],
    "company": "General Motors"
  }
]