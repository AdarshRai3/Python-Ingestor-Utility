[
  {
    "question_id": "",
    "title": "Search Suggestions System",
    "description": "You are tasked with designing a system that provides a list of suggested search queries based on user input. Given an array of strings representing existing search queries and a user's input string, return a list of up to three suggested queries that start with the input string, ordered lexicographically. If there are fewer than three matches, return all of them. The search suggestions should also be case-sensitive.",
    "topic": "String",
    "subtopic": "Prefix Matching",
    "tags": [
      "String",
      "Sorting",
      "Search"
    ],
    "input_format": "An array of strings `products` representing the existing product search queries, and a string `searchWord` representing the user's input.",
    "output_format": "A list of lists of strings representing the suggested search queries for each prefix of `searchWord`.",
    "constraints": [
      "1 <= products.length <= 1000",
      "1 <= products[i].length <= 100",
      "1 <= searchWord.length <= 100"
    ],
    "examples": [
      {
        "input": {
          "products": [
            "mobile",
            "mouse",
            "moneypot",
            "monitor",
            "mousepad"
          ],
          "searchWord": "mouse"
        },
        "output": [
          [
            "mobile",
            "moneypot",
            "monitor"
          ],
          [
            "mouse",
            "mousepad"
          ],
          [
            "mouse",
            "mousepad"
          ],
          [
            "mouse",
            "mousepad"
          ],
          [
            "mouse",
            "mousepad"
          ]
        ],
        "explanation": "For each prefix of 'mouse', the suggestions are provided based on strings that start with that prefix."
      },
      {
        "input": {
          "products": [
            "havana"
          ],
          "searchWord": "havana"
        },
        "output": [
          [
            "havana"
          ],
          [
            "havana"
          ],
          [
            "havana"
          ],
          [
            "havana"
          ],
          [
            "havana"
          ],
          [
            "havana"
          ]
        ],
        "explanation": "The only suggestion for every prefix of 'havana' is 'havana'."
      },
      {
        "input": {
          "products": [
            "bags",
            "baggage",
            "banner",
            "box",
            "cloths"
          ],
          "searchWord": "bags"
        },
        "output": [
          [
            "bags",
            "baggage"
          ],
          [
            "bags",
            "baggage"
          ],
          [
            "bags",
            "baggage"
          ],
          [
            "bags",
            "baggage"
          ],
          []
        ],
        "explanation": "The suggestions start narrowing down to just 'bags' or 'baggage' as the input progresses."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the product list to facilitate prefix search.",
      "Use a trie or simple list filtering to find suggestions efficiently."
    ],
    "company": "UBS"
  },
  {
    "question_id": "",
    "title": "Count Pairs of Connectable Servers in a Weighted Tree Network",
    "description": "You are given a weighted tree network represented as an undirected graph, where each server is a node and the edges between them have weights representing the connection strength. A pair of servers is considered 'connectable' if they can communicate with a total weight greater than or equal to a given threshold. Your task is to count the number of unique pairs of servers that meet this criteria.",
    "topic": "Graph",
    "subtopic": "Tree",
    "tags": [
      "Graph",
      "Tree",
      "Weighted Network",
      "DFS"
    ],
    "input_format": "An integer n representing the number of servers, followed by a list of edges where each edge is represented as a tuple (u, v, w) indicating a connection between server u and server v with weight w, and finally an integer threshold.",
    "output_format": "An integer representing the number of pairs of connectable servers.",
    "constraints": [
      "1 <= n <= 10^5",
      "0 <= w <= 10^4",
      "0 <= threshold <= 10^9"
    ],
    "examples": [
      {
        "input": "n = 5, edges = [(1, 2, 3), (1, 3, 5), (2, 4, 2), (3, 5, 7)], threshold = 5",
        "output": "4",
        "explanation": "The connectable pairs are (1, 3), (1, 5), (2, 3), (3, 5)."
      },
      {
        "input": "n = 4, edges = [(1, 2, 1), (2, 3, 4), (3, 4, 6)], threshold = 10",
        "output": "1",
        "explanation": "Only the pair (1, 4) can communicate with a total weight of 11 which is above the threshold."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth-First Search (DFS) to explore the tree.",
      "You might want to store the weights in an adjacency list or matrix.",
      "Remember to count each unique pair only once."
    ],
    "company": "UBS"
  },
  {
    "question_id": "",
    "title": "Beautiful Arrangement",
    "description": "A beautiful arrangement is defined as an arrangement of numbers from 1 to N such that, for every i (1 <= i <= N), either i is divisible by the value at that position or the value at that position is divisible by i. Given an integer N, return the total number of beautiful arrangements that can be formed.",
    "topic": "Backtracking",
    "subtopic": "Permutations",
    "tags": [
      "Backtracking",
      "Recursion",
      "Mathematics"
    ],
    "input_format": "An integer N (1 <= N <= 15).",
    "output_format": "An integer representing the total number of beautiful arrangements.",
    "constraints": [
      "1 <= N <= 15"
    ],
    "examples": [
      {
        "input": "2",
        "output": "2",
        "explanation": "The two beautiful arrangements are [1, 2] and [2, 1]."
      },
      {
        "input": "1",
        "output": "1",
        "explanation": "The only arrangement is [1]."
      },
      {
        "input": "3",
        "output": "3",
        "explanation": "The three beautiful arrangements are [1, 2, 3], [1, 3, 2], and [2, 1, 3]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a backtracking approach to generate valid arrangements.",
      "Think about the divisible properties for arranging the numbers."
    ],
    "company": "UBS"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "Array Manipulation",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Greedy"
    ],
    "input_format": "An array of integers prices representing the stock prices on different days.",
    "output_format": "An integer representing the maximum profit achievable.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price encountered so far.",
      "Calculate the profit if sold on the current day."
    ],
    "company": "UBS"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Every opening bracket must have a corresponding closing bracket of the same type. For example, '()[]{}' is valid but '(]' is not.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s containing parentheses and brackets.",
    "output_format": "A boolean value indicating whether the input string is valid.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses and brackets only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The parentheses are correctly matched."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "All types of brackets are correctly matched."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The brackets are not correctly matched."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The order of closing brackets is incorrect."
      },
      {
        "input": "s = '{[]}'",
        "output": "true",
        "explanation": "The brackets are correctly nested."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Check if the closing bracket matches the top of the stack.",
      "Ensure the stack is empty at the end of processing the string."
    ],
    "company": "UBS"
  }
]