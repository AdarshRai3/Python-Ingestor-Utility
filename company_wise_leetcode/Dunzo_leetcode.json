[
  {
    "question_id": "",
    "title": "Stone Game VII",
    "description": "Alice and Bob take turns removing stones from either end of a row of stones. The row is represented by an array of integers, where each integer represents the number of stones at that position. The player who removes stones tries to maximize their score, which is the sum of stones they have removed. Alice always goes first. The objective is to determine who will win if both players play optimally. Return 'Alice' if Alice wins and 'Bob' if Bob wins.",
    "topic": "Dynamic Programming",
    "subtopic": "Game Theory",
    "tags": [
      "Dynamic Programming",
      "Game Theory",
      "Greedy"
    ],
    "input_format": "An array of integers `stones` representing the number of stones on each position.",
    "output_format": "A string either 'Alice' or 'Bob' indicating the winner.",
    "constraints": [
      "1 <= stones.length <= 100",
      "0 <= stones[i] <= 100"
    ],
    "examples": [
      {
        "input": "stones = [5, 3, 1, 4, 2]",
        "output": "Alice",
        "explanation": "Alice can pick 5, then Bob picks 2, Alice picks 4. Alice has a score of 9, Bob has 5."
      },
      {
        "input": "stones = [7, 8, 8]",
        "output": "Bob",
        "explanation": "If Alice picks 7, Bob will pick 8, leaving Alice only 8, which leads to a lower score for Alice."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the game state from both players' perspectives.",
      "Dynamic programming can help to optimize the score calculations."
    ],
    "company": "Dunzo"
  },
  {
    "question_id": "",
    "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
    "description": "You are given an array of integers nums and a non-negative integer k. Your task is to create a new array that contains all the integers such that you can find the maximum value of the array exactly k times through comparisons. You need to ensure that no other values appear in the array that would allow finding a value larger than the maximum value through fewer than k comparisons. Return the length of this new array.",
    "topic": "Array",
    "subtopic": "Maximizing Comparison Count",
    "tags": [
      "Array",
      "Maximization",
      "Comparison"
    ],
    "input_format": "An array of integers nums followed by a non-negative integer k.",
    "output_format": "An integer representing the length of the new array constructed based on the criteria.",
    "constraints": [
      "1 <= nums.length <= 10000",
      "0 <= k <= 100"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, 2, 4, 1], k = 2",
        "output": "3",
        "explanation": "The maximum number is 4. We can compare it with any two numbers to ensure that it is the maximum, hence we include it. The valid array becomes [1, 3, 4]."
      },
      {
        "input": "nums = [5, 5, 5, 5], k = 1",
        "output": "4",
        "explanation": "All elements are the same; hence we can find the maximum (which is 5) with only one comparison. All four are included in the valid array."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how many elements are equal to the maximum.",
      "Think about the implications of k comparisons on the array size."
    ],
    "company": "Dunzo"
  },
  {
    "question_id": "",
    "title": "Number of Distinct Substrings in a String",
    "description": "Given a string s, your task is to count the number of distinct substrings present in it. A substring is defined as a contiguous sequence of characters within the string. You must return the number of distinct substrings modulo 10^9 + 7.",
    "topic": "String",
    "subtopic": "Substring",
    "tags": [
      "String",
      "Substring",
      "Count"
    ],
    "input_format": "A single string s consisting of lowercase English letters.",
    "output_format": "An integer representing the number of distinct substrings modulo 10^9 + 7.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'abc'",
        "output": "6",
        "explanation": "The distinct substrings are 'a', 'b', 'c', 'ab', 'bc', 'abc'. Thus, the total count is 6."
      },
      {
        "input": "s = 'aaa'",
        "output": "3",
        "explanation": "The distinct substrings are 'a', 'aa', and 'aaa'. Thus, the total count is 3."
      },
      {
        "input": "s = 'abac'",
        "output": "10",
        "explanation": "The distinct substrings are 'a', 'b', 'ab', 'ba', 'a', 'ac', 'abac', 'aba', 'bac', 'ac'. Thus, the total count is 10."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a suffix array or a suffix tree for efficient substring counting.",
      "Remember that overlapping substrings can still count as distinct if they are part of different starting positions."
    ],
    "company": "Dunzo"
  },
  {
    "question_id": "",
    "title": "Number of Ways to Form a Target String Given a Dictionary",
    "description": "You are given a list of strings called `dictionary` and a string `target`. Your task is to find the number of distinct ways to form the `target` string by using the strings from the `dictionary`. You can use each string in the `dictionary` any number of times. Return the number of ways to form the target string, modulo 10^9 + 7.",
    "topic": "Dynamic Programming",
    "subtopic": "String Manipulation",
    "tags": [
      "Dynamic Programming",
      "String",
      "Combinatorics"
    ],
    "input_format": "An array of strings 'dictionary' and a string 'target'.",
    "output_format": "An integer representing the number of ways to form the target string.",
    "constraints": [
      "1 <= dictionary.length <= 1000",
      "1 <= dictionary[i].length <= 100",
      "1 <= target.length <= 1000"
    ],
    "examples": [
      {
        "input": "dictionary = [\"a\",\"b\",\"c\"], target = \"ab\"",
        "output": "2",
        "explanation": "The target can be formed in two ways: 'a' + 'b' or 'b' + 'a'."
      },
      {
        "input": "dictionary = [\"val\", \"ae\", \"v\", \"la\"], target = \"vala\"",
        "output": "5",
        "explanation": "The target can be formed by 'val' + 'a', 'v' + 'la', or combinations thereof."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Think about breaking the target into subproblems.",
      "Consider using a dynamic programming array to store the number of ways to form each prefix of the target."
    ],
    "company": "Dunzo"
  },
  {
    "question_id": "",
    "title": "Find All Good Strings",
    "description": "Given two strings s1 and s2, along with a list of forbidden characters, your task is to generate all possible strings of length n that are lexicographically greater than s1 and less than s2 while avoiding the forbidden characters. A string is considered 'good' if it meets these criteria. The result should return a list of all unique good strings sorted in ascending order. If no good strings exist, return an empty list.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Combination",
      "Backtracking"
    ],
    "input_format": "Two strings s1 and s2, an integer n, and a list of forbidden characters.",
    "output_format": "A list of all unique good strings that are sorted in ascending order.",
    "constraints": [
      "1 <= s1.length, s2.length <= 100",
      "1 <= n <= 50",
      "s1.length == s2.length",
      "Characters in s1 and s2 are lowercase letters.",
      "The list of forbidden characters contains distinct lowercase letters and may be empty."
    ],
    "examples": [
      {
        "input": {
          "s1": "abc",
          "s2": "abd",
          "n": 3,
          "forbidden": [
            "c"
          ]
        },
        "output": [
          "aba",
          "abb"
        ],
        "explanation": "The good strings of length 3 that are greater than 'abc' and less than 'abd' while avoiding 'c' are 'aba' and 'abb'."
      },
      {
        "input": {
          "s1": "xyz",
          "s2": "xyz",
          "n": 3,
          "forbidden": []
        },
        "output": [],
        "explanation": "No good strings can exist because there are no valid options between 'xyz' and 'xyz'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider generating strings using backtracking.",
      "Make sure to prune the search space by skipping forbidden characters.",
      "Remember to check lexicographical order while generating."
    ],
    "company": "Dunzo"
  },
  {
    "question_id": "",
    "title": "Ways to Make a Fair Array",
    "description": "Given an integer array nums, you can remove any number of elements from the array to make it fair. An array is considered fair if it contains an equal number of even and odd integers. Your task is to find the number of ways you can remove elements to achieve a fair array. You should report the count of all the unique subarrays that can be made fair by removing elements.",
    "topic": "Array",
    "subtopic": "Subarrays",
    "tags": [
      "Array",
      "Subarrays",
      "Count"
    ],
    "input_format": "An integer array nums, where 1 <= nums.length <= 1000 and -1000 <= nums[i] <= 1000.",
    "output_format": "An integer representing the number of unique ways to make the array fair.",
    "constraints": [
      "1 <= nums.length <= 1000",
      "-1000 <= nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "2",
        "explanation": "You can remove either the 1 or the 4 to have the subarrays [2, 3] or [1, 2, 3] which both contain equal even and odd numbers."
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3]",
        "output": "9",
        "explanation": "All unique subarrays can be modified to have an equal number of odd and even numbers, hence 9 ways."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a prefix sum to track the count of odd and even numbers.",
      "Think about how removing elements impacts the current count of evens and odds."
    ],
    "company": "Dunzo"
  },
  {
    "question_id": "",
    "title": "Arithmetic Slices II - Subsequence",
    "description": "Given an array of integers, you need to find the number of arithmetic subsequences of at least length 3. A subsequence is obtained by deleting some elements of the array without changing the order of the remaining elements. An arithmetic sequence is one where the difference between any two consecutive elements is the same. Your task is to count all such possible subsequences.",
    "topic": "Dynamic Programming",
    "subtopic": "Subsequences",
    "tags": [
      "Dynamic Programming",
      "Subsequences",
      "Array"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the number of arithmetic subsequences of length at least 3 in nums.",
    "constraints": [
      "1 <= nums.length <= 1000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "6",
        "explanation": "The valid arithmetic subsequences are: [1,2,3], [1,2,4], [1,3,4], [2,3,4], [1,2,3,4], and [1,2,3,4]."
      },
      {
        "input": "nums = [1, 1, 1, 1]",
        "output": "1",
        "explanation": "The only valid arithmetic subsequence is [1,1,1]."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a hash map to store the difference and count the sequences.",
      "Iterate over pairs of elements to find possible differences."
    ],
    "company": "Dunzo"
  }
]