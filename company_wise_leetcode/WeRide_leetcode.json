[
  {
    "question_id": "",
    "title": "Find Edges in Shortest Paths",
    "description": "In an undirected graph represented by nodes and weighted edges, you need to determine the edges that are part of the shortest paths between all pairs of nodes. For each edge, return whether it is part of at least one shortest path. If an edge is used in multiple shortest paths, it should still be counted. The graph is defined by a list of edges where each edge is represented as a tuple containing the two nodes and the weight of the edge.",
    "topic": "Graph",
    "subtopic": "Shortest Path Algorithms",
    "tags": [
      "Graph",
      "Dijkstra",
      "Floyd-Warshall",
      "Shortest Path"
    ],
    "input_format": "A list of edges in the format [(node1, node2, weight)] representing the undirected graph.",
    "output_format": "A list of edges that are part of at least one shortest path.",
    "constraints": [
      "1 <= nodes <= 1000",
      "1 <= edges.length <= 10000",
      "1 <= weight <= 1000"
    ],
    "examples": [
      {
        "input": "edges = [(0, 1, 1), (1, 2, 2), (0, 2, 3)]",
        "output": "[(0, 1, 1), (1, 2, 2)]",
        "explanation": "The shortest path from 0 to 2 is through edge (0, 1) with weight 1 and edge (1, 2) with weight 2."
      },
      {
        "input": "edges = [(0, 1, 4), (1, 2, 1), (0, 2, 3)]",
        "output": "[(1, 2, 1), (0, 2, 3)]",
        "explanation": "The shortest path from 0 to 2 is either through edge (0, 2) directly or through (0, 1) and (1, 2), both of which are thus part of the shortest paths."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using Dijkstra's or Floyd-Warshall algorithm.",
      "Store the shortest path results to check edge participation.",
      "Use a set to track edges involved in shortest paths."
    ],
    "company": "WeRide"
  },
  {
    "question_id": "",
    "title": "Maximize Greatness of an Array",
    "description": "You are given an array of integers. Your task is to rearrange the elements of the array such that the 'greatness' is maximized. The 'greatness' of an array is defined as the sum of the absolute differences between each pair of adjacent elements in the rearranged array. You need to return the maximum possible greatness.",
    "topic": "Array",
    "subtopic": "Rearrangement",
    "tags": [
      "Array",
      "Sorting",
      "Greedy"
    ],
    "input_format": "An integer array nums of length n.",
    "output_format": "An integer representing the maximum greatness of the array.",
    "constraints": [
      "1 <= nums.length <= 1000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, 2, 4]",
        "output": "6",
        "explanation": "Rearranging the array as [1, 4, 2, 3] gives us |1-4| + |4-2| + |2-3| = 3 + 2 + 1 = 6."
      },
      {
        "input": "nums = [7, 2, 1, 4]",
        "output": "10",
        "explanation": "Rearranging the array as [1, 2, 4, 7] gives us |1-2| + |2-4| + |4-7| = 1 + 2 + 3 = 6."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the array first.",
      "The more distant numbers contribute more to the sum."
    ],
    "company": "WeRide"
  },
  {
    "question_id": "",
    "title": "Maximum Profit in Job Scheduling",
    "description": "You are given a list of jobs where each job has a start time, an end time, and a profit associated with it. Your goal is to schedule non-overlapping jobs to maximize your total profit. Each job is represented as a tuple (start, end, profit). You must determine the maximum profit you can achieve by selecting jobs that do not overlap.",
    "topic": "Dynamic Programming",
    "subtopic": "Job Scheduling",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Interval Scheduling"
    ],
    "input_format": "A list of tuples, where each tuple contains three integers (start, end, profit).",
    "output_format": "An integer representing the maximum profit achievable.",
    "constraints": [
      "1 <= jobs.length <= 1000",
      "0 <= start < end <= 10^4",
      "0 <= profit <= 10^5"
    ],
    "examples": [
      {
        "input": "jobs = [(1, 3, 50), (2, 5, 20), (3, 6, 100), (4, 5, 70)]",
        "output": "120",
        "explanation": "Choosing jobs (1, 3, 50) and (3, 6, 100) gives a total profit of 50 + 100 = 150."
      },
      {
        "input": "jobs = [(1, 4, 3), (3, 5, 1), (0, 6, 8), (5, 7, 4), (3, 9, 6), (5, 9, 2)]",
        "output": "15",
        "explanation": "Choosing jobs (1, 4, 3), (0, 6, 8), and (5, 7, 4) gives a total profit of 3 + 8 + 4 = 15."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Sort the jobs by their end time.",
      "Use binary search to find the last non-conflicting job."
    ],
    "company": "WeRide"
  },
  {
    "question_id": "",
    "title": "Longest Increasing Path in a Matrix",
    "description": "Given an m x n integers matrix, return the length of the longest increasing path in the matrix. From each cell, you can move to adjacent cells (up, down, left, or right). You may not move diagonally or move outside the boundary of the matrix. Cells with the same value cannot be considered in the path.",
    "topic": "Dynamic Programming",
    "subtopic": "Depth-First Search",
    "tags": [
      "Matrix",
      "DFS",
      "Dynamic Programming"
    ],
    "input_format": "A 2D array of integers representing the matrix.",
    "output_format": "An integer representing the length of the longest increasing path.",
    "constraints": [
      "1 <= m, n <= 200",
      "-10^4 <= matrix[i][j] <= 10^4"
    ],
    "examples": [
      {
        "input": "matrix = [[9,9,4],[6,6,8],[2,1,1]]",
        "output": "4",
        "explanation": "The longest increasing path is [1, 2, 6, 9] with length 4."
      },
      {
        "input": "matrix = [[3, 4, 5],[3, 2, 6],[2, 1, 1]]",
        "output": "4",
        "explanation": "The longest increasing path is [1, 2, 3, 4, 5] with length 5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Try to use Depth-First Search to explore paths.",
      "Consider using memoization to store results of subproblems.",
      "Start exploring from every cell in the matrix."
    ],
    "company": "WeRide"
  }
]