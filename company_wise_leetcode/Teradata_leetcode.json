[
  {
    "question_id": "",
    "title": "Count Pairs in Two Arrays",
    "description": "Given two arrays of integers, return the number of pairs (i, j) such that nums1[i] + nums2[j] equals a given target. The integers in the arrays can be negative, positive, or zero. Each pair (i, j) is counted only once where i is the index in the first array and j is the index in the second array.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Hashing"
    ],
    "input_format": "Two arrays of integers nums1 and nums2, and an integer target.",
    "output_format": "An integer representing the number of valid pairs.",
    "constraints": [
      "1 <= nums1.length, nums2.length <= 10^5",
      "-10^5 <= nums1[i], nums2[j] <= 10^5",
      "-10^5 <= target <= 10^5"
    ],
    "examples": [
      {
        "input": "nums1 = [1, 2, 3], nums2 = [4, 5, 6], target = 7",
        "output": "3",
        "explanation": "The valid pairs are (1, 6), (2, 5), and (3, 4) which sum to 7."
      },
      {
        "input": "nums1 = [-1, 1, 0], nums2 = [0, 1, 2], target = 1",
        "output": "5",
        "explanation": "The valid pairs are (-1, 2), (1, 0), (1, 1), (0, 1), and (0, 2) which sum to 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to store the counts of elements in one of the arrays.",
      "Iterate through the second array and calculate the complement needed to reach the target."
    ],
    "company": "Teradata"
  },
  {
    "question_id": "",
    "title": "Candy Distribution",
    "description": "In a classroom, there are 'n' students and they need to be given candies based on their ratings. Each student is assigned a rating, and the rules for distributing candies are as follows: 1. Each student must receive at least one candy. 2. Students with a higher rating than their neighbors must receive more candies than those neighbors. Your task is to determine the minimum number of candies required to satisfy these rules.",
    "topic": "Greedy",
    "subtopic": "Greedy Algorithms",
    "tags": [
      "Greedy",
      "Array",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers ratings where ratings[i] represents the rating of the i-th student.",
    "output_format": "An integer representing the minimum number of candies needed.",
    "constraints": [
      "1 <= ratings.length <= 2 * 10^4",
      "0 <= ratings[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "ratings = [1, 0, 2]",
        "output": "5",
        "explanation": "The distribution can be [2, 1, 2], giving a total of 5 candies."
      },
      {
        "input": "ratings = [1, 2, 2]",
        "output": "4",
        "explanation": "The distribution can be [1, 2, 1], giving a total of 4 candies."
      },
      {
        "input": "ratings = [1, 3, 4, 5, 2]",
        "output": "11",
        "explanation": "The distribution can be [1, 2, 3, 4, 1], giving a total of 11 candies."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a two-pass algorithm to confirm the distribution rules.",
      "Consider the relationship between students' ratings and their assigned candies."
    ],
    "company": "Teradata"
  },
  {
    "question_id": "",
    "title": "Merge Two Sorted Lists",
    "description": "You are given the heads of two sorted linked lists. Merge the two lists in a one sorted list and return it. The merged list should be made by splicing together the nodes of the first two lists.",
    "topic": "Linked List",
    "subtopic": "Merging Lists",
    "tags": [
      "Linked List",
      "Sorting",
      "Merging"
    ],
    "input_format": "The input consists of two linked lists, each represented as the head of a linked list.",
    "output_format": "Return the head of the merged sorted linked list.",
    "constraints": [
      "The number of nodes in both lists is in the range [0, 50].",
      "1 <= Node.val <= 100",
      "Both lists are sorted in non-decreasing order."
    ],
    "examples": [
      {
        "input": "l1 = [1, 2, 4], l2 = [1, 3, 4]",
        "output": "[1, 1, 2, 3, 4, 4]",
        "explanation": "The merged list is 1 -> 1 -> 2 -> 3 -> 4 -> 4."
      },
      {
        "input": "l1 = [], l2 = []",
        "output": "[]",
        "explanation": "Both lists are empty. The merged list is also empty."
      },
      {
        "input": "l1 = [], l2 = [0]",
        "output": "[0]",
        "explanation": "The merged list contains only the element from the second list."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a dummy node to simplify the merging process.",
      "Iterate through both lists and compare the current nodes.",
      "Make sure to handle the case where one list is exhausted before the other."
    ],
    "company": "Teradata"
  }
]