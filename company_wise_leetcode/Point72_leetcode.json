[
  {
    "question_id": "",
    "title": "Top Travellers",
    "description": "You are given a list of travellers with their associated countries and the distances they have travelled in kilometers. Your task is to determine the top N travellers who have travelled the most distance in the given list. If two travellers have travelled the same distance, the one who appears first in the input list should be preferred.",
    "topic": "Sorting",
    "subtopic": "Sorting by Custom Key",
    "tags": [
      "Sorting",
      "Array",
      "Distance"
    ],
    "input_format": "A list of tuples, where each tuple consists of a string representing the traveller's name and an integer representing the distance travelled.",
    "output_format": "A list of strings representing the names of the top N travellers sorted by the distance they have travelled.",
    "constraints": [
      "1 <= travellers.length <= 10^5",
      "1 <= distance <= 10^6",
      "1 <= N <= travellers.length"
    ],
    "examples": [
      {
        "input": "travellers = [('Alice', 300), ('Bob', 150), ('Charlie', 300)], N = 2",
        "output": "['Alice', 'Charlie']",
        "explanation": "Alice and Charlie have travelled the same maximum distance of 300 km. Alice appears first, so she is listed first."
      },
      {
        "input": "travellers = [('Alice', 700), ('Bob', 100), ('Charlie', 950), ('Dave', 950)], N = 3",
        "output": "['Charlie', 'Dave', 'Alice']",
        "explanation": "Charlie and Dave have the maximum distance of 950 km. Charlie appears first and is followed by Dave. Alice is next with 700 km."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider sorting the travellers based on distance in descending order.",
      "Use a stable sorting algorithm to maintain the original order for equal distances."
    ],
    "company": "Point72"
  },
  {
    "question_id": "",
    "title": "Weather Type in Each Country",
    "description": "Given a list of countries and their associated weather conditions, determine the most common weather type across the provided list. Your program should categorize the weather types into 'Sunny', 'Rainy', 'Cloudy', and 'Snowy'. If there is a tie, return the weather type that comes first lexicographically.",
    "topic": "String Manipulation",
    "subtopic": "Counting Frequencies",
    "tags": [
      "String",
      "Counting",
      "Weather"
    ],
    "input_format": "A list of strings representing countries with their weather types in the format 'Country:Weather'.",
    "output_format": "A string representing the most common weather type.",
    "constraints": [
      "1 <= countries.length <= 100",
      "Each country string is formatted correctly and contains no spaces."
    ],
    "examples": [
      {
        "input": "countries = ['France:Sunny', 'Germany:Rainy', 'Italy:Sunny', 'Spain:Cloudy', 'Portugal:Rainy']",
        "output": "Sunny",
        "explanation": "Sunny appears twice, while Rainy appears twice, but Sunny comes first lexicographically."
      },
      {
        "input": "countries = ['Sweden:Cloudy', 'Norway:Snowy', 'Finland:Snowy']",
        "output": "Snowy",
        "explanation": "Both Snowy and Cloudy appear once, but Snowy comes first lexicographically."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a dictionary to count occurrences of each weather type.",
      "Sort the weather types to handle ties."
    ],
    "company": "Point72"
  },
  {
    "question_id": "",
    "title": "Evaluate Boolean Expression",
    "description": "Given a string that represents a boolean expression, evaluate the expression and return its result. The boolean expression will contain operators such as AND ('&'), OR ('|'), and NOT ('!'). Assume the input string only contains the characters 'T' for true, 'F' for false, '&', '|', '!', and parentheses '()'. Your task is to determine the final truth value of the expression.",
    "topic": "String",
    "subtopic": "Expression Evaluation",
    "tags": [
      "String",
      "Boolean",
      "Expression Evaluation"
    ],
    "input_format": "A string expression in the form of 'T', 'F', '&', '|', '!', and parentheses.",
    "output_format": "A boolean value, represented as 'true' or 'false', indicating the result of the evaluated expression.",
    "constraints": [
      "1 <= expression.length <= 1000",
      "The expression is guaranteed to be well-formed."
    ],
    "examples": [
      {
        "input": "expression = 'T|F'",
        "output": "true",
        "explanation": "'T|F' evaluates to true because at least one operand is true."
      },
      {
        "input": "expression = '!(T&F)'",
        "output": "true",
        "explanation": "'!(T&F)' evaluates to true because 'T&F' is false, and the NOT operator negates it."
      },
      {
        "input": "expression = '(T|F)&(F|F)'",
        "output": "false",
        "explanation": "'(T|F)&(F|F)' evaluates to false because the second part '(F|F)' is false and requires both operands to be true."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a stack to evaluate the expression.",
      "Pay attention to operator precedence when evaluating."
    ],
    "company": "Point72"
  },
  {
    "question_id": "",
    "title": "Restaurant Growth",
    "description": "You are given a list of restaurant entries, where each entry contains the name of the restaurant, its current number of customers, and its growth rate. Your task is to determine which restaurant will have the highest number of customers after a given number of months. Each restaurant grows its customer base exponentially based on its growth rate. Return the name of the restaurant with the highest projected customer count after the specified months.",
    "topic": "Mathematics",
    "subtopic": "Exponential Growth",
    "tags": [
      "Exponential",
      "Growth",
      "Simulation"
    ],
    "input_format": "An array of tuples, where each tuple consists of three elements: (restaurant_name: string, current_customers: integer, growth_rate: float) and an integer months representing the number of months to project.",
    "output_format": "A string representing the name of the restaurant with the highest number of customers after the specified number of months.",
    "constraints": [
      "1 <= restaurants.length <= 100",
      "1 <= current_customers <= 10^6",
      "0 <= growth_rate <= 1",
      "1 <= months <= 12"
    ],
    "examples": [
      {
        "input": "restaurants = [('Cafe A', 100, 0.10), ('Bistro B', 200, 0.15)], months = 5",
        "output": "'Bistro B'",
        "explanation": "After 5 months, Cafe A will have 100 * (1 + 0.10)^5 \u2248 161 customers while Bistro B will have 200 * (1 + 0.15)^5 \u2248 254 customers."
      },
      {
        "input": "restaurants = [('Diner', 300, 0.05)], months = 10",
        "output": "'Diner'",
        "explanation": "Diner will have 300 * (1 + 0.05)^10 \u2248 488 customers after 10 months."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Remember the formula for exponential growth: A = P(1 + r)^t.",
      "Consider using a loop to project each restaurant's growth month by month."
    ],
    "company": "Point72"
  },
  {
    "question_id": "",
    "title": "Replace Employee ID With The Unique Identifier",
    "description": "You are given a list of employees with their respective IDs. Your task is to replace each employee's ID with a unique identifier in such a way that no two employees have the same ID after replacement. The unique identifier can be generated from a sequentially increasing integer starting from 1. Implement a function that takes the list of employee IDs and returns a new list with the replaced unique identifiers.",
    "topic": "Hash Table",
    "subtopic": "Mapping",
    "tags": [
      "Array",
      "Hash Table",
      "ID Replacement"
    ],
    "input_format": "A list of integers ids, where each integer represents an employee ID.",
    "output_format": "A list of integers representing the new unique identifiers for each employee.",
    "constraints": [
      "1 <= ids.length <= 10^4",
      "1 <= ids[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "ids = [3, 1, 2, 3, 2]",
        "output": "[1, 2, 3, 1, 3]",
        "explanation": "The unique identifiers are assigned as follows: Employee with ID 1 gets identifier 2, Employee with ID 2 gets identifier 3, and Employee with ID 3 gets identifier 1."
      },
      {
        "input": "ids = [5, 5, 5, 5]",
        "output": "[1, 1, 1, 1]",
        "explanation": "All employees have the same ID, so they all receive the same unique identifier 1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash table to track the mapping of IDs to unique identifiers.",
      "Consider using a set to ensure uniqueness."
    ],
    "company": "Point72"
  },
  {
    "question_id": "",
    "title": "Advantage Shuffle",
    "description": "Given two arrays, A and B, of the same length, your task is to return an array C such that C[i] is the value from A that gives the maximum advantage over B[i]. If no such value exists, use A's smallest value. The advantage condition means that C[i] should be greater than B[i] for the maximum number of i's, and if there are multiple candidates, choose the smallest among them. If all values in A are smaller than or equal to B[i], just use the smallest value in A.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Greedy"
    ],
    "input_format": "Two arrays A and B, each containing n integers.",
    "output_format": "An array of integers C resulting from the advantage shuffle.",
    "constraints": [
      "1 <= A.length, B.length <= 10^4",
      "0 <= A[i], B[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "A = [2, 7, 11, 15], B = [1, 10, 4, 11]",
        "output": "[2, 11, 7, 15]",
        "explanation": "The best choices are 2 for B[0] = 1, 11 for B[1] = 10, 7 for B[2] = 4, and 15 for B[3] = 11."
      },
      {
        "input": "A = [12, 24, 8, 32], B = [13, 25, 32, 11]",
        "output": "[24, 32, 8, 12]",
        "explanation": "The best choices are 24 for B[0] = 13, 32 for B[1] = 25, 8 for B[2] = 32, and 12 for B[3] = 11."
      },
      {
        "input": "A = [5, 6, 7], B = [9, 8, 7]",
        "output": "[5, 6, 7]",
        "explanation": "All elements of A are less or equal to elements of B, so we take the smallest element from A = 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort both arrays to facilitate easier comparison.",
      "Use a two-pointer technique to find the best match for each element in B."
    ],
    "company": "Point72"
  },
  {
    "question_id": "",
    "title": "Generate Parentheses",
    "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. For example, for n = 3, a solution set would be: ['((()))', '(()())', '(())()', '()(())', '()()()'].",
    "topic": "Backtracking",
    "subtopic": "Combination Generation",
    "tags": [
      "Backtracking",
      "Recursion",
      "String"
    ],
    "input_format": "An integer n representing the number of pairs of parentheses.",
    "output_format": "A list of strings containing all combinations of well-formed parentheses.",
    "constraints": [
      "1 <= n <= 8"
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "['((()))', '(()())', '(())()', '()(())', '()()()']",
        "explanation": "The function generates all valid combinations of three pairs of parentheses."
      },
      {
        "input": "n = 2",
        "output": "['(())', '()()']",
        "explanation": "There are two valid combinations for two pairs of parentheses."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use recursion to build the parentheses.",
      "Keep track of the count of open and close parentheses."
    ],
    "company": "Point72"
  },
  {
    "question_id": "",
    "title": "Sliding Window Median",
    "description": "You are given an array of integers and a sliding window size k. Your task is to compute the median of each sliding window of size k as it moves from the start of the array to the end. The median is defined as the middle element in a sorted list of numbers. If there are two middle elements, return the smaller one.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Median"
    ],
    "input_format": "An array of integers nums and an integer k representing the size of the sliding window.",
    "output_format": "An array of floating-point numbers representing the medians of each sliding window.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 < k <= nums.length",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, -1, -3, 5, 3, 6, 7], k = 3",
        "output": "[1.0, -1.0, 3.0, 5.0, 6.0]",
        "explanation": "The medians of the windows are 1.0 (window [1, 3, -1]), -1.0 (window [3, -1, -3]), 3.0 (window [-1, -3, 5]), 5.0 (window [-3, 5, 3]), and 6.0 (window [5, 3, 6])."
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], k = 2",
        "output": "[1.5, 2.5, 3.5, 4.5]",
        "explanation": "The medians are 1.5 (window [1, 2]), 2.5 (window [2, 3]), 3.5 (window [3, 4]), and 4.5 (window [4, 5])."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a data structure that allows for efficient median retrieval.",
      "Think about how to maintain the order of elements in the sliding window."
    ],
    "company": "Point72"
  }
]