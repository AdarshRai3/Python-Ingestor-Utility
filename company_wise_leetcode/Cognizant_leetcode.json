[
  {
    "question_id": "",
    "title": "Smallest Value of the Rearranged Number",
    "description": "Given a non-negative integer num, you need to rearrange its digits to create the smallest possible integer. You are not allowed to add any digits or remove any digits, only rearranging is allowed. If the rearranged number has leading zeros, they should be discarded.",
    "topic": "Mathematics",
    "subtopic": "Number Manipulation",
    "tags": [
      "Sorting",
      "Mathematics",
      "Array"
    ],
    "input_format": "A non-negative integer num.",
    "output_format": "An integer representing the smallest possible rearranged number.",
    "constraints": [
      "0 <= num <= 10^9"
    ],
    "examples": [
      {
        "input": "num = 321",
        "output": "123",
        "explanation": "The digits rearranged from 321 can form 123, which is the smallest."
      },
      {
        "input": "num = 100",
        "output": "1",
        "explanation": "The digits rearranged from 100 can form 001, which is interpreted as 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider converting the number to a string to manipulate the digits.",
      "Sort the digits to find the smallest combination."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Palindrome Number",
    "description": "Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward. For instance, 121 is a palindrome, but 123 is not.",
    "topic": "Math",
    "subtopic": "Number Theory",
    "tags": [
      "Palindrome",
      "Number Theory",
      "Math"
    ],
    "input_format": "An integer x.",
    "output_format": "A boolean value indicating whether x is a palindrome.",
    "constraints": [
      "-2^31 <= x <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "121",
        "output": "true",
        "explanation": "121 reads the same backward as forward."
      },
      {
        "input": "-121",
        "output": "false",
        "explanation": "-121 reads 121- forward which is different from -121."
      },
      {
        "input": "10",
        "output": "false",
        "explanation": "10 reads 01 backward, which is different from 10."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try reversing the number and comparing it to the original.",
      "Consider how negative numbers affect the palindrome check."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Count Subarrays of Length Three With a Condition",
    "description": "Given an array of integers, count the number of contiguous subarrays of length three where the sum of the subarray elements is greater than a given threshold. Your task is to implement a function that efficiently computes this count.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Count"
    ],
    "input_format": "An array of integers nums and an integer threshold.",
    "output_format": "An integer representing the count of valid subarrays.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^6 <= nums[i] <= 10^6",
      "0 <= threshold <= 3 * 10^6"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5], threshold = 6",
        "output": "3",
        "explanation": "The valid subarrays of length 3 are [1, 2, 3], [2, 3, 4], and [3, 4, 5]. Their sums are 6, 9, and 12 respectively."
      },
      {
        "input": "nums = [1, 1, 1, 1, 1], threshold = 2",
        "output": "3",
        "explanation": "The valid subarrays of length 3 are all combinations of [1, 1, 1]. Their sum is 3, which is greater than 2."
      },
      {
        "input": "nums = [5, 1, 2, 3, 4], threshold = 10",
        "output": "1",
        "explanation": "The valid subarray is [2, 3, 4] with a sum of 9, which is not greater than 10. Only [5, 1, 2] has a sum of 8, but still doesn't satisfy the condition."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a sliding window approach to maintain a sum of the last three elements.",
      "Keep track of the window sum as you iterate through the array."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Fibonacci Number",
    "description": "Given an integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Your task is to implement a function that efficiently calculates the Fibonacci number for the given n.",
    "topic": "Dynamic Programming",
    "subtopic": "Recursion and Memoization",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Fibonacci"
    ],
    "input_format": "An integer n (0 <= n <= 30).",
    "output_format": "An integer representing the nth Fibonacci number.",
    "constraints": [
      "0 <= n <= 30"
    ],
    "examples": [
      {
        "input": "n = 0",
        "output": "0",
        "explanation": "The 0th Fibonacci number is defined as 0."
      },
      {
        "input": "n = 1",
        "output": "1",
        "explanation": "The 1st Fibonacci number is defined as 1."
      },
      {
        "input": "n = 5",
        "output": "5",
        "explanation": "The Fibonacci sequence for n = 5 is 0, 1, 1, 2, 3, 5. So, the output is 5."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a recursive approach with memoization for better performance.",
      "Iterative solutions can also be very efficient."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers, return the indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a hash table to store the indices of the numbers you have seen so far.",
      "Check if the complement of the current number exists in the hash table."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest substring of s that is a palindrome. A palindrome is a string that reads the same forwards and backwards. You must not consider empty substrings as valid palindromes.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A single string s consisting of lowercase and uppercase English letters.",
    "output_format": "A string representing the longest palindromic substring.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consist of only digits and English letters."
    ],
    "examples": [
      {
        "input": "babad",
        "output": "bab",
        "explanation": "Both 'bab' and 'aba' are valid longest palindromic substrings."
      },
      {
        "input": "cbbd",
        "output": "bb",
        "explanation": "'bb' is the longest palindromic substring in 'cbbd'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around the center of the palindromic substring.",
      "Remember to check both even and odd lengths of palindromes."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, write a function to determine if t is an anagram of s. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Character Count",
    "tags": [
      "String",
      "Anagram",
      "Hash Map"
    ],
    "input_format": "Two strings, s and t, where 1 <= s.length, t.length <= 5 * 10^4.",
    "output_format": "A boolean value indicating if t is an anagram of s.",
    "constraints": [
      "s and t consist of lowercase English letters.",
      "s.length == t.length"
    ],
    "examples": [
      {
        "input": "s = 'anagram', t = 'nagaram'",
        "output": "true",
        "explanation": "Both strings have the same character counts: a: 3, n: 1, g: 1, r: 1, m: 1."
      },
      {
        "input": "s = 'rat', t = 'car'",
        "output": "false",
        "explanation": "The counts do not match for the characters: r, a, t vs c, a, r."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the frequency of each character in both strings.",
      "Use a hash map or an array indexed by character codes."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. Note that an empty string is also considered valid.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s consisting of parentheses.",
    "output_format": "A boolean value indicating whether the input string is valid.",
    "constraints": [
      "0 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The string contains only one type of parentheses which are correctly matched."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "The string contains multiple types of parentheses which are all correctly matched."
      },
      {
        "input": "s = '(]')",
        "output": "false",
        "explanation": "The string has mismatched parentheses."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The order of closing parentheses is incorrect."
      },
      {
        "input": "s = '{[]} '",
        "output": "true",
        "explanation": "The string contains multiple types of parentheses that are correctly matched."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "When encountering a closing bracket, check if it matches the top of the stack."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Second Highest Salary",
    "description": "Write an SQL query to find the second highest salary from the Employee table. If there is no second highest salary, the query should return null.",
    "topic": "SQL",
    "subtopic": "Aggregation",
    "tags": [
      "SQL",
      "Aggregation",
      "Database"
    ],
    "input_format": "The input consists of a table named Employee with the following columns: id (int), name (varchar), salary (int).",
    "output_format": "Return the second highest salary as an integer. If it does not exist, return null.",
    "constraints": [
      "The Employee table contains at least 1 row.",
      "Salary is a non-negative integer."
    ],
    "examples": [
      {
        "input": "Employee = [[1, 'John', 3000], [2, 'Jane', 6000], [3, 'Joe', 4000]]",
        "output": "4000",
        "explanation": "The salaries are 3000, 6000, and 4000. The second highest is 4000."
      },
      {
        "input": "Employee = [[1, 'John', 3000], [2, 'Jane', 3000], [3, 'Joe', 3000]]",
        "output": "null",
        "explanation": "All salaries are equal; hence there is no second highest salary."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using DISTINCT to eliminate duplicate salaries.",
      "Use ORDER BY to sort the salaries in descending order."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Reverse Integer",
    "description": "Given a 32-bit signed integer, reverse the digits of the integer. If the reversed integer overflows, return 0. The digits of the integer should be reversed, preserving the sign of the integer.",
    "topic": "Math",
    "subtopic": "Integer Manipulation",
    "tags": [
      "Math",
      "Integer",
      "String Manipulation"
    ],
    "input_format": "A single integer x.",
    "output_format": "An integer representing the reversed digits of x, or 0 if it overflows.",
    "constraints": [
      "-2^31 <= x <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "x = 123",
        "output": "321",
        "explanation": "The digits of 123 are reversed to form 321."
      },
      {
        "input": "x = -123",
        "output": "-321",
        "explanation": "The digits of -123 are reversed to form -321, preserving the negative sign."
      },
      {
        "input": "x = 120",
        "output": "21",
        "explanation": "The reversed integer of 120 is 21, as leading zeros are not counted."
      },
      {
        "input": "x = 1534236469",
        "output": "0",
        "explanation": "The reversed integer overflows, returning 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to handle the sign of the integer.",
      "Use modulus and division to extract digits."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Product Sales Analysis I",
    "description": "You are given a list of sales records. Each record is associated with a product ID and a sale amount. Your task is to analyze the sales and return the total sales amount for each product. The results should be sorted by product ID in ascending order.",
    "topic": "Database",
    "subtopic": "Aggregation",
    "tags": [
      "Database",
      "Aggregation",
      "Sales"
    ],
    "input_format": "A list of tuples where each tuple contains a product ID (an integer) and a sale amount (a float).",
    "output_format": "A list of tuples where each tuple contains a product ID and the corresponding total sales amount, sorted by product ID.",
    "constraints": [
      "1 <= sales.length <= 10^5",
      "1 <= product_id <= 10^5",
      "0 <= sale_amount <= 10^4"
    ],
    "examples": [
      {
        "input": "sales = [(1, 100.5), (2, 200.0), (1, 150.0)]",
        "output": "[(1, 250.5), (2, 200.0)]",
        "explanation": "Product ID 1 has sales amounts of 100.5 + 150.0 = 250.5 and Product ID 2 has 200.0."
      },
      {
        "input": "sales = [(3, 100.0), (3, 200.0), (2, 300.0), (1, 50.0)]",
        "output": "[(1, 50.0), (2, 300.0), (3, 300.0)]",
        "explanation": "Product ID 1 has 50.0, Product ID 2 has 300.0, and Product ID 3 has 100.0 + 200.0 = 300.0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "You can use a dictionary to aggregate the sales amounts by product ID.",
      "Ensure to sort the results by product ID before returning."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. A subarray is a contiguous part of an array.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Subarray"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum sum of the contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The contiguous subarray [4,-1,2,1] has the largest sum = 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The only element is 1, which is also the maximum."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The contiguous subarray [5,4,-1,7,8] has the largest sum = 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dynamic programming approach to solve this efficiently.",
      "Keep track of the current subarray sum and update the maximum sum accordingly."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Managers with at Least 5 Direct Reports",
    "description": "You are given a list of employee-manager pairs where each pair represents an employee and their manager. An employee can have multiple direct reports. Your task is to identify all managers who have at least 5 direct reports. Return a list of their names in any order.",
    "topic": "Data Structures",
    "subtopic": "Hash Map",
    "tags": [
      "Hash Map",
      "Tree",
      "Graph"
    ],
    "input_format": "A list of pairs, where each pair is represented as [employee, manager]. Each employee and manager's name is a string.",
    "output_format": "A list of strings representing the names of managers with at least 5 direct reports.",
    "constraints": [
      "1 <= pairs.length <= 10^5",
      "1 <= length of employee and manager's name <= 100"
    ],
    "examples": [
      {
        "input": "[['Alice', 'Bob'], ['Charlie', 'Bob'], ['David', 'Bob'], ['Eve', 'Bob'], ['Frank', 'Bob'], ['George', 'Alice']]",
        "output": "['Bob']",
        "explanation": "Bob has 5 direct reports: Alice, Charlie, David, Eve, and Frank."
      },
      {
        "input": "[['A', 'B'], ['C', 'B'], ['D', 'B'], ['E', 'A'], ['F', 'B'], ['G', 'C'], ['H', 'C'], ['I', 'C']]",
        "output": "['B', 'C']",
        "explanation": "B has 4 direct reports and C has 4, they do not meet the criteria. So, no output."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a map to keep track of direct reports for each manager.",
      "Iterate through the pairs and count reports efficiently."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Remove Duplicates from Sorted Array",
    "description": "Given a sorted array nums, remove the duplicates in-place such that each element appears only once and return the new length of the array. Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "In-place"
    ],
    "input_format": "A sorted array of integers nums.",
    "output_format": "An integer representing the new length of the array with duplicates removed.",
    "constraints": [
      "0 <= nums.length <= 3 * 10^4",
      "-100 <= nums[i] <= 100",
      "nums is sorted in ascending order."
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 2]",
        "output": "2",
        "explanation": "The modified array is [1, 2]. Since there are 2 unique elements, the length is 2."
      },
      {
        "input": "nums = [0,0,1,1,1,2,2,3,3,4]",
        "output": "5",
        "explanation": "The modified array is [0, 1, 2, 3, 4]. There are 5 unique elements."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to track unique elements."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Longest Common Prefix",
    "description": "Write a function that takes an array of strings and returns the longest common prefix among the strings. If there is no common prefix, return an empty string.",
    "topic": "String",
    "subtopic": "Prefix Matching",
    "tags": [
      "String",
      "Prefix",
      "Search"
    ],
    "input_format": "An array of strings, strs, where 1 <= strs.length <= 200 and 0 <= strs[i].length <= 200.",
    "output_format": "A string representing the longest common prefix. If there is no common prefix, return an empty string.",
    "constraints": [
      "1 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "All strings consist of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"flower\", \"flow\", \"flight\"]",
        "output": "\"fl\"",
        "explanation": "The longest common prefix is \"fl\"."
      },
      {
        "input": "strs = [\"dog\", \"racecar\", \"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the strings."
      },
      {
        "input": "strs = [\"ab\", \"a\"]",
        "output": "\"a\"",
        "explanation": "The longest common prefix is \"a\"."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Check characters one by one until they differ.",
      "Consider using the first string as a potential prefix."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Students and Examinations",
    "description": "You are given a list of student scores in a class. Each student has a unique ID, and your task is to determine how many students scored above a certain threshold. Implement a function that takes a list of scores and a threshold value and returns the count of students who scored greater than the threshold.",
    "topic": "Array",
    "subtopic": "Counting",
    "tags": [
      "Array",
      "Counting",
      "Threshold"
    ],
    "input_format": "A list of integers scores representing the scores of students, followed by an integer threshold.",
    "output_format": "An integer representing the count of students who scored above the threshold.",
    "constraints": [
      "1 <= scores.length <= 10^5",
      "0 <= scores[i] <= 100",
      "0 <= threshold <= 100"
    ],
    "examples": [
      {
        "input": "scores = [85, 90, 78, 92, 88], threshold = 85",
        "output": "3",
        "explanation": "The students with scores 90, 92, and 88 scored above 85. Hence, the count is 3."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Iterate through the scores and keep a count of those that exceed the threshold."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Rising Temperature",
    "description": "You are given an array of integers representing daily temperatures. Your task is to find the number of days until a warmer temperature for each day. If there is no future day for which this is possible, put 0 instead. For example, given the array [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Temperature"
    ],
    "input_format": "An integer array temperatures of length n (1 <= n <= 30000), where 30 <= temperatures[i] <= 100.",
    "output_format": "An integer array where each element represents the number of days until a warmer temperature.",
    "constraints": [
      "1 <= temperatures.length <= 30000",
      "30 <= temperatures[i] <= 100"
    ],
    "examples": [
      {
        "input": "[73, 74, 75, 71, 69, 72, 76, 73]",
        "output": "[1, 1, 4, 2, 1, 1, 0, 0]",
        "explanation": "For each day, the output represents how many days until a warmer temperature occurs."
      },
      {
        "input": "[30, 40, 50, 60]",
        "output": "[1, 1, 1, 0]",
        "explanation": "Each day has a warmer day coming in the next position until the last day."
      },
      {
        "input": "[100, 90, 80, 70]",
        "output": "[0, 0, 0, 0]",
        "explanation": "No warmer days are available for any of the input days."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of indices of the temperatures.",
      "While processing each temperature, check for warmer temperatures using the stack."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A string s consisting of English letters, digits, symbols, and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s consists of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = 'abcabcbb'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'abc', which has a length of 3."
      },
      {
        "input": "s = 'bbbbb'",
        "output": "1",
        "explanation": "The longest substring without repeating characters is 'b', with a length of 1."
      },
      {
        "input": "s = 'pwwkew'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'wke', which has a length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach.",
      "Use a set to track characters in the current substring.",
      "Expand the window until you find a repeating character."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array. The number of elements initialized in nums1 and nums2 are m and n respectively. You must do this in-place without using extra space.",
    "topic": "Array",
    "subtopic": "Merging Arrays",
    "tags": [
      "Array",
      "Sorting",
      "Two Pointers"
    ],
    "input_format": "Two integer arrays nums1 and nums2 along with their respective lengths m and n.",
    "output_format": "The merged array nums1 which will contain the elements from both sorted arrays in sorted order.",
    "constraints": [
      "1 <= m, n <= 200",
      "0 <= nums1.length <= m + n",
      "0 <= nums2.length <= n",
      "-10^9 <= nums1[i], nums2[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
        "output": "[1,2,2,3,5,6]",
        "explanation": "After merging the two arrays, nums1 becomes [1,2,2,3,5,6]."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "Since nums2 is empty, nums1 remains [1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using two pointers to track the position in both arrays.",
      "Start merging from the back of nums1 to avoid overwriting values."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Fizz Buzz",
    "description": "Write a program that prints the numbers from 1 to n. But for multiples of three print 'Fizz' instead of the number and for the multiples of five print 'Buzz'. For numbers which are multiples of both three and five print 'FizzBuzz'.",
    "topic": "Mathematics",
    "subtopic": "Conditionals",
    "tags": [
      "Mathematics",
      "Conditionals",
      "Output Formatting"
    ],
    "input_format": "An integer n (1 <= n <= 10^4).",
    "output_format": "A list of strings representing the Fizz Buzz output from 1 to n.",
    "constraints": [
      "1 <= n <= 10^4"
    ],
    "examples": [
      {
        "input": "n = 15",
        "output": [
          "1",
          "2",
          "Fizz",
          "4",
          "Buzz",
          "Fizz",
          "7",
          "8",
          "Fizz",
          "Buzz",
          "11",
          "Fizz",
          "13",
          "14",
          "FizzBuzz"
        ],
        "explanation": "For numbers 1 to 15, 'Fizz' for multiples of 3, 'Buzz' for multiples of 5, and 'FizzBuzz' for multiples of both."
      },
      {
        "input": "n = 5",
        "output": [
          "1",
          "2",
          "Fizz",
          "4",
          "Buzz"
        ],
        "explanation": "For numbers 1 to 5, 'Fizz' for 3 and 'Buzz' for 5."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a loop to iterate from 1 to n.",
      "Check the conditions for Fizz, Buzz, and FizzBuzz in order."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Happy Number",
    "description": "A happy number is defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. Those numbers for which this process ends in 1 are happy numbers. Write a function to determine if a given number n is a happy number.",
    "topic": "Math",
    "subtopic": "Number Theory",
    "tags": [
      "Math",
      "Number Theory",
      "Recursion"
    ],
    "input_format": "A single integer n, where n > 0.",
    "output_format": "Return true if n is a happy number, otherwise return false.",
    "constraints": [
      "1 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "n = 19",
        "output": "true",
        "explanation": "The process goes as follows: 1^2 + 9^2 = 82; 8^2 + 2^2 = 68; 6^2 + 8^2 = 100; 1^2 + 0^2 + 0^2 = 1."
      },
      {
        "input": "n = 2",
        "output": "false",
        "explanation": "The process goes as follows: 2^2 = 4; 4^2 = 16; 1^2 + 6^2 = 37; 3^2 + 7^2 = 58; 5^2 + 8^2 = 89; 8^2 + 9^2 = 145; 1^2 + 4^2 + 5^2 = 42; 4^2 + 2^2 = 20; 2^2 + 0^2 = 4. It cycles endlessly."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the numbers you've seen to detect cycles.",
      "The sum of the squares of digits can be computed by repeatedly taking the modulo and division."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Count Primes",
    "description": "Given an integer n, return the number of prime numbers that are strictly less than n.",
    "topic": "Mathematics",
    "subtopic": "Number Theory",
    "tags": [
      "Math",
      "Prime Numbers",
      "Counting"
    ],
    "input_format": "An integer n, where n > 1.",
    "output_format": "An integer representing the number of prime numbers less than n.",
    "constraints": [
      "2 <= n <= 10^6"
    ],
    "examples": [
      {
        "input": "n = 10",
        "output": "4",
        "explanation": "The prime numbers less than 10 are 2, 3, 5, and 7. Thus, there are 4 primes."
      },
      {
        "input": "n = 20",
        "output": "8",
        "explanation": "The prime numbers less than 20 are 2, 3, 5, 7, 11, 13, 17, and 19. Thus, there are 8 primes."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use the Sieve of Eratosthenes algorithm to find all prime numbers up to n."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an array of integers nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Hash Table"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of unique triplets that add up to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The triplet [-1, -1, 2] and [-1, 0, 1] are the only unique triplets that add up to zero."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "There are no numbers in the input array, hence no triplets can be formed."
      },
      {
        "input": "nums = [0, 1, 1]",
        "output": "[]",
        "explanation": "No triplet can be formed since there are not enough numbers to form a triplet."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the array first to facilitate duplicate skipping and two-pointer technique.",
      "Use two pointers to find pairs that sum up to the target value."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Merge Two Sorted Lists",
    "description": "You are given two sorted linked lists, list1 and list2, each of which is sorted in non-decreasing order. Merge the two lists into one sorted list and return it. The merged list should be made by splicing together the nodes of the first two lists. Do not create new nodes for the merged list; instead, directly merge the existing nodes.",
    "topic": "Linked List",
    "subtopic": "Merging Linked Lists",
    "tags": [
      "Linked List",
      "Merge",
      "Sorting"
    ],
    "input_format": "The input consists of two linked lists, list1 and list2, each represented by the head node.",
    "output_format": "The output should be the head of the merged sorted linked list.",
    "constraints": [
      "The number of nodes in both lists is in the range [0, 50].",
      "-100 <= Node.val <= 100",
      "Both list1 and list2 are guaranteed to be sorted in non-decreasing order."
    ],
    "examples": [
      {
        "input": "list1 = [1, 2, 4], list2 = [1, 3, 4]",
        "output": "[1, 1, 2, 3, 4, 4]",
        "explanation": "The merged linked list is 1 -> 1 -> 2 -> 3 -> 4 -> 4."
      },
      {
        "input": "list1 = [], list2 = [0]",
        "output": "[0]",
        "explanation": "The merged linked list is just 0."
      },
      {
        "input": "list1 = [], list2 = []",
        "output": "[]",
        "explanation": "Both lists are empty, so the merged list is also empty."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try using a dummy node to simplify the merging process.",
      "Iterate through both lists and compare their current nodes."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Move Zeroes",
    "description": "Given an array of integers, you need to move all the zeroes in the array to the end while maintaining the relative order of non-zero elements. You must do this in-place without making a copy of the array.",
    "topic": "Array",
    "subtopic": "In-place Modification",
    "tags": [
      "Array",
      "Two Pointers",
      "In-place"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "The modified array with all zeroes moved to the end.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [0, 1, 0, 3, 12]",
        "output": "[1, 3, 12, 0, 0]",
        "explanation": "After moving the zeroes, the array becomes [1, 3, 12] followed by two zeroes."
      },
      {
        "input": "nums = [0, 0, 1]",
        "output": "[1, 0, 0]",
        "explanation": "The non-zero element 1 shifts to the front with zeroes following it."
      },
      {
        "input": "nums = [1, 2, 3]",
        "output": "[1, 2, 3]",
        "explanation": "There are no zeroes to move, the array remains the same."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a pointer to keep track of the position to insert non-zero elements.",
      "Iterate through the array, shifting non-zero elements to the front."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Binary Search",
    "description": "Given a sorted array of integers and a target value, write a function to search for the target in the array. If the target exists, return its index. Otherwise, return -1. You must write an algorithm with O(log n) runtime complexity.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Binary Search",
      "Array",
      "Searching"
    ],
    "input_format": "An array of integers 'nums' and an integer 'target'.",
    "output_format": "An integer representing the index of the target in the array or -1 if not found.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^4 <= nums[i] <= 10^4",
      "nums is sorted in ascending order."
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 3, 5, 9, 12], target = 9",
        "output": "4",
        "explanation": "The target 9 is found at index 4."
      },
      {
        "input": "nums = [-1, 0, 3, 5, 9, 12], target = 2",
        "output": "-1",
        "explanation": "The target 2 is not found in the array."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using two pointers to maintain the search boundaries.",
      "The middle element can be found using mid = (left + right) / 2."
    ],
    "company": "Cognizant"
  },
  {
    "question_id": "",
    "title": "Median of Two Sorted Arrays",
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).",
    "topic": "Binary Search",
    "subtopic": "Median",
    "tags": [
      "Binary Search",
      "Median",
      "Array"
    ],
    "input_format": "Two sorted arrays nums1 and nums2.",
    "output_format": "A float representing the median of the two sorted arrays.",
    "constraints": [
      "0 <= nums1.length <= 1000",
      "0 <= nums2.length <= 1000",
      "Both nums1 and nums2 are sorted in non-decreasing order."
    ],
    "examples": [
      {
        "input": "nums1 = [1, 3], nums2 = [2]",
        "output": "2.0",
        "explanation": "The merged array is [1, 2, 3], and the median is 2."
      },
      {
        "input": "nums1 = [1, 2], nums2 = [3, 4]",
        "output": "2.5",
        "explanation": "The merged array is [1, 2, 3, 4], and the median is (2 + 3) / 2 = 2.5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider edge cases for array lengths.",
      "Try to use binary search to find the appropriate partition."
    ],
    "company": "Cognizant"
  }
]