[
  {
    "question_id": "",
    "title": "Minimum Deletions to Make Character Frequencies Unique",
    "description": "Given a string, the goal is to determine the minimum number of deletions required to make all character frequencies in the string unique. For instance, if the string consists of characters with the same frequency, you will need to remove enough characters such that the frequencies of the remaining characters are all distinct.",
    "topic": "String",
    "subtopic": "Frequency Count",
    "tags": [
      "String",
      "Frequency",
      "Greedy"
    ],
    "input_format": "A single string s, where 1 <= s.length <= 10^5.",
    "output_format": "An integer representing the minimum number of deletions needed.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "aabbccc",
        "output": "2",
        "explanation": "We can remove one 'b' and one 'c' to make character frequencies: a:2, b:1, c:2, resulting in a frequency set of {1, 2}."
      },
      {
        "input": "aaabbbcc",
        "output": "2",
        "explanation": "We can remove one 'a' and one 'b' to make frequencies: a:2, b:2, c:2. Then remove one 'c' to result in {2, 1}."
      },
      {
        "input": "ceabaacb",
        "output": "2",
        "explanation": "Removing one 'a' and one 'c' results in frequency counts of 2 for 'b', 2 for 'c', and 1 for 'e', giving {1, 2}."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a frequency counter to count occurrences of each character.",
      "Track the seen frequencies to ensure uniqueness."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Percentage of Letter in String",
    "description": "Given a string 's' consisting of uppercase and lowercase letters, and a target letter 'letter', return the percentage of 'letter' instances in 's' rounded to two decimal places. The percentage is computed as the number of times 'letter' appears in 's' divided by the total number of letters in 's', multiplied by 100. If the string is empty, return 0.00.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Percentage",
      "Manipulation"
    ],
    "input_format": "A string s and a character letter.",
    "output_format": "A float representing the percentage of letter occurrences in s, rounded to two decimal places.",
    "constraints": [
      "0 <= s.length <= 1000",
      "letter will always be a single lowercase or uppercase alphabetic letter."
    ],
    "examples": [
      {
        "input": "s = \"HelloWorld\", letter = 'o'",
        "output": "20.00",
        "explanation": "The letter 'o' appears once in 'HelloWorld', which has 10 letters in total. (1/10)*100 = 10.00%"
      },
      {
        "input": "s = \"aaAAAb\", letter = 'a'",
        "output": "71.43",
        "explanation": "The letter 'a' occurs 5 times in 'aaAAAb', which has 7 letters in total. (5/7)*100 \u2248 71.43%"
      },
      {
        "input": "s = \"\", letter = 'a'",
        "output": "0.00",
        "explanation": "The string is empty, thus there's no letter to count."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the occurrences of the letter and compute the total length.",
      "Use floating point division to avoid integer division pitfalls."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Maximum Equal Frequency",
    "description": "You are given an integer array nums. You can perform the following operation any number of times: choose an element and decrease it by 1. Your goal is to make the frequency of each number in the array equal. The frequency of a number is defined as the number of times that number appears in the array. Return the maximum frequency that all numbers can have after performing the operations.",
    "topic": "Array",
    "subtopic": "Frequency Count",
    "tags": [
      "Array",
      "Frequency",
      "Greedy"
    ],
    "input_format": "An integer array nums.",
    "output_format": "An integer representing the maximum equal frequency all numbers can have.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 2, 1, 5, 3, 3, 5]",
        "output": "4",
        "explanation": "By decreasing 5 to 1, we can have the frequencies of [1, 1, 2, 2, 3, 3, 1, 1] which makes the maximum frequency equal to 4."
      },
      {
        "input": "nums = [3, 3, 3, 3, 4, 4]",
        "output": "4",
        "explanation": "We can decrease two of the 3's to 2's, resulting in the array [2, 2, 3, 3, 4, 4] where the max frequency is 4."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider counting the frequency of each number first.",
      "Think about how decreasing numbers affects their frequency.",
      "Try using a greedy approach to find the maximum frequency."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Minimum Number of Operations to Make Array XOR Equal to K",
    "description": "Given an integer array nums and an integer k, you need to determine the minimum number of operations required to make the XOR of the entire array equal to k. An operation consists of selecting any element in the array and changing its value to any integer you wish. Your goal is to minimize the number of operations needed.",
    "topic": "Array",
    "subtopic": "Bit Manipulation",
    "tags": [
      "Array",
      "Bit Manipulation",
      "XOR"
    ],
    "input_format": "An array of integers nums followed by an integer k.",
    "output_format": "An integer representing the minimum number of operations required.",
    "constraints": [
      "1 <= nums.length <= 1000",
      "0 <= nums[i], k <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3], k = 2",
        "output": "1",
        "explanation": "The current XOR of the array is 1 XOR 2 XOR 3 = 0. To make it equal to 2, we can change one of the elements, for example, changing 1 to 2, gives us 2 XOR 2 XOR 3 = 2."
      },
      {
        "input": "nums = [4, 5, 6], k = 3",
        "output": "2",
        "explanation": "The current XOR is 4 XOR 5 XOR 6 = 7. To achieve an XOR of 3, we can change 4 to 3 and 5 to 2, resulting in 3 XOR 2 XOR 6 = 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider what the current XOR of the array is.",
      "Think about how changing elements affects the overall XOR.",
      "If you want to achieve a specific XOR, think about the properties of XOR."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Equal Sum Arrays With Minimum Number of Operations",
    "description": "Given two arrays of integers, determine the minimum number of operations required to make the sums of the two arrays equal. An operation consists of replacing any element in either array with a positive integer. Your goal is to return the minimum number of operations needed or -1 if it's impossible to equate the sums.",
    "topic": "Array",
    "subtopic": "Manipulation",
    "tags": [
      "Array",
      "Manipulation",
      "Greedy"
    ],
    "input_format": "Two arrays of integers, arrayA and arrayB.",
    "output_format": "An integer representing the minimum number of operations to equalize the sums, or -1 if it's impossible.",
    "constraints": [
      "1 <= arrayA.length, arrayB.length <= 10^5",
      "-10^5 <= arrayA[i], arrayB[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "arrayA = [1, 2, 3], arrayB = [4, 5, 6]",
        "output": "2",
        "explanation": "By changing 1 in arrayA to 4 and 2 to 3, sums become equal."
      },
      {
        "input": "arrayA = [1], arrayB = [2]",
        "output": "1",
        "explanation": "Change 1 in arrayA to 2."
      },
      {
        "input": "arrayA = [1, 1, 1], arrayB = [2]",
        "output": "-1",
        "explanation": "It is impossible to equalize the sums due to the limits on positive integers."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the difference between the sums of the two arrays.",
      "You may need to replace the largest elements for optimal operations.",
      "Think about how to balance the sums rather than achieving specific values."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Find a Value of a Mysterious Function Closest to Target",
    "description": "You are given a mysterious function f(x) which is not explicitly defined, but you know its behavior in a certain range. Your task is to find an integer x such that f(x) is as close as possible to a given target value. You need to define the function f(x) for a range [lower, upper] and test integer values within this range to find the closest output to the target. If there are multiple values that yield the same closest output, return the smallest integer x.",
    "topic": "Mathematics",
    "subtopic": "Function Approximation",
    "tags": [
      "Mathematics",
      "Function",
      "Search"
    ],
    "input_format": "Three integers lower, upper, and target, representing the inclusive range of x and the target value.",
    "output_format": "An integer x such that f(x) is closest to the target value.",
    "constraints": [
      "1 <= lower <= upper <= 10^6",
      "-10^9 <= target <= 10^9"
    ],
    "examples": [
      {
        "input": "lower = 1, upper = 10, target = 5",
        "output": "5",
        "explanation": "If f(x) is simply x, then f(5) = 5 which is exactly the target."
      },
      {
        "input": "lower = 1, upper = 10, target = 8",
        "output": "8",
        "explanation": "If f(x) behaves linearly and simply as x, then f(8) is closest to target 8."
      },
      {
        "input": "lower = 1, upper = 10, target = 12",
        "output": "10",
        "explanation": "The closest value under 12 in the range is 10, as 11 is out of bounds."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the properties of the function to derive possible values.",
      "Utilize a binary search if the function allows for it.",
      "Evaluate the function at the boundaries of the input range."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Maximum XOR After Operations",
    "description": "Given an array of integers, you can perform a series of operations on its elements. In each operation, you can XOR any two elements. Your task is to determine the maximum possible XOR value that can be obtained after performing any number of such operations on the given array.",
    "topic": "Bit Manipulation",
    "subtopic": "XOR Operations",
    "tags": [
      "Bit Manipulation",
      "XOR",
      "Mathematics"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum XOR obtainable.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [3, 10, 5, 25, 2, 8]",
        "output": "28",
        "explanation": "The maximum XOR can be achieved by XORing 5 and 25, which produces 28."
      },
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "7",
        "explanation": "The maximum XOR can be obtained by XORing 3 and 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how XOR operates and its properties.",
      "You may need to analyze the bits of the numbers.",
      "Think about how to pair numbers for optimal results."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Divide an Array Into Subarrays With Minimum Cost II",
    "description": "Given an array of integers, you need to divide it into K non-empty contiguous subarrays such that the maximum sum among these subarrays is minimized. Your task is to return the minimum possible value of this maximum sum. The division must respect the original order of elements and every subarray must contain at least one element.",
    "topic": "Dynamic Programming",
    "subtopic": "Array Partitioning",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Partition"
    ],
    "input_format": "The first line contains an integer N (1 <= N <= 30,000), the number of elements in the array. The second line contains N space-separated integers representing the elements of the array.",
    "output_format": "An integer representing the minimum possible value of the maximum sum among the divided subarrays.",
    "constraints": [
      "1 <= N <= 30,000",
      "-10^9 <= arr[i] <= 10^9",
      "1 <= K <= N"
    ],
    "examples": [
      {
        "input": "N = 4, K = 2, arr = [7, 2, 5, 10, 8]",
        "output": "15",
        "explanation": "The optimal split would be [7, 2, 5] and [10, 8], where the maximum sum is 15."
      },
      {
        "input": "N = 5, K = 3, arr = [1, 2, 3, 4, 5]",
        "output": "5",
        "explanation": "The optimal splits are [1, 2, 3] and [4] and [5], where the maximum sum is 5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider binary search on the result for the maximum sum.",
      "Use a greedy approach to check if a certain 'mid' can be achieved."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Divide an Array Into Subarrays With Minimum Cost I",
    "description": "You are given an array of integers. Your task is to divide this array into contiguous subarrays such that the cost of the division is minimized. The cost of a division is defined as the sum of the maximum elements in each subarray. Return the minimum cost achievable by dividing the array.",
    "topic": "Array",
    "subtopic": "Subarray Division",
    "tags": [
      "Array",
      "Subarray",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the minimum cost of dividing the array.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, 2, 5]",
        "output": "6",
        "explanation": "The optimal division is [1, 3] and [2, 5], with max(1,3) + max(2,5) = 3 + 5 = 8."
      },
      {
        "input": "nums = [4, 1, 2, 3]",
        "output": "7",
        "explanation": "The optimal division is [4] and [1, 2, 3], with max(4) + max(1,2,3) = 4 + 3 = 7."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider a dynamic programming approach to store minimum costs.",
      "The problem can be approached by evaluating different subarray splits."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Maximize the Topmost Element After K Moves",
    "description": "You are given a stack represented as a list of integers and an integer K. In one move, you can perform the following operations: pop the topmost element of the stack or push a given integer onto the stack. Your task is to maximize the topmost element of the stack after exactly K moves. If there are no elements left in the stack after K moves, return -1. If it is possible to maximize the topmost element by pushing, you can choose any integer to push. The goal is to determine the maximum value on the top of the stack after K moves.",
    "topic": "Stack",
    "subtopic": "Stack Manipulation",
    "tags": [
      "Stack",
      "Greedy",
      "Maximization"
    ],
    "input_format": "A list of integers representing the stack and an integer K.",
    "output_format": "An integer representing the maximum topmost element after K moves.",
    "constraints": [
      "1 <= stack.length <= 1000",
      "1 <= K <= 1000",
      "-10^9 <= stack[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "stack = [5, 1, 2, 3], K = 2",
        "output": "5",
        "explanation": "Pop 3 (1st move), pop 2 (2nd move), resulting stack is [5, 1]. The maximum topmost element is 5."
      },
      {
        "input": "stack = [1, 2, 3], K = 3",
        "output": "3",
        "explanation": "Pop 3 items (1st move to pop 3, 2nd to pop 2, 3rd to pop 1), resulting stack is empty. We can push 3 back onto the stack."
      },
      {
        "input": "stack = [4, 2, 8], K = 1",
        "output": "8",
        "explanation": "Pop 4 (1st move), resulting stack is [2, 8]. The maximum topmost element is 8."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the options of popping and pushing wisely depending on the value of K.",
      "If K exceeds the number of elements in the stack, pushing a large number could help maximize the top."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Ugly Number III",
    "description": "An ugly number is a positive number whose prime factors only include 2, 3, and 5. Given a positive integer n, return the nth ugly number. Note that 1 is typically treated as an ugly number. Your task is to find the nth ugly number efficiently without generating every number sequentially.",
    "topic": "Mathematics",
    "subtopic": "Number Theory",
    "tags": [
      "Math",
      "Dynamic Programming",
      "Heap"
    ],
    "input_format": "An integer n where 1 <= n <= 10^9.",
    "output_format": "An integer representing the nth ugly number.",
    "constraints": [
      "1 <= n <= 10^9"
    ],
    "examples": [
      {
        "input": "n = 10",
        "output": "12",
        "explanation": "The first ten ugly numbers are [1, 2, 3, 4, 5, 6, 8, 9, 10, 12]. Hence, the 10th ugly number is 12."
      },
      {
        "input": "n = 15",
        "output": "24",
        "explanation": "The first fifteen ugly numbers are [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 18, 20, 21, 24]. Hence, the 15th ugly number is 24."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider utilizing a min-heap for efficiently getting the next ugly number.",
      "Keep track of how many times each prime factor has been used."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "A list of integers `nums` and an integer `target`.",
    "output_format": "A list of two integers representing the indices of the two numbers such that they add up to `target`.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "Each input would have exactly one solution."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "Because nums[0] + nums[1] == 9, we return the indices [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "Because nums[1] + nums[2] == 6, we return the indices [1, 2]."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "Because nums[0] + nums[1] == 6, we return the indices [0, 1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the difference between target and the current number."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Hashing"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of lists containing the unique triplets that sum to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The unique triplets that sum to zero are [-1, -1, 2] and [-1, 0, 1]."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "There are no elements in the array."
      },
      {
        "input": "nums = [0, 1, 1]",
        "output": "[]",
        "explanation": "There are no unique triplets that sum to zero."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the array to simplify the process.",
      "Use two pointers to find complements effectively.",
      "Skip duplicates to avoid repeated triplets."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, return true if t is an anagram of s and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Character Counting",
    "tags": [
      "String",
      "Anagram",
      "Hash Table"
    ],
    "input_format": "Two strings s and t, where 0 <= s.length, t.length <= 5 * 10^4.",
    "output_format": "A boolean value indicating whether t is an anagram of s.",
    "constraints": [
      "s.length == t.length",
      "s and t consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"anagram\", t = \"nagaram\"",
        "output": "true",
        "explanation": "Both strings contain the same letters in a rearranged order."
      },
      {
        "input": "s = \"rat\", t = \"car\"",
        "output": "false",
        "explanation": "The strings have different letters."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a character frequency count for both strings.",
      "Two strings are anagrams if they can be sorted to the same string."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Minimum Fuel Cost to Report to the Capital",
    "description": "In a country, there are n cities connected by roads. Each road connects two cities and has a fuel cost associated with travel. You are tasked with finding the minimum total fuel cost required to send a group of reporters from all cities to the capital city. The travel cost depends on the distance between the cities and the number of reporters traveling. Write a function to calculate this minimum fuel cost.",
    "topic": "Graph",
    "subtopic": "Dijkstra's Algorithm",
    "tags": [
      "Graph",
      "Dijkstra",
      "Shortest Path"
    ],
    "input_format": "An integer n representing the number of cities, an array roads where each element is a triplet [city1, city2, cost], and an integer reporters representing the number of reporters in each city.",
    "output_format": "An integer representing the minimum total fuel cost to send all reporters to the capital.",
    "constraints": [
      "1 <= n <= 1000",
      "0 <= roads.length <= 5000",
      "0 <= reporters <= 100"
    ],
    "examples": [
      {
        "input": "n = 5, roads = [[0, 1, 10], [0, 2, 5], [1, 3, 5], [2, 1, 2], [2, 3, 10]], reporters = 3",
        "output": "30",
        "explanation": "The optimal route is to send reporters from cities 0 through city 2 to city 1, then to the capital. The total cost is 5 (0 to 2) + 2 (2 to 1) + 5 (1 to 3) * 3 reporters = 30."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Dijkstra's algorithm to find the shortest paths.",
      "Calculate the cost based on the number of reporters and the shortest path costs."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Add Digits",
    "description": "Given a non-negative integer num, repeatedly add all its digits until the result has only one digit. For example, if the input is 38, the process will be 3 + 8 = 11, and then 1 + 1 = 2. Therefore, the output will be 2.",
    "topic": "Math",
    "subtopic": "Digit Manipulation",
    "tags": [
      "Math",
      "Digits",
      "Simulation"
    ],
    "input_format": "A non-negative integer num.",
    "output_format": "A single digit integer that is the result of adding the digits of num repeatedly.",
    "constraints": [
      "0 <= num <= 2 * 10^9"
    ],
    "examples": [
      {
        "input": "num = 38",
        "output": "2",
        "explanation": "Repeated addition of digits: 3 + 8 = 11, 1 + 1 = 2."
      },
      {
        "input": "num = 12345",
        "output": "6",
        "explanation": "Repeated addition of digits: 1 + 2 + 3 + 4 + 5 = 15, 1 + 5 = 6."
      },
      {
        "input": "num = 0",
        "output": "0",
        "explanation": "The input is already a single digit."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using properties of modulo to simplify the repeated addition."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Valid Palindrome",
    "description": "Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. A string is a palindrome if it reads the same backward as forward.",
    "topic": "String",
    "subtopic": "Two Pointers",
    "tags": [
      "String",
      "Palindrome",
      "Two Pointers"
    ],
    "input_format": "A string s containing uppercase and lowercase letters, digits, and possibly special characters.",
    "output_format": "A boolean indicating whether the string is a palindrome.",
    "constraints": [
      "0 <= s.length <= 2 * 10^5",
      "s consists only of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"A man, a plan, a canal: Panama\"",
        "output": "true",
        "explanation": "Ignoring non-alphanumeric characters and cases, the cleaned string is \"amanaplanacanalpanama\", which is a palindrome."
      },
      {
        "input": "s = \"race a car\"",
        "output": "false",
        "explanation": "Ignoring non-alphanumeric characters, the cleaned string is \"raceacar\", which is not a palindrome."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to compare characters from the start and the end.",
      "Skip non-alphanumeric characters while comparing."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Rotate Array",
    "description": "Given an array of integers nums, you need to rotate the array to the right by k steps, where k is non-negative. Modifying the input array in-place is required.",
    "topic": "Array",
    "subtopic": "In-place Array Manipulation",
    "tags": [
      "Array",
      "Rotation",
      "In-place"
    ],
    "input_format": "An array of integers nums and a non-negative integer k.",
    "output_format": "The rotated array as an integer array.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= k <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5], k = 2",
        "output": "[4, 5, 1, 2, 3]",
        "explanation": "Rotating the array to the right by 2 steps gives [4, 5] followed by [1, 2, 3]."
      },
      {
        "input": "nums = [1, 2], k = 3",
        "output": "[2, 1]",
        "explanation": "Rotating the array by 3 steps results in the array [2, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the Reverse algorithm for an efficient solution.",
      "Remember to handle the case when k is greater than the length of the array."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices.",
    "output_format": "An integer representing the maximum profit that can be achieved.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "There is no transaction that can give a profit, so the maximum profit is 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a variable to keep track of the minimum price encountered so far.",
      "Calculate the profit as the difference between the current price and the minimum price."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Reconstruct a 2-Row Binary Matrix",
    "description": "You are given an integer array `rowSum` of length `2` where `rowSum[0]` is the sum of the first row and `rowSum[1]` is the sum of the second row of a binary matrix. Your task is to reconstruct and return any binary matrix with exactly 2 rows and a number of columns `n` equal to `rowSum[0] + rowSum[1]`, such that the count of 1\u2019s in each row matches the respective sum in `rowSum`. If multiple solutions exist, you can return any of them. It is guaranteed that at least one valid solution exists.",
    "topic": "Matrix",
    "subtopic": "Construction",
    "tags": [
      "Matrix",
      "Binary",
      "Construction"
    ],
    "input_format": "An array of integers rowSum where rowSum.length == 2.",
    "output_format": "A binary matrix of size 2 x n where n = rowSum[0] + rowSum[1].",
    "constraints": [
      "0 <= rowSum[0], rowSum[1] <= 100",
      "rowSum[0] + rowSum[1] > 0"
    ],
    "examples": [
      {
        "input": "rowSum = [2, 3]",
        "output": "[[1, 1, 0, 0, 0], [1, 1, 1, 0, 0]]",
        "explanation": "The first row has 2 ones and the second row has 3 ones."
      },
      {
        "input": "rowSum = [0, 3]",
        "output": "[[0, 0, 0], [1, 1, 1]]",
        "explanation": "The first row has 0 ones and the second row has 3 ones."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Focus on the distribution of 1's between the two rows.",
      "Ensure the total number of 1's matches the sum of the rowSum array."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the heights of bars, compute how much water is trapped after raining. The width of each bar is 1.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers heights, where heights[i] is the height of the i-th bar.",
    "output_format": "An integer representing the total amount of trapped rainwater.",
    "constraints": [
      "0 <= heights.length <= 10^2",
      "0 <= heights[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "heights = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The water is trapped between the bars, resulting in a total of 6 units of water."
      },
      {
        "input": "heights = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The total trapped water above the bars is 9 units."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how much water can be trapped at each position.",
      "Use two pointers to keep track of the left and right boundaries."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within a string.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A string s (0 <= s.length <= 10^5).",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s consists of English letters, digits, symbols, and spaces."
    ],
    "examples": [
      {
        "input": "abcabcbb",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'abc', which has a length of 3."
      },
      {
        "input": "bbbbb",
        "output": "1",
        "explanation": "The longest substring without repeating characters is 'b', which has a length of 1."
      },
      {
        "input": "pwwkew",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'wke', which has a length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window to keep track of the current substring.",
      "Use a set to store characters in the current window.",
      "When encountering a repeated character, shrink the window from the left."
    ],
    "company": "American Express"
  },
  {
    "question_id": "",
    "title": "Permutations",
    "description": "Given a collection of distinct integers, return all possible permutations. You can return the answer in any order. The permutations should contain all the integers from the collection, and each permutation should have the same length as the original collection.",
    "topic": "Backtracking",
    "subtopic": "Permutations",
    "tags": [
      "Backtracking",
      "Recursion",
      "Permutations"
    ],
    "input_format": "A list of distinct integers nums.",
    "output_format": "A list of lists, where each list is one permutation of the input integers.",
    "constraints": [
      "1 <= nums.length <= 6",
      "-10 <= nums[i] <= 10"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]",
        "explanation": "All possible permutations of [1, 2, 3] include the combinations listed."
      },
      {
        "input": "nums = [0, 1]",
        "output": "[[0, 1], [1, 0]]",
        "explanation": "There are two possible permutations of [0, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use backtracking to explore all possible combinations.",
      "Consider how to keep track of the numbers that have already been used."
    ],
    "company": "American Express"
  }
]