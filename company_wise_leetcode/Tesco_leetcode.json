[
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals and return an array of the non-overlapping intervals that cover all the intervals in the input.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Intervals"
    ],
    "input_format": "A list of lists where each inner list represents an interval [start, end].",
    "output_format": "A list of merged intervals without overlaps.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "[[1, 2], [2, 3], [4, 5], [6, 8], [7, 9]]",
        "output": "[[1, 3], [4, 5], [6, 9]]",
        "explanation": "The intervals [1, 2] and [2, 3] overlap, and thus merge to [1, 3]. The intervals [6, 8] and [7, 9] also overlap, merging to [6, 9]."
      },
      {
        "input": "[[1, 4], [2, 3]]",
        "output": "[[1, 4]]",
        "explanation": "The intervals overlap completely, hence merged into a single interval [1, 4]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on the start times.",
      "Use a loop to check for overlapping intervals."
    ],
    "company": "Tesco"
  },
  {
    "question_id": "",
    "title": "Decode String",
    "description": "Given an encoded string, return its decoded version. The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. You may assume that the input string is always valid. No extra spaces are present in the input. For instance, '3[a2[c]]' decodes to 'accaccacc'.",
    "topic": "String",
    "subtopic": "Decoding",
    "tags": [
      "String",
      "Decoding",
      "Recursion"
    ],
    "input_format": "A single encoded string 's'.",
    "output_format": "A decoded string as per the encoded format.",
    "constraints": [
      "1 <= s.length <= 30",
      "s consists of digits, uppercase English letters, and square brackets '[]'.",
      "'encoded_string' is guaranteed to be valid, and no extra spaces are present."
    ],
    "examples": [
      {
        "input": "s = '3[a2[c]]'",
        "output": "accaccacc",
        "explanation": "'3[a2[c]]' unpacks to 'aac' repeated 3 times which results in 'accaccacc'."
      },
      {
        "input": "s = '2[abc]3[cd]ef'",
        "output": "abcabccdcdcdef",
        "explanation": "'2[abc]' gives 'abcabc' and '3[cd]' gives 'cdcdcd', combined with 'ef' results in 'abcabccdcdcdef'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to handle numbers and characters.",
      "Consider using two pointers to keep track of the current character and the current number."
    ],
    "company": "Tesco"
  },
  {
    "question_id": "",
    "title": "Insert Interval",
    "description": "Given a collection of intervals, the task is to insert a new interval into the intervals (merge if necessary). The intervals are non-overlapping and are sorted by their start time. You need to determine the new list of intervals after the insertion.",
    "topic": "Array",
    "subtopic": "Interval Management",
    "tags": [
      "Array",
      "Intervals",
      "Sorting",
      "Merge"
    ],
    "input_format": "A list of intervals 'intervals' where each interval is represented by a pair of integers [start, end], and a new interval 'newInterval' represented as [start, end].",
    "output_format": "A list of merged intervals after inserting the new interval.",
    "constraints": [
      "0 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] < intervals[i][1] <= 10^5",
      "newInterval.length == 2",
      "0 <= newInterval[0] < newInterval[1] <= 10^5"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[6,9]], newInterval = [2,5]",
        "output": "[[1,5],[6,9]]",
        "explanation": "After inserting [2,5], the intervals merge to become [[1,5],[6,9]]."
      },
      {
        "input": "intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]",
        "output": "[[1,2],[3,10],[12,16]]",
        "explanation": "The new interval [4,8] merges with [3,5] and [6,7] to form [3,10]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider where the new interval fits in the current list of intervals.",
      "Use a loop to find the intervals that overlap with the new interval."
    ],
    "company": "Tesco"
  },
  {
    "question_id": "",
    "title": "Meeting Rooms II",
    "description": "Given an array of meeting time intervals consisting of start and end times, find the minimum number of conference rooms required to hold all the meetings. Each meeting can start at the same time another ends, so we will not consider them as overlapping.",
    "topic": "Interval Management",
    "subtopic": "Greedy Algorithm",
    "tags": [
      "Heap",
      "Sort",
      "Greedy"
    ],
    "input_format": "An array of intervals where each interval is represented as an array of two integers [start, end].",
    "output_format": "An integer representing the minimum number of conference rooms required.",
    "constraints": [
      "0 <= intervals.length <= 10^4",
      "0 <= intervals[i][0] < intervals[i][1] <= 10^6"
    ],
    "examples": [
      {
        "input": "intervals = [[0, 30], [5, 10], [15, 20]]",
        "output": "2",
        "explanation": "The first and second meetings overlap, so two rooms are required."
      },
      {
        "input": "intervals = [[7, 10], [2, 4]]",
        "output": "1",
        "explanation": "The meetings do not overlap, so only one room is required."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the intervals by start time.",
      "Use a min-heap to track the end times of meetings."
    ],
    "company": "Tesco"
  }
]