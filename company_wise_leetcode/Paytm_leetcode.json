[
  {
    "question_id": "",
    "title": "Remove All Adjacent Duplicates In String",
    "description": "Given a string s, iteratively remove all adjacent duplicate characters, until no more adjacent duplicates exist. Return the final string after all such removals have been made.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Two Pointers"
    ],
    "input_format": "A string s (1 <= s.length <= 10^5) consisting of lowercase English letters.",
    "output_format": "A string representing the filtered version of s with all adjacent duplicates removed.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'abbaca'",
        "output": "'ca'",
        "explanation": "Removing 'bb' from 'abbaca' results in 'aaca'. Then removing 'aa' results in 'c'."
      },
      {
        "input": "s = 'azxxzy'",
        "output": "'ay'",
        "explanation": "Removing 'xx' from 'azxxzy' results in 'azy'. Then removing 'zz' results in 'ay'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a stack to keep track of characters.",
      "Look at the last character in the stack to decide whether to pop or push a new character."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Longest Nice Subarray",
    "description": "Given an integer array, find the length of the longest subarray that is 'nice'. A nice subarray is defined as one where all numbers are either positive or negative, and no two adjacent elements can have the same absolute value. You need to determine the maximum length of such a subarray.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest nice subarray.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^6 <= nums[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [1, -1, 2, -2, 3, 3, -3, -4]",
        "output": "6",
        "explanation": "The longest nice subarray is [1, -1, 2, -2, 3, -3] which has a length of 6."
      },
      {
        "input": "nums = [1, 2, 2, -2, -3, -3]",
        "output": "4",
        "explanation": "The longest nice subarray is [2, -2, -3] or [1, 2, -2, -3] which both have a length of 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach.",
      "Keep track of the last added element to ensure the subarray stays nice.",
      "Use two pointers to expand and contract the window."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Number of Unequal Triplets in Array",
    "description": "Given an array of integers, determine the number of triplets (i, j, k) such that 0 <= i < j < k < nums.length and nums[i], nums[j], nums[k] are all distinct. Return the total count of such triplets.",
    "topic": "Array",
    "subtopic": "Combinatorics",
    "tags": [
      "Array",
      "Combinatorics",
      "Triplets"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the number of unequal triplets.",
    "constraints": [
      "1 <= nums.length <= 100",
      "-100 <= nums[i] <= 100"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "1",
        "explanation": "The only triplet is (1, 2, 3) which are all distinct."
      },
      {
        "input": "nums = [1, 1, 1]",
        "output": "0",
        "explanation": "There are no distinct triplets as all elements are the same."
      },
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "4",
        "explanation": "The distinct triplets are (1, 2, 3), (1, 2, 4), (1, 3, 4), and (2, 3, 4)."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a set to keep track of distinct numbers.",
      "Consider the indices carefully to ensure distinct elements."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Find Indices With Index and Value Difference I",
    "description": "You are given an integer array `nums`. Your task is to find all the indices `i` such that the absolute difference between the index `i` and the value `nums[i]` is equal to `k`, where `k` is a non-negative integer. Return these indices in an array. If there are no such indices, return an empty array.",
    "topic": "Array",
    "subtopic": "Index Manipulation",
    "tags": [
      "Array",
      "Index",
      "Difference"
    ],
    "input_format": "An array of integers `nums` and a non-negative integer `k`.",
    "output_format": "An array of indices where the condition meets.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5",
      "0 <= k <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [0, 2, 1, 4], k = 1",
        "output": "[0, 2]",
        "explanation": "Indices 0 and 2 meet the condition: |0 - 0| = 0 and |2 - 1| = 1."
      },
      {
        "input": "nums = [3, 2, 4, 3], k = 2",
        "output": "[1]",
        "explanation": "Index 1 meets the condition: |1 - 2| = 1."
      },
      {
        "input": "nums = [1, 1, 1, 1], k = 0",
        "output": "[0, 1, 2, 3]",
        "explanation": "All indices meet the condition as |i - 1| = 0."
      },
      {
        "input": "nums = [5, 7, 9], k = 10",
        "output": "[]",
        "explanation": "No indices meet the condition."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Iterate through the array and check the condition for each index.",
      "Use the absolute function to calculate the difference."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Find Indices With Index and Value Difference II",
    "description": "You are given an array of integers nums. Your task is to find all indices i where the absolute difference between the index and the value at that index is equal to a specific value k. In other words, return all indices where |i - nums[i]| = k.",
    "topic": "Array",
    "subtopic": "Index Manipulation",
    "tags": [
      "Array",
      "Index",
      "Difference"
    ],
    "input_format": "An array of integers nums and an integer k.",
    "output_format": "An array of indices that satisfy the condition.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5",
      "0 <= k <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [0, 1, 2, 3, 4], k = 2",
        "output": "[2, 3]",
        "explanation": "At index 2, |2 - 2| = 0 and at index 3, |3 - 4| = 1. None of the other indices satisfy |i - nums[i]| = 2."
      },
      {
        "input": "nums = [1, 1, 1, 1], k = 0",
        "output": "[0, 1, 2, 3]",
        "explanation": "At each index, |i - nums[i]| = 0, which is equal to k."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider iterating through each index to check the condition.",
      "Use a loop and check the absolute difference for each index."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Minimize Maximum of Array",
    "description": "Given an array of integers, you need to minimize the maximum value of the array by performing a series of operations. In one operation, you can select any index in the array and decrease the value at that index by 1. Your goal is to determine the minimum possible maximum value of the array after performing at most 'k' such operations.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Greedy"
    ],
    "input_format": "An array of integers nums and an integer k (0 <= k <= 10^9).",
    "output_format": "An integer representing the minimum maximum value of the array after up to 'k' operations.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i] <= 10^9",
      "0 <= k <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [3, 7, 1, 6], k = 8",
        "output": "3",
        "explanation": "We can decrease 7 to 3 (8 operations spent), resulting in the array: [3, 3, 1, 3]. The maximum value is now 3."
      },
      {
        "input": "nums = [10, 1, 2], k = 6",
        "output": "3",
        "explanation": "We can decrease 10 to 4 (6 operations spent), resulting in the array: [4, 1, 2]. The maximum value is now 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try binary search on the maximum value.",
      "Check if it is possible to achieve a certain maximum given 'k' operations.",
      "Consider the sum of the differences needed to lower the values."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Min Stack",
    "description": "Design a stack that supports the following operations: push, pop, top, and retrieving the minimum element in constant time.<br>Implement the MinStack class: <br>- void push(int val) - Pushes the element val onto the stack. <br>- void pop() - Removes the element on the top of the stack. <br>- int top() - Gets the top element of the stack. <br>- int getMin() - Retrieves the minimum element in the stack.",
    "topic": "Stack",
    "subtopic": "Data Structure Design",
    "tags": [
      "Stack",
      "Data Structure",
      "Design"
    ],
    "input_format": "The operations will be given in the form of a list containing commands: 'push', 'pop', 'top', and 'getMin' along with their respective values where applicable.",
    "output_format": "An array of integers representing the result of 'top' and 'getMin' operations in the order they are called.",
    "constraints": [
      "The number of calls to push, pop, top, and getMin will be at most 1000.",
      "All the operations will be called during a single execution of the program."
    ],
    "examples": [
      {
        "input": "operations = ['MinStack', 'push', 'push', 'getMin', 'pop', 'top', 'getMin'], values = [[], [5], [3], [], [], [], []]",
        "output": "[null, null, null, 3, null, 5, 5]",
        "explanation": "'MinStack' initializes the stack. 'push(5)' and 'push(3)' add elements to the stack. 'getMin()' returns 3. 'pop()' removes the top element (3). 'top()' returns 5. 'getMin()' returns 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use an auxiliary stack to keep track of minimum values.",
      "Think about how to retrieve the minimum efficiently with each operation."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Number of Divisible Substrings",
    "description": "Given a string of digits and an integer k, return the number of substrings that are divisible by k. A substring is considered divisible if the integer value of that substring modulo k is zero.",
    "topic": "String",
    "subtopic": "Substring",
    "tags": [
      "String",
      "Substring",
      "Modulo"
    ],
    "input_format": "The first input is a string s representing the digits, and the second input is an integer k.",
    "output_format": "An integer representing the total number of divisible substrings.",
    "constraints": [
      "1 <= s.length <= 1000",
      "1 <= k <= 1000",
      "s only contains digits '0'-'9'"
    ],
    "examples": [
      {
        "input": "s = '123456', k = 3",
        "output": "5",
        "explanation": "The divisible substrings are: '12', '3', '456', '6', and '123456'."
      },
      {
        "input": "s = '100', k = 10",
        "output": "3",
        "explanation": "The divisible substrings are: '10', '0', and '100'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider all possible substrings.",
      "Use modulo operation to check divisibility.",
      "Keep track of divisibility as you iterate through substrings."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Linked List Cycle II",
    "description": "Given a linked list, determine if it has a cycle in it. If there is a cycle, return the node where the cycle begins. If there is no cycle, return null. You must solve the problem using O(1) space complexity.",
    "topic": "Linked List",
    "subtopic": "Detecting Cycle",
    "tags": [
      "Linked List",
      "Cycle Detection",
      "Two Pointers"
    ],
    "input_format": "The head of the linked list.",
    "output_format": "The node where the cycle begins, or null if there is no cycle.",
    "constraints": [
      "The number of nodes in the list is in the range [0, 10^4].",
      "The values of the nodes are between -10^5 and 10^5."
    ],
    "examples": [
      {
        "input": "head = [3,2,0,-4], pos = 1",
        "output": "Node with value 2",
        "explanation": "The linked list has a cycle where the tail connects to the second node."
      },
      {
        "input": "head = [1,2], pos = 0",
        "output": "Node with value 1",
        "explanation": "The linked list has a cycle where the tail connects to the first node."
      },
      {
        "input": "head = [1], pos = -1",
        "output": "null",
        "explanation": "The linked list does not contain a cycle."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use two pointers to traverse the list, one moving faster than the other.",
      "If the fast and slow pointers meet, there is a cycle.",
      "To find the entrance of the cycle, move one pointer to the head and keep the other at the meeting point."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Every opening bracket must have a corresponding closing bracket of the same type. The following are considered valid pairs: '()', '{}', '[]'.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string 's' containing only the characters '(', ')', '{', '}', '[' and ']'.",
    "output_format": "Return a boolean value: 'true' if the string is valid, and 'false' otherwise.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The string contains one pair of valid parentheses."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "All pairs of brackets are valid."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The brackets are not matched correctly."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The brackets are closed in the wrong order."
      },
      {
        "input": "s = '{[()]}')",
        "output": "true",
        "explanation": "All pairs of brackets are valid and properly nested."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "For each closing bracket, check for a corresponding opening bracket at the top of the stack."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Container With Most Water",
    "description": "You are given an integer array height\u00a0of length n. Each height[i] represents the height of a vertical line drawn at index i. The width between two lines is given by the distance between their indices. Calculate the maximum amount of water a container can store between the lines formed by the heights.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy"
    ],
    "input_format": "An integer array height with n elements, where height[i] represents the height of the line.",
    "output_format": "An integer representing the maximum amount of water that can be contained.",
    "constraints": [
      "2 <= height.length <= 10^5",
      "0 <= height[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "height = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The container formed by height[1] and height[8] can hold 49 units of water (7 units wide and 7 units tall)."
      },
      {
        "input": "height = [1,1]",
        "output": "1",
        "explanation": "The container formed by the two lines can hold 1 unit of water (1 unit wide and 1 unit tall)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the area formed between two lines and how to maximize it.",
      "Use two pointers to find the potential maximum area."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Find Minimum in Rotated Sorted Array",
    "description": "Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand. You are to find the minimum element in this rotated sorted array. You may assume that no duplicate exists in the array.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Searching"
    ],
    "input_format": "An integer array 'nums' of length n.",
    "output_format": "An integer representing the minimum element in the rotated sorted array.",
    "constraints": [
      "1 <= n <= 5000",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [3, 4, 5, 1, 2]",
        "output": "1",
        "explanation": "The minimum element in the array is 1."
      },
      {
        "input": "nums = [4, 5, 6, 7, 0, 1, 2]",
        "output": "0",
        "explanation": "The minimum element in the array is 0."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The array contains only one element, which is the minimum."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to find the pivot.",
      "If the middle element is greater than the rightmost element, the minimum lies to the right.",
      "If the middle element is less than the rightmost element, the minimum lies to the left including the middle."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Longest Consecutive Sequence",
    "description": "Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your algorithm should run in O(n) complexity.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Consecutive Sequence"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest consecutive elements sequence.",
    "constraints": [
      "0 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [100, 4, 200, 1, 3, 2]",
        "output": "4",
        "explanation": "The longest consecutive elements sequence is [1, 2, 3, 4], which has a length of 4."
      },
      {
        "input": "nums = [0, 0, 1, 1, 2, 2, 3, 3]",
        "output": "4",
        "explanation": "The longest consecutive elements sequence is [0, 1, 2, 3], which has a length of 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a HashSet to store unique elements.",
      "Check for the start of a sequence before counting.",
      "Utilize adjacent numbers to identify consecutive sequences."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A palindromic substring is a substring that reads the same backward as forward.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A string s consisting of lowercase and uppercase letters.",
    "output_format": "A string representing the longest palindromic substring in s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only digits and English letters."
    ],
    "examples": [
      {
        "input": "s = \"babad\"",
        "output": "\"bab\"",
        "explanation": "Both \"bab\" and \"aba\" are valid longest palindromic substrings; we return \"bab\" because it appears first."
      },
      {
        "input": "s = \"cbbd\"",
        "output": "\"bb\"",
        "explanation": "The longest palindromic substring is \"bb\"."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around the center of the palindrome.",
      "Check both odd and even length palindromes."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Next Permutation",
    "description": "Implement the 'next permutation' algorithm, which rearranges the numbers into the lexicographically next greater permutation of numbers. If such arrangement is not possible, it must be re-arranged as the lowest possible order (i.e., sorted in ascending order). The algorithm must run in-place and use only constant extra memory.",
    "topic": "Array",
    "subtopic": "Permutation",
    "tags": [
      "Array",
      "Permutation",
      "In-place"
    ],
    "input_format": "An array of integers nums representing the current permutation.",
    "output_format": "The array nums modified to its next permutation in lexicographical order.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 100"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "[1, 3, 2]",
        "explanation": "The next permutation after [1, 2, 3] is [1, 3, 2]."
      },
      {
        "input": "nums = [3, 2, 1]",
        "output": "[1, 2, 3]",
        "explanation": "No next permutation is possible, so it becomes the lowest order [1, 2, 3]."
      },
      {
        "input": "nums = [1, 1, 5]",
        "output": "[1, 5, 1]",
        "explanation": "The next permutation after [1, 1, 5] is [1, 5, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Look for the rightmost pair where the first number is less than the second.",
      "Swap this number with the smallest number to its right that is larger.",
      "Reverse the sequence to the right of the position found."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Reverse Words in a String",
    "description": "Given a string s, you need to reverse the order of the words in the string. A word is defined as a sequence of characters that is separated by spaces. Your solution should not modify the characters within the words, only the order of the words themselves. Leading and trailing spaces in the input string should be ignored, and there should be exactly one space between words in the reversed output string.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Interview"
    ],
    "input_format": "A string s consisting of words and spaces.",
    "output_format": "A string representing the reversed order of words.",
    "constraints": [
      "1 <= s.length <= 10^4"
    ],
    "examples": [
      {
        "input": "s = '  hello world  '",
        "output": "'world hello'",
        "explanation": "The words 'hello' and 'world' are reversed in order."
      },
      {
        "input": "s = 'LeetCode is awesome'",
        "output": "'awesome is LeetCode'",
        "explanation": "The words 'LeetCode', 'is', and 'awesome' are reversed."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Trim leading and trailing spaces first.",
      "Split the string by spaces to get individual words.",
      "Join the words back together in reversed order."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Map",
    "tags": [
      "Array",
      "Hash Map",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums followed by an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Assume that there is exactly one solution."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9, so the indices are [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6, so the indices are [1, 2]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the difference between the target and the current number."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an array of integers, find all unique triplets (a, b, c) in the array such that a + b + c = 0. The solution set must not contain duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Hash Table"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of unique triplets that sum up to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The unique triplets that sum up to zero are [-1, -1, 2] and [-1, 0, 1]."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "An empty array has no triplets."
      },
      {
        "input": "nums = [0, 1, 1]",
        "output": "[]",
        "explanation": "No triplet can sum up to zero."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the array first.",
      "Use a two-pointer technique to find pairs."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string. For example, in the string 'abcabcbb', the answer is 'abc', with the length of 3.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A string s of lowercase and uppercase letters.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s consists of English letters, digits, symbols and spaces."
    ],
    "examples": [
      {
        "input": "s = 'abcabcbb'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'abc', which has a length of 3."
      },
      {
        "input": "s = 'bbbbb'",
        "output": "1",
        "explanation": "The longest substring without repeating characters is 'b', with a length of 1."
      },
      {
        "input": "s = 'pwwkew'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'wke', with a length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window technique to track characters."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Word Search",
    "description": "Given a 2D board of characters and a string word, return true if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cell, where 'adjacent' cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.",
    "topic": "Backtracking",
    "subtopic": "Depth First Search",
    "tags": [
      "Backtracking",
      "Depth First Search",
      "Matrix"
    ],
    "input_format": "A 2D grid of characters board and a string word.",
    "output_format": "A boolean value indicating whether the word exists in the grid.",
    "constraints": [
      "1 <= board.length <= 200",
      "1 <= board[i].length <= 200",
      "board[i][j] is a lowercase English letter.",
      "1 <= word.length <= 15"
    ],
    "examples": [
      {
        "input": "board = [['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], word = 'ABCCED'",
        "output": "true",
        "explanation": "The word 'ABCCED' can be constructed from the given board by moving sequentially in adjacent cells."
      },
      {
        "input": "board = [['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], word = 'SEE'",
        "output": "true",
        "explanation": "The word 'SEE' can be constructed from the given board by moving sequentially in adjacent cells."
      },
      {
        "input": "board = [['A','B','C','E'],['S','F','C','S'],['A','D','E','E']], word = 'ABCB'",
        "output": "false",
        "explanation": "The word 'ABCB' cannot be constructed due to revisiting the cell containing 'B'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use Depth First Search (DFS) to explore possible paths.",
      "Keep track of visited cells to prevent revisiting."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Largest Number",
    "description": "Given a list of non-negative integers, arrange them such that they form the largest number possible. The result is to be returned as a string. Note that the arrangement of numbers is important, and the largest number form is not simply the numerical maximum of the inputs.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Greedy"
    ],
    "input_format": "An array of non-negative integers nums.",
    "output_format": "A string representing the largest number that can be formed.",
    "constraints": [
      "0 <= nums.length <= 100",
      "0 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [10, 2]",
        "output": "210",
        "explanation": "By arranging 2 and 10, the largest number formed is 210."
      },
      {
        "input": "nums = [3, 30, 34, 5, 9]",
        "output": "9534330",
        "explanation": "The largest arrangement is 9, 5, 34, 3, 30, which forms 9534330."
      },
      {
        "input": "nums = [0, 0]",
        "output": "0",
        "explanation": "Both numbers are zero, thus the largest number is obviously 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the concatenation of two numbers in both possible orders to decide their order.",
      "You may need to implement a custom sorting function."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list.",
    "topic": "Linked List",
    "subtopic": "Reversing Linked List",
    "tags": [
      "Linked List",
      "Reversal",
      "Pointer"
    ],
    "input_format": "A ListNode object representing the head of the linked list.",
    "output_format": "A ListNode object representing the head of the reversed linked list.",
    "constraints": [
      "The number of nodes in the linked list is in the range [0, 5000].",
      "0 <= Node.val <= 1000"
    ],
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5]",
        "output": "[5, 4, 3, 2, 1]",
        "explanation": "Reversing the linked list results in a new head which is 5 and followed by 4, 3, 2, and 1."
      },
      {
        "input": "head = []",
        "output": "[]",
        "explanation": "An empty linked list remains empty when reversed."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use three pointers to reverse the links in the list: previous, current, and next."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the heights of bars, compute how much water it can trap after raining. The width of each bar is 1 unit. Ensure to consider the rainwater that is trapped by the bars depending on their heights.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers representing the heights of the bars.",
    "output_format": "An integer representing the total amount of trapped rainwater.",
    "constraints": [
      "n == height.length",
      "0 <= n <= 10^2",
      "0 <= height[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The height array can trap 6 units of water after it rains."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The height array can trap 9 units of water after it rains."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the maximum height to the left and right for each bar.",
      "Use two pointers to traverse the height array."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Execute Asynchronous Functions in Parallel",
    "description": "You are given a list of asynchronous functions. Your task is to execute all of them in parallel and return the results as an array. Ensure that when all asynchronous operations complete, their respective results are gathered in the same order as the original list of functions. You must implement a function that takes this list as input and returns a promise that resolves to the array of results.",
    "topic": "Asynchronous Programming",
    "subtopic": "Promise Handling",
    "tags": [
      "Asynchronous",
      "Promises",
      "Parallel Execution"
    ],
    "input_format": "An array of functions, where each function returns a Promise.",
    "output_format": "A promise that resolves to an array containing the result of each provided function.",
    "constraints": [
      "1 <= functions.length <= 100",
      "Each function returns a Promise that resolves to a value within 1 second."
    ],
    "examples": [
      {
        "input": "[() => new Promise(resolve => setTimeout(() => resolve(1), 1000)), () => new Promise(resolve => setTimeout(() => resolve(2), 500))]",
        "output": "[1, 2]",
        "explanation": "Both functions are executed in parallel, and their results (1 and 2) are returned in the order of execution."
      },
      {
        "input": "[() => new Promise(resolve => setTimeout(() => resolve('hello'), 300)), () => new Promise(resolve => setTimeout(() => resolve('world'), 200))]",
        "output": "['hello', 'world']",
        "explanation": "The two promises resolve at different times, but the results are collected in the order the functions were provided."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Promise.all to execute promises concurrently.",
      "Maintain the order of functions while collecting results."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Unique Number of Occurrences",
    "description": "Given an integer array arr, return true if the number of occurrences of each value in the array is unique, or false otherwise.",
    "topic": "Array",
    "subtopic": "Counting Elements",
    "tags": [
      "Array",
      "HashMap",
      "Counting"
    ],
    "input_format": "An array of integers arr.",
    "output_format": "A boolean value indicating whether the occurrences of each integer are unique.",
    "constraints": [
      "1 <= arr.length <= 1000",
      "-1000 <= arr[i] <= 1000"
    ],
    "examples": [
      {
        "input": "arr = [1, 2, 2, 1, 1, 3]",
        "output": "true",
        "explanation": "The occurrences are 1 occurs 3 times, 2 occurs 2 times, and 3 occurs 1 time. All counts are unique."
      },
      {
        "input": "arr = [1, 2, 3, 4]",
        "output": "true",
        "explanation": "Each number occurs once, so all counts are unique."
      },
      {
        "input": "arr = [1, 2, 2, 1, 1, 3, 3]",
        "output": "false",
        "explanation": "1 occurs 3 times, 2 occurs 2 times, and 3 occurs 2 times. The count for 2 is not unique."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Utilize a HashMap to count occurrences.",
      "Check the counts for uniqueness at the end."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Second Highest Salary",
    "description": "Given a table named 'Employee' that contains the following columns: 'id' (integer), 'salary' (integer), return the second highest salary from the 'Employee' table. If there is no second highest salary, the query should return null.",
    "topic": "Database",
    "subtopic": "SQL Queries",
    "tags": [
      "SQL",
      "Database",
      "Query"
    ],
    "input_format": "A SQL table named 'Employee' with columns 'id' and 'salary'.",
    "output_format": "An integer representing the second highest salary or null if it does not exist.",
    "constraints": [
      "The table 'Employee' will have at most 10^5 rows.",
      "Salary will be a non-negative integer."
    ],
    "examples": [
      {
        "input": "SELECT Salary FROM Employee;",
        "output": "3000",
        "explanation": "In this example, the highest salary is 5000 and the second highest is 3000."
      },
      {
        "input": "SELECT Salary FROM Employee;",
        "output": "null",
        "explanation": "If the only salary in the table is 5000, there is no second highest salary."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using DISTINCT to eliminate duplicate salaries.",
      "You may need to use ORDER BY and LIMIT in your query."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Product of Array Except Self",
    "description": "Given an integer array 'nums', return an array 'output' such that 'output[i]' is equal to the product of all the elements of 'nums' except 'nums[i]'. Solve it without using division and in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Product Array",
    "tags": [
      "Array",
      "Product",
      "O(n) Time"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An array of integers representing the product of all elements except the current element.",
    "constraints": [
      "2 <= nums.length <= 10^5",
      "-30 <= nums[i] <= 30"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "[24, 12, 8, 6]",
        "explanation": "For the input array: [1, 2, 3, 4], the output will be [2*3*4, 1*3*4, 1*2*4, 1*2*3] = [24, 12, 8, 6]."
      },
      {
        "input": "nums = [-1, 1, 0, -3, 3]",
        "output": "[0, 0, 9, 0, 0]",
        "explanation": "For the input array: [-1, 1, 0, -3, 3], the output will be [1*0*-3*3, -1*0*-3*3, -1*1*-3*3, -1*1*0*3, -1*1*0*-3] = [0, 0, 9, 0, 0]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using two passes: one from the left and one from the right.",
      "You can use an additional array to store the intermediate results."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock II",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. However, you can make as many transactions as you like (i.e., buy and sell multiple times). Note that you must sell the stock before you buy again.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithm",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of integers prices, where prices[i] represents the stock price on the ith day.",
    "output_format": "An integer representing the maximum profit you can achieve.",
    "constraints": [
      "1 <= prices.length <= 3 * 10^4",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "7",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Profit = 6 - 1 = 5. Then buy on day 4 (price = 3) and sell on day 5 (price = 4). Profit = 4 - 3 = 1. Total profit = 5 + 1 = 6."
      },
      {
        "input": "prices = [1, 2, 3, 4, 5]",
        "output": "4",
        "explanation": "Buy on day 1 (price = 1) and sell on day 5 (price = 5). Total profit = 5 - 1 = 4."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done since the price is continuously decreasing."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider when to buy and sell for maximum profit.",
      "Look for all the upward slopes in the price array."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "String Compression",
    "description": "Given a string s, encode it using the Run-Length Encoding (RLE) algorithm. The basic idea is to replace consecutive repeating characters with a single character followed by the count of those characters. For instance, the string 'aaabb' would be encoded as 'a3b2'. If the encoded string is longer than the original string, return the original string. You must do this in place and without using additional memory for another string.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Encoding",
      "In-place"
    ],
    "input_format": "A string s consisting of lowercase English letters.",
    "output_format": "A string representing the encoded version of the input string.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"aabcccccaaa\"",
        "output": "a2b1c5a3",
        "explanation": "The encoded format becomes 'a2b1c5a3'."
      },
      {
        "input": "s = \"abc\"",
        "output": "abc",
        "explanation": "The output is the same as the original string since encoding increases the length."
      },
      {
        "input": "s = \"aa\"",
        "output": "a2",
        "explanation": "The input string 'aa' compresses to 'a2'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using two pointers: one for reading characters and one for writing the compressed version.",
      "Think about how to track the count of repeated characters as you traverse the string."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Sum of Subarray Minimums",
    "description": "Given an array of integers, you need to find the sum of the minimums of all contiguous subarrays. The result should be returned modulo 10^9 + 7.",
    "topic": "Array",
    "subtopic": "Subarray",
    "tags": [
      "Array",
      "Subarray",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the sum of the minimums of all subarrays, modulo 10^9 + 7.",
    "constraints": [
      "1 <= nums.length <= 3000",
      "1 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [3, 1, 2, 4]",
        "output": "17",
        "explanation": "The contiguous subarrays and their minimums are: [3] -> 3, [1] -> 1, [2] -> 2, [4] -> 4, [3,1] -> 1, [3,1,2] -> 1, [1,2] -> 1, [1,2,4] -> 1, [2,4] -> 2. The sum is 3 + 1 + 2 + 4 + 1 + 1 + 1 + 1 + 2 = 17."
      },
      {
        "input": "nums = [2, 4, 3, 5, 1]",
        "output": "28",
        "explanation": "The minimums of all contiguous subarrays are collected and summed: The result is 28."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a stack to find the next smaller and previous smaller elements.",
      "Calculate contributions of each element considering how many subarrays it is the minimum for."
    ],
    "company": "Paytm"
  },
  {
    "question_id": "",
    "title": "Search in Rotated Sorted Array",
    "description": "You are given an integer array 'nums' sorted in ascending order, but then rotated at some pivot unknown to you beforehand. You are also given an integer 'target'. Write a function to search for 'target' in 'nums'. If found, return its index, otherwise return -1. You must write an algorithm with O(log n) runtime complexity.",
    "topic": "Binary Search",
    "subtopic": "Searching",
    "tags": [
      "Binary Search",
      "Array",
      "Search"
    ],
    "input_format": "An integer array 'nums' and an integer 'target'.",
    "output_format": "An integer representing the index of 'target' in 'nums' or -1 if 'target' is not found.",
    "constraints": [
      "1 <= nums.length <= 5000",
      "1 <= nums[i] <= 10^4",
      "All elements of 'nums' are unique.",
      "nums is guaranteed to be rotated at some pivot."
    ],
    "examples": [
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 0",
        "output": "4",
        "explanation": "'target' 0 is at index 4 in the given rotated array."
      },
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 3",
        "output": "-1",
        "explanation": "'target' 3 is not in the array, hence the output is -1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search.",
      "Identify the sorted part of the array."
    ],
    "company": "Paytm"
  }
]