[
  {
    "question_id": "",
    "title": "Find Minimum in Rotated Sorted Array",
    "description": "Given an integer array nums, which was originally sorted in ascending order, and then rotated at some unknown pivot, you need to find the minimum element in the array. You may assume that no duplicates exist in the array.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Minimum"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the minimum value in the rotated sorted array.",
    "constraints": [
      "1 <= nums.length <= 5000",
      "\u22125000 <= nums[i] <= 5000"
    ],
    "examples": [
      {
        "input": "nums = [4,5,6,7,0,1,2]",
        "output": "0",
        "explanation": "The minimum element in the rotated sorted array is 0."
      },
      {
        "input": "nums = [3,4,5,1,2]",
        "output": "1",
        "explanation": "The minimum element in the rotated sorted array is 1."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The array only contains one element, which is the minimum."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use binary search to find the pivot.",
      "Compare the middle element with the end element.",
      "Narrow down the search range based on the comparisons."
    ],
    "company": "Synopsys"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. An interval is represented as a pair of integers, where the first integer is the start time and the second integer is the end time. The intervals may not be in sorted order. Return a list of merged intervals in sorted order.",
    "topic": "Array",
    "subtopic": "Sorting and Merging",
    "tags": [
      "Array",
      "Sorting",
      "Intervals"
    ],
    "input_format": "A list of intervals where each interval is represented as a list of two integers [start, end].",
    "output_format": "A list of merged intervals sorted by their start time.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1, 3], [2, 6], [8, 10], [15, 18]]",
        "output": "[[1, 6], [8, 10], [15, 18]]",
        "explanation": "The intervals [1, 3] and [2, 6] overlap, so they merge into [1, 6]. The other intervals remain unchanged."
      },
      {
        "input": "intervals = [[1, 4], [4, 5]]",
        "output": "[[1, 5]]",
        "explanation": "The intervals [1, 4] and [4, 5] touch at the endpoint, so they merge into [1, 5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals by their start times.",
      "Use a stack or an array to store merged intervals.",
      "Check if the current interval overlaps with the last added interval."
    ],
    "company": "Synopsys"
  }
]