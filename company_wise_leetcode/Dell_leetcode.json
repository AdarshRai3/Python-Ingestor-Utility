[
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order, and each type of bracket must be closed by the same type of bracket.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Parentheses"
    ],
    "input_format": "A string s consisting of parentheses.",
    "output_format": "A boolean value indicating whether the parentheses are valid.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The brackets are closed in the correct order."
      },
      {
        "input": "s = '([{}])'",
        "output": "true",
        "explanation": "All types of brackets are closed in the correct order."
      },
      {
        "input": "s = '(]')",
        "output": "false",
        "explanation": "The brackets are not closed in the correct order."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a stack to keep track of opening parentheses."
    ],
    "company": "Dell"
  },
  {
    "question_id": "",
    "title": "Merge k Sorted Lists",
    "description": "You are given an array of k linked lists, each list is sorted in ascending order. Merge all the linked lists into one sorted linked list and return it. The list should be made by splicing together the nodes of the given linked lists.",
    "topic": "Linked List",
    "subtopic": "Merging Lists",
    "tags": [
      "Linked List",
      "Merge",
      "Sorting"
    ],
    "input_format": "An array of k linked lists, where each linked list contains nodes in ascending order.",
    "output_format": "A single linked list that is the result of merging all k linked lists in ascending order.",
    "constraints": [
      "0 <= k <= 10^4",
      "0 <= N <= 10^4, where N is the total number of nodes in all linked lists combined",
      "The values of the nodes in the linked lists are in the range [-10^5, 10^5]"
    ],
    "examples": [
      {
        "input": "[1 -> 4 -> 5, 1 -> 3 -> 4, 2 -> 6]",
        "output": "1 -> 1 -> 2 -> 3 -> 4 -> 4 -> 5 -> 6",
        "explanation": "Merging all lists results in a single sorted linked list containing all elements."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a min-heap to efficiently merge the lists.",
      "Keep track of the current node for each of the k linked lists."
    ],
    "company": "Dell"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within a string.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A string s consisting of uppercase and lowercase English letters, digits, symbols, and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 5 * 10^4",
      "s consists of English letters, digits, symbols, and spaces."
    ],
    "examples": [
      {
        "input": "s = 'abcabcbb'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'abc', with length 3."
      },
      {
        "input": "s = 'bbbbb'",
        "output": "1",
        "explanation": "The longest substring without repeating characters is 'b', with length 1."
      },
      {
        "input": "s = 'pwwkew'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'wke', with length 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window to keep track of the current substring.",
      "Utilize a HashMap to store the characters and their indices."
    ],
    "company": "Dell"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase that is formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Hashing",
    "tags": [
      "String",
      "Hashing",
      "Anagrams"
    ],
    "input_format": "An array of strings `strs` where 1 <= strs.length <= 1000 and 0 <= strs[i].length <= 100.",
    "output_format": "A list of lists of strings, where each sublist contains strings that are anagrams of each other.",
    "constraints": [
      "1 <= strs.length <= 1000",
      "0 <= strs[i].length <= 100"
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "explanation": "The strings \"eat\", \"tea\", and \"ate\" are anagrams of each other, while \"nat\" and \"tan\" are also anagrams. \"bat\" is standalone."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "The only string is an empty string, which is an anagram of itself."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "A single character string is an anagram of itself."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to group words by their sorted characters.",
      "Consider using the tuple of characters as a key in the hash map."
    ],
    "company": "Dell"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A substring is a contiguous sequence of characters within the string. A palindromic substring is one that reads the same forwards and backwards.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A single string s, where 1 <= s.length <= 1000.",
    "output_format": "A string representing the longest palindromic substring of s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only lowercase English letters"
    ],
    "examples": [
      {
        "input": "s = 'babad'",
        "output": "'bab' or 'aba'",
        "explanation": "Both 'bab' and 'aba' are valid longest palindromic substrings."
      },
      {
        "input": "s = 'cbbd'",
        "output": "'bb'",
        "explanation": "'bb' is the longest palindromic substring in 'cbbd'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around potential centers of palindromes.",
      "Use dynamic programming to compare substrings."
    ],
    "company": "Dell"
  },
  {
    "question_id": "",
    "title": "Delete Duplicate Emails",
    "description": "You are given a list of email addresses. Your task is to remove any duplicate emails from the list. The resulting list should contain only unique email addresses in the order they first appear. Return the new list of unique emails.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Unique",
      "Email"
    ],
    "input_format": "A list of strings emailList, where each string is a valid email address.",
    "output_format": "A list of unique email addresses in the order they first appeared.",
    "constraints": [
      "1 <= emailList.length <= 10^4",
      "The length of each email will be between 3 and 100 characters."
    ],
    "examples": [
      {
        "input": "emailList = [\"test@example.com\", \"demo@example.com\", \"test@example.com\", \"user@example.com\"]",
        "output": "[\"test@example.com\", \"demo@example.com\", \"user@example.com\"]",
        "explanation": "The email 'test@example.com' is a duplicate and should be removed from the list."
      },
      {
        "input": "emailList = [\"a@b.com\", \"a@b.com\", \"c@d.com\", \"b@c.com\", \"c@d.com\"]",
        "output": "[\"a@b.com\", \"c@d.com\", \"b@c.com\"]",
        "explanation": "Both 'a@b.com' and 'c@d.com' are duplicates, so only the first occurrences are kept."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a data structure to keep track of seen emails."
    ],
    "company": "Dell"
  },
  {
    "question_id": "",
    "title": "Department Top Three Salaries",
    "description": "Given a table 'Employee' that has the following columns: 'id', 'name', and 'salary', write a SQL query to find the top three salaries in the department. If there are fewer than three salaries in any department, return NULL for those positions.",
    "topic": "Database",
    "subtopic": "SQL Query",
    "tags": [
      "SQL",
      "Database",
      "Aggregation"
    ],
    "input_format": "The Employee table with the columns: id (int), name (varchar), salary (int).",
    "output_format": "A table with two columns: 'Department' and 'Top 3 Salaries', showing the top three salaries in each department.",
    "constraints": [
      "The Employee table will have at most 10000 rows.",
      "Salary values are positive integers."
    ],
    "examples": [
      {
        "input": "Employee = [[1, 'John', 3000], [2, 'Jane', 6000], [3, 'Jim', 6000], [4, 'Jake', 3000], [5, 'Jill', 3000]]",
        "output": "[['6k', 6000, 6000, NULL], ['3k', 3000, 3000, NULL]]",
        "explanation": "In the above example, the first department has two unique salary values. The top three salaries are 6000 and 3000. NULL indicates less than three distinct salaries."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use the RANK() function to assign ranks based on salary."
    ],
    "company": "Dell"
  }
]