[
  {
    "question_id": "",
    "title": "Concatenation of Array",
    "description": "Given an integer array 'nums' of length 'n', you want to create an array 'ans' of length '2n' where 'ans[i] == nums[i % n]' for '0 <= i < 2n'. In other words, 'ans' is formed by concatenating 'nums' with itself.",
    "topic": "Array",
    "subtopic": "Manipulation",
    "tags": [
      "Array",
      "Concatenation",
      "Manipulation"
    ],
    "input_format": "An integer array nums of length n.",
    "output_format": "An integer array representing the concatenated array.",
    "constraints": [
      "1 <= n <= 1000",
      "-100 <= nums[i] <= 100"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 1]",
        "output": "[1, 2, 1, 1, 2, 1]",
        "explanation": "By concatenating [1, 2, 1] with itself, we get [1, 2, 1, 1, 2, 1]."
      },
      {
        "input": "nums = [0, 1]",
        "output": "[0, 1, 0, 1]",
        "explanation": "Concatenation of [0, 1] results in [0, 1, 0, 1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "You can use a loop to iterate through the range of the new array's length.",
      "Consider using the modulo operator to access elements from the original array."
    ],
    "company": "GE Healthcare"
  },
  {
    "question_id": "",
    "title": "Evaluate Division",
    "description": "Given a list of equations and values, you need to evaluate the division of these equations and return the results based on the provided queries. Each equation represents a fraction, such as A / B = value. You will first build a graph representing these equations, and then you will perform a DFS or BFS to find the result of the queries.",
    "topic": "Graph",
    "subtopic": "DFS/BFS",
    "tags": [
      "Graph",
      "DFS",
      "BFS",
      "Union Find"
    ],
    "input_format": "A list of equations where each equation is a pair of strings [A, B] and a corresponding list of values representing the results of A / B.",
    "output_format": "A list of float values representing the result of each query, or -1.0 if the result cannot be determined.",
    "constraints": [
      "1 <= equations.length <= 20",
      "equations[i].length == 2",
      "values.length == equations.length",
      "queries.length <= 20",
      "Each variable in equations and queries is a lowercase English letter."
    ],
    "examples": [
      {
        "input": "equations = [['a', 'b'], ['b', 'c']], values = [2.0, 3.0], queries = [['a', 'c'], ['b', 'a'], ['c', 'c'], ['a', 'e']]",
        "output": "[6.0, 0.5, 1.0, -1.0]",
        "explanation": "a / c = a / b * b / c = 2.0 * 3.0 = 6.0; b / a = 1 / (a / b) = 0.5; c / c = 1.0; a / e is impossible."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a graph representation for the equations.",
      "Consider performing DFS/BFS for path finding.",
      "Union-Find might be a useful approach for this problem."
    ],
    "company": "GE Healthcare"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Every opening bracket has a corresponding closing bracket of the same type.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s consisting of parentheses.",
    "output_format": "A boolean value indicating whether the string is valid.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "True",
        "explanation": "The brackets are closed in the correct order."
      },
      {
        "input": "s = '([{}])'",
        "output": "True",
        "explanation": "All brackets are matched and closed correctly."
      },
      {
        "input": "s = '(]')",
        "output": "False",
        "explanation": "The bracket ']' does not match the opening bracket '('."
      },
      {
        "input": "s = '([)]'",
        "output": "False",
        "explanation": "The brackets are not closed in the correct order."
      },
      {
        "input": "s = '{[]}'",
        "output": "True",
        "explanation": "All brackets are matched and closed correctly."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Check for matching pairs when closing brackets are encountered."
    ],
    "company": "GE Healthcare"
  },
  {
    "question_id": "",
    "title": "Lowest Common Ancestor of a Binary Tree",
    "description": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. According to the definition of LCA on a binary tree, the lowest common ancestor is defined between two nodes p and q as the lowest node in the tree that has both p and q as descendants (where we allow a node to be a descendant of itself).",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Depth First Search"
    ],
    "input_format": "The input consists of the root node of a binary tree and two nodes p and q.",
    "output_format": "Return the lowest common ancestor of the two nodes.",
    "constraints": [
      "The given nodes p and q are guaranteed to be nodes in the binary tree.",
      "All nodes will have unique values."
    ],
    "examples": [
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1",
        "output": "3",
        "explanation": "The LCA of nodes 5 and 1 is 3."
      },
      {
        "input": "root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4",
        "output": "5",
        "explanation": "The LCA of nodes 5 and 4 is 5 since 5 is an ancestor of 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how you can traverse the tree to find the LCA.",
      "Recursive DFS could be helpful to find the two nodes."
    ],
    "company": "GE Healthcare"
  },
  {
    "question_id": "",
    "title": "Number of Visible People in a Queue",
    "description": "In a queue of people standing in a line, each person has a height. A person can see the person directly in front of them if and only if that person is shorter than they are. Given an array of integers representing the heights of people in the queue, return an array of integers where each element represents the number of people that the corresponding person can see directly in front of them.",
    "topic": "Array",
    "subtopic": "Monotonic Stack",
    "tags": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "input_format": "An array of integers heights, where heights[i] represents the height of the ith person in the queue.",
    "output_format": "An array of integers where the ith integer represents the number of people the ith person can see in front.",
    "constraints": [
      "1 <= heights.length <= 100000",
      "1 <= heights[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "heights = [10, 6, 5, 8, 11, 9]",
        "output": "[3, 1, 1, 1, 0, 0]",
        "explanation": "Person 1 (10) can see people 2, 3, and 4; Person 2 (6) can see person 3; Person 3 (5) can see person 4; Person 4 (8) can see person 5; Person 5 (11) can see no one; Person 6 (9) can see no one."
      },
      {
        "input": "heights = [1, 2, 3, 4, 5]",
        "output": "[4, 3, 2, 1, 0]",
        "explanation": "Each person can see all the people in front of them directly."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a stack to keep track of the indices of the people.",
      "Think about how you can use the heights to determine visibility as you process the array.",
      "Consider iterating from the back of the queue to the front."
    ],
    "company": "GE Healthcare"
  },
  {
    "question_id": "",
    "title": "Car Fleet",
    "description": "There are n cars going to the same destination along a one-lane road. The ith car starts at position position[i] and drives at a speed of speed[i]. When a car catches up to another car, it forms a fleet. A fleet is some non-empty set of cars that are driving together at the same speed. You need to calculate the number of fleets that will arrive at the destination.",
    "topic": "Greedy",
    "subtopic": "Simulation",
    "tags": [
      "Greedy",
      "Simulation",
      "Array"
    ],
    "input_format": "Two arrays of integers position and speed, where position[i] is the position of the ith car and speed[i] is the speed of the ith car.",
    "output_format": "An integer representing the number of fleets that will arrive at the destination.",
    "constraints": [
      "1 <= n <= 10^5",
      "0 <= position[i] < position[j] <= 10^6 for all i < j",
      "1 <= speed[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "position = [10, 8, 0, 5, 3], speed = [2, 4, 1, 1, 3]",
        "output": "3",
        "explanation": "The cars at positions 10 and 8 will arrive together, forming one fleet. The car at position 0 will be its own fleet. The cars at positions 5 and 3 will also arrive together."
      },
      {
        "input": "position = [0, 2, 4], speed = [4, 2, 1]",
        "output": "1",
        "explanation": "All cars will form one fleet because car 0 will catch up to the other two before they reach the destination."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how to calculate the time taken for each car to reach the destination.",
      "Use a stack to help manage the fleets."
    ],
    "company": "GE Healthcare"
  },
  {
    "question_id": "",
    "title": "Employee Free Time",
    "description": "In a company, each employee has a schedule of working hours. Your task is to find the free time intervals that all employees have in common. Each employee\u2019s schedule is represented as a list of intervals where they are busy. You need to determine the common free time slots which can be utilized by all employees for meetings.",
    "topic": "Interval",
    "subtopic": "Merge Intervals",
    "tags": [
      "Intervals",
      "Merge",
      "Union"
    ],
    "input_format": "A list of lists of intervals, where each interval is represented as a pair of integers [start, end]. All intervals for each employee are sorted by their start time.",
    "output_format": "A list of intervals representing the free time slots common to all employees.",
    "constraints": [
      "The input list will have at least one employee's schedule.",
      "1 <= intervals.length <= 10^4",
      "0 <= intervals[i][0] < intervals[i][1] <= 10^9"
    ],
    "examples": [
      {
        "input": "[[[1, 2], [5, 6]], [[1, 3]], [[2, 3], [6, 8]]]",
        "output": "[[3, 5]]",
        "explanation": "The common free time is from 3 to 5, as it is the only interval when all employees are free."
      },
      {
        "input": "[[[1, 3], [6, 7]], [[2, 4]], [[2, 3], [4, 8]]]",
        "output": "[[4, 6]]",
        "explanation": "The only common free time for all employees is from 4 to 6."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider merging all busy intervals first.",
      "Utilize a priority queue to manage overlapping intervals."
    ],
    "company": "GE Healthcare"
  }
]