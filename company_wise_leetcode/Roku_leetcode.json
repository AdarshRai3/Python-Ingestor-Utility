[
  {
    "question_id": "",
    "title": "Substring with Concatenation of All Words",
    "description": "You are given a string s and an array of strings words. All words are of the same length. Your goal is to find all the starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters. Return the indices in any order.",
    "topic": "String",
    "subtopic": "Substring Search",
    "tags": [
      "String",
      "Substring",
      "Hash Table"
    ],
    "input_format": "A string s and an array of strings words.",
    "output_format": "A list of integers representing the starting indices of substring(s) that are concatenations of all words in the array.",
    "constraints": [
      "1 <= s.length <= 1000",
      "1 <= words.length <= 100",
      "1 <= words[i].length <= 100",
      "All words[i] have the same length."
    ],
    "examples": [
      {
        "input": "s = 'barfoothefoobarman', words = ['foo', 'bar']",
        "output": "[0, 9]",
        "explanation": "The substring starting at index 0 is 'barfoo', and the substring starting at index 9 is 'foobar', which is the concatenation of 'foo' and 'bar'."
      },
      {
        "input": "s = 'wordgoodgoodgoodbestword', words = ['word', 'good', 'best', 'word']",
        "output": "[]",
        "explanation": "There is no substring that is a concatenation of all words."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a sliding window approach.",
      "You may need to count the occurrences of each word."
    ],
    "company": "Roku"
  },
  {
    "question_id": "",
    "title": "Sliding Window Maximum",
    "description": "Given an integer array nums and an integer k, return the maximum sliding window for each sliding window of size k. You must solve it in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Deque"
    ],
    "input_format": "An integer array nums and an integer k.",
    "output_format": "An array of integers representing the maximum values in each sliding window.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [1,3,-1,-3,5,3,6,7], k = 3",
        "output": "[3, 3, 5, 5, 6, 7]",
        "explanation": "The sliding windows are [1, 3, -1], [3, -1, -3], [-1, -3, 5], [-3, 5, 3], [5, 3, 6], [3, 6, 7]. The maximums are 3, 3, 5, 5, 6, 7."
      },
      {
        "input": "nums = [1,-1], k = 1",
        "output": "[1, -1]",
        "explanation": "The sliding windows are [1] and [-1]. The maximums are 1 and -1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a deque to optimize the solution.",
      "Think about maintaining an index in the deque for the maximum value."
    ],
    "company": "Roku"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for a Least Recently Used (LRU) Cache. It should support the following operations: get and put. The get operation retrieves the value of the key if the key exists in the cache, otherwise returns -1. The put operation updates the value of the key if the key exists, or adds the key-value pair if it does not. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Design",
    "subtopic": "Cache",
    "tags": [
      "Cache",
      "Design",
      "LinkedList"
    ],
    "input_format": "The cache is initialized with a positive capacity. The put method takes a key and a value as parameters. The get method takes a key as a parameter.",
    "output_format": "The get method returns the value associated with the key, or -1 if the key does not exist.",
    "constraints": [
      "The capacity of the cache is in the range [1, 1000].",
      "The key and value are both integers.",
      "The number of operations in a single test case will not exceed 10000."
    ],
    "examples": [
      {
        "input": "cache = LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1,-1,3,4]",
        "explanation": "The sequence of operations results in the cache storing keys 1, 3, and 4 after the sequence completes. The results of the get operations are as follows: get(1) returns 1, get(2) returns -1 (since it was evicted), get(3) returns 3, and get(4) returns 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hashmap to store the keys and a doubly linked list to keep track of usage order.",
      "Remember to update the usage order whenever you access the cache."
    ],
    "company": "Roku"
  },
  {
    "question_id": "",
    "title": "Simplify Path",
    "description": "Given a string representing an absolute path for a file (Unix-style), simplify it according to the following rules: 1. The path components are separated by a single '/'. 2. Any component that is '.' is a no-op. 3. Any component that is '..' means to move one directory up. 4. The path must be simplified in such a way that there are no redundant slashes or components. Return the simplified path as a string.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Path"
    ],
    "input_format": "A string path representing the initial absolute path.",
    "output_format": "A string representing the simplified path.",
    "constraints": [
      "1 <= path.length <= 3000",
      "path consists of English letters, digits, '.', '..', and '/'"
    ],
    "examples": [
      {
        "input": "/a/./b/../../c/",
        "output": "/c",
        "explanation": "The path goes to 'a', then stays at 'a' with '.', goes back two directories with '..', and finally reaches 'c'."
      },
      {
        "input": "/../",
        "output": "/",
        "explanation": "The path consists of '..' which means to move to the parent directory from the root, resulting in an empty path."
      },
      {
        "input": "/home//foo/",
        "output": "/home/foo",
        "explanation": "The '//' is simplified to a single '/', resulting in the path '/home/foo'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the path components.",
      "Pay attention to the rules for '.', '..', and empty components."
    ],
    "company": "Roku"
  },
  {
    "question_id": "",
    "title": "Decode String",
    "description": "Given an encoded string, return its decoded string. The encoding rule is: k[string], where the string is being repeated exactly k times. You may assume that the input string is always valid, no extra spaces, and k is always a positive integer. You need to decode it and return the original string.",
    "topic": "String",
    "subtopic": "Decoding",
    "tags": [
      "String",
      "Decoding",
      "Stack"
    ],
    "input_format": "A single encoded string s, where s consists of uppercase letters, digits, and square brackets.",
    "output_format": "A decoded string after decoding the given encoded string.",
    "constraints": [
      "1 <= s.length <= 100",
      "s consists of digits, lowercase and uppercase English letters, and square brackets.",
      "The input string is guaranteed to be valid."
    ],
    "examples": [
      {
        "input": "s = \"3[a2[c]]\"",
        "output": "accaccacc",
        "explanation": "The decoded string is 'acc' repeated 3 times."
      },
      {
        "input": "s = \"2[abc]3[cd]ef\"",
        "output": "abcabccdcdcdef",
        "explanation": "'abc' is repeated 2 times, 'cd' is repeated 3 times, followed by 'ef'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the current string and the current number.",
      "When encountering ']', pop from the stack until finding '[', then construct the repeated string."
    ],
    "company": "Roku"
  },
  {
    "question_id": "",
    "title": "Asteroid Collision",
    "description": "You are given an array of integers, where each integer represents an asteroid. For each integer, the absolute value represents its size, and the sign represents its direction: positive means the asteroid is moving to the right, and negative means it is moving to the left. Asteroids collide when they move in opposite directions. When two asteroids collide, the smaller one explodes. If they are of the same size, both explode. Return the final configuration of the asteroids after all collisions have occurred.",
    "topic": "Stack",
    "subtopic": "Collision Handling",
    "tags": [
      "Stack",
      "Greedy",
      "Simulation"
    ],
    "input_format": "An array of integers asteroids.",
    "output_format": "An array of integers representing the final state of asteroids after all collisions.",
    "constraints": [
      "1 <= asteroids.length <= 10^4",
      "-1000 <= asteroids[i] <= 1000",
      "All asteroids are initially moving in the same direction."
    ],
    "examples": [
      {
        "input": "asteroids = [5, 10, -5]",
        "output": "[5, 10]",
        "explanation": "The asteroid 5 and 10 moving to the right remain, while the asteroid -5 moving to the left collides with the asteroid 5 and is destroyed."
      },
      {
        "input": "asteroids = [8, -8]",
        "output": "[]",
        "explanation": "Both asteroids collide and destroy each other since they are of equal size."
      },
      {
        "input": "asteroids = [10, 2, -5]",
        "output": "[10]",
        "explanation": "The asteroid 10 survives after colliding with 2 and -5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the final state of asteroids.",
      "Iterate through the asteroids and handle collisions as needed."
    ],
    "company": "Roku"
  },
  {
    "question_id": "",
    "title": "Backspace String Compare",
    "description": "Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character. Note that after backspacing an empty text, the text will continue empty.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Backspace",
      "Comparison"
    ],
    "input_format": "Two strings s and t.",
    "output_format": "A boolean value indicating whether the processed strings are equal.",
    "constraints": [
      "1 <= s.length, t.length <= 200",
      "s and t consist of lowercase letters and '#' characters."
    ],
    "examples": [
      {
        "input": "s = 'ab#c', t = 'ad#c'",
        "output": "true",
        "explanation": "Both strings become 'ac' after backspacing."
      },
      {
        "input": "s = 'ab##', t = 'c#d#'",
        "output": "true",
        "explanation": "Both strings become '' after all backspaces."
      },
      {
        "input": "s = 'a#c', t = 'b'",
        "output": "false",
        "explanation": "'s' becomes 'c' after backspacing, while 't' is 'b'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a stack to simulate the backspacing process."
    ],
    "company": "Roku"
  },
  {
    "question_id": "",
    "title": "Multiply Strings",
    "description": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string. Note that you must not use any built-in Big Integer library or directly convert the inputs to integers.",
    "topic": "String",
    "subtopic": "Mathematical Operations",
    "tags": [
      "String",
      "Math",
      "Multiplication"
    ],
    "input_format": "Two strings num1 and num2, representing the two non-negative integers.",
    "output_format": "A string representing the product of num1 and num2.",
    "constraints": [
      "1 <= num1.length, num2.length <= 200",
      "num1 and num2 consist of digits only and cannot have leading zeros."
    ],
    "examples": [
      {
        "input": "num1 = '123', num2 = '456'",
        "output": "'56088'",
        "explanation": "123 multiplied by 456 equals 56088."
      },
      {
        "input": "num1 = '2', num2 = '3'",
        "output": "'6'",
        "explanation": "2 multiplied by 3 equals 6."
      },
      {
        "input": "num1 = '0', num2 = '12345'",
        "output": "'0'",
        "explanation": "Any number multiplied by 0 equals 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to multiply two digits and how to handle carry.",
      "You can simulate the multiplication like you would do by hand."
    ],
    "company": "Roku"
  },
  {
    "question_id": "",
    "title": "Maximum Product of Three Numbers",
    "description": "Given an integer array nums, return the maximum product of any three numbers in the array. You may assume that the array has at least three numbers.",
    "topic": "Array",
    "subtopic": "Sorting and Two Pointers",
    "tags": [
      "Array",
      "Sorting",
      "Math"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum product of any three numbers.",
    "constraints": [
      "3 <= nums.length <= 1000",
      "-1000 <= nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "6",
        "explanation": "The maximum product is 1 * 2 * 3 = 6."
      },
      {
        "input": "nums = [1, 5, 3, 8]",
        "output": "120",
        "explanation": "The maximum product is 5 * 3 * 8 = 120."
      },
      {
        "input": "nums = [-10, -10, 5, 2]",
        "output": "500",
        "explanation": "The maximum product is -10 * -10 * 5 = 500."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider both positive and negative numbers.",
      "Sorting the array can help you find the largest numbers."
    ],
    "company": "Roku"
  },
  {
    "question_id": "",
    "title": "Max Consecutive Ones III",
    "description": "Given a binary array nums and an integer k, you can flip at most k 0's to 1's. Return the length of the longest contiguous subarray containing only 1's after performing at most k flips.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Binary"
    ],
    "input_format": "A binary array nums and an integer k.",
    "output_format": "An integer representing the length of the longest continuous subarray containing only 1's.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "0 <= k <= nums.length",
      "nums[i] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "nums = [1,1,0,0,1,1,1,0,1], k = 2",
        "output": "7",
        "explanation": "By flipping the first two 0's, we obtain [1,1,1,1,1,1,1,0,1], which has a length of 7."
      },
      {
        "input": "nums = [0,0,1,1,0,1,1,1,0], k = 1",
        "output": "5",
        "explanation": "By flipping the first 0, we obtain [1,0,1,1,1,1,1] which has a length of 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window to track the number of 0's in the current window.",
      "Adjust the left boundary of the window when the number of 0's exceeds k."
    ],
    "company": "Roku"
  },
  {
    "question_id": "",
    "title": "Shortest Path to Get All Keys",
    "description": "You are given a grid that represents a maze. Each cell can either be empty (.'), a wall (#), or contain a key (lowercase letter) or a lock (uppercase letter). Your task is to find the shortest path that collects all keys in the grid, starting from a given position. You can only pass through empty cells and cells that contain keys, and you must collect the respective locks when you reach them. Keys collected can unlock their corresponding locks. The grid is defined as an array of strings. Return the length of the shortest path to collect all keys. If it is not possible to collect all keys, return -1.",
    "topic": "Graph",
    "subtopic": "Shortest Path",
    "tags": [
      "Graph",
      "BFS",
      "Shortest Path"
    ],
    "input_format": "A grid represented as an array of strings where each string is a row in the grid. The start position is given as a tuple (x, y).",
    "output_format": "An integer representing the length of the shortest path to collect all keys, or -1 if it is not possible.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 30",
      "Each cell contains '.', '#', a lowercase letter (key), or an uppercase letter (lock).",
      "There can be at most 6 unique keys."
    ],
    "examples": [
      {
        "input": {
          "grid": [
            "@.a.#",
            "###.#",
            "b.A.B"
          ],
          "start": [
            0,
            0
          ]
        },
        "output": 8,
        "explanation": "Starting from (0, 0), the shortest path to collect both keys 'a' and 'b' involves going down and around the walls, totaling a distance of 8."
      },
      {
        "input": {
          "grid": [
            "@..aA",
            "..B#.",
            "....b"
          ],
          "start": [
            0,
            0
          ]
        },
        "output": 6,
        "explanation": "The shortest path requires us to navigate from the start '@' to collect both keys and then unlock them with the respective lock within the given moves, totaling a distance of 6."
      },
      {
        "input": {
          "grid": [
            "@.a.#",
            "###.#",
            "b.A.B"
          ],
          "start": [
            0,
            0
          ]
        },
        "output": -1,
        "explanation": "It's impossible to collect all keys due to the walls blocking paths to the keys."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using Breadth-First Search (BFS) for exploring every possible path.",
      "Track the state of collected keys and the current position.",
      "Use a bitmask to represent collected keys."
    ],
    "company": "Roku"
  },
  {
    "question_id": "",
    "title": "24 Game",
    "description": "You are given four integers, you need to determine whether it is possible to form the number 24 using the four integers and the operators +, -, *, / (each operator can be used at most once). You can also use parentheses to change the order of operations. Return true if you can come up with 24, otherwise return false.",
    "topic": "Math",
    "subtopic": "Number Theory",
    "tags": [
      "math",
      "operators",
      "combinatorial"
    ],
    "input_format": "An array of four integers nums, where each integer is in the range [1, 9].",
    "output_format": "A boolean value indicating whether it's possible to form the number 24.",
    "constraints": [
      "The length of nums is 4.",
      "1 <= nums[i] <= 9."
    ],
    "examples": [
      {
        "input": "nums = [8, 1, 6, 6]",
        "output": "true",
        "explanation": "You can use ((6 / (1 - 8 / 6)) = 24."
      },
      {
        "input": "nums = [1, 2, 1, 2]",
        "output": "false",
        "explanation": "There is no way to combine these numbers to get 24."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Try all permutations of the numbers.",
      "Consider different groupings of operators."
    ],
    "company": "Roku"
  },
  {
    "question_id": "",
    "title": "Valid Palindrome II",
    "description": "Given a string s, you need to determine if it can become a palindrome after deleting at most one character from it. A palindrome is a string that reads the same forward and backward.",
    "topic": "String",
    "subtopic": "Two Pointers",
    "tags": [
      "String",
      "Palindrome",
      "Two Pointers"
    ],
    "input_format": "A single string s, where 1 <= s.length <= 1000.",
    "output_format": "A boolean value: true if the string can be a palindrome after deletion of at most one character, otherwise false.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of lowercase and uppercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"abca\"",
        "output": "true",
        "explanation": "Removing 'b' or 'c' results in the palindrome \"aca\"."
      },
      {
        "input": "s = \"racecar\"",
        "output": "true",
        "explanation": "\"racecar\" is already a palindrome."
      },
      {
        "input": "s = \"abc\"",
        "output": "false",
        "explanation": "No single character removal can make \"abc\" a palindrome."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to compare characters from the start and end of the string.",
      "If characters differ, try skipping one of them and check if the rest is a palindrome."
    ],
    "company": "Roku"
  }
]