[
  {
    "question_id": "",
    "title": "Happy Number",
    "description": "A happy number is a number defined by the following process: starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle that does not include 1. Those numbers for which this process ends in 1 are happy numbers. Write a function to determine if a given number is a happy number.",
    "topic": "Math",
    "subtopic": "Number Theory",
    "tags": [
      "Math",
      "Number Theory",
      "Simulation"
    ],
    "input_format": "A single integer n, where n is the number to be checked.",
    "output_format": "A boolean value: true if n is a happy number, false otherwise.",
    "constraints": [
      "1 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "n = 19",
        "output": "true",
        "explanation": "19 is a happy number. The sequence is: 1^2 + 9^2 = 82, 8^2 + 2^2 = 68, 6^2 + 8^2 = 100, 1^2 + 0^2 + 0^2 = 1."
      },
      {
        "input": "n = 2",
        "output": "false",
        "explanation": "2 is not a happy number. The sequence is: 2^2 = 4, 4^2 = 16, 1^2 + 6^2 = 37, 3^2 + 7^2 = 58, 5^2 + 8^2 = 89, 8^2 + 9^2 = 145, 1^2 + 4^2 + 5^2 = 42, 4^2 + 2^2 = 20, 2^2 + 0^2 = 4 - so it loops."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a set to track previously seen numbers to detect cycles.",
      "The sum of squares of digits can be calculated in a loop."
    ],
    "company": "Verily"
  },
  {
    "question_id": "",
    "title": "Jump Game",
    "description": "You are given an array of non-negative integers nums. Each element in the array represents your maximum jump length at that position. Your goal is to determine if you can reach the last index starting from the first index. If you can reach the last index, return true; otherwise, return false.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Greedy",
      "Dynamic Programming"
    ],
    "input_format": "An array of non-negative integers, nums, where nums[i] represents the maximum jump length at position i.",
    "output_format": "A boolean value: true if you can reach the last index, false otherwise.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, 1, 1, 4]",
        "output": "true",
        "explanation": "You can jump from index 0 to 1 (2 steps), then jump from index 1 to 4 (3 steps)."
      },
      {
        "input": "nums = [3, 2, 1, 0, 4]",
        "output": "false",
        "explanation": "You will always face a zero at index 3 and cannot jump to the last index."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how far you can reach at each step.",
      "Maintain a variable to track the maximum index you can reach."
    ],
    "company": "Verily"
  },
  {
    "question_id": "",
    "title": "Find Original Array From Doubled Array",
    "description": "You are given an array of integers, which is a doubled array. An array is called a doubled array if for every element x in the original array, there exists an element 2 * x in the array. Your task is to find the original array or determine if it cannot be formed. If the original array can be formed, return it; otherwise, return an empty array.",
    "topic": "Array",
    "subtopic": "Sorting and Hashing",
    "tags": [
      "Array",
      "Sorting",
      "Hash Map"
    ],
    "input_format": "An array of integers, nums, representing the doubled array.",
    "output_format": "An array of integers representing the original array, or an empty array if it cannot be formed.",
    "constraints": [
      "0 <= nums.length <= 1000",
      "nums[i] will be in the range [0, 10^5]"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, 2, 6, 4, 12]",
        "output": "[1, 3, 2]",
        "explanation": "The doubled numbers are generated from original numbers [1, 2, 3]. We can find 2 is doubled to 4 and 1 is doubled to 2."
      },
      {
        "input": "nums = [3, 1, 3, 11, 5, 7]",
        "output": "[]",
        "explanation": "No valid original array can be formed from the given doubled array."
      },
      {
        "input": "nums = [0, 0, 0, 0]",
        "output": "[0, 0]",
        "explanation": "The original array consists of two 0's, and their doubles are also present."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a frequency count for the elements.",
      "Use sorting to ensure that each number is processed in the order of their values."
    ],
    "company": "Verily"
  },
  {
    "question_id": "",
    "title": "Guess the Word",
    "description": "You are given a list of secret words and a word to guess. The guessing mechanism involves repeatedly trying to guess the word, and you will get feedback based on your guess. The feedback will provide the number of matching letters in the correct position and the number of matching letters in incorrect positions. Your task is to determine the actual word in the least number of guesses. Return the list of guesses made and the target word once it's correctly guessed.",
    "topic": "Strings",
    "subtopic": "Word Guessing",
    "tags": [
      "Strings",
      "Word Game",
      "Guessing"
    ],
    "input_format": "An array of strings secretWords and a string targetWord.",
    "output_format": "An integer representing the total number of guesses made and the actual word guessed.",
    "constraints": [
      "1 <= secretWords.length <= 1000",
      "1 <= secretWords[i].length <= 10",
      "targetWord.length == secretWords[i].length"
    ],
    "examples": [
      {
        "input": {
          "secretWords": [
            "apple",
            "apply",
            "angle",
            "other"
          ],
          "targetWord": "angle"
        },
        "output": {
          "totalGuesses": 4,
          "guessedWord": "angle"
        },
        "explanation": "The words 'apple', 'apply', and 'other' were attempted before successfully guessing 'angle'."
      },
      {
        "input": {
          "secretWords": [
            "banana",
            "batter",
            "boggle",
            "bundle"
          ],
          "targetWord": "bundle"
        },
        "output": {
          "totalGuesses": 4,
          "guessedWord": "bundle"
        },
        "explanation": "After trying 'banana', 'batter', and 'boggle', the correct word 'bundle' was guessed."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Try using a binary search approach for optimal guessing.",
      "Track feedback precisely to narrow down word options."
    ],
    "company": "Verily"
  },
  {
    "question_id": "",
    "title": "Longest String Chain",
    "description": "Given a list of words, the goal is to determine the length of the longest string chain. A string chain is defined as a sequence of words where each word can be formed by adding a single letter to the previous word. For example, 'a' -> 'ab' -> 'abc'. You need to find the maximum length of such chains that can be built from the given list of words.",
    "topic": "Dynamic Programming",
    "subtopic": "String Manipulation",
    "tags": [
      "Dynamic Programming",
      "Strings",
      "Sorting"
    ],
    "input_format": "An array of strings words, where each string is a lowercase English word.",
    "output_format": "An integer representing the length of the longest string chain.",
    "constraints": [
      "1 <= words.length <= 1000",
      "1 <= words[i].length <= 16"
    ],
    "examples": [
      {
        "input": "words = [\"a\", \"b\", \"ba\", \"bca\", \"bda\", \"bdca\"]",
        "output": "5",
        "explanation": "The longest chain is 'a' -> 'ba' -> 'bda' -> 'bdca', which has length 4."
      },
      {
        "input": "words = [\"a\", \"ab\", \"bac\"]",
        "output": "2",
        "explanation": "The longest chain is 'a' -> 'ab', which has length 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try sorting the words by their lengths.",
      "Use a map to store the longest chain length for each word.",
      "Check for all possible predecessors for each word."
    ],
    "company": "Verily"
  },
  {
    "question_id": "",
    "title": "Minimum Area Rectangle II",
    "description": "Given a set of points in a 2D plane, your task is to find the minimum area of a rectangle formed by any four of the given points. The rectangle's sides should be parallel to the axes. If there are no such rectangles, return 0. You can assume that the input points are distinct and that no three points are collinear.",
    "topic": "Geometry",
    "subtopic": "Coordinate Geometry",
    "tags": [
      "Geometry",
      "Rectangle",
      "Area",
      "2D"
    ],
    "input_format": "A list of points, where each point is represented as an array of two integers, [x, y].",
    "output_format": "An integer representing the minimum area of the rectangle. Return 0 if no rectangle can be formed.",
    "constraints": [
      "1 <= points.length <= 1000",
      "-10^4 <= points[i][0], points[i][1] <= 10^4",
      "All points are distinct."
    ],
    "examples": [
      {
        "input": "points = [[1,1],[1,3],[3,1],[3,3],[2,2]]",
        "output": "4",
        "explanation": "The rectangle with corners at (1,1), (1,3), (3,1), (3,3) has an area of 4."
      },
      {
        "input": "points = [[1,1],[2,2],[1,2],[2,1]]",
        "output": "1",
        "explanation": "The rectangle formed by points (1,1), (1,2), (2,1), and (2,2) has an area of 1."
      },
      {
        "input": "points = [[1,1],[1,2],[2,1],[2,2]]",
        "output": "1",
        "explanation": "The smallest rectangle that can be formed has area 1 from the given points."
      },
      {
        "input": "points = [[1,1],[1,2],[2,3],[3,2]]",
        "output": "0",
        "explanation": "No rectangle can be formed with the given points."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash set to store points for easy lookup.",
      "Check pairs of points to identify possible rectangle corners."
    ],
    "company": "Verily"
  },
  {
    "question_id": "",
    "title": "Find All Possible Recipes from Given Supplies",
    "description": "You are given a list of recipes, each recipe requires a list of ingredients, and a list of available supplies. Your task is to identify all recipes that can be made using the available supplies. A recipe can only be made if all of its required ingredients are present in the available supplies. Return the list of all possible recipes in any order.",
    "topic": "Backtracking",
    "subtopic": "Combination Generation",
    "tags": [
      "Backtracking",
      "Recursion",
      "Arrays"
    ],
    "input_format": "Two lists: a list of recipes (each recipe is a list of strings representing ingredients) and a list of available supplies (strings).",
    "output_format": "A list of strings representing the names of possible recipes that can be created with the available supplies.",
    "constraints": [
      "1 <= recipes.length <= 100",
      "1 <= recipe[i].length <= 10",
      "1 <= supplies.length <= 100",
      "1 <= length of ingredients names <= 30"
    ],
    "examples": [
      {
        "input": {
          "recipes": [
            [
              "bread",
              "butter"
            ],
            [
              "sandwich",
              "bread"
            ],
            [
              "cake",
              "flour",
              "sugar"
            ]
          ],
          "supplies": [
            "bread",
            "butter",
            "sugar",
            "flour"
          ]
        },
        "output": [
          "bread",
          "sandwich",
          "cake"
        ],
        "explanation": "The available supplies include 'bread' and 'butter' for making 'bread', 'bread' for making 'sandwich', and 'sugar' and 'flour' for making 'cake'."
      },
      {
        "input": {
          "recipes": [
            [
              "pasta",
              "sauce"
            ],
            [
              "pizza",
              "dough",
              "cheese"
            ]
          ],
          "supplies": [
            "sauce",
            "dough"
          ]
        },
        "output": [],
        "explanation": "The supplies are not sufficient to form any recipes as we are missing 'pasta' for the first recipe and 'cheese' for the second recipe."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a set for available supplies for O(1) lookups.",
      "Check each recipe's ingredients against available supplies.",
      "Consider edge cases where supplies are empty."
    ],
    "company": "Verily"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings strs, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "Hash Table",
    "subtopic": "String Manipulation",
    "tags": [
      "Hash Table",
      "String",
      "Anagram"
    ],
    "input_format": "An array of strings strs, where 1 <= strs.length <= 10^4 and 0 <= strs[i].length <= 100.",
    "output_format": "A list of groups of strings, where each group is a list of anagrams.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "0 <= strs[i].length <= 100"
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"eat\",\"tea\",\"ate\"],[\"tan\",\"nat\"],[\"bat\"]]",
        "explanation": "The strings \"eat\", \"tea\", and \"ate\" are anagrams of each other. Similarly, \"tan\" and \"nat\" are anagrams."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "The only string is an empty string, which is an anagram of itself."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "Single letters are trivially anagrams of themselves."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to group words by their sorted characters.",
      "Consider using a tuple of the character counts as the key."
    ],
    "company": "Verily"
  },
  {
    "question_id": "",
    "title": "Minimum Knight Moves",
    "description": "A knight in a game of chess can move to eight possible positions. Given a starting position on an 8x8 chessboard, you need to determine the minimum number of moves required for the knight to reach a target position. The knight can only move to valid positions within the chessboard borders.",
    "topic": "Graph",
    "subtopic": "Breadth-First Search",
    "tags": [
      "Graph",
      "BFS",
      "Chess",
      "Shortest Path"
    ],
    "input_format": "Two tuples representing the knight's starting position (start_x, start_y) and the target position (target_x, target_y). Each coordinate is between 0 and 7, inclusive.",
    "output_format": "An integer representing the minimum number of moves required to reach the target position.",
    "constraints": [
      "0 <= start_x, start_y, target_x, target_y <= 7"
    ],
    "examples": [
      {
        "input": "(0, 0), (1, 2)",
        "output": "1",
        "explanation": "The knight can move from (0, 0) to (1, 2) in one move."
      },
      {
        "input": "(0, 0), (7, 7)",
        "output": "6",
        "explanation": "The knight requires 6 moves to reach (7, 7) from (0, 0)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about using breadth-first search (BFS) to explore all possible positions.",
      "Remember to keep track of visited positions to avoid cycles."
    ],
    "company": "Verily"
  },
  {
    "question_id": "",
    "title": "Kth Largest Element in an Array",
    "description": "Given an integer array nums and an integer k, return the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Heap"
    ],
    "input_format": "An integer array nums followed by an integer k.",
    "output_format": "An integer representing the kth largest element in the array.",
    "constraints": [
      "1 <= k <= nums.length",
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 1, 5, 6, 4], k = 2",
        "output": "5",
        "explanation": "The sorted array is [1, 2, 3, 4, 5, 6]. The 2nd largest element is 5."
      },
      {
        "input": "nums = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4",
        "output": "4",
        "explanation": "The sorted array is [1, 2, 2, 3, 3, 4, 5, 5, 6]. The 4th largest element is 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a min-heap to keep track of the largest k elements.",
      "Sorting the entire array is not necessary; think of alternative methods."
    ],
    "company": "Verily"
  },
  {
    "question_id": "",
    "title": "Video Stitching",
    "description": "You are given a series of video clips where each clip has a start time and an end time. You need to determine the minimum number of clips required to cover a certain duration of video from start to finish. Each clip can be used only once, and any gaps in coverage are not allowed. You can assume that the clips are provided in ascending order by their start time. If it is not possible to cover the duration completely, return -1.",
    "topic": "Greedy",
    "subtopic": "Interval Coverage",
    "tags": [
      "Greedy",
      "Interval",
      "Dynamic Programming"
    ],
    "input_format": "A list of integer arrays clips, where each clip is represented as [start, end]. An integer time representing the end time of the video to be covered.",
    "output_format": "An integer indicating the minimum number of clips required. If it is impossible to cover the duration, return -1.",
    "constraints": [
      "1 <= clips.length <= 100",
      "0 <= clips[i][0] < clips[i][1] <= 10^9",
      "0 <= time <= 10^9"
    ],
    "examples": [
      {
        "input": {
          "clips": [
            [
              0,
              2
            ],
            [
              2,
              4
            ],
            [
              3,
              6
            ]
          ],
          "time": 5
        },
        "output": 2,
        "explanation": "We can use the first clip [0, 2] and then the second clip [2, 4] to cover the duration up to 5."
      },
      {
        "input": {
          "clips": [
            [
              0,
              1
            ],
            [
              1,
              2
            ]
          ],
          "time": 5
        },
        "output": -1,
        "explanation": "It's impossible to cover the duration of 5 with the given clips."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the clips based on the start times.",
      "Check for overlaps and maximize the coverage with each clip."
    ],
    "company": "Verily"
  },
  {
    "question_id": "",
    "title": "Minimum Area Rectangle",
    "description": "Given a set of points in a 2D plane, determine the minimum area of a rectangle that can be formed using four of these points as its corners. If no such rectangle exists, return 0.",
    "topic": "Geometry",
    "subtopic": "Coordinate System",
    "tags": [
      "Geometry",
      "Rectangle",
      "HashMap"
    ],
    "input_format": "An array of points where each point is represented as [x, y].",
    "output_format": "An integer representing the minimum area of the rectangle formed by four points, or 0 if no rectangle can be formed.",
    "constraints": [
      "1 <= points.length <= 200",
      "-10^4 <= points[i][0], points[i][1] <= 10^4",
      "All points are unique."
    ],
    "examples": [
      {
        "input": "points = [[1,1],[1,3],[3,1],[3,3],[2,2]]",
        "output": "4",
        "explanation": "The rectangle can be formed between points (1,1), (1,3), (3,1), and (3,3) with an area of 4."
      },
      {
        "input": "points = [[1,1],[2,2],[1,2],[2,1]]",
        "output": "1",
        "explanation": "The rectangle can be formed between points (1,1), (1,2), (2,1), and (2,2) with an area of 1."
      },
      {
        "input": "points = [[1,1],[1,2],[2,1]]",
        "output": "0",
        "explanation": "No rectangle can be formed since there are not enough points."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a HashSet to store points for quick lookup.",
      "Check pairs of points to find potential rectangle corners.",
      "The area can be calculated using the width and height of the rectangle formed."
    ],
    "company": "Verily"
  }
]