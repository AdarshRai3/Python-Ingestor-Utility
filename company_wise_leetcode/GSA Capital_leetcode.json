[
  {
    "question_id": "",
    "title": "Total Cost to Hire K Workers",
    "description": "You are given an array costs where costs[i] is the cost of hiring the ith worker. You need to hire exactly k workers, but you must also consider that for every worker you hire, it costs you their respective costs plus a base cost. You want to minimize the total cost of hiring k workers. Implement a function that calculates the minimum total cost to hire k workers.",
    "topic": "Greedy",
    "subtopic": "Minimization",
    "tags": [
      "Greedy",
      "Minimization",
      "Sorting"
    ],
    "input_format": "An array of integers costs and an integer k.",
    "output_format": "An integer representing the minimum total cost to hire k workers.",
    "constraints": [
      "1 <= costs.length <= 1000",
      "1 <= costs[i] <= 10^6",
      "1 <= k <= costs.length"
    ],
    "examples": [
      {
        "input": "costs = [10, 20, 30, 5], k = 2",
        "output": "14",
        "explanation": "The two least expensive workers are at positions 3 and 1 (costs 5 and 10 respectively). Total cost is 5 + 10 = 15."
      },
      {
        "input": "costs = [1, 2, 3, 4, 5], k = 3",
        "output": "6",
        "explanation": "The three least expensive workers are at positions 0, 1, and 2 (costs 1, 2, and 3 respectively). Total cost is 1 + 2 + 3 = 6."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the costs array first.",
      "The minimum total cost will involve the smallest k values."
    ],
    "company": "GSA Capital"
  },
  {
    "question_id": "",
    "title": "Maximal Square",
    "description": "Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.",
    "topic": "Dynamic Programming",
    "subtopic": "Matrix",
    "tags": [
      "Dynamic Programming",
      "Matrix",
      "Square"
    ],
    "input_format": "A 2D binary matrix represented as a list of lists, where each inner list contains '0's and '1's.",
    "output_format": "An integer representing the area of the largest square containing only 1's.",
    "constraints": [
      "1 <= matrix.length <= 300",
      "1 <= matrix[i].length <= 300",
      "matrix[i][j] is either '0' or '1'."
    ],
    "examples": [
      {
        "input": "[['1','0','1','0','0'],['1','0','1','1','1'],['1','1','1','1','1'],['1','0','0','1','0']]",
        "output": "4",
        "explanation": "The largest square has side length 2, and its area is 2 * 2 = 4."
      },
      {
        "input": "[['0','1'],['1','0']]",
        "output": "1",
        "explanation": "The largest square has side length 1, with the area being 1 * 1 = 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use dynamic programming to store the size of the square at each position.",
      "The size of the square at (i, j) can be determined by the minimum of the squares at (i-1, j), (i, j-1), and (i-1, j-1)."
    ],
    "company": "GSA Capital"
  }
]