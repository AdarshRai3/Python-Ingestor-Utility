[
  {
    "question_id": "",
    "title": "Sudoku Solver",
    "description": "Write a program to solve a Sudoku puzzle by filling the empty cells. A Sudoku puzzle is a 9x9 grid where each cell can contain a number from 1 to 9. The objective is to fill the grid so that each column, each row, and each of the nine 3x3 subgrids that compose the grid contain all of the digits from 1 to 9. The puzzle is solved when the grid is completely filled and adheres to these rules.",
    "topic": "Backtracking",
    "subtopic": "Constraint Satisfaction",
    "tags": [
      "Backtracking",
      "Puzzle",
      "Matrix"
    ],
    "input_format": "A 2D array (9x9) of characters, where '.' represents an empty cell and '1' to '9' represent filled cells.",
    "output_format": "The input 2D array filled with numbers from '1' to '9' representing the solved Sudoku puzzle.",
    "constraints": [
      "The input grid is guaranteed to be partially filled according to the rules of Sudoku.",
      "The grid size is constant (9x9)."
    ],
    "examples": [
      {
        "input": [
          [
            "5",
            "3",
            ".",
            ".",
            "7",
            ".",
            ".",
            ".",
            "."
          ],
          [
            "6",
            ".",
            ".",
            "1",
            "9",
            "5",
            ".",
            ".",
            "."
          ],
          [
            ".",
            "9",
            "8",
            ".",
            ".",
            ".",
            ".",
            "6",
            "."
          ],
          [
            "8",
            ".",
            ".",
            ".",
            "6",
            ".",
            ".",
            ".",
            "3"
          ],
          [
            "4",
            ".",
            ".",
            "8",
            ".",
            "3",
            ".",
            ".",
            "1"
          ],
          [
            "7",
            ".",
            ".",
            ".",
            "2",
            ".",
            ".",
            ".",
            "6"
          ],
          [
            ".",
            "6",
            ".",
            ".",
            ".",
            "2",
            "8",
            ".",
            "."
          ],
          [
            ".",
            ".",
            ".",
            "4",
            "1",
            "9",
            ".",
            ".",
            "5"
          ],
          [
            ".",
            ".",
            ".",
            ".",
            "8",
            ".",
            ".",
            "7",
            "9"
          ]
        ],
        "output": [
          [
            "5",
            "3",
            "4",
            "6",
            "7",
            "8",
            "9",
            "1",
            "2"
          ],
          [
            "6",
            "7",
            "2",
            "1",
            "9",
            "5",
            "3",
            "4",
            "8"
          ],
          [
            "1",
            "9",
            "8",
            "3",
            "4",
            "2",
            "5",
            "6",
            "7"
          ],
          [
            "8",
            "5",
            "9",
            "7",
            "6",
            "1",
            "4",
            "2",
            "3"
          ],
          [
            "4",
            "2",
            "6",
            "8",
            "5",
            "3",
            "7",
            "9",
            "1"
          ],
          [
            "7",
            "1",
            "3",
            "9",
            "2",
            "4",
            "8",
            "5",
            "6"
          ],
          [
            "9",
            "6",
            "1",
            "2",
            "3",
            "5",
            "8",
            "7",
            "4"
          ],
          [
            "2",
            "8",
            "7",
            "4",
            "1",
            "9",
            "6",
            "3",
            "5"
          ],
          [
            "3",
            "4",
            "5",
            "2",
            "8",
            "6",
            "1",
            "7",
            "9"
          ]
        ],
        "explanation": "The output shows the completed Sudoku puzzle adhering to the rules."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a backtracking approach to try filling digits from 1 to 9.",
      "Use a helper function to check if placing a digit in a cell is valid.",
      "Keep track of filled cells to improve efficiency."
    ],
    "company": "Cadence"
  },
  {
    "question_id": "",
    "title": "Island Perimeter",
    "description": "You are given a grid representing a map where '1' represents land and '0' represents water. The grid is rectangular, containing only '0's and '1's. You need to calculate the perimeter of the island represented by '1's. The perimeter is defined as the total length of the edges of the island, considering that each land cell contributes to the perimeter for each of its sides that are adjacent to water or are on the edge of the grid.",
    "topic": "Array",
    "subtopic": "Grid Traversal",
    "tags": [
      "Grid",
      "DFS",
      "BFS",
      "Perimeter"
    ],
    "input_format": "A 2D grid of binary integers (0s and 1s), where 1 indicates land and 0 indicates water.",
    "output_format": "An integer representing the perimeter of the island.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 100",
      "grid[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "[[0,1,0,0],[1,1,1,0],[0,1,0,0],[0,0,0,0]]",
        "output": "16",
        "explanation": "The island is represented by the '1's. The perimeter is calculated by adding the number of edges that are adjacent to water or boundary of the grid."
      },
      {
        "input": "[[1]]",
        "output": "4",
        "explanation": "A single cell island has a perimeter of 4."
      },
      {
        "input": "[[1,0]]",
        "output": "6",
        "explanation": "The land cell has 3 sides adjacent to water and one side adjacent to another land cell, leading to a total perimeter of 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider each land cell's four sides when calculating perimeter.",
      "Check bounds to see if a side is adjacent to water."
    ],
    "company": "Cadence"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. For example, if the input is [[1,3],[2,6],[8,10],[15,18]], the output should be [[1,6],[8,10],[15,18]]. This means that the intervals [1,3] and [2,6] overlap and should be merged into [1,6].",
    "topic": "Array",
    "subtopic": "Sorting and Merging",
    "tags": [
      "Array",
      "Intervals",
      "Sorting"
    ],
    "input_format": "A list of intervals where each interval is represented by a pair of integers [start, end].",
    "output_format": "A list of merged intervals.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "[[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "The intervals [1,3] and [2,6] overlap resulting in [1,6]. The other intervals do not overlap."
      },
      {
        "input": "[[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] touch at the endpoint 4, so they should be merged into [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on the starting value.",
      "Iterate through the sorted intervals and merge them when they overlap."
    ],
    "company": "Cadence"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An integer array nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers that add up to target.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": " nums[0] + nums[1] = 2 + 7 = 9, so return [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": " nums[1] + nums[2] = 2 + 4 = 6, so return [1, 2]."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": " nums[0] + nums[1] = 3 + 3 = 6, so return [0, 1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the numbers and their indices.",
      "Check if the complement of the current element exists in the hash map."
    ],
    "company": "Cadence"
  },
  {
    "question_id": "",
    "title": "Valid Palindrome",
    "description": "Given a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring case. A string is a palindrome if it reads the same forwards and backwards.",
    "topic": "String",
    "subtopic": "Two Pointers",
    "tags": [
      "String",
      "Palindrome",
      "Two Pointers"
    ],
    "input_format": "A single string s containing characters from the English alphabet, digits, and symbols.",
    "output_format": "A boolean value indicating whether the string is a valid palindrome.",
    "constraints": [
      "1 <= s.length <= 2 * 10^5",
      "s consists only of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"A man, a plan, a canal: Panama\"",
        "output": "true",
        "explanation": "After removing non-alphanumeric characters and ignoring case, the string becomes 'amanaplanacanalpanama', which is a palindrome."
      },
      {
        "input": "s = \"race a car\"",
        "output": "false",
        "explanation": "The string after processing is 'raceacar', which is not the same forwards and backwards."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using two pointers to compare characters in the string.",
      "Use built-in methods or regex to filter out non-alphanumeric characters."
    ],
    "company": "Cadence"
  }
]