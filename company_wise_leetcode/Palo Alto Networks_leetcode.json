[
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for Least Recently Used (LRU) Cache. It should support the following operations: `get(key)` and `put(key, value)`. The `get` method retrieves the value of the key if the key exists in the cache, otherwise returns -1. The `put` method will update the value of the key if the key already exists. If the key does not exist, it will add the key-value pair to the cache. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Design",
    "subtopic": "Cache",
    "tags": [
      "Design",
      "Cache",
      "Linked List",
      "Hash Table"
    ],
    "input_format": "A class `LRUCache` with methods `get(key: int) -> int` and `put(key: int, value: int) -> None`. The constructor takes an integer capacity as a parameter.",
    "output_format": "The result of the `get` method should return an integer.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10^4",
      "0 <= value <= 10^5",
      "There will be at most 10^4 calls to get and put"
    ],
    "examples": [
      {
        "input": "LRUCache cache = new LRUCache(2);\ncache.put(1, 1);\ncache.put(2, 2);\ncache.get(1);",
        "output": "1",
        "explanation": "Cache contains {1=1, 2=2}. The key 1 was accessed, so 1 is returned."
      },
      {
        "input": "cache.put(3, 3);\ncache.get(2);",
        "output": "-1",
        "explanation": "Cache capacity is 2 and the least recently used key 2 has been evicted after adding key 3."
      },
      {
        "input": "cache.put(4, 4);\ncache.get(1);",
        "output": "-1",
        "explanation": "Key 1 was evicted when key 4 was added because it was the least recently used."
      },
      {
        "input": "cache.get(3);",
        "output": "3",
        "explanation": "Key 3 is still in the cache."
      },
      {
        "input": "cache.get(4);",
        "output": "4",
        "explanation": "Key 4 was added and is available in the cache."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a combination of a HashMap and a Doubly Linked List.",
      "The HashMap will store keys and corresponding nodes.",
      "The doubly linked list will keep track of the order of usage."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Find the Longest Equal Subarray",
    "description": "Given an array of integers, return the length of the longest contiguous subarray where all elements are equal.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Subarray"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest contiguous subarray with equal elements.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 2, 2, 2, 3, 3, 3, 3]",
        "output": "4",
        "explanation": "The longest equal subarray is [3, 3, 3, 3] with length 4."
      },
      {
        "input": "nums = [1, 2, 2, 1, 1, 1, 2, 2]",
        "output": "3",
        "explanation": "The longest equal subarray is [1, 1, 1] with length 3."
      },
      {
        "input": "nums = [5, 5, 5, 5, 5]",
        "output": "5",
        "explanation": "All elements are equal, so the entire array is the longest subarray with length 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window approach to maintain the count of longest equal elements.",
      "Keep track of the current element and its count while iterating through the array."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within a string.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A single string s of length n (1 <= n <= 10^5).",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of English letters, digits, symbols, and spaces."
    ],
    "examples": [
      {
        "input": "s = 'abcabcbb'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'abc', which has a length of 3."
      },
      {
        "input": "s = 'bbbbb'",
        "output": "1",
        "explanation": "The longest substring without repeating characters is 'b', with length 1."
      },
      {
        "input": "s = 'pwwkew'",
        "output": "3",
        "explanation": "The longest substring without repeating characters is 'wke', with length 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach.",
      "Use a HashMap to keep track of the characters and their indices."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Median of Two Sorted Arrays",
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (min(m,n))) where m is the size of nums1 and n is the size of nums2. The median is defined as the middle value in an ordered integer list. If the list has an even number of elements, there is no distinct middle value and the median is defined as the average of the two middle values.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Median"
    ],
    "input_format": "Two sorted arrays nums1 and nums2.",
    "output_format": "A float representing the median of the two sorted arrays.",
    "constraints": [
      "0 <= nums1.length <= 1000",
      "0 <= nums2.length <= 1000",
      "All integers in nums1 and nums2 are within the range of -10^6 to 10^6."
    ],
    "examples": [
      {
        "input": "nums1 = [1, 3], nums2 = [2]",
        "output": "2.0",
        "explanation": "The merged array is [1, 2, 3]. The median is 2."
      },
      {
        "input": "nums1 = [1, 2], nums2 = [3, 4]",
        "output": "2.5",
        "explanation": "The merged array is [1, 2, 3, 4]. The median is (2 + 3) / 2 = 2.5."
      },
      {
        "input": "nums1 = [], nums2 = [1]",
        "output": "1.0",
        "explanation": "The merged array is [1]. The median is 1."
      },
      {
        "input": "nums1 = [2], nums2 = []",
        "output": "2.0",
        "explanation": "The merged array is [2]. The median is 2."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider binary search on the smaller array.",
      "The median can be found by dividing the arrays into two halves."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "String Compression",
    "description": "Given a string where each group of consecutive identical characters is represented by the character followed by the count of its repetitions, compress the string such that each group of characters is replaced by the character followed by the count. If the compressed string is not smaller than the original string, return the original string. You must perform the compression in-place and use O(1) extra space.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "In-place",
      "Compression"
    ],
    "input_format": "A string s consisting of lowercase alphabetic characters.",
    "output_format": "A compressed string or the original string if the compressed version is not smaller.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of only lowercase letters."
    ],
    "examples": [
      {
        "input": "s = \"aabbcc\"",
        "output": "a2b2c2",
        "explanation": "The characters 'a', 'b', and 'c' each appear 2 times."
      },
      {
        "input": "s = \"abc\"",
        "output": "abc",
        "explanation": "The compressed version 'a1b1c1' is not smaller than 'abc', so return the original string."
      },
      {
        "input": "s = \"aaaabbbcc\"",
        "output": "a4b3c2",
        "explanation": "The characters 'a', 'b', and 'c' appear 4, 3, and 2 times respectively."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Iterate through the string while counting consecutive characters.",
      "Use a StringBuilder to construct the compressed string."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Maximum Length of a Concatenated String with Unique Characters",
    "description": "Given an array of strings, you need to find the maximum possible length of a concatenated string that can be created by choosing some of these strings and concatenating them together. A valid concatenated string must have all unique characters. You need to return the maximum length of such a concatenated string that can be formed with the given strings.",
    "topic": "Backtracking",
    "subtopic": "Combination",
    "tags": [
      "Backtracking",
      "String",
      "Combination"
    ],
    "input_format": "An array of strings arr.",
    "output_format": "An integer representing the maximum length of a concatenated string with unique characters.",
    "constraints": [
      "1 <= arr.length <= 20",
      "1 <= arr[i].length <= 26",
      "Characters in arr[i] are lowercase English letters only."
    ],
    "examples": [
      {
        "input": "arr = ['un', 'iq', 'ue']",
        "output": "4",
        "explanation": "The unique characters can be formed by concatenating 'un' and 'iq' => 'uniq', which has a length of 4."
      },
      {
        "input": "arr = ['cha', 'r', 'act', 'ers']",
        "output": "6",
        "explanation": "By concatenating 'cha' and 'r' we get 'char', and concatenating 'char' with 'act' gives 'character', which has a length of 6."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use backtracking to explore all combinations.",
      "Maintain a set to track unique characters while concatenating."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Binary Tree Level Order Traversal",
    "description": "Given a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).",
    "topic": "Tree",
    "subtopic": "Traversal",
    "tags": [
      "Tree",
      "BFS",
      "Level Order"
    ],
    "input_format": "The root node of a binary tree.",
    "output_format": "A list of lists, where each sublist contains values of nodes at the corresponding level.",
    "constraints": [
      "1 <= number of nodes <= 1000",
      "Node values can be any integer within the range of a 32-bit signed integer."
    ],
    "examples": [
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "[[3],[9,20],[15,7]]",
        "explanation": "Level 0: [3], Level 1: [9, 20], Level 2: [15, 7]."
      },
      {
        "input": "root = [1]",
        "output": "[[1]]",
        "explanation": "Only one node present, the output is just its value."
      },
      {
        "input": "root = []",
        "output": "[]",
        "explanation": "Empty tree results in an empty list."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a queue to facilitate level order traversal.",
      "Enqueue the left and right children of each node."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Min Stack",
    "description": "Design a stack that supports the following operations: push, pop, top, and retrieving the minimum element. All operations should be done in constant time (O(1)). Implement the MinStack class with the following methods: \n- `push(val: int)`: Pushes the element val onto the stack.  \n- `pop()`: Removes the element on the top of the stack.  \n- `top() -> int`: Get the top element of the stack.  \n- `getMin() -> int`: Retrieve the minimum element in the stack.",
    "topic": "Stack",
    "subtopic": "Design",
    "tags": [
      "Stack",
      "Design",
      "Data Structures"
    ],
    "input_format": "The MinStack class will be used to invoke methods with integer values as specified.",
    "output_format": "The output should return values for `top()` and `getMin()` methods.",
    "constraints": [
      "The number of operations performed will be in the range [1, 1000].",
      "Each value pushed will be a non-negative integer."
    ],
    "examples": [
      {
        "input": "MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); minStack.pop(); minStack.top(); minStack.getMin();",
        "output": "-3 0 -2",
        "explanation": "After pushing -2, 0, and -3, the minimum is -3. After popping, the top is 0 and the minimum remains -2."
      },
      {
        "input": "MinStack minStack = new MinStack(); minStack.push(1); minStack.push(2); minStack.getMin(); minStack.pop(); minStack.getMin();",
        "output": "1 1",
        "explanation": "Pushing 1 and 2 gives the minimum as 1. After popping 2, the minimum remains 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use an additional stack to keep track of the minimum values.",
      "Think about maintaining two stacks: one for values and one for the minimums."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Meeting Rooms",
    "description": "Given an array of meeting time intervals consisting of start and end times, determine if a person could attend all meetings. Each meeting is represented by a pair of integers [start, end]. A person can only attend a meeting if their ending time does not overlap with another meeting's start time.",
    "topic": "Interval",
    "subtopic": "Sorting",
    "tags": [
      "Intervals",
      "Sorting",
      "Greedy"
    ],
    "input_format": "An array of intervals where each interval is represented as a pair of integers [start, end].",
    "output_format": "A boolean value: return true if the person can attend all meetings, otherwise return false.",
    "constraints": [
      "0 <= intervals.length <= 10^4",
      "0 <= intervals[i][0] < intervals[i][1] <= 10^6"
    ],
    "examples": [
      {
        "input": "intervals = [[0, 30], [5, 10], [15, 20]]",
        "output": "false",
        "explanation": "The meetings overlap: [0, 30] and [5, 10] cannot be attended together."
      },
      {
        "input": "intervals = [[7, 10], [2, 4]]",
        "output": "true",
        "explanation": "There are no overlapping meetings, so the person can attend both."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Sort the intervals by their start time.",
      "Check if the end time of the last meeting is greater than the start time of the current meeting."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Minimum Path Sum",
    "description": "Given a grid filled with non-negative integers, find a path from the top left corner to the bottom right corner that minimizes the sum of the numbers along its path. You can only move either down or right at any point in time.",
    "topic": "Dynamic Programming",
    "subtopic": "Grid Traversal",
    "tags": [
      "Dynamic Programming",
      "Grid",
      "Pathfinding"
    ],
    "input_format": "A 2D array of non-negative integers representing the grid.",
    "output_format": "An integer representing the minimum path sum from the top left to the bottom right corner.",
    "constraints": [
      "1 <= grid.length, grid[0].length <= 200",
      "0 <= grid[i][j] <= 100"
    ],
    "examples": [
      {
        "input": "[[1,3,1],[1,5,1],[4,2,1]]",
        "output": "7",
        "explanation": "The path from (0,0) -> (0,1) -> (1,1) -> (2,2) corresponds to the sum 1 + 3 + 1 + 2 = 7."
      },
      {
        "input": "[[1,2,3],[4,5,6]]",
        "output": "12",
        "explanation": "The path from (0,0) -> (0,1) -> (0,2) -> (1,2) corresponds to the sum 1 + 2 + 3 + 6 = 12."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to build up the solution.",
      "You can use a 2D array to store the minimum path sums."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Hashing",
    "tags": [
      "String",
      "Hashing",
      "Anagram"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A list of groups of anagrams, where each group is a list of strings.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "0 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]",
        "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "explanation": "The groups of anagrams are [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "The only string is an empty string, so it forms its own group."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "The only string is \"a\", so it forms its own group."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a map to group strings by their sorted character order.",
      "Sorting the characters of each string can help you identify anagrams."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Two Pointers"
    ],
    "input_format": "An array of integers `nums` followed by an integer `target`.",
    "output_format": "A list of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "0 <= target <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9"
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6"
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to track the indices of the numbers you've seen.",
      "Check if the complement of the current number exists in the hash map."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Sliding Window Maximum",
    "description": "You are given an integer array nums and an integer k. You need to find the maximum value in every contiguous subarray of size k. The output should be an array of these maximum values.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Maximum"
    ],
    "input_format": "An integer array nums and an integer k where 1 <= k <= nums.length.",
    "output_format": "An integer array representing the maximum values of each sliding window of size k.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, -1, -3, 5, 3, 6, 7], k = 3",
        "output": "[3, 3, 5, 5, 6, 7]",
        "explanation": "The maximums for each sliding window of size 3 are [3], [3], [5], [5], [6], [7]."
      },
      {
        "input": "nums = [1, -1], k = 1",
        "output": "[1, -1]",
        "explanation": "The maximums for each sliding window of size 1 are [1] and [-1]."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a double-ended queue to optimize the search for the maximum in the sliding window."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Shortest Path in Binary Matrix",
    "description": "Given a binary matrix (0s and 1s) where 0 represents an empty cell and 1 represents a blocked cell, find the length of the shortest path from the top-left corner to the bottom-right corner. You can move up, down, left, right, or diagonally to adjacent cells. If there is no path, return -1.",
    "topic": "Graph",
    "subtopic": "Breadth-First Search",
    "tags": [
      "Graph",
      "BFS",
      "Pathfinding"
    ],
    "input_format": "A 2D list of integers representing the binary matrix.",
    "output_format": "An integer representing the length of the shortest path, or -1 if no path exists.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 100",
      "grid[i][j] is either 0 or 1.",
      "The starting cell grid[0][0] and the ending cell grid[grid.length-1][grid[0].length-1] are 0."
    ],
    "examples": [
      {
        "input": "grid = [[0,0,0],[1,0,1],[0,0,0]]",
        "output": "4",
        "explanation": "The shortest path is: (0,0) \u2192 (0,1) \u2192 (0,2) \u2192 (1,1) \u2192 (2,2) - 4 steps."
      },
      {
        "input": "grid = [[0,1],[1,0]]",
        "output": "2",
        "explanation": "The shortest path is: (0,0) \u2192 (1,1) - 2 steps."
      },
      {
        "input": "grid = [[1,0,0],[1,1,0],[0,1,0]]",
        "output": "-1",
        "explanation": "There is no path from (0,0) to (2,2) because the path is blocked."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about using BFS to explore all possible paths.",
      "Keep track of visited nodes to avoid cycles."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string s consisting of parentheses, determine if the input string is valid. An input string is valid if: 1. Open brackets must be closed by the same type of brackets. 2. Open brackets must be closed in the correct order. 3. Every close bracket has a corresponding open bracket of the same type.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s of length n (1 <= n <= 10^4) containing only the characters '(', ')', '{', '}', '[' and ']'.",
    "output_format": "A boolean value true if the string is valid, false otherwise.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The single pair of parentheses is valid."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "All types of brackets are closed correctly."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The square bracket is incorrectly placed."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The brackets are not closed in the correct order."
      },
      {
        "input": "s = '{[()]}')",
        "output": "true",
        "explanation": "All brackets are closed properly in the correct order."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Check for corresponding closing brackets using a hashmap."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A palindromic substring is a string that reads the same backward as forward.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A single string s, where 1 <= s.length <= 1000.",
    "output_format": "A string representing the longest palindromic substring of s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consist of only digits and English letters."
    ],
    "examples": [
      {
        "input": "s = \"babad\"",
        "output": "\"bab\"",
        "explanation": "The longest palindromic substring is \"bab\" (or \"aba\", which is also a valid answer)."
      },
      {
        "input": "s = \"cbbd\"",
        "output": "\"bb\"",
        "explanation": "The longest palindromic substring is \"bb\"."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around the center of the palindrome.",
      "A single character can be a palindrome.",
      "Keep track of the start and end indices of the longest palindrome found."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Top K Frequent Words",
    "description": "Given an array of strings words and an integer k, return the k most frequent strings. Return the answer in any order. It's guaranteed that the answer is unique. If two words have the same frequency, sort them lexicographically.",
    "topic": "Hash Table",
    "subtopic": "Frequency Counting",
    "tags": [
      "Hash Table",
      "Sorting",
      "Heap"
    ],
    "input_format": "An array of strings words and an integer k.",
    "output_format": "An array of strings representing the k most frequent words.",
    "constraints": [
      "1 <= words.length <= 10^5",
      "1 <= words[i].length <= 100",
      "k is in the range [1, the number of unique words in words]"
    ],
    "examples": [
      {
        "input": "words = [\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], k = 2",
        "output": "[\"i\", \"love\"]",
        "explanation": "The word 'i' appears 2 times and 'love' appears 2 times. Both are the top 2 frequent words."
      },
      {
        "input": "words = [\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], k = 4",
        "output": "[\"the\", \"is\", \"sunny\", \"day\"]",
        "explanation": "'the' appears 4 times, 'is' appears 3 times, 'sunny' appears 2 times, and 'day' appears 1 time."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash table to count the frequency of each word.",
      "Consider using a heap to find the top k elements efficiently.",
      "Sort the results for words with the same frequency."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Word Break",
    "description": "Given a string s and a dictionary of strings wordDict, determine if s can be segmented into a space-separated sequence of one or more dictionary words. The same word in the dictionary may be reused multiple times in the segmentation.",
    "topic": "Dynamic Programming",
    "subtopic": "String Segmentation",
    "tags": [
      "Dynamic Programming",
      "String",
      "Backtracking"
    ],
    "input_format": "A string s and a list of strings wordDict.",
    "output_format": "A boolean value indicating whether s can be segmented or not.",
    "constraints": [
      "1 <= s.length <= 300",
      "1 <= wordDict.length <= 1000",
      "1 <= wordDict[i].length <= 20",
      "The input string and the words in the dictionary consist of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'leetcode', wordDict = ['leet', 'code']",
        "output": "true",
        "explanation": "The string 'leetcode' can be segmented as 'leet code'."
      },
      {
        "input": "s = 'applepenapple', wordDict = ['apple', 'pen']",
        "output": "true",
        "explanation": "'applepenapple' can be segmented as 'apple pen apple'."
      },
      {
        "input": "s = 'catsandog', wordDict = ['cats', 'dog', 'sand', 'and', 'cat']",
        "output": "false",
        "explanation": "'catsandog' cannot be segmented into words from the dictionary."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try using dynamic programming to store the results of subproblems.",
      "Use a boolean array to keep track of achievable end positions for the segmentation."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Integer to Roman",
    "description": "Given an integer, convert it to a Roman numeral. The input is guaranteed to be within the range from 1 to 3999. The Roman numeral system is based on combinations of the following symbols: I, V, X, L, C, D, and M, which represent the values 1, 5, 10, 50, 100, 500, and 1000 respectively.",
    "topic": "Math",
    "subtopic": "Conversion",
    "tags": [
      "Math",
      "String",
      "Conversion"
    ],
    "input_format": "An integer num, where 1 <= num <= 3999.",
    "output_format": "A string representing the Roman numeral equivalent of the input integer.",
    "constraints": [
      "1 <= num <= 3999"
    ],
    "examples": [
      {
        "input": "num = 3",
        "output": "III",
        "explanation": "The integer 3 is represented as 'III' in Roman numerals."
      },
      {
        "input": "num = 58",
        "output": "LVIII",
        "explanation": "The integer 58 is represented as 'LVIII' in Roman numerals: L = 50, V = 5, III = 3."
      },
      {
        "input": "num = 1994",
        "output": "MCMXCIV",
        "explanation": "The integer 1994 is represented as 'MCMXCIV' in Roman numerals: M = 1000, CM = 900, XC = 90, IV = 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Break down the integer into its thousands, hundreds, tens, and units."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Merge Two Sorted Lists",
    "description": "Given the heads of two sorted linked lists, merge them into one sorted linked list. The new list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.",
    "topic": "Linked List",
    "subtopic": "Merging Lists",
    "tags": [
      "Linked List",
      "Sorting",
      "Merging"
    ],
    "input_format": "The input consists of the heads of two sorted linked lists, l1 and l2.",
    "output_format": "The output is the head of the merged sorted linked list.",
    "constraints": [
      "The number of nodes in both lists is in the range [0, 50].",
      "-100 <= Node.val <= 100",
      "Both l1 and l2 are sorted in non-decreasing order."
    ],
    "examples": [
      {
        "input": "l1 = 1 -> 2 -> 4, l2 = 1 -> 3 -> 4",
        "output": "1 -> 1 -> 2 -> 3 -> 4 -> 4",
        "explanation": "Merging the two lists gives us 1 -> 1 -> 2 -> 3 -> 4 -> 4 in sorted order."
      },
      {
        "input": "l1 = [], l2 = 0",
        "output": "0",
        "explanation": "Merging an empty list with a single node list gives us the single node."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a dummy node to simplify the merging process.",
      "Compare the head nodes of the two lists and attach the smaller node to the merged list."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "You are given two sorted arrays, nums1 and nums2, where nums1 has a size of m + n, initialized with m elements and n zeros. You need to merge nums2 into nums1 as one sorted array. Do this in place and without using extra space.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Merge",
      "Sorting"
    ],
    "input_format": "Two arrays, nums1 and nums2, where nums1 has a size of m + n, initialized with m elements and followed by n zeros.",
    "output_format": "A sorted array nums1 that contains all elements from both nums1 and nums2.",
    "constraints": [
      "0 <= m, n <= 100",
      "1 <= m + n <= 200",
      "-10^9 <= nums1[i], nums2[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1, 2, 3, 0, 0, 0], m = 3, nums2 = [2, 5, 6], n = 3",
        "output": "[1, 2, 2, 3, 5, 6]",
        "explanation": "After merging nums2 into nums1, the sorted array is [1, 2, 2, 3, 5, 6]."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "nums2 is empty, so the result is the same as nums1."
      },
      {
        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "output": "[1]",
        "explanation": "nums1 is initially empty, so the result is just nums2."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using two pointers to iterate through both arrays.",
      "You should fill nums1 from the end to avoid overwriting values."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Design HashMap",
    "description": "Design and implement a HashMap data structure with basic operations such as put, get, and remove. The HashMap should handle collisions using chaining. It should support adding key-value pairs, retrieving values based on keys, and removing key-value pairs efficiently.",
    "topic": "Data Structure",
    "subtopic": "HashMap",
    "tags": [
      "Data Structure",
      "HashMap",
      "Design"
    ],
    "input_format": "Operations on the HashMap as strings: 'put(key, value)', 'get(key)', and 'remove(key)'.",
    "output_format": "Output for 'get' operations which is either the value associated with the provided key or -1 if the key does not exist.",
    "constraints": [
      "The number of operations will not exceed 10000.",
      "Keys and values are integers."
    ],
    "examples": [
      {
        "input": "put(1, 1); put(2, 2); get(1); get(3); put(2, 1); get(2); remove(2); get(2);",
        "output": "[1, -1, 1, -1]",
        "explanation": "After adding 1 and 2, querying for key 1 returns 1, and querying for key 3 returns -1 (not found). Updating key 2's value, then querying it returns 1. After removing key 2, querying again returns -1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using an array of linked lists to handle collisions.",
      "Use the modulo operator to determine the index for each key."
    ],
    "company": "Palo Alto Networks"
  },
  {
    "question_id": "",
    "title": "Insert Delete GetRandom O(1)",
    "description": "Design a data structure that supports all following operations in average O(1) time complexity: insert, delete, and getRandom. Implement the class RandomizedSet that supports these operations. Your implementation should not allow duplicate values, ensuring that each value can only be stored once. The getRandom function should return a random element from the currently stored values in the data structure.",
    "topic": "Design",
    "subtopic": "Data Structures",
    "tags": [
      "Hash Table",
      "Array",
      "Random"
    ],
    "input_format": "No input format for class initialization. Use methods `insert(val)`, `remove(val)`, and `getRandom()`.",
    "output_format": "For each method called, return the expected output: True/False for insert/remove, and an integer for getRandom.",
    "constraints": [
      "-2^31 <= val <= 2^31 - 1",
      "Each method operates within constant average time."
    ],
    "examples": [
      {
        "input": "RandomizedSet obj = new RandomizedSet();\nobj.insert(1);\nobj.remove(2);\nobj.insert(2);\nint rand1 = obj.getRandom(); // Returns 1 or 2;\nobj.remove(1);\nint rand2 = obj.getRandom(); // Returns 2.",
        "output": "Output can vary due to randomness.",
        "explanation": "After the operations, the set contains 2, so getRandom can only return 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map and an array to maintain constant time operations.",
      "When deleting, make sure to maintain the integrity of your structure."
    ],
    "company": "Palo Alto Networks"
  }
]