[
  {
    "question_id": "",
    "title": "Minimum Cost For Tickets",
    "description": "You are planning to travel and need to determine the minimum cost for tickets over given days of travel. You have three options: a 1-day ticket costs `cost1`, a 7-day ticket costs `cost7`, and a 30-day ticket costs `cost30`. Given an array of travel days, find the minimum cost you need to pay to cover all your travel days. A ticket is valid for the number of days specified, starting from the day of purchase.",
    "topic": "Dynamic Programming",
    "subtopic": "Memoization",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An integer array days where 1 <= days.length <= 365, representing the days of the year you plan to travel. Three integers cost1, cost7, cost30 representing the cost of that ticket type.",
    "output_format": "An integer representing the minimum cost needed to cover all travel days.",
    "constraints": [
      "1 <= days[i] <= 365",
      "1 <= cost1, cost7, cost30 <= 10^4"
    ],
    "examples": [
      {
        "input": "days = [1, 4, 6, 7, 8], cost1 = 2, cost7 = 7, cost30 = 20",
        "output": "11",
        "explanation": "Buying a 7-day ticket on day 1 covers days 1 to 7 and then a 1-day ticket for day 8 gives a total cost of 7 + 2 = 9."
      },
      {
        "input": "days = [1, 2, 3], cost1 = 2, cost7 = 7, cost30 = 15",
        "output": "6",
        "explanation": "Three 1-day tickets cost 6, which is cheaper than a 7-day ticket at 7."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dynamic programming approach to optimize cost.",
      "Use an array to store the minimum cost for each day from 1 to the maximum travel day."
    ],
    "company": "Grab"
  },
  {
    "question_id": "",
    "title": "Adding Two Negabinary Numbers",
    "description": "You are given two negabinary numbers, represented as binary strings. A negabinary number is a number in base -2. Your task is to add these two negabinary numbers and return the sum as a binary string. Negabinary arithmetic functions differently from standard binary arithmetic due to the negative base. Therefore, careful consideration must be given to the addition process and carry values.",
    "topic": "Math",
    "subtopic": "Binary Operations",
    "tags": [
      "Binary",
      "Math",
      "Negabinary",
      "Addition"
    ],
    "input_format": "Two strings, `a` and `b`, representing two negabinary numbers.",
    "output_format": "A string representing the sum of the two negabinary numbers in negabinary format.",
    "constraints": [
      "1 <= a.length, b.length <= 10000",
      "a and b consist of only '0' and '1' characters."
    ],
    "examples": [
      {
        "input": "a = '110', b = '101'",
        "output": "'111'",
        "explanation": "The negabinary representation of '110' is -2 + 0 + 2 = 0, and '101' is -1 + 0 + 4 = 3. Their sum is 3, which in negabinary is '111'."
      },
      {
        "input": "a = '10', b = '11'",
        "output": "'1'",
        "explanation": "The negabinary representation of '10' is -2, and '11' is -1 + 2 = 1. Their sum is -2 + 1 = -1, which in negabinary is '1'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how carries work with a negative base.",
      "You may need to convert between bases to validate your result.",
      "Think about adding from the least significant bit to the most significant bit."
    ],
    "company": "Grab"
  },
  {
    "question_id": "",
    "title": "Minimum Number of Food Buckets to Feed the Hamsters",
    "description": "In a hamster shelter, you need to feed a group of N hamsters which require varying amounts of food each day. Each food bucket can hold a maximum of K units of food. Your task is to determine the minimum number of food buckets you need to use to ensure all hamsters are fed for the day, given their individual food requirements.",
    "topic": "Greedy",
    "subtopic": "Bin Packing",
    "tags": [
      "Greedy",
      "Bin Packing",
      "Optimization"
    ],
    "input_format": "Two integers, N and K, followed by an array of integers representing the food needs of each hamster.",
    "output_format": "An integer representing the minimum number of food buckets required.",
    "constraints": [
      "1 <= N <= 10^5",
      "1 <= K <= 10^6",
      "1 <= food[i] <= K"
    ],
    "examples": [
      {
        "input": "N = 5, K = 10, food = [2, 5, 3, 8, 7]",
        "output": "3",
        "explanation": "One possible way to group them is: (2, 8), (5, 3), and (7), resulting in 3 buckets."
      },
      {
        "input": "N = 4, K = 5, food = [2, 2, 1, 1]",
        "output": "2",
        "explanation": "You can use two buckets: (2, 2) and (1, 1) fits each bucket."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the food needs.",
      "Try to fit as many hamsters as possible into each bucket."
    ],
    "company": "Grab"
  },
  {
    "question_id": "",
    "title": "Reconstruct a 2-Row Binary Matrix",
    "description": "You are given a binary matrix with the shape of 2 x n, where n is at least 1. Each column of the matrix contains two values, either 0 or 1. You need to reconstruct the original binary matrix from the counts of 1's in each column. Specifically, you are given an array 'sum' where sum[i] indicates the total number of 1's in the i-th column. Your task is to return the reconstructed binary matrix if it is possible, or an empty matrix if it is not.",
    "topic": "Matrix",
    "subtopic": "Reconstruction",
    "tags": [
      "Matrix",
      "Reconstruction",
      "Binary"
    ],
    "input_format": "An array of integers sum of length n.",
    "output_format": "A 2D binary matrix of size 2 x n.",
    "constraints": [
      "1 <= sum.length <= 100",
      "0 <= sum[i] <= 2"
    ],
    "examples": [
      {
        "input": "[2, 2, 1]",
        "output": "[[1, 1, 0], [1, 1, 0]]",
        "explanation": "Each column has 2 ones, so we can fill the matrix like [[1, 1, 0], [1, 1, 0]]."
      },
      {
        "input": "[2, 0, 2]",
        "output": "[[1, 0, 1], [1, 0, 1]]",
        "explanation": "The first and last columns must have 1's, second column has 0, so the matrix is [[1, 0, 1], [1, 0, 1]]."
      },
      {
        "input": "[1, 1, 1]",
        "output": "[]",
        "explanation": "It is not possible to fill the matrix since the middle column cannot support 1's from both rows."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the total count of 1's that can fit into the two rows.",
      "Check if the sum of the column values is even."
    ],
    "company": "Grab"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers `nums` and an integer target, return the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers `nums` followed by an integer `target`.",
    "output_format": "An array of two integers representing the indices of the two numbers that add up to the target.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "Each input would have exactly one solution."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the complement of each number."
    ],
    "company": "Grab"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string. For example, the longest substring of \"abcabcbb\" is \"abc\" with length 3.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A single string s consisting of English letters, digits, symbols, and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s consists of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"abc\", which has a length of 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The longest substring without repeating characters is \"b\", with a length of 1."
      },
      {
        "input": "s = \"pwwkew\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"wke\", which has a length of 3."
      },
      {
        "input": "s = \"\"",
        "output": "0",
        "explanation": "An empty string has a length of 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window approach to track the characters.",
      "Utilize a set to store characters in the current window."
    ],
    "company": "Grab"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, find the longest substring in s that is a palindrome. A substring is a contiguous sequence of characters within the string. A palindrome is a string that reads the same forward and backward.",
    "topic": "Dynamic Programming",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A string s (1 <= s.length <= 1000).",
    "output_format": "A string representing the longest palindromic substring in s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only printable ASCII characters."
    ],
    "examples": [
      {
        "input": "babad",
        "output": "bab",
        "explanation": "Both 'bab' and 'aba' are valid palindromic substrings, but 'bab' is the first one found and has the same length as 'aba'."
      },
      {
        "input": "cbbd",
        "output": "bb",
        "explanation": "'bb' is the longest palindromic substring."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around potential centers of the palindrome.",
      "A palindrome can be expanded from its center."
    ],
    "company": "Grab"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design a data structure that implements a Least Recently Used (LRU) cache. It should support the following operations: get and put. The 'get' method fetches the value of the key if the key exists in the cache. If the key does not exist, it returns -1. The 'put' method inserts or updates the value of the key. If the number of keys exceeds the capacity, it should invalidate the least recently used key before inserting a new key-value pair.",
    "topic": "Design",
    "subtopic": "Cache Design",
    "tags": [
      "Design",
      "Cache",
      "Linked List",
      "Hash Map"
    ],
    "input_format": "The cache is initialized with a positive capacity. For the 'put' command, two parameters (key, value) are passed. For the 'get' command, a single parameter (key) is passed.",
    "output_format": "The 'get' method returns the value associated with the key or -1 if the key does not exist. The 'put' method does not return anything.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10^4",
      "0 <= value <= 10^4"
    ],
    "examples": [
      {
        "input": "cache = LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1, -1, 3, 4]",
        "explanation": "The sequence of operations results in the values being fetched as described."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a combination of a hashmap and a doubly linked list.",
      "Keep track of the order of usage to identify the least recently used item.",
      "Ensure that both 'get' and 'put' methods operate in O(1) time."
    ],
    "company": "Grab"
  },
  {
    "question_id": "",
    "title": "Next Permutation",
    "description": "Implement an algorithm to rearrange the numbers into the lexicographically next greater permutation of numbers. If such arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order). The replacement must be done in-place and use only constant extra memory.",
    "topic": "Array",
    "subtopic": "Permutation",
    "tags": [
      "Array",
      "Permutation",
      "In-place"
    ],
    "input_format": "An array of integers nums representing the current permutation.",
    "output_format": "Modify the input array to represent the next permutation of numbers.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 100"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "[1, 3, 2]",
        "explanation": "The next permutation of [1, 2, 3] is [1, 3, 2]."
      },
      {
        "input": "nums = [3, 2, 1]",
        "output": "[1, 2, 3]",
        "explanation": "As this is the last permutation, the next permutation is the first one: [1, 2, 3]."
      },
      {
        "input": "nums = [1, 1, 5]",
        "output": "[1, 5, 1]",
        "explanation": "The next permutation of [1, 1, 5] is [1, 5, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Find the largest index k such that nums[k] < nums[k + 1].",
      "Find the largest index l greater than k such that nums[k] < nums[l].",
      "Swap nums[k] and nums[l].",
      "Reverse the sequence from nums[k + 1] to the end."
    ],
    "company": "Grab"
  },
  {
    "question_id": "",
    "title": "Search a 2D Matrix",
    "description": "Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has properties: it is sorted in ascending order both row-wise and column-wise. Your task is to implement a function that returns true if the target value exists in the matrix, and false otherwise.",
    "topic": "Matrix",
    "subtopic": "Binary Search",
    "tags": [
      "Matrix",
      "Binary Search",
      "Search"
    ],
    "input_format": "A 2D array of integers matrix and a target integer.",
    "output_format": "A boolean indicating whether the target exists in the matrix.",
    "constraints": [
      "matrix.length == m",
      "matrix[i].length == n",
      "1 <= m, n <= 100",
      "-10^4 <= matrix[i][j] <= 10^4",
      "All elements of matrix are unique.",
      "-10^4 <= target <= 10^4"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 3, 5], [7, 9, 11], [12, 14, 16]], target = 9",
        "output": "true",
        "explanation": "The value 9 exists in the matrix."
      },
      {
        "input": "matrix = [[1, 3, 5], [7, 9, 11], [12, 14, 16]], target = 2",
        "output": "false",
        "explanation": "The value 2 does not exist in the matrix."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Utilize binary search in a row-wise or column-wise manner.",
      "Consider the properties of the sorted matrix while searching."
    ],
    "company": "Grab"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Note that an empty string is also considered valid.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A single string s consisting of parentheses characters.",
    "output_format": "A boolean value indicating whether the string is valid.",
    "constraints": [
      "0 <= s.length <= 10^4",
      "s consists of parentheses characters: '(', ')', '{', '}', '[' and ']'"
    ],
    "examples": [
      {
        "input": "s = \"()\"",
        "output": "true",
        "explanation": "The parentheses are correctly matched."
      },
      {
        "input": "s = \"()[]}\"",
        "output": "false",
        "explanation": "The brackets are not closed in the correct order."
      },
      {
        "input": "s = \"(()){}[]\"",
        "output": "true",
        "explanation": "All brackets are properly nested and closed."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to help keep track of opening brackets.",
      "Ensure that for every closing bracket, there is a matching opening bracket."
    ],
    "company": "Grab"
  },
  {
    "question_id": "",
    "title": "Simplify Path",
    "description": "Given a string representing an absolute path for a file (Unix-style), you need to simplify it. The path can include the following components: '.', '..', and any non-empty directory names. The resulting simplified path should not contain redundant slashes or references to the current directory ('.') or the parent directory ('..').",
    "topic": "String",
    "subtopic": "Path Manipulation",
    "tags": [
      "String",
      "Path",
      "Manipulation"
    ],
    "input_format": "A single string path representing the absolute file path.",
    "output_format": "A string representing the simplified absolute path.",
    "constraints": [
      "1 <= path.length <= 3000",
      "path consists of English letters, digits, '/', '.', and '..'",
      "path is guaranteed to be a valid absolute path."
    ],
    "examples": [
      {
        "input": "/home/../usr//bin/./",
        "output": "/usr/bin",
        "explanation": "The given path goes up one level from /home to /, then to /usr, and finally to /bin."
      },
      {
        "input": "/a/./b/../../c/",
        "output": "/c",
        "explanation": "The path goes to 'a', stays (.) at 'a', goes back to the root (../../), and then to 'c'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the directories.",
      "Ignore '.' as they refer to the current directory.",
      "Handle '..' by popping the last directory if it exists."
    ],
    "company": "Grab"
  },
  {
    "question_id": "",
    "title": "Daily Temperatures",
    "description": "Given an array of daily temperatures, return an array such that, for each day in the input, tells you how many days you will have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead. For example, given a list of temperatures, for each day, calculate the number of days until a warmer temperature occurs.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "input_format": "An array of integers temperatures where 0 <= temperatures[i] <= 100.",
    "output_format": "An array of integers representing the number of days to wait for a warmer temperature.",
    "constraints": [
      "1 <= temperatures.length <= 30000",
      "0 <= temperatures[i] <= 100"
    ],
    "examples": [
      {
        "input": "temperatures = [73, 74, 75, 71, 69, 72, 76, 73]",
        "output": "[1, 1, 4, 2, 1, 1, 0, 0]",
        "explanation": "For the input temperatures, the output indicates how many days need to pass until a warmer day is experienced, with 0 meaning there are no warmer days ahead."
      },
      {
        "input": "temperatures = [30, 40, 50, 60]",
        "output": "[1, 1, 1, 0]",
        "explanation": "Each day has a warmer day ahead, except the last day which has no warmer day."
      },
      {
        "input": "temperatures = [30, 60, 90]",
        "output": "[1, 1, 0]",
        "explanation": "The first day has a warmer day the next day, the second day has one warmer day ahead, and the last day has no warmer day."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a monotonically decreasing stack for tracking indices of warmer days."
    ],
    "company": "Grab"
  }
]