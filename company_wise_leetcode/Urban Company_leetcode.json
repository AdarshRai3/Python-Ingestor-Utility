[
  {
    "question_id": "",
    "title": "Maximum Profit in Job Scheduling",
    "description": "You are given a list of jobs where each job has a start time, end time, and profit associated with it. Your goal is to schedule jobs in such a way that you maximize the total profit. Two jobs cannot be scheduled at the same time, meaning if one job overlaps with another, you cannot take both. Write a function that determines the maximum profit you can achieve through job scheduling.",
    "topic": "Dynamic Programming",
    "subtopic": "Interval Scheduling",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Interval Scheduling"
    ],
    "input_format": "An array of jobs, where each job is represented as a triplet [start_time, end_time, profit].",
    "output_format": "An integer representing the maximum profit that can be achieved.",
    "constraints": [
      "1 <= jobs.length <= 10^4",
      "0 <= start_time < end_time <= 10^9",
      "0 <= profit <= 10^4"
    ],
    "examples": [
      {
        "input": "jobs = [[1, 3, 50], [3, 5, 20], [6, 19, 100], [2, 100, 200]]",
        "output": "250",
        "explanation": "The maximum profit can be achieved by taking jobs with profit 50 (job 1) and 200 (job 4)."
      },
      {
        "input": "jobs = [[1, 2, 100], [2, 3, 200], [3, 4, 300]]",
        "output": "600",
        "explanation": "All jobs can be taken without overlap, so the total profit is 100 + 200 + 300 = 600."
      },
      {
        "input": "jobs = [[1, 2, 50], [2, 3, 150], [3, 4, 20], [4, 5, 40]]",
        "output": "240",
        "explanation": "The optimal way is to take jobs with profits 50, 150, and 40."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider sorting jobs by their end times.",
      "Use dynamic programming to keep track of maximum profits at each job.",
      "Think about how to find the last non-conflicting job for each job."
    ],
    "company": "Urban Company"
  },
  {
    "question_id": "",
    "title": "Surrounded Regions",
    "description": "Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'. A region is captured by flipping all 'O's into 'X's in that surrounded region. An 'O' on the edge of the board or connected to an 'O' on the edge can never be flipped.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "DFS",
      "Matrix"
    ],
    "input_format": "A 2D board represented as a list of lists containing 'X' and 'O'.",
    "output_format": "The board after capturing all surrounded regions.",
    "constraints": [
      "1 <= board.length, board[i].length <= 200",
      "board[i][j] is either 'X' or 'O'."
    ],
    "examples": [
      {
        "input": "board = [['X', 'X', 'X', 'X'], ['X', 'O', 'O', 'X'], ['X', 'X', 'O', 'X'], ['X', 'O', 'X', 'X']]",
        "output": "[['X', 'X', 'X', 'X'], ['X', 'X', 'X', 'X'], ['X', 'X', 'X', 'X'], ['X', 'O', 'X', 'X']]",
        "explanation": "The 'O's that are surrounded by 'X's are captured and flipped to 'X's."
      },
      {
        "input": "board = [['O', 'O'], ['O', 'O']]",
        "output": "[['O', 'O'], ['O', 'O']]",
        "explanation": "No 'O's are surrounded by 'X's, so the board remains unchanged."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Depth-First Search (DFS) to mark unflippable regions.",
      "Start from the edges to find 'O's that should not be flipped."
    ],
    "company": "Urban Company"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Depth-First Search",
    "subtopic": "Grid Traversal",
    "tags": [
      "DFS",
      "Union Find",
      "Graph"
    ],
    "input_format": "A 2D grid represented as a list of lists, where each element is either '1' or '0'.",
    "output_format": "An integer representing the number of islands in the grid.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [[1,1,0,0,0],[1,1,0,0,1],[0,0,0,1,1],[0,0,0,0,0]]",
        "output": "3",
        "explanation": "There are three islands: one at the top left, another at the top right, and one at the bottom right."
      },
      {
        "input": "grid = [[1,1,1],[0,0,0],[1,1,1]]",
        "output": "2",
        "explanation": "The grid contains two distinct islands."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use depth-first search or breadth-first search to explore each island.",
      "Be careful to mark visited nodes to avoid double counting.",
      "Consider edge cases like an empty grid or a grid with no land."
    ],
    "company": "Urban Company"
  },
  {
    "question_id": "",
    "title": "Search in Rotated Sorted Array",
    "description": "Given a rotated sorted array of distinct integers, search for a target value and return its index. If the target is not found in the array, return -1. You must write an algorithm with O(log n) runtime complexity.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Searching"
    ],
    "input_format": "An integer array nums representing the rotated sorted array, and an integer target representing the value to search for.",
    "output_format": "An integer representing the index of the target in the array or -1 if not found.",
    "constraints": [
      "1 <= nums.length <= 5000",
      "-10^4 <= nums[i] <= 10^4",
      "All integers in nums are distinct.",
      "nums is rotated at an unknown pivot."
    ],
    "examples": [
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 0",
        "output": "4",
        "explanation": "0 is located at index 4 in the array."
      },
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 3",
        "output": "-1",
        "explanation": "3 is not present in the array."
      },
      {
        "input": "nums = [1], target = 0",
        "output": "-1",
        "explanation": "0 is not present in the array."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search.",
      "Keep track of search bounds and the pivot point.",
      "Determine which side of the array is sorted."
    ],
    "company": "Urban Company"
  },
  {
    "question_id": "",
    "title": "Candy Distribution",
    "description": "You are given `n` children and an array `ratings` of length `n`, where `ratings[i]` represents the rating of the `i`-th child. You need to distribute candies to the children such that: each child must have at least one candy, children with a higher rating get more candies than their neighbors. Return the minimum number of candies you must distribute.",
    "topic": "Greedy",
    "subtopic": "Distribution",
    "tags": [
      "Greedy",
      "Array",
      "Dynamic Programming"
    ],
    "input_format": "An integer `n`, followed by an array of integers `ratings` of length `n`.",
    "output_format": "An integer representing the minimum number of candies required.",
    "constraints": [
      "1 <= n <= 2 * 10^4",
      "0 <= ratings[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "ratings = [1, 0, 2]",
        "output": "5",
        "explanation": "We can distribute candies as follows: [2, 1, 2]. The minimum candies required is 5."
      },
      {
        "input": "ratings = [1, 2, 2]",
        "output": "4",
        "explanation": "We can distribute candies as follows: [1, 2, 1]. The minimum candies required is 4."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the distribution from left to right and then from right to left.",
      "Use an array to keep track of the candies distributed based on the ratings."
    ],
    "company": "Urban Company"
  }
]