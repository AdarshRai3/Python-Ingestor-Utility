[
  {
    "question_id": "",
    "title": "Minimum Bit Flips to Convert Number",
    "description": "Given two integers, start and goal, calculate the minimum number of bit flips required to convert start to goal. A bit flip changes a bit from 0 to 1 or from 1 to 0.",
    "topic": "Bit Manipulation",
    "subtopic": "Bitwise Operators",
    "tags": [
      "Bit Manipulation",
      "Integers",
      "Binary"
    ],
    "input_format": "Two integers, start and goal.",
    "output_format": "An integer representing the minimum number of bit flips required.",
    "constraints": [
      "0 <= start, goal <= 10^9"
    ],
    "examples": [
      {
        "input": "start = 10, goal = 7",
        "output": "3",
        "explanation": "The binary representation of 10 is 1010 and for 7 it is 0111. The bits differ at positions 0, 1, and 3, requiring 3 flips."
      },
      {
        "input": "start = 3, goal = 4",
        "output": "3",
        "explanation": "The binary representation of 3 is 011 and for 4 it is 100. The bits differ at positions 0, 1, and 2, requiring 3 flips."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use XOR to find differing bits between the two numbers."
    ],
    "company": "Persistent_system"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Hashing",
    "tags": [
      "Strings",
      "HashMap",
      "Anagrams"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A list of lists of strings, where each inner list contains strings that are anagrams of each other.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "0 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "explanation": "The anagrams are grouped together. 'bat' has no anagrams, 'nat' and 'tan' are anagrams, and 'eat', 'ate', and 'tea' are also anagrams."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "There is only one string which is an empty string."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "There is only one string 'a' which has no anagrams."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to categorize strings by their sorted character sequence.",
      "Consider the use of string sorting or counting character frequency."
    ],
    "company": "Persistent_system"
  },
  {
    "question_id": "",
    "title": "Palindrome Number",
    "description": "Given an integer x, determine whether it is a palindrome. An integer is a palindrome when it reads the same backward as forward. For example, 121 is a palindrome while 123 is not.",
    "topic": "Math",
    "subtopic": "String Manipulation",
    "tags": [
      "Math",
      "Palindrome",
      "String"
    ],
    "input_format": "An integer x.",
    "output_format": "Return true if x is a palindrome, otherwise return false.",
    "constraints": [
      "-2^31 <= x <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "x = 121",
        "output": "true",
        "explanation": "121 reads the same backward as forward."
      },
      {
        "input": "x = -121",
        "output": "false",
        "explanation": "-121 reads backward as 121-. The negative sign makes it not a palindrome."
      },
      {
        "input": "x = 10",
        "output": "false",
        "explanation": "10 reads backward as 01 which is not equal to 10."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider converting the number to a string to check for the palindrome property."
    ],
    "company": "Persistent_system"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Every opening bracket must have a corresponding closing bracket of the same type.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s consisting of brackets.",
    "output_format": "A boolean value indicating whether the string is valid (true) or not (false).",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The string contains one pair of parentheses, which is properly closed."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "The string contains multiple pairs of brackets, all properly closed."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The opening bracket '(' is not matched with a corresponding closing bracket of the same type."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The brackets are not closed in the correct order."
      },
      {
        "input": "s = '{[]}'",
        "output": "true",
        "explanation": "The string contains a valid combination of different types of brackets."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to track opening brackets.",
      "Check for matching pairs while traversing the string."
    ],
    "company": "Persistent_system"
  },
  {
    "question_id": "",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, return true if t is an anagram of s and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Character Counting",
    "tags": [
      "String",
      "Anagram",
      "Hash Table"
    ],
    "input_format": "Two strings s and t, where 1 <= s.length, t.length <= 5 * 10^4.",
    "output_format": "A boolean indicating whether t is an anagram of s.",
    "constraints": [
      "1 <= s.length, t.length <= 5 * 10^4",
      "s and t consist of lowercase English letters only."
    ],
    "examples": [
      {
        "input": "s = \"anagram\", t = \"nagaram\"",
        "output": "true",
        "explanation": "The string 'nagaram' is an anagram of 'anagram'."
      },
      {
        "input": "s = \"rat\", t = \"car\"",
        "output": "false",
        "explanation": "The string 'car' is not an anagram of 'rat'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the frequency of each character in both strings.",
      "Use a hash table to store the character counts."
    ],
    "company": "Persistent_system"
  },
  {
    "question_id": "",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. A subarray is a contiguous part of an array.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Sliding Window"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum sum of the contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The contiguous subarray [4,-1,2,1] has the largest sum of 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The maximum subarray is the single element [1], which has a sum of 1."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The contiguous subarray [5,4,-1,7,8] has the largest sum of 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dynamic programming approach.",
      "Keep track of the current sum and a maximum sum seen so far.",
      "Check if the current sum becomes negative, and reset it."
    ],
    "company": "Persistent_system"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "target is an integer."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "The numbers at indices 0 and 1 are 2 and 7, which add up to the target 9."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "The numbers at indices 1 and 2 are 2 and 4, which add up to the target 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash table to track the numbers you've seen and their indices.",
      "Consider the difference between the target and the current number."
    ],
    "company": "Persistent_system"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within the string. Note that the same character can appear multiple times in the string, but you need to ensure that only unique characters are counted in the substring.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A single string s consisting of English letters, digits, symbols, and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 5 * 10^4",
      "s consists of English letters, digits, symbols, and spaces."
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"abc\", which has a length of 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The longest substring without repeating characters is \"b\", with a length of 1."
      },
      {
        "input": "s = \"pwwkew\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"wke\", which has a length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window technique to keep track of the current substring.",
      "Utilize a HashMap to store the last position of each character."
    ],
    "company": "Persistent_system"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest substring of s that is a palindrome. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A string s with lowercase and uppercase English letters.",
    "output_format": "A string representing the longest palindromic substring in s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consist only of lowercase and uppercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"babad\"",
        "output": "\"bab\"",
        "explanation": "Both \"bab\" and \"aba\" are valid longest palindromic substrings."
      },
      {
        "input": "s = \"cbbd\"",
        "output": "\"bb\"",
        "explanation": "\"bb\" is the longest palindromic substring."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around potential centers of the palindrome.",
      "Check both odd-length and even-length palindromes."
    ],
    "company": "Persistent_system"
  },
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n representing the number of elements in nums1 and nums2 respectively. Merge nums1 and nums2 into a single array sorted in non-decreasing order. The merge should be done in place, meaning that you should not use any extra space for another array. Finally, the merged array should be stored in nums1.",
    "topic": "Array",
    "subtopic": "Merging Arrays",
    "tags": [
      "Array",
      "Two Pointers",
      "Merging"
    ],
    "input_format": "Two integer arrays nums1 and nums2, with integers m and n.",
    "output_format": "The merged array stored in nums1.",
    "constraints": [
      "0 <= m, n <= 200",
      "1 <= m + n <= 200",
      "-10^9 <= nums1[i], nums2[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
        "output": "[1,2,2,3,5,6]",
        "explanation": "The numbers from nums2 are merged into nums1 to get a sorted array."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "Since nums2 is empty, nums1 remains unchanged."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider merging from the end of nums1 array."
    ],
    "company": "Persistent_system"
  }
]