[
  {
    "question_id": "",
    "title": "Maximize Greatness of an Array",
    "description": "You are given an integer array, nums. Your task is to maximize the greatness of the array. Greatness is defined as the maximum number of elements you can replace in the array such that every element at index i is greater than the element at index i-1 after sorting the array. Return the maximum greatness you can achieve.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Greedy"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum greatness achievable.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, 2, 5, 4]",
        "output": "4",
        "explanation": "We can sort the array to get [1, 2, 3, 4, 5]. The maximum number of elements we can replace to achieve greatness (where each element is greater than the previous) is 4."
      },
      {
        "input": "nums = [1, 2, 3]",
        "output": "3",
        "explanation": "The array is already sorted in increasing order. The maximum greatness is all 3 elements."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the array first.",
      "A greedy approach might help to maximize the replacements."
    ],
    "company": "Twilio"
  },
  {
    "question_id": "",
    "title": "Univalued Binary Tree",
    "description": "A binary tree is univalued if every node in the tree has the same value. Given the root of a binary tree, determine if it is a univalued tree.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Depth-First Search"
    ],
    "input_format": "The input consists of the root of a binary tree.",
    "output_format": "Return true if the binary tree is univalued, otherwise return false.",
    "constraints": [
      "The number of nodes in the tree is in the range [1, 100]",
      "0 <= Node.val <= 100"
    ],
    "examples": [
      {
        "input": "root = [1, 1, 1, 1, 1, null, 1]",
        "output": "true",
        "explanation": "All nodes in the tree have the value 1, so it is univalued."
      },
      {
        "input": "root = [2, 2, 2, 5, 2]",
        "output": "false",
        "explanation": "The left subtree has a node with value 5, which is different from 2."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a depth-first search to traverse the tree.",
      "Check if all node values are equal to the value of the root."
    ],
    "company": "Twilio"
  },
  {
    "question_id": "",
    "title": "Reformat Date",
    "description": "Given a date in the format 'DD Month YYYY', where 'Month' is the full name of the month (e.g., 'January', 'February'), you need to convert it into the format 'YYYY-MM-DD'.",
    "topic": "String Manipulation",
    "subtopic": "Date Formatting",
    "tags": [
      "String",
      "Date",
      "Formatting"
    ],
    "input_format": "A string representing the date in the format 'DD Month YYYY'.",
    "output_format": "A string representing the date in the format 'YYYY-MM-DD'.",
    "constraints": [
      "The input date will always be valid.",
      "The month will be one of the following: January, February, March, April, May, June, July, August, September, October, November, December."
    ],
    "examples": [
      {
        "input": "date = '20th October 2052'",
        "output": "2052-10-20",
        "explanation": "The input date corresponds to October 20th, 2052. In the format 'YYYY-MM-DD', this translates to '2052-10-20'."
      },
      {
        "input": "date = '1st January 2000'",
        "output": "2000-01-01",
        "explanation": "The input date corresponds to January 1st, 2000. In the format 'YYYY-MM-DD', this translates to '2000-01-01'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a mapping for month names to their corresponding numbers.",
      "Use string manipulation methods to extract day and year."
    ],
    "company": "Twilio"
  },
  {
    "question_id": "",
    "title": "Letter Combinations of a Phone Number",
    "description": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. A mapping of digit to letters is as follows: 2 -> ['a', 'b', 'c'], 3 -> ['d', 'e', 'f'], 4 -> ['g', 'h', 'i'], 5 -> ['j', 'k', 'l'], 6 -> ['m', 'n', 'o'], 7 -> ['p', 'q', 'r', 's'], 8 -> ['t', 'u', 'v'], 9 -> ['w', 'x', 'y', 'z']. The solutions can be returned in any order.",
    "topic": "Backtracking",
    "subtopic": "String Manipulation",
    "tags": [
      "Backtracking",
      "Strings",
      "Combinations"
    ],
    "input_format": "A string digits consisting of digits from 2 to 9.",
    "output_format": "A list of all possible letter combinations that the number could represent.",
    "constraints": [
      "0 <= digits.length <= 4",
      "digits[i] is a digit from '2' to '9'."
    ],
    "examples": [
      {
        "input": "digits = '23'",
        "output": "['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']",
        "explanation": "The digit '2' maps to ['a', 'b', 'c'] and '3' maps to ['d', 'e', 'f']. So the combinations are formed by taking each letter from '2' and pairing it with each letter from '3'."
      },
      {
        "input": "digits = ''",
        "output": "[]",
        "explanation": "An empty input means there are no digits, thus no letter combinations."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a backtracking approach.",
      "Build combinations incrementally."
    ],
    "company": "Twilio"
  },
  {
    "question_id": "",
    "title": "Text Justification",
    "description": "Given an array of words and a length maxWidth, format the text such that each line has exactly maxWidth characters and is fully justified. You should pack your words in a greedy approach; that is, add as many words as you can in the current line while not exceeding maxWidth. The last line should be left-justified. Extra spaces on the right side are not allowed. Each line must contain at least one word. You can assume that there are no empty words. The input consists of two parts: the list of words and the maxWidth constraint. For a line with more than one word, all words must be evenly distributed, and if there are extra spaces, they should be distributed from left to right.",
    "topic": "String",
    "subtopic": "Text Justification",
    "tags": [
      "String",
      "Greedy",
      "Justification"
    ],
    "input_format": "An array of strings words and an integer maxWidth.",
    "output_format": "An array of strings representing the fully justified text.",
    "constraints": [
      "1 <= words.length <= 3000",
      "1 <= words[i].length <= 20",
      "1 <= maxWidth <= 100"
    ],
    "examples": [
      {
        "input": "words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16",
        "output": "[\"This    is    an\", \"example  of text\", \"justification.  \"]",
        "explanation": "Each line is justified to maxWidth of 16 characters. Words are evenly distributed."
      },
      {
        "input": "words = [\"What\", \"must\", \"be\", \"acknowledgment\", \"shall\", \"be\"], maxWidth = 16",
        "output": "[\"What   must   be\", \"acknowledgment  \", \"shall be        \"]",
        "explanation": "The last line is left-justified."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how to distribute spaces between words.",
      "Handle the last line differently than the others."
    ],
    "company": "Twilio"
  },
  {
    "question_id": "",
    "title": "Top K Frequent Elements",
    "description": "Given a non-empty array of integers, return the k most frequent elements. You may assume that the answer is unique, and k is always valid, 1 \u2264 k \u2264 number of unique elements. Your algorithm should run in O(n log k) time complexity.",
    "topic": "Hash Table",
    "subtopic": "Frequency Counting",
    "tags": [
      "Hash Table",
      "Sorting",
      "Heap"
    ],
    "input_format": "An integer array 'nums' and an integer 'k'.",
    "output_format": "An array of the k most frequent elements.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= number of unique elements in nums"
    ],
    "examples": [
      {
        "input": "nums = [1,1,1,2,2,3], k = 2",
        "output": "[1, 2]",
        "explanation": "The number 1 appears three times, and the number 2 appears two times. Thus, the two most frequent elements are 1 and 2."
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]",
        "explanation": "There is only one element in the array, so the most frequent element is 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to count the frequency of elements.",
      "You can use a min-heap to keep track of the top k elements."
    ],
    "company": "Twilio"
  },
  {
    "question_id": "",
    "title": "First Missing Positive",
    "description": "Given an unsorted integer array nums, return the smallest missing positive integer. You must implement an algorithm that runs in O(n) time and uses O(1) extra space.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Missing Positive"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the smallest missing positive integer.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [3, 4, -1, 1]",
        "output": "2",
        "explanation": "The smallest missing positive integer is 2."
      },
      {
        "input": "nums = [1, 2, 0]",
        "output": "3",
        "explanation": "The smallest missing positive integer is 3."
      },
      {
        "input": "nums = [7, 8, 9, 11, 12]",
        "output": "1",
        "explanation": "The smallest missing positive integer is 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use index mapping to place elements in their correct positions.",
      "Consider using a loop to traverse the array multiple times.",
      "Think about how to handle out-of-bound numbers."
    ],
    "company": "Twilio"
  },
  {
    "question_id": "",
    "title": "Minimum Number of Swaps to Make the String Balanced",
    "description": "Given a string consisting of only '(' and ')' characters, determine the minimum number of swaps required to make the string balanced. A string is balanced if each opening bracket has a corresponding closing bracket in the correct order.",
    "topic": "String",
    "subtopic": "Brackets",
    "tags": [
      "String",
      "Brackets",
      "Greedy"
    ],
    "input_format": "A string s of length n (1 <= n <= 10^5), composed of only '(' and ')'.",
    "output_format": "An integer representing the minimum number of swaps needed to balance the string.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of '(' and ')'"
    ],
    "examples": [
      {
        "input": "(())())",
        "output": "1",
        "explanation": "One swap between the last ')' and the last '(' will balance the string."
      },
      {
        "input": ")))(((",
        "output": "3",
        "explanation": "Three swaps are needed to balance the string: move ')' to the right."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Count the number of misplaced brackets.",
      "Consider the balance of brackets as you traverse the string."
    ],
    "company": "Twilio"
  },
  {
    "question_id": "",
    "title": "Minimum Equal Sum of Two Arrays After Replacing Zeros",
    "description": "You are given two arrays, A and B, both containing non-negative integers. Your task is to replace the zeros in both arrays with positive integers such that the sum of both arrays becomes equal. You need to return the minimum sum that can be achieved under these conditions, or -1 if it is impossible to equal the sums by making the replacements. The replacement can only be done once on each zero. If both arrays already have the same sum, return that sum.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "Two arrays of integers, A and B.",
    "output_format": "An integer representing the minimum equal sum of both arrays, or -1 if not possible.",
    "constraints": [
      "1 <= A.length, B.length <= 1000",
      "0 <= A[i], B[i] <= 1000"
    ],
    "examples": [
      {
        "input": "A = [0, 2, 3], B = [1, 0, 2]",
        "output": "6",
        "explanation": "Replace the first 0 in A with 2 and the second 0 in B with 3. Both sums become 6."
      },
      {
        "input": "A = [1, 0], B = [0, 1]",
        "output": "-1",
        "explanation": "No positive replacement can equal both arrays' sums."
      },
      {
        "input": "A = [1, 2], B = [3, 0]",
        "output": "6",
        "explanation": "Replace the 0 in B with 3 to equal the sums both at 6."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the total after the replacements and how zeros can be substituted.",
      "Check if the array can already have equal sums without replacements."
    ],
    "company": "Twilio"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Sorting",
    "tags": [
      "String",
      "Hashing",
      "Sorting"
    ],
    "input_format": "An array of strings 'strs'.",
    "output_format": "A list of lists, where each sublist contains anagrams grouped together.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "0 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"eat\",\"tea\",\"ate\"],[\"tan\",\"nat\"],[\"bat\"]]",
        "explanation": "The output consists of anagrams grouped together."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "The only string is an empty string which is an anagram of itself."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "The only string is 'a', which doesn't have anagrams."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map to group the strings.",
      "You can use sorted version of each string as the key in the hash map."
    ],
    "company": "Twilio"
  },
  {
    "question_id": "",
    "title": "Reconstruct Itinerary",
    "description": "You are given a list of airline tickets with departure and arrival airports. Each ticket is represented as a pair of strings, where the first string is the departure airport and the second string is the arrival airport. Your task is to reconstruct the itinerary in order. All of the tickets belong to a single itinerary. You must start from the airport 'JFK'. If there are multiple valid itineraries, return any of them. If no valid itinerary exists, return an empty list.",
    "topic": "Graph",
    "subtopic": "Depth-First Search",
    "tags": [
      "Graph",
      "DFS",
      "Backtracking"
    ],
    "input_format": "A list of tickets represented by pairs of strings.",
    "output_format": "A list of strings representing the reconstructed itinerary.",
    "constraints": [
      "1 <= tickets.length <= 1000",
      "All airports in tickets are represented by uppercase English letters.",
      "Each ticket is unique."
    ],
    "examples": [
      {
        "input": "[\"MUC\", \"LHR\"], [\"JFK\", \"MUC\"], [\"SFO\", \"SJC\"], [\"LHR\", \"SFO\"]]",
        "output": "[\"JFK\", \"MUC\", \"LHR\", \"SFO\", \"SJC\"]",
        "explanation": "The itinerary reconstructed from the tickets is JFK -> MUC -> LHR -> SFO -> SJC."
      },
      {
        "input": "[\"JFK\", \"SFO\"], [\"JFK\", \"ATL\"], [\"SFO\", \"ATL\"], [\"ATL\", \"JFK\"]]",
        "output": "[\"JFK\", \"ATL\", \"JFK\", \"SFO\", \"ATL\"]",
        "explanation": "One valid itinerary is JFK -> ATL -> JFK -> SFO -> ATL."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a map to store the tickets.",
      "Perform a depth-first search to find the itinerary.",
      "Remember to backtrack if you reach a dead end."
    ],
    "company": "Twilio"
  },
  {
    "question_id": "",
    "title": "Wildcard Matching",
    "description": "Given a string s and a wildcard pattern p, implement a function to perform wildcard matching with support for '...' and '?'. The wildcard '...' can represent any sequence of characters (including the empty sequence), while '?' can represent any single character. The matching should be case-sensitive.",
    "topic": "Dynamic Programming",
    "subtopic": "String Matching",
    "tags": [
      "Dynamic Programming",
      "String",
      "Matching"
    ],
    "input_format": "A string s representing the text and a string p representing the wildcard pattern.",
    "output_format": "A boolean indicating whether the string s matches the wildcard pattern p.",
    "constraints": [
      "1 <= s.length, p.length <= 100",
      "s consists of only English letters.",
      "p consists of English letters and the characters '.' and '?'"
    ],
    "examples": [
      {
        "input": "s = 'abcd', p = 'a?c*d'",
        "output": "true",
        "explanation": "The '?' can match 'b', and '*' can match 'cd'. Hence, 'abcd' matches the pattern."
      },
      {
        "input": "s = 'aa', p = 'a*'",
        "output": "true",
        "explanation": "'a*' matches 'aa' as '*' can match 'a'."
      },
      {
        "input": "s = 'abc', p = 'a.d'",
        "output": "false",
        "explanation": "The '.' can match 'b', but there is no character to match with 'c'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using dynamic programming to solve the matching problem.",
      "Think about how to handle the cases where wildcards are present in the pattern."
    ],
    "company": "Twilio"
  },
  {
    "question_id": "",
    "title": "Ways to Make a Fair Array",
    "description": "You are given an array of integers representing the values of candies in each box. You can choose any number of boxes and will have to return the number of ways to choose non-empty subset of boxes such that the sum of candies in the chosen boxes is equal to the sum of candies in the remaining boxes. The sum of all the selected boxes and the sum of the remaining boxes must be equal, effectively making a 'fair' division of candies. Return the count of such subsets.",
    "topic": "Array",
    "subtopic": "Subsets",
    "tags": [
      "Array",
      "Subsets",
      "Mathematics"
    ],
    "input_format": "An array of integers nums representing the number of candies in each box.",
    "output_format": "An integer representing the number of ways to choose a fair subset of boxes.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 100"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 2, 2, 2]",
        "output": "3",
        "explanation": "You can choose subsets [1, 1] (sum 2) and leave [2, 2] (sum 4), or [2] (sum 2) and leave [1, 1, 2] (sum 4). The valid subsets are: [1,1], [2], [1,2] which all balance the sums."
      },
      {
        "input": "nums = [1, 2, 3, 4, 5]",
        "output": "2",
        "explanation": "The valid subsets are [1, 4] (sum 5) and [2, 3] (sum 5) which balance with the rest of the elements."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using hashing to track sums.",
      "You may need to consider all subsets.",
      "Evaluate the total sum first."
    ],
    "company": "Twilio"
  }
]