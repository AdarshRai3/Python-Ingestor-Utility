[
  {
    "question_id": "",
    "title": "Maximal Square",
    "description": "Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.",
    "topic": "Dynamic Programming",
    "subtopic": "Matrix",
    "tags": [
      "Dynamic Programming",
      "Matrix",
      "Square"
    ],
    "input_format": "A 2D binary matrix represented as a list of lists of integers, where each element is either 0 or 1.",
    "output_format": "An integer representing the area of the largest square containing only 1's.",
    "constraints": [
      "1 <= matrix.length <= 300",
      "1 <= matrix[i].length <= 300",
      "matrix[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "[['1', '0', '1', '0', '0'], ['1', '0', '1', '1', '1'], ['1', '1', '1', '1', '1'], ['1', '0', '0', '1', '0']]",
        "output": "4",
        "explanation": "The largest square contains the 1's in the bottom right corner, forming a 2x2 square."
      },
      {
        "input": "[['0', '1'], ['1', '1']]",
        "output": "1",
        "explanation": "The largest square contains a single '1', giving an area of 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a DP table to store the maximum square size at each position.",
      "The area of the square can be calculated as side_length * side_length."
    ],
    "company": "Wise"
  },
  {
    "question_id": "",
    "title": "Subarray Product Less Than K",
    "description": "Given an array of positive integers nums and a positive integer k, return the number of continuous subarrays (subarrays of at least length 1) where the product of all the elements in the subarray is less than k.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Product"
    ],
    "input_format": "An array of positive integers nums and a positive integer k.",
    "output_format": "An integer representing the number of continuous subarrays with product less than k.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "1 <= nums[i] < k <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [10, 5, 2, 6], k = 100",
        "output": "8",
        "explanation": "The subarrays are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]."
      },
      {
        "input": "nums = [1, 2, 3], k = 0",
        "output": "0",
        "explanation": "No subarray can have a product less than 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach.",
      "Keep track of the product as you expand the window."
    ],
    "company": "Wise"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "A list of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9, so the answer is [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6, so the answer is [1, 2]."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6, so the answer is [0, 1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a hash table to store indices of elements.",
      "Think about how to find the complement of the current number."
    ],
    "company": "Wise"
  },
  {
    "question_id": "",
    "title": "Max Area of Island",
    "description": "You are given a 2D grid of '1's (land) and '0's (water). An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. The task is to compute the area of the largest island in the grid. Return the max area of an island. If there is no island, return 0.",
    "topic": "Depth-First Search",
    "subtopic": "Grid Traversal",
    "tags": [
      "DFS",
      "Grid",
      "BFS",
      "Matrix"
    ],
    "input_format": "A 2D grid of integers, where 1 represents land and 0 represents water.",
    "output_format": "An integer representing the maximum area of an island.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 50",
      "grid[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "grid = [[0,0,1,0,0],[0,1,1,0,0],[0,0,0,1,1]]",
        "output": "5",
        "explanation": "The island with the maximum area is the connected component of 1's in the center, with an area of 5."
      },
      {
        "input": "grid = [[1,1],[1,1]]",
        "output": "4",
        "explanation": "The entire grid is one big island, hence the area is 4."
      },
      {
        "input": "grid = [[0,0,0],[0,0,0]]",
        "output": "0",
        "explanation": "There are no 1's in the grid, thus the area of the largest island is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "You can perform DFS or BFS to explore the area of an island.",
      "Keep track of the visited nodes to avoid counting them multiple times."
    ],
    "company": "Wise"
  },
  {
    "question_id": "",
    "title": "Roman to Integer",
    "description": "Given a string representing a Roman numeral, convert it to an integer. The Roman numerals are represented using the following symbols: I, V, X, L, C, D, M. For example, the Roman numeral 'III' is equivalent to the integer 3. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not 'IIII'. Instead, the number four is represented as 'IV'. Because the 'I' is before the 'V' it is subtracted making four. Similarly, the number nine is represented as 'IX'. There are six instances where subtraction is used: I can be placed before V (5) and X (10) to make 4 and 9. X can be placed before L (50) and C (100) to make 40 and 90. C can be placed before D (500) and M (1000) to make 400 and 900.",
    "topic": "String",
    "subtopic": "Parsing",
    "tags": [
      "String",
      "Parsing",
      "Mathematics"
    ],
    "input_format": "A string s representing a Roman numeral.",
    "output_format": "An integer representing the equivalent value of the Roman numeral.",
    "constraints": [
      "1 <= s.length <= 15",
      "s consists of the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M')",
      "The input string is a valid Roman numeral."
    ],
    "examples": [
      {
        "input": "s = 'III'",
        "output": "3",
        "explanation": "The Roman numeral 'III' is equivalent to the integer 3."
      },
      {
        "input": "s = 'IV'",
        "output": "4",
        "explanation": "The Roman numeral 'IV' is 5 - 1 = 4."
      },
      {
        "input": "s = 'IX'",
        "output": "9",
        "explanation": "The Roman numeral 'IX' is 10 - 1 = 9."
      },
      {
        "input": "s = 'LVIII'",
        "output": "58",
        "explanation": "L = 50, V = 5, III = 3. So, 50 + 5 + 3 = 58."
      },
      {
        "input": "s = 'MCMXCIV'",
        "output": "1994",
        "explanation": "M = 1000, CM = 900, XC = 90, IV = 4. So, 1000 + 900 + 90 + 4 = 1994."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Think about how to account for the subtraction cases in Roman numerals.",
      "Create a mapping of Roman symbols to their integer values."
    ],
    "company": "Wise"
  }
]