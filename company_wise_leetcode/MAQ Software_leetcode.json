[
  {
    "question_id": "",
    "title": "Unique Substrings in Wraparound String",
    "description": "Given a string p, which consists of lowercase English letters (a-z) and represents a wraparound string, you need to determine the number of unique non-empty substrings that can be formed from the string p. A substring is considered unique if it does not repeat and is formed by consecutive letters in the wraparound nature of the string. For example, if the string is 'abcde', the unique substrings would include 'a', 'ab', 'abc', 'abcd', 'abcde', 'b', 'bc', etc.",
    "topic": "String",
    "subtopic": "Substring",
    "tags": [
      "String",
      "Substring",
      "Dynamic Programming"
    ],
    "input_format": "A string p with lowercase English letters.",
    "output_format": "An integer representing the number of unique non-empty substrings.",
    "constraints": [
      "1 <= p.length <= 10^6",
      "p consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "p = \"abac\"",
        "output": "7",
        "explanation": "The unique substrings are 'a', 'ab', 'aba', 'abac', 'b', 'ba', 'c'."
      },
      {
        "input": "p = \"zab\"",
        "output": "6",
        "explanation": "The unique substrings are 'z', 'za', 'zab', 'a', 'ab', 'b'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how substrings can be formed in a wraparound manner.",
      "Use an efficient way to store and count unique substrings."
    ],
    "company": "MAQ Software"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within a string.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Hashmap"
    ],
    "input_format": "A string s of length n.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 5 * 10^4",
      "s consists of English letters, digits, symbols and spaces."
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The answer is \"abc\", with the length of 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The answer is \"b\", with the length of 1."
      },
      {
        "input": "s = \"pwwkew\"",
        "output": "3",
        "explanation": "The answer is \"wke\", with the length of 3."
      },
      {
        "input": "s = \"\"",
        "output": "0",
        "explanation": "The answer is 0 as there are no characters."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try using a sliding window approach.",
      "Use a set to track characters in the current substring."
    ],
    "company": "MAQ Software"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the height of bars in a histogram, compute how much water can be trapped between the bars after raining.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Water Trapping",
      "Dynamic Programming"
    ],
    "input_format": "An array of non-negative integers representing the height of the histogram bars.",
    "output_format": "An integer representing the total units of trapped rainwater.",
    "constraints": [
      "0 <= heights.length <= 3 * 10^4",
      "0 <= heights[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "heights = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "Water is trapped between the bars at indices 2, 4, 5, 6, 8, 9. Total trapped water is 1 + 0 + 1 + 3 + 2 = 6."
      },
      {
        "input": "heights = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "Water is trapped between the bars at indices 1, 2, 3. Total trapped water is 2 + 3 + 4 = 9."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using two pointers to track the left and right tallest walls.",
      "Calculate water based on the minimum of the tallest walls from both ends."
    ],
    "company": "MAQ Software"
  },
  {
    "question_id": "",
    "title": "Largest Rectangle in Histogram",
    "description": "Given an array of integers representing the height of bars in a histogram, find the area of the largest rectangle that can be formed within the bounds of the histogram. A rectangle is formed by choosing two indices in the array and determining the smallest height among them.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers heights, representing the height of the bars in the histogram.",
    "output_format": "An integer representing the area of the largest rectangle that can be formed.",
    "constraints": [
      "1 <= heights.length <= 10^5",
      "0 <= heights[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "heights = [2, 1, 5, 6, 2, 3]",
        "output": "10",
        "explanation": "The largest rectangle can be formed between the indices 2 and 5 (heights 5 and 6) which gives an area of 5 * 2 = 10."
      },
      {
        "input": "heights = [2, 4]",
        "output": "4",
        "explanation": "The largest rectangle can be formed using the entire array, giving an area of 2 * 2 = 4."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a stack to keep track of the indices of the histogram.",
      "Find the width of the rectangle formed by each bar when it's the shortest."
    ],
    "company": "MAQ Software"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest substring of s that is a palindrome. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return any of them.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A single string s (1 <= s.length <= 1000).",
    "output_format": "A string representing the longest palindromic substring.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only digits and English letters."
    ],
    "examples": [
      {
        "input": "s = \"babad\"",
        "output": "\"bab\"",
        "explanation": "Both \"bab\" and \"aba\" are valid longest palindromic substrings."
      },
      {
        "input": "s = \"cbbd\"",
        "output": "\"bb\"",
        "explanation": "The longest palindromic substring is \"bb\"."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around the center of the palindrome.",
      "A palindrome can be expanded from its center."
    ],
    "company": "MAQ Software"
  }
]