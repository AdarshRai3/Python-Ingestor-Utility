[
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest substring of s that is a palindrome. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return any of them.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Palindrome",
      "Dynamic Programming"
    ],
    "input_format": "A single string s where 1 <= s.length <= 1000.",
    "output_format": "A string representing the longest palindromic substring in s.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only printable ASCII characters."
    ],
    "examples": [
      {
        "input": "babad",
        "output": "bab",
        "explanation": "The longest palindromic substring is 'bab' or 'aba'."
      },
      {
        "input": "cbbd",
        "output": "bb",
        "explanation": "The longest palindromic substring is 'bb'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around the center of potential palindromic substrings.",
      "Check both even and odd length palindromes."
    ],
    "company": "RBC"
  },
  {
    "question_id": "",
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy"
    ],
    "input_format": "An integer array height representing the height of each vertical line.",
    "output_format": "An integer representing the maximum area of water that can be contained.",
    "constraints": [
      "2 <= height.length <= 10^5",
      "0 <= height[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "height = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The maximum area is between height[1] and height[8], which is 7 units wide and 7 units tall."
      },
      {
        "input": "height = [1,1]",
        "output": "1",
        "explanation": "The maximum area is between the two height[0] and height[1], which is 1 unit wide and 1 unit tall."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use two pointers to iterate over the height array.",
      "To maximize the area, always move the pointer pointing to the shorter line."
    ],
    "company": "RBC"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array where each element represents the price of a stock on a given day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Write a function to determine the maximum profit you can achieve. If you cannot achieve any profit, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithms",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of integers prices representing the stock prices on each day.",
    "output_format": "An integer representing the maximum profit that can be achieved.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 1 (price = 1) and sell on day 4 (price = 6). Profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price you have seen so far.",
      "The maximum profit can be calculated at each step."
    ],
    "company": "RBC"
  },
  {
    "question_id": "",
    "title": "Valid Palindrome",
    "description": "Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases. A string is considered a palindrome if it reads the same forwards and backwards.",
    "topic": "String",
    "subtopic": "Two Pointers",
    "tags": [
      "String",
      "Palindrome",
      "Two Pointers"
    ],
    "input_format": "A single string s.",
    "output_format": "Boolean value true if s is a palindrome, false otherwise.",
    "constraints": [
      "1 <= s.length <= 2 * 10^5",
      "s consists of printable ASCII characters."
    ],
    "examples": [
      {
        "input": "s = \"A man, a plan, a canal: Panama\"",
        "output": "true",
        "explanation": "When considering only alphanumeric characters, the string becomes 'amanaplanacanalpanama', which is a palindrome."
      },
      {
        "input": "s = \"race a car\"",
        "output": "false",
        "explanation": "After filtering, the string becomes 'raceacar', which is not a palindrome."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to compare characters from the start and end.",
      "Ignore non-alphanumeric characters and case differences."
    ],
    "company": "RBC"
  },
  {
    "question_id": "",
    "title": "Spiral Matrix",
    "description": "Given an m x n matrix, return all elements of the matrix in spiral order. The elements should be retrieved starting from the top left corner, moving right across the top row, then down the last column, then left across the bottom row, and finally up the first column. This process is repeated for the inner layers until all elements are included in the resulting list.",
    "topic": "Matrix",
    "subtopic": "Traversal",
    "tags": [
      "Matrix",
      "Traversal",
      "Spiral"
    ],
    "input_format": "A 2D array of integers matrix where 1 <= m, n <= 100.",
    "output_format": "A list of integers representing the elements in spiral order.",
    "constraints": [
      "1 <= m, n <= 100",
      "-10^5 <= matrix[i][j] <= 10^5"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "[1, 2, 3, 6, 9, 8, 7, 4, 5]",
        "explanation": "The traversal starts at 1, goes right to 3, then down to 6, then right to 9, up to 8, left to 7, down to 4, and finishes left to 5."
      },
      {
        "input": "matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]",
        "output": "[1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]",
        "explanation": "The traversal begins at 1, goes right to 4, then down to 8, then right to 12, up to 11, left to 10, and continues until all elements are collected."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about the direction of traversal and how to manage boundaries.",
      "Use pointers to track the limits of how far you can go in each direction.",
      "Consider the termination condition for the while loop."
    ],
    "company": "RBC"
  }
]