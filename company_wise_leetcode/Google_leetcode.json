[
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers, nums, and an integer target, return the indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Sum"
    ],
    "input_format": "An integer array nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "You may assume that each input would have exactly one solution."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the numbers and their indices.",
      "Check if the complement (target - current number) exists in the hash map."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Add Two Numbers",
    "description": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return it as a linked list.",
    "topic": "Linked List",
    "subtopic": "Mathematical Operations",
    "tags": [
      "Linked List",
      "Math",
      "Recursion"
    ],
    "input_format": "Two linked lists representing the two non-negative integers.",
    "output_format": "A linked list representing the sum of the two numbers.",
    "constraints": [
      "The number of nodes in each linked list is in the range [1, 100].",
      "0 <= Node.val <= 9",
      "It is guaranteed that the result does not have leading zeros."
    ],
    "examples": [
      {
        "input": "l1 = [2, 4, 3], l2 = [5, 6, 4]",
        "output": "[7, 0, 8]",
        "explanation": "342 + 465 = 807, which results in the linked list [7, 0, 8]."
      },
      {
        "input": "l1 = [0], l2 = [0]",
        "output": "[0]",
        "explanation": "0 + 0 = 0, which results in the linked list [0]."
      },
      {
        "input": "l1 = [9, 9, 9, 9, 9, 9, 9], l2 = [9, 9, 9, 9]",
        "output": "[8, 9, 9, 9, 0, 0, 1]",
        "explanation": "9999999 + 9999 = 10009998, which results in the linked list [8, 9, 9, 9, 0, 0, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how you would add the numbers manually, accounting for carried values."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the height of bars in a histogram, compute how much water can be trapped after raining. Your task is to determine the total amount of water that can be trapped between the bars.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "input_format": "An array of non-negative integers representing the heights of the bars.",
    "output_format": "An integer representing the total amount of water that can be trapped.",
    "constraints": [
      "n == height.length",
      "0 <= n <= 30000",
      "0 <= height[i] <= 50000"
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The water trapped between the bars forms 6 units of water."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The water trapped between the bars forms 9 units of water."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using two pointers to track the left and right boundaries.",
      "Calculate the trapped water based on the minimum height of the boundaries."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Median of Two Sorted Arrays",
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Median"
    ],
    "input_format": "Two sorted arrays nums1 and nums2.",
    "output_format": "A float representing the median of the two sorted arrays.",
    "constraints": [
      "0 <= m <= 1000",
      "0 <= n <= 1000",
      "1 <= m + n <= 2000",
      "The arrays are sorted in non-decreasing order."
    ],
    "examples": [
      {
        "input": "nums1 = [1, 3], nums2 = [2]",
        "output": "2.0",
        "explanation": "The merged array is [1, 2, 3], and the median is 2.0."
      },
      {
        "input": "nums1 = [1, 2], nums2 = [3, 4]",
        "output": "2.5",
        "explanation": "The merged array is [1, 2, 3, 4], and the median is (2 + 3) / 2 = 2.5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider binary searching on the smaller array.",
      "The median is the average of the middle two elements for even total length.",
      "Use partitioning logic to find the correct cut points."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters in the string.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Hash Map"
    ],
    "input_format": "A string s consisting of English letters, digits, symbols and spaces.",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 5 * 10^4",
      "s consists of English letters, digits, symbols, and spaces."
    ],
    "examples": [
      {
        "input": "s = \"abcabcbb\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"abc\", which has a length of 3."
      },
      {
        "input": "s = \"bbbbb\"",
        "output": "1",
        "explanation": "The longest substring without repeating characters is \"b\", with a length of 1."
      },
      {
        "input": "s = \"pwwkew\"",
        "output": "3",
        "explanation": "The longest substring without repeating characters is \"wke\", with a length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window technique to expand and contract your substring.",
      "Keep track of the characters you've seen so far with a hash map."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Longest Common Prefix",
    "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string ''.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Prefix",
      "Array"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A string representing the longest common prefix.",
    "constraints": [
      "0 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "All strings in strs consist of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"flower\", \"flow\", \"flight\"]",
        "output": "\"fl\"",
        "explanation": "The longest common prefix is \"fl\"."
      },
      {
        "input": "strs = [\"dog\", \"racecar\", \"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the strings."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Think about how to compare the strings character by character.",
      "You can start with the first string and compare with others."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string s consisting of just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Every opening bracket must have a corresponding closing bracket of the same type.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Valid Parentheses"
    ],
    "input_format": "A string s consisting of characters '(', ')', '{', '}', '[' and ']'",
    "output_format": "A boolean value indicating whether the input string is valid.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The opening and closing parentheses match."
      },
      {
        "input": "s = '(]')",
        "output": "false",
        "explanation": "The opening parenthesis does not match the closing bracket."
      },
      {
        "input": "s = '([{}])'",
        "output": "true",
        "explanation": "All the brackets are closed in the correct order."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Check if the corresponding closing bracket matches the top of the stack."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Longest Consecutive Sequence",
    "description": "Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your algorithm should run in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Consecutive Sequence"
    ],
    "input_format": "An unsorted array of integers nums.",
    "output_format": "An integer representing the length of the longest consecutive elements sequence.",
    "constraints": [
      "0 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [100, 4, 200, 1, 3, 2]",
        "output": "4",
        "explanation": "The longest consecutive sequence is [1, 2, 3, 4], which has a length of 4."
      },
      {
        "input": "nums = [0, 0, 1, 1, 2, 2, 3, 4]",
        "output": "5",
        "explanation": "The longest consecutive sequence is [0, 1, 2, 3, 4], which has a length of 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a set to store elements for O(1) access.",
      "Iterate through the numbers and count consecutive numbers.",
      "Consider using sorting or a hash set for tracking sequences."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum. A subarray is a contiguous part of an array.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Kadane's Algorithm"
    ],
    "input_format": "An integer array nums.",
    "output_format": "An integer representing the maximum sum of the contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The contiguous subarray [4,-1,2,1] has the largest sum = 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The maximum subarray is [1], with a sum of 1."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The maximum subarray is [5,4,-1,7,8], with a sum of 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to keep track of the maximum sum you can achieve at each index.",
      "If the current sum becomes negative, set it to zero."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Search in Rotated Sorted Array",
    "description": "You are given an integer array 'nums' that is sorted in ascending order, but is rotated at an unknown pivot. You are also given an integer 'target'. Your task is to return the index of 'target' in 'nums' if it exists, or -1 if it does not exist. You must write an algorithm with O(log n) time complexity.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Search"
    ],
    "input_format": "An integer array nums and an integer target.",
    "output_format": "The index of target in nums or -1 if target is not found.",
    "constraints": [
      "1 <= nums.length <= 5000",
      "-10^4 <= nums[i] <= 10^4",
      "nums is guaranteed to be rotated at some pivot."
    ],
    "examples": [
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 0",
        "output": "4",
        "explanation": "The target 0 is found at index 4."
      },
      {
        "input": "nums = [4,5,6,7,0,1,2], target = 3",
        "output": "-1",
        "explanation": "The target 3 is not in the array."
      },
      {
        "input": "nums = [1], target = 0",
        "output": "-1",
        "explanation": "The target 0 is not found."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search.",
      "Identify the sorted and unsorted halves of the array.",
      "Adjust your search range based on the value of the pivot."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Rotate Image",
    "description": "You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). You have to rotate the image in place, which means you have to modify the input 2D matrix directly. Do not return a new matrix. The rotation should be done in a way that the elements need to be shifted directly without using any extra space.",
    "topic": "Matrix",
    "subtopic": "In-place Rotation",
    "tags": [
      "Matrix",
      "In-place",
      "Rotation"
    ],
    "input_format": "An n x n 2D array of integers.",
    "output_format": "Modifies the input 2D array to represent the rotated image.",
    "constraints": [
      "1 <= n <= 20",
      "-1000 <= matrix[i][j] <= 1000"
    ],
    "examples": [
      {
        "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "[[7, 4, 1], [8, 5, 2], [9, 6, 3]]",
        "explanation": "Rotating the image in place results in changing the layout to [[7, 4, 1], [8, 5, 2], [9, 6, 3]]."
      },
      {
        "input": "[[ 5, 1, 9, 11], [ 2, 4, 8, 10], [13, 3, 6,  7], [15,14,12, 16]]",
        "output": "[[15, 13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 10, 7, 11]]",
        "explanation": "Each element is shifted around the center of the matrix for a 90-degree clockwise rotation."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider rotating the layers of the matrix one by one.",
      "You can use a layering approach to access different parts of the matrix.",
      "For every element in a layer, swap it with its corresponding element in the rotated position."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "4Sum",
    "description": "Given an array nums of n integers and an integer target, return all unique quadruplets (a,b,c,d) such that a + b + c + d = target. You may return the answer in any order. A quadruplet (a,b,c,d) is unique if there is no other quadruplet (e,f,g,h) such that a = e, b = f, c = g, and d = h.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers",
      "Backtracking"
    ],
    "input_format": "An integer array nums and an integer target.",
    "output_format": "A list of unique quadruplets that sum up to target.",
    "constraints": [
      "0 <= n <= 200",
      "-10^9 <= nums[i] <= 10^9",
      "The solution set must not contain duplicate quadruplets."
    ],
    "examples": [
      {
        "input": "nums = [1, 0, -1, 0, -2, 2], target = 0",
        "output": "[[-2,-1,0,1],[-2,0,0,2],[-1,0,0,1]]",
        "explanation": "The quadruplets that sum up to 0 are [-2,-1,0,1], [-2,0,0,2], and [-1,0,0,1]."
      },
      {
        "input": "nums = [2,2,2,2,2], target = 8",
        "output": "[[2,2,2,2]]",
        "explanation": "Only one unique quadruplet [2,2,2,2] sums up to 8."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using sorting to simplify the problem.",
      "Use a set to collect unique quadruplets."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list, and return the reversed list's head.",
    "topic": "Linked List",
    "subtopic": "Reversal",
    "tags": [
      "Linked List",
      "Reversal",
      "Pointer Manipulation"
    ],
    "input_format": "The head of a singly linked list, where each node has a value and a pointer to the next node.",
    "output_format": "The head of the reversed singly linked list.",
    "constraints": [
      "The number of nodes in the list is in the range [0, 5000].",
      "-5000 <= Node.val <= 5000"
    ],
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5]",
        "output": "[5, 4, 3, 2, 1]",
        "explanation": "The reversed linked list will have nodes with values 5 -> 4 -> 3 -> 2 -> 1."
      },
      {
        "input": "head = []",
        "output": "[]",
        "explanation": "An empty list will remain empty when reversed."
      },
      {
        "input": "head = [1]",
        "output": "[1]",
        "explanation": "A single node list will remain the same when reversed."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using three pointers: previous, current, and next.",
      "At each step, reverse the current node's pointer."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Find Median from Data Stream",
    "description": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no distinct middle value and the median is defined as the average of the two middle values. Given a stream of integers, your task is to implement a data structure that supports the following operations: 1. `addNum(int num)`: Add a new number to the stream. 2. `findMedian()`: Return the median of all elements so far. The median should be computed and returned as a double.",
    "topic": "Heap",
    "subtopic": "Data Stream",
    "tags": [
      "Heap",
      "Data Stream",
      "Median"
    ],
    "input_format": "A sequence of integers to be added to the stream.",
    "output_format": "A double representing the median of the numbers added to the stream so far.",
    "constraints": [
      "-10^5 <= num <= 10^5",
      "Each call to addNum is guaranteed to be followed by a call to findMedian."
    ],
    "examples": [
      {
        "input": "addNum(1); addNum(2); findMedian();",
        "output": "1.5",
        "explanation": "The numbers added are 1 and 2. The median is (1 + 2) / 2 = 1.5."
      },
      {
        "input": "addNum(3); findMedian();",
        "output": "2",
        "explanation": "The numbers added are 1, 2, and 3. The median is 2."
      },
      {
        "input": "addNum(4); findMedian();",
        "output": "2.5",
        "explanation": "The numbers added are 1, 2, 3, and 4. The median is (2 + 3) / 2 = 2.5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using two heaps to maintain the lower and upper halves of the numbers.",
      "The median can be found easily if you keep track of the number of elements in each heap."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Hashing",
    "tags": [
      "String",
      "Hashing",
      "Anagrams"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A list of lists, where each sublist contains strings that are anagrams of each other.",
    "constraints": [
      "1 <= strs.length <= 1000",
      "0 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "explanation": "The anagrams are grouped together, with 'bat' standing alone."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "Only one empty string is present."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "Only one single-character string is present."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hashmap to group the words by their sorted characters.",
      "Consider the characteristics of anagrams when sorting."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Jump Game",
    "description": "You are given an integer array nums. You are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers nums, where 1 <= nums.length <= 10^4 and 0 <= nums[i] <= 10^5.",
    "output_format": "A boolean value indicating if you can reach the last index.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "[2, 3, 1, 1, 4]",
        "output": "true",
        "explanation": "Jump 1 step from index 0 to 1, then 2 steps to the last index."
      },
      {
        "input": "[3, 2, 1, 0, 4]",
        "output": "false",
        "explanation": "You will always end up stuck at index 3, which cannot reach the last index."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to keep track of the farthest index you can reach.",
      "If at any point the current index exceeds the farthest reachable index, you cannot reach the end."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Single Number",
    "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one. You must implement a solution with O(n) time complexity and O(1) space complexity.",
    "topic": "Array",
    "subtopic": "Bit Manipulation",
    "tags": [
      "Array",
      "Bit Manipulation",
      "Unique Elements"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the single number that appears once.",
    "constraints": [
      "1 <= nums.length <= 3 * 10^4",
      "-3 * 10^4 <= nums[i] <= 3 * 10^4",
      "Each element in the array appears twice except for one element which appears only once."
    ],
    "examples": [
      {
        "input": "nums = [2, 2, 1]",
        "output": "1",
        "explanation": "The number 1 appears only once, while 2 appears twice."
      },
      {
        "input": "nums = [4, 1, 2, 1, 2]",
        "output": "4",
        "explanation": "The number 4 appears only once, while 1 and 2 appear twice."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use bit manipulation, specifically the XOR operation.",
      "XOR of a number with itself is 0; XOR with 0 gives the number itself."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Maximal Rectangle",
    "description": "Given a 2D binary matrix filled with 0's and 1's, find the area of the largest rectangle containing only 1's and return its area.",
    "topic": "Dynamic Programming",
    "subtopic": "Matrix",
    "tags": [
      "Dynamic Programming",
      "Matrix",
      "Rectangle"
    ],
    "input_format": "A 2D binary matrix represented as a list of lists.",
    "output_format": "An integer representing the area of the largest rectangle containing only 1's.",
    "constraints": [
      "1 <= matrix.length <= 200",
      "1 <= matrix[i].length <= 200",
      "matrix[i][j] is either '0' or '1'."
    ],
    "examples": [
      {
        "input": "[['1', '0', '1', '0', '0'], ['1', '0', '1', '1', '1'], ['1', '1', '1', '1', '1'], ['1', '0', '0', '1', '0']]",
        "output": "6",
        "explanation": "The maximal rectangle has an area of 6 and is formed by 1's in the last two rows."
      },
      {
        "input": "[['0', '0', '0'], ['0', '0', '0']]",
        "output": "0",
        "explanation": "There are no 1's in the matrix, so the area is 0."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a histogram approach to calculate the maximal rectangle for each row.",
      "Keep track of heights and use a stack to find the maximal area."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Find the Index of the First Occurrence in a String",
    "description": "Given two strings, needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.",
    "topic": "String",
    "subtopic": "String Search",
    "tags": [
      "String",
      "Search",
      "Index"
    ],
    "input_format": "Two strings, haystack (the main string) and needle (the substring to search for).",
    "output_format": "An integer representing the index of the first occurrence of needle in haystack, or -1 if needle is not found.",
    "constraints": [
      "0 <= haystack.length <= 10^4",
      "0 <= needle.length <= 10^4"
    ],
    "examples": [
      {
        "input": "haystack = 'sadbutsad', needle = 'sad'",
        "output": "0",
        "explanation": "The substring 'sad' occurs at index 0."
      },
      {
        "input": "haystack = 'leetcode', needle = 'leeto'",
        "output": "-1",
        "explanation": "The substring 'leeto' does not occur in 'leetcode'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to use the built-in string methods for searching.",
      "Consider edge cases where needle is an empty string."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Pascal's Triangle",
    "description": "Given an integer numRows, return the first numRows of Pascal's Triangle. In Pascal's Triangle, each row is an array of integers starting and ending with 1, and each interior element is the sum of the two elements directly above it from the previous row.",
    "topic": "Dynamic Programming",
    "subtopic": "Combinatorics",
    "tags": [
      "Dynamic Programming",
      "Triangle",
      "Combinatorics"
    ],
    "input_format": "An integer numRows representing the number of rows to generate.",
    "output_format": "A 2D list representing the rows of Pascal's Triangle.",
    "constraints": [
      "1 <= numRows <= 30"
    ],
    "examples": [
      {
        "input": "numRows = 5",
        "output": "[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]",
        "explanation": "The first 5 rows of Pascal's Triangle are: \n1st row: [1] \n2nd row: [1, 1] \n3rd row: [1, 2, 1] \n4th row: [1, 3, 3, 1] \n5th row: [1, 4, 6, 4, 1]."
      },
      {
        "input": "numRows = 1",
        "output": "[[1]]",
        "explanation": "The first row of Pascal's Triangle is simply [1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how to build each row based on the previous one."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Jump Game II",
    "description": "You are given an array of non-negative integers nums. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps. If it is not possible to reach the last index, return -1. You can assume you start at the first index.",
    "topic": "Greedy",
    "subtopic": "Jump Game",
    "tags": [
      "Greedy",
      "Dynamic Programming",
      "Array"
    ],
    "input_format": "An array of non-negative integers nums.",
    "output_format": "An integer representing the minimum number of jumps needed to reach the last index, or -1 if it is not possible.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, 1, 1, 4]",
        "output": "2",
        "explanation": "The minimum number of jumps to reach the last index is 2: jump from index 0 to 1, then jump from index 1 to 4."
      },
      {
        "input": "nums = [1, 2, 3]",
        "output": "2",
        "explanation": "The minimum number of jumps to reach the last index is 2: jump from index 0 to 1, then jump from index 1 to 2."
      },
      {
        "input": "nums = [0, 1, 2]",
        "output": "-1",
        "explanation": "It is not possible to move from the first index since the jump length is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a greedy approach to determine the farthest position you can reach.",
      "Keep track of the number of jumps made so far and the current range of indices you can reach."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "First Missing Positive",
    "description": "Given an unsorted integer array nums, return the smallest missing positive integer. You must implement an algorithm that runs in O(n) time and uses O(1) extra space.",
    "topic": "Array",
    "subtopic": "Sorting and Searching",
    "tags": [
      "Array",
      "Searching",
      "Positive Integers"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the smallest missing positive integer.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [3, 4, -1, 1]",
        "output": "2",
        "explanation": "The positive integers present are 1, 3, and 4. The smallest missing positive integer is 2."
      },
      {
        "input": "nums = [1, 2, 0]",
        "output": "3",
        "explanation": "The positive integers present are 1 and 2. The smallest missing positive integer is 3."
      },
      {
        "input": "nums = [7, 8, 9, 10]",
        "output": "1",
        "explanation": "The positive integers present are 7, 8, 9, and 10. The smallest missing positive integer is 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using indices to keep track of the presence of numbers.",
      "The range of numbers to consider is from 1 to n, inclusive."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Add Binary",
    "description": "Given two binary strings a and b, return their sum as a binary string. The input strings are both non-empty and contain only characters '0' or '1'.",
    "topic": "String",
    "subtopic": "Binary Numbers",
    "tags": [
      "Binary",
      "String Manipulation",
      "Addition"
    ],
    "input_format": "Two binary strings a and b.",
    "output_format": "A binary string representing the sum of a and b.",
    "constraints": [
      "1 <= a.length, b.length <= 10^4",
      "Both strings contain only '0' or '1'."
    ],
    "examples": [
      {
        "input": "a = \"1010\", b = \"1011\"",
        "output": "\"10101\"",
        "explanation": "The sum of 10 (binary) and 11 (binary) is 101 (binary), which is 5 in decimal."
      },
      {
        "input": "a = \"0\", b = \"0\"",
        "output": "\"0\"",
        "explanation": "The sum of 0 (binary) and 0 (binary) is 0 (binary)."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a carry variable to track sums greater than 1.",
      "Reverse the strings to simplify addition from least significant bit to most."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, return true if t is an anagram of s and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Character Count",
    "tags": [
      "String",
      "Anagram",
      "HashMap"
    ],
    "input_format": "Two strings s and t, where 0 <= s.length, t.length <= 5 * 10^4.",
    "output_format": "A boolean value indicating whether t is an anagram of s.",
    "constraints": [
      "Both strings consist of lowercase English letters.",
      "The length of both strings can be at most 50,000."
    ],
    "examples": [
      {
        "input": "s = \"anagram\", t = \"nagaram\"",
        "output": "true",
        "explanation": "The letters of 'anagram' can be rearranged to form 'nagaram'."
      },
      {
        "input": "s = \"rat\", t = \"car\"",
        "output": "false",
        "explanation": "'rat' and 'car' do not have the same letters."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the frequency of each character in both strings.",
      "Compare the character counts of both strings."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Text Justification",
    "description": "Given an array of words and a length maxWidth, format the text such that each line has exactly maxWidth characters and is fully justified. You should try to pack as many words as you can on each line while ensuring that the gaps between words are as evenly distributed as possible. Words that don't fit should be moved to the next line. The last line should be left-justified and not padded with extra spaces. Return a list of strings representing each line of justified text.",
    "topic": "String",
    "subtopic": "Text Formatting",
    "tags": [
      "String",
      "Justification",
      "Text Formatting"
    ],
    "input_format": "An array of strings words and an integer maxWidth.",
    "output_format": "An array of strings representing the justified text.",
    "constraints": [
      "1 <= words.length <= 3000",
      "1 <= words[i].length <= 100",
      "1 <= maxWidth <= 100"
    ],
    "examples": [
      {
        "input": {
          "words": [
            "This",
            "is",
            "an",
            "example",
            "of",
            "text",
            "justification."
          ],
          "maxWidth": 16
        },
        "output": [
          "This    is    an",
          "example  of text",
          "justification.  "
        ],
        "explanation": "The first line has 4 words and 4 spaces between them, the second line has 3 words and 1 space padding after 'of', and the last line is justified with the remaining spaces at the end."
      },
      {
        "input": {
          "words": [
            "What",
            "must",
            "be",
            "acknowledgment",
            "should",
            "not",
            "be",
            "overlooked."
          ],
          "maxWidth": 16
        },
        "output": [
          "What   must   be",
          "acknowledgment  ",
          "should not be    ",
          "overlooked.      "
        ],
        "explanation": "In this case, the spacing is adjusted to ensure proper justification while considering the maxWidth."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how to distribute spaces between words.",
      "Handle the last line differently from other lines.",
      "Use a greedy approach to fill lines."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Insert Interval",
    "description": "Given a collection of intervals, merge all overlapping intervals and insert a new interval into the collection, returning the updated list of intervals.",
    "topic": "Array",
    "subtopic": "Intervals",
    "tags": [
      "Array",
      "Intervals",
      "Sorting"
    ],
    "input_format": "A list of intervals, where each interval is represented as a list of two integers [start, end], and a new interval [new_start, new_end].",
    "output_format": "A list of merged intervals after inserting the new interval.",
    "constraints": [
      "0 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "All intervals are non-empty and the start is less than or equal to the end."
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[6,9]], new_interval = [2,5]",
        "output": "[[1,5],[6,9]]",
        "explanation": "The new interval [2,5] overlaps with the interval [1,3], merging them results in [1,5]."
      },
      {
        "input": "intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], new_interval = [4,8]",
        "output": "[[1,2],[3,10],[12,16]]",
        "explanation": "The new interval [4,8] overlaps with [3,5], [6,7], and [8,10], merging them to produce [3,10]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the intervals by the starting point first.",
      "Use a new list to keep track of merged intervals."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Maximum Product Subarray",
    "description": "Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product, and return the product. The subarray must not be empty and may consist of negative numbers, which can flip the sign of the product.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Product"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer that represents the maximum product of the contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "-10 <= nums[i] <= 10"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, -2, 4]",
        "output": "6",
        "explanation": "The subarray [2, 3] has the largest product = 2 * 3 = 6."
      },
      {
        "input": "nums = [-2, 0, -1]",
        "output": "0",
        "explanation": "The subarray [0] has the largest product 0."
      },
      {
        "input": "nums = [-2, 3, -4]",
        "output": "24",
        "explanation": "The subarray [3, -4] gives the product 3 * -4 = -12 but [3] and [-4] are also valid to compute the products separately, the maximum is from a combination of [-2, 3, -4] resulting in 24."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Keep track of both the maximum and minimum products up to the current position.",
      "A negative number can become a part of the maximum product if multiplied by a minimum product."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Search a 2D Matrix",
    "description": "Write an efficient algorithm that searches for a target value in an m x n integer matrix. The matrix has the following properties: 1. Integers in each row are sorted in ascending from left to right. 2. Integers in each column are sorted in ascending from top to bottom. 3. You may assume that all integers in the matrix are unique.",
    "topic": "Matrix",
    "subtopic": "Searching",
    "tags": [
      "Matrix",
      "Binary Search",
      "Searching"
    ],
    "input_format": "A 2D integer array matrix and an integer target.",
    "output_format": "Return true if the target exists in the matrix, otherwise return false.",
    "constraints": [
      "1 <= m, n <= 100",
      "m == matrix.length",
      "n == matrix[i].length",
      "-10^4 <= matrix[i][j], target <= 10^4"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 3, 5], [7, 9, 11], [12, 14, 16]], target = 9",
        "output": "true",
        "explanation": "9 is present in the matrix."
      },
      {
        "input": "matrix = [[1, 3, 5], [7, 9, 11], [12, 14, 16]], target = 2",
        "output": "false",
        "explanation": "2 is not present in the matrix."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the properties of the matrix while searching.",
      "You might want to start from the top-right corner or bottom-left corner.",
      "Use binary search strategy in either row or column."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Same Tree",
    "description": "Given two binary trees, determine if they are structurally identical and the nodes have the same value. A binary tree is considered the same if they are both null, or if the following conditions are met: both nodes have the same value, and their left subtrees are the same, as well as their right subtrees.",
    "topic": "Tree",
    "subtopic": "Tree Traversal",
    "tags": [
      "Tree",
      "Binary Tree",
      "Recursion"
    ],
    "input_format": "Two binary tree nodes, root1 and root2.",
    "output_format": "A boolean value indicating whether the two trees are the same.",
    "constraints": [
      "The number of nodes in both trees can be in the range [0, 100].",
      "-10^4 <= Node.val <= 10^4"
    ],
    "examples": [
      {
        "input": "root1 = [1, 2, 3], root2 = [1, 2, 3]",
        "output": "true",
        "explanation": "Both trees have the same structure and the same values at each corresponding node."
      },
      {
        "input": "root1 = [1, 2], root2 = [1, null, 2]",
        "output": "false",
        "explanation": "The structure of the trees is different; one tree has a left child while the other has a right child."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Check if both nodes are null.",
      "If both nodes are not null, check their values and recursively check their left and right subtrees."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Find the Duplicate Number",
    "description": "Given an array of integers where each integer is between 1 and n (inclusive), and the array has a size of n + 1, determine the duplicate number in the array. You must not modify the array and can only use constant extra space.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Binary Search"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the duplicate number in the array.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i] <= n"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, 4, 2, 2]",
        "output": "2",
        "explanation": "The number 2 appears twice in the array."
      },
      {
        "input": "nums = [3, 1, 3, 4, 2]",
        "output": "3",
        "explanation": "The number 3 appears twice in the array."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a fast and slow pointer technique.",
      "Since the numbers are in the range 1 to n, you can use binary search on the range."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Isomorphic Strings",
    "description": "Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t, or vice versa. All occurrences of a character must map to exactly one character while no two characters may map to the same character.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Hash Map",
      "Two Pointer"
    ],
    "input_format": "Two strings s and t, each consisting of only lowercase letters.",
    "output_format": "A boolean indicating whether the strings s and t are isomorphic.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s.length == t.length"
    ],
    "examples": [
      {
        "input": "s = \"egg\", t = \"add\"",
        "output": "true",
        "explanation": "The character 'e' in s can be replaced with 'a' in t, and 'g' can be replaced with 'd'."
      },
      {
        "input": "s = \"foo\", t = \"bar\"",
        "output": "false",
        "explanation": "There is no way to map 'f' to 'b' and 'o' to 'a' while preserving the character mapping."
      },
      {
        "input": "s = \"paper\", t = \"title\"",
        "output": "true",
        "explanation": "The character 'p' can be replaced with 't', 'a' with 'i', 'e' with 'l', and 'r' with 'e'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to track character mappings.",
      "Check if any character mapping is broken during the process."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "String to Integer (atoi)",
    "description": "Implement the function `myAtoi(str: str) -> int` that converts a string to a 32-bit signed integer. The conversion should follow these rules: \n\n1. Remove any leading whitespace characters from the input string. \n2. Handle optional leading '+' or '-' signs. \n3. Convert the string to an integer until a non-numeric character is encountered or the end of the string is reached. \n4. If the value is outside the range of a 32-bit signed integer, clamp it to the range [-2^31, 2^31 - 1]. \n\nThe function should return the final integer value.",
    "topic": "String",
    "subtopic": "Parsing",
    "tags": [
      "String",
      "Conversion",
      "Integer"
    ],
    "input_format": "A string `str` that may contain leading/trailing whitespaces and optional signs.",
    "output_format": "An integer that represents the converted value.",
    "constraints": [
      "The input string is guaranteed to be of length no more than 200."
    ],
    "examples": [
      {
        "input": "str = '   -42'",
        "output": "-42",
        "explanation": "Remove leading whitespace, read leading '-' sign, convert '42' to integer."
      },
      {
        "input": "str = '4193 with words'",
        "output": "4193",
        "explanation": "Convert characters until the first non-numeric character ' ' is reached."
      },
      {
        "input": "str = 'words and 987'",
        "output": "0",
        "explanation": "The conversion cannot start with non-numeric characters."
      },
      {
        "input": "str = '-91283472332'",
        "output": "-2147483648",
        "explanation": "The value is less than the minimum 32-bit signed integer, return clamped value."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use string methods to trim and check for signs.",
      "Be careful with edge cases for overflow."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "3Sum Closest",
    "description": "Given an array of integers nums and an integer target, return the sum of three integers in nums such that the sum is closest to the target. Return the sum of the three integers. You may assume that each input would have exactly one solution.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An integer representing the sum of the three integers closest to the target.",
    "constraints": [
      "3 <= nums.length <= 10^3",
      "-10^3 <= nums[i] <= 10^3",
      "The solution will always be unique."
    ],
    "examples": [
      {
        "input": "nums = [-1, 2, 1, -4], target = 1",
        "output": "2",
        "explanation": "The sum of the three integers closest to the target (1) is 2. Possible sums are 2 = (-1 + 2 + 1) which is closest to 1."
      },
      {
        "input": "nums = [0, 0, 0], target = 1",
        "output": "0",
        "explanation": "The only possible sum we can get from three 0s is 0, which is closest to the target (1)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the array to use two pointers effectively.",
      "Keep track of the closest sum found so far."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Missing Number",
    "description": "You are given an array containing n distinct numbers taken from 0, 1, 2, ..., n. This means one number is missing from the array. Write a function to find and return the missing number. Your solution should be optimized for O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Math"
    ],
    "input_format": "An array of n distinct integers nums, where 0 <= nums[i] <= n.",
    "output_format": "An integer which is the missing number.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [3, 0, 1]",
        "output": "2",
        "explanation": "The numbers in the array are 0, 1, and 3. Therefore, 2 is missing."
      },
      {
        "input": "nums = [0, 1]",
        "output": "2",
        "explanation": "The array contains 0 and 1. Thus, 2 is the missing number."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using the formula for the sum of the first n natural numbers.",
      "You can also use XOR properties to find the missing number."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Symmetric Tree",
    "description": "Given a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center). A symmetric tree is one whose left subtree is a mirror reflection of its right subtree.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Recursion"
    ],
    "input_format": "The input consists of the root of the binary tree, represented as a TreeNode object.",
    "output_format": "Return true if the tree is symmetric, otherwise return false.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 1000].",
      "Node.val is in the range [-100, 100]."
    ],
    "examples": [
      {
        "input": "root = [1,2,2,3,4,4,3]",
        "output": "true",
        "explanation": "The tree is symmetric since the left and right subtrees are mirror images."
      },
      {
        "input": "root = [1,2,2,null,3,null,3]",
        "output": "false",
        "explanation": "The left subtree has '3' and the right subtree has 'null', hence it is not symmetric."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to think recursively. Compare left and right subtrees."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Wildcard Matching",
    "description": "Implement a function that supports wildcard pattern matching with `*` and `?`. The `*` character can match any sequence of characters (including the empty sequence), and the `?` character can match any single character. Given a string `s` and a string `p` representing the pattern, return true if `s` matches the pattern, and false otherwise.",
    "topic": "Dynamic Programming",
    "subtopic": "String Matching",
    "tags": [
      "Dynamic Programming",
      "String",
      "Matching"
    ],
    "input_format": "A string s and a pattern string p.",
    "output_format": "A boolean value indicating whether the string matches the pattern.",
    "constraints": [
      "0 <= s.length <= 20",
      "0 <= p.length <= 20",
      "s and p consist of lowercase English letters, `?`, and `*`."
    ],
    "examples": [
      {
        "input": "s = \"aa\", p = \"a\"",
        "output": "false",
        "explanation": "The pattern 'a' does not match 'aa'."
      },
      {
        "input": "s = \"aa\", p = \"*\"",
        "output": "true",
        "explanation": "The pattern '*' matches any sequence, including 'aa'."
      },
      {
        "input": "s = \"cb\", p = \"?a\"",
        "output": "false",
        "explanation": "The pattern '?a' requires an 'a' at the end, which does not match 'cb'."
      },
      {
        "input": "s = \"adceb\", p = \"*a*b\"",
        "output": "true",
        "explanation": "The pattern '*a*b' matches 'adceb' with '*' matching 'dce'."
      },
      {
        "input": "s = \"acdcb\", p = \"a*c?b\"",
        "output": "false",
        "explanation": "The pattern 'a*c?b' does not match 'acdcb'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using dynamic programming to build a table that tracks matches.",
      "Think about how to handle the '*' character effectively."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Contains Duplicate II",
    "description": "Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Sliding Window"
    ],
    "input_format": "An integer array nums followed by an integer k.",
    "output_format": "A boolean value indicating whether the condition is satisfied.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5",
      "0 <= k <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 1], k = 3",
        "output": "true",
        "explanation": "nums[0] == nums[3] and abs(0 - 3) <= 3."
      },
      {
        "input": "nums = [1, 0, 1, 1], k = 1",
        "output": "true",
        "explanation": "nums[2] == nums[3] and abs(2 - 3) <= 1."
      },
      {
        "input": "nums = [1, 2, 3, 1, 2, 3], k = 2",
        "output": "false",
        "explanation": "No indices satisfy the condition."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the indices of elements.",
      "Check if the same element appears within the range k."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Minimum Path Sum",
    "description": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of the numbers along the path. You can only move either down or right at any point in time.",
    "topic": "Dynamic Programming",
    "subtopic": "Grid Traversal",
    "tags": [
      "Dynamic Programming",
      "Grid",
      "Path Finding"
    ],
    "input_format": "A 2D grid represented as a list of lists, where each element is a non-negative integer.",
    "output_format": "An integer representing the minimum path sum from the top left to the bottom right corner of the grid.",
    "constraints": [
      "1 <= m, n <= 200",
      "0 <= grid[i][j] <= 100"
    ],
    "examples": [
      {
        "input": "grid = [[1,3,1],[1,5,1],[4,2,1]]",
        "output": "7",
        "explanation": "The path 1 \u2192 3 \u2192 1 \u2192 1 minimizes the sum, with a total sum of 7."
      },
      {
        "input": "grid = [[1,2,3],[4,5,6]]",
        "output": "12",
        "explanation": "The path 1 \u2192 2 \u2192 3 \u2192 6 minimizes the sum, with a total sum of 12."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to store the minimum sums at each cell.",
      "You only need to consider the cells above and to the left for each cell in the grid."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Kth Smallest Element in a BST",
    "description": "Given a binary search tree (BST), write a function to find the kth smallest element in it. You may assume that k is always valid, 1 \u2264 k \u2264 BST's total elements.",
    "topic": "Tree",
    "subtopic": "Binary Search Tree",
    "tags": [
      "Tree",
      "BST",
      "Search"
    ],
    "input_format": "The root node of a binary search tree and an integer k.",
    "output_format": "An integer representing the kth smallest element in the BST.",
    "constraints": [
      "The number of nodes in the tree is n.",
      "1 <= k <= n <= 10^4",
      "0 <= Node.val <= 10^4"
    ],
    "examples": [
      {
        "input": "root = [3, 1, 4, null, 2], k = 1",
        "output": "1",
        "explanation": "The BST is: 3\n    / \\\n   1   4\n    \\\n     2. The 1st smallest element is 1."
      },
      {
        "input": "root = [5, 3, 6, 2, 4, null, null, 1], k = 3",
        "output": "3",
        "explanation": "The BST is: 5\n    / \\\n   3   6\n  / \\\n 2   4\n/ \n1. The 3rd smallest element is 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use in-order traversal to get elements in sorted order.",
      "Keep count of how many nodes you have processed."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Copy List with Random Pointer",
    "description": "Given a linked list where each node contains an additional random pointer which could point to any node in the list or null, you need to create a deep copy of the list. The new linked list should be an exact copy of the original list. Each node in the new list should have its value set to the value of the corresponding node in the original list, and the random pointers must also point to the correct nodes in the copied list.",
    "topic": "Linked List",
    "subtopic": "Copying a List",
    "tags": [
      "Linked List",
      "Deep Copy",
      "Hash Table"
    ],
    "input_format": "A reference to the head of the linked list.",
    "output_format": "A reference to the head of the copied linked list.",
    "constraints": [
      "The number of nodes in the list is in the range [0, 100].",
      "The values of the nodes can be any integer.",
      "All nodes in the original list are distinct."
    ],
    "examples": [
      {
        "input": "head = [[7,null],[13,0],[11,4],[10,2],[1,0]]",
        "output": "[[7,null],[13,0],[11,4],[10,2],[1,0]]",
        "explanation": "Each node is copied correctly with both next and random pointers maintaining reference to the equivalent nodes in the copied list."
      },
      {
        "input": "head = [[1,1],[2,1]]",
        "output": "[[1,1],[2,1]]",
        "explanation": "The copy should have nodes with the same values and random pointers pointing to equivalent nodes in the copied list."
      },
      {
        "input": "head = [[3,null],[3,0],[3,null]]",
        "output": "[[3,null],[3,0],[3,null]]",
        "explanation": "The nodes should preserve all references correctly while maintaining their isolated copies."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to store the original nodes and their copies.",
      "Remember to set both next and random pointers for the copied nodes."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Number of Islands II",
    "description": "You are given a 2D grid representing a map where '1' represents land and '0' represents water. Initially, all the cells of the grid are water (0). You have a list of positions that represent where land should be added. Each position is denoted by a pair of coordinates (i, j). After each addition, you need to calculate the number of islands in the grid. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. Return a list of integers representing the number of islands after each addition of land.",
    "topic": "Graph",
    "subtopic": "Union-Find",
    "tags": [
      "Union-Find",
      "Grid",
      "DFS"
    ],
    "input_format": "A 2D grid `grid` of size m x n initialized to 0's (water) and a list of positions `positions` where lands will be added.",
    "output_format": "A list of integers where each integer represents the number of islands after the corresponding land addition.",
    "constraints": [
      "m, n will be in range [1, 300]",
      "0 <= positions.length <= 10^4",
      "positions[i].length == 2",
      "positions[i][0] < m and positions[i][1] < n"
    ],
    "examples": [
      {
        "input": "grid = [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]], positions = [[0,0],[0,1],[1,1],[2,2],[1,0],[1,2],[0,2],[0,3]]",
        "output": "[1, 1, 1, 2, 3, 3, 4, 5]",
        "explanation": "After each addition of land at positions, the number of islands changes as follows: Adding (0,0) creates 1 island. Adding (0,1) keeps it as 1 island. Adding (1,1) keeps it as 1 island. Adding (2,2) creates a new island, totaling 2. Subsequent additions will modify the total as explained."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a Union-Find data structure to track connected components.",
      "Think about how to efficiently find and merge islands after each land addition.",
      "Make sure to check the neighboring cells when adding new land."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Clone Graph",
    "description": "Given a reference to a node in a connected undirected graph, you need to return a deep copy (clone) of the graph. Each node in the graph contains a value and a list of its neighbors. You must implement a function that takes the node of the original graph and returns the node of its deep copy.",
    "topic": "Graph",
    "subtopic": "Depth First Search",
    "tags": [
      "Graph",
      "DFS",
      "Cloning"
    ],
    "input_format": "A reference to a node in a connected undirected graph.",
    "output_format": "A reference to the root node of the cloned graph.",
    "constraints": [
      "The number of nodes in the graph is between 1 and 100.",
      "Each node has a unique value from 1 to 100.",
      "The graph is guaranteed to be connected, meaning there are no disconnected parts."
    ],
    "examples": [
      {
        "input": "Node with value 1 that has neighbors [2, 4]. Node 2 has neighbors [1, 3], Node 3 has neighbor [2], Node 4 has neighbor [1].",
        "output": "Node with value 1 that has neighbors [2, 4]. Each neighbor is also a cloned node.",
        "explanation": "The function should return a new graph where each node is a clone of the original and retains the same connection structure."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to keep track of cloned nodes.",
      "Think about using DFS or BFS to traverse the graph."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Shortest Palindrome",
    "description": "Given a string s, you need to construct the shortest palindrome by adding characters in front of it. Return the shortest palindrome you can find by performing this transformation.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Palindrome",
      "Construct"
    ],
    "input_format": "A single string s (0 <= s.length <= 1000).",
    "output_format": "A string representing the shortest palindrome.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s consists of lowercase English letters only."
    ],
    "examples": [
      {
        "input": "aacecaaa",
        "output": "aaacecaaa",
        "explanation": "Adding 'aa' in front of 'aacecaaa' forms a palindrome."
      },
      {
        "input": "abcd",
        "output": "dcbabcd",
        "explanation": "Adding 'dcb' in front of 'abcd' forms a palindrome."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how to find the longest palindromic prefix.",
      "Think about string matching algorithms."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Flatten Binary Tree to Linked List",
    "description": "Given the root of a binary tree, flatten the tree to a linked list in-place. The linked list should use the right pointers to connect the nodes, and the left pointers should all be set to null. The order of nodes in the linked list should follow the pre-order traversal of the binary tree.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "DFS",
      "In-place",
      "Linked List"
    ],
    "input_format": "A binary tree node represented by the root of the tree.",
    "output_format": "The root node of the flattened linked list.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 2000].",
      "-100 <= Node.val <= 100"
    ],
    "examples": [
      {
        "input": "root = [1, 2, 5, 3, 4, null, 6]",
        "output": "[1, null, 2, null, 3, null, 4, null, 5, null, 6]",
        "explanation": "The pre-order traversal of the tree is [1, 2, 3, 4, 5, 6], which results in the linear linked list structure."
      },
      {
        "input": "root = []",
        "output": "[]",
        "explanation": "An empty tree results in an empty linked list."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how you can use recursion to flatten the tree.",
      "You could traverse the tree in a specific order and set the pointers accordingly."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Integer to Roman",
    "description": "Given an integer, convert it to a Roman numeral. Roman numerals are represented by seven symbols: I, V, X, L, C, D, and M. For example, the numeral for two is 'II', and the numeral for twelve is 'XII'. The number twenty-six is written as 'XXVI', and three hundred is 'CCC'. Roman numerals are usually written largest to smallest from left to right. However, there are six instances where subtraction is used: I can be placed before V (5) to make 4. X is placed before L (50) to make 40, and so on. In total, there are 13 symbols as follows: I: 1, V: 5, X: 10, L: 50, C: 100, D: 500, M: 1000. To convert an integer to a Roman numeral, you will need to break down the integer into its Roman components.",
    "topic": "Math",
    "subtopic": "Conversion",
    "tags": [
      "Math",
      "String Manipulation",
      "Conversion"
    ],
    "input_format": "An integer num.",
    "output_format": "A string representing the Roman numeral equivalent of the integer.",
    "constraints": [
      "1 <= num <= 3999"
    ],
    "examples": [
      {
        "input": "num = 3",
        "output": "III",
        "explanation": "The integer 3 is represented as 'III' in Roman numerals."
      },
      {
        "input": "num = 58",
        "output": "LVIII",
        "explanation": "The integer 58 is represented as 'LVIII' in Roman numerals: L = 50, V = 5, I = 1, I = 1."
      },
      {
        "input": "num = 1994",
        "output": "MCMXCIV",
        "explanation": "The integer 1994 is represented as 'MCMXCIV' in Roman numerals: M = 1000, CM = 900, XC = 90, IV = 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider creating a mapping of integers to Roman symbols.",
      "You may need to handle subtraction cases separately.",
      "Iterate through the Roman symbols from largest to smallest."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Word Search II",
    "description": "Given a 2D board of letters and a list of words, return all words in the list that can be found in the board. A word can be constructed from letters of sequentially adjacent cells, where 'adjacent' cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word. You should implement a Trie to represent the words.",
    "topic": "Backtracking",
    "subtopic": "Trie",
    "tags": [
      "Backtracking",
      "Trie",
      "Matrix",
      "Word Search"
    ],
    "input_format": "A 2D character array board and a list of strings words.",
    "output_format": "A list of strings containing all the words from the list that can be constructed on the board.",
    "constraints": [
      "1 <= board.length, board[i].length <= 12",
      "1 <= words.length <= 1000",
      "1 <= words[i].length <= 10",
      "All characters in board and words are lowercase letters."
    ],
    "examples": [
      {
        "input": "board = [['o','a','a','n'],['e','t','a','e'],['i','h','k','r'],['i','f','l','v']], words = ['oath', 'pea', 'eat', 'rain']",
        "output": "['oath', 'eat']",
        "explanation": "The words 'oath' and 'eat' can be found in the board."
      },
      {
        "input": "board = [['a','b'],['c','d']], words = ['ab', 'ac', 'ad', 'bc', 'bd', 'cd']",
        "output": "['ab', 'ad', 'cd']",
        "explanation": "The words 'ab', 'ad', and 'cd' can be found in the board."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a Trie to efficiently search for words.",
      "Backtrack to explore all possible character paths from each cell.",
      "Mark the path of the search to avoid reuse of the same cell."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Group Shifted Strings",
    "description": "Given a list of strings, you need to group the strings that are shifted versions of each other. A string 's' is a shifted version of string 't' if you can obtain 't' by shifting the letters of 's' by a fixed amount. For example, 'abc', 'bcd', and 'xyz' are grouped together as they can be derived by shifting each letter by the same offset.",
    "topic": "String",
    "subtopic": "Group By",
    "tags": [
      "String",
      "Grouping",
      "HashMap"
    ],
    "input_format": "A list of strings, strings[].",
    "output_format": "A list of groups of strings, where each group contains strings that are shifted versions of one another.",
    "constraints": [
      "1 <= strings.length <= 1000",
      "1 <= strings[i].length <= 100"
    ],
    "examples": [
      {
        "input": "strings = [\"abc\", \"bcd\", \"acef\", \"xyz\", \"az\", \"ba\", \"a\", \"z\"]",
        "output": "[[\"abc\", \"bcd\", \"xyz\"], [\"acef\"], [\"az\", \"ba\"], [\"a\", \"z\"]]",
        "explanation": "\"abc\" and \"bcd\" are shifted versions of each other. Similarly, \"az\" and \"ba\" can be obtained by shifting by a fixed amount."
      },
      {
        "input": "strings = [\"a\", \"b\", \"c\"]",
        "output": "[[\"a\"], [\"b\"], [\"c\"]]",
        "explanation": "Each string stands alone as they cannot be grouped with others."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the difference between characters to identify shifted groups.",
      "Utilize a hash map to store groups based on their relative shifts."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "The Skyline Problem",
    "description": "Given a list of buildings represented by their top-left and bottom-right coordinates, return the skyline formed by these buildings. The skyline is the outer contour of the buildings when viewed from a distance. Each building is represented by a triplet (left, right, height) where left and right are the x-coordinates of the building and height is its height. The result should be a list of tuples, where each tuple contains the x-coordinate and the height of the skyline at that point.",
    "topic": "Geometry",
    "subtopic": "Sweep Line",
    "tags": [
      "Geometry",
      "Sweep Line",
      "Array",
      "Sorting"
    ],
    "input_format": "A list of buildings, where each building is represented as a triplet [left, right, height].",
    "output_format": "A list of tuples representing the coordinates and heights of the skyline.",
    "constraints": [
      "1 <= buildings.length <= 10^4",
      "0 <= left < right <= 2 * 10^9",
      "1 <= height <= 10^4"
    ],
    "examples": [
      {
        "input": "buildings = [[2, 9, 10], [3, 7, 15], [5, 12, 12], [15, 20, 10], [19, 24, 8]]",
        "output": "[(2, 10), (3, 15), (7, 12), (12, 0), (15, 10), (20, 8), (24, 0)]",
        "explanation": "The skyline formed is represented by the points where the height changes."
      },
      {
        "input": "buildings = [[0, 2, 3], [2, 5, 3]]",
        "output": "[(0, 3), (2, 0), (5, 0)]",
        "explanation": "There is only one building with a height of 3 from x = 0 to x = 2."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a sweep line technique to keep track of building heights.",
      "Use a max-heap to maintain the current heights as you process the buildings."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Subsets II",
    "description": "Given an integer array nums that may contain duplicates, return all possible subsets (the power set). The solution set must not contain duplicate subsets. Return the power set in any order.",
    "topic": "Backtracking",
    "subtopic": "Subsets",
    "tags": [
      "Array",
      "Backtracking",
      "Subsets"
    ],
    "input_format": "An array of integers nums, where -10^9 <= nums[i] <= 10^9.",
    "output_format": "A list of lists containing all unique subsets of nums.",
    "constraints": [
      "0 <= nums.length <= 10^4",
      "The elements of nums are integers."
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 2]",
        "output": "[[], [1], [1, 2], [1, 2, 2], [2], [2, 2]]",
        "explanation": "The unique subsets are: [], [1], [2], [1,2], [2,2], [1,2,2]."
      },
      {
        "input": "nums = [0]",
        "output": "[[], [0]]",
        "explanation": "The unique subsets of the array are: [], [0]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the strategies for generating subsets.",
      "Use a backtracking approach to explore all combinations.",
      "Ensure subsets remain unique by handling duplicates."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock with Cooldown",
    "description": "You are given an array where the ith element represents the price of a stock on day i. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. However, after you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day). Return the maximum profit you can achieve. You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
    "topic": "Dynamic Programming",
    "subtopic": "State Machine",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Greedy"
    ],
    "input_format": "An array of integers representing stock prices, where prices[i] is the price of the stock on the ith day.",
    "output_format": "An integer representing the maximum profit you can achieve.",
    "constraints": [
      "1 <= prices.length <= 5000",
      "0 <= prices[i] <= 1000"
    ],
    "examples": [
      {
        "input": "prices = [1, 2, 3, 0, 2]",
        "output": "3",
        "explanation": "Buy on day 0 (price = 1) and sell on day 2 (price = 3), then cooldown on day 3. Total profit = 3 - 1 = 2. Alternatively, buy on day 1 (price = 2) and sell on day 2 for a profit of 1, then cooldown on day 3, and buy again on day 4 (price = 2) for a profit of 0. Total profit = 1 + 2 - 1 = 3."
      },
      {
        "input": "prices = [1]",
        "output": "0",
        "explanation": "With only one day, you cannot make any transactions, so the profit is 0."
      },
      {
        "input": "prices = [5, 4, 3, 2, 1]",
        "output": "0",
        "explanation": "Prices are continuously declining, so it is better not to engage in any transactions."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think of using dynamic programming to keep track of profits.",
      "Consider maintaining two states: profit when holding and profit when selling."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Graph Valid Tree",
    "description": "Given a number of undirected edges and a number of nodes, determine if these edges form a valid tree. A valid tree is a connected graph with no cycles. You must implement a function that takes in the number of nodes and a list of edges and returns true if they form a valid tree, and false otherwise.",
    "topic": "Graph",
    "subtopic": "Union Find",
    "tags": [
      "Graph",
      "Tree",
      "Union Find"
    ],
    "input_format": "An integer n representing the number of nodes, and a list of edges where each edge is represented as a pair of nodes [u, v].",
    "output_format": "A boolean value indicating if the edges form a valid tree.",
    "constraints": [
      "1 <= n <= 1000",
      "0 <= edges.length <= n * (n - 1) / 2",
      "edges[i].length == 2",
      "0 <= edges[i][0], edges[i][1] < n"
    ],
    "examples": [
      {
        "input": "n = 5, edges = [[0, 1], [0, 2], [0, 3], [1, 4]]",
        "output": "true",
        "explanation": "The edges connect all 5 nodes with no cycles, fulfilling the conditions of a valid tree."
      },
      {
        "input": "n = 5, edges = [[0, 1], [1, 2], [2, 3], [1, 3], [3, 4]]",
        "output": "false",
        "explanation": "This graph contains a cycle (1 -> 2 -> 3 -> 1), hence it is not a valid tree."
      },
      {
        "input": "n = 1, edges = []",
        "output": "true",
        "explanation": "A single node with no edges is considered a valid tree."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "A tree with n nodes must have exactly n - 1 edges.",
      "You can use Union-Find to detect cycles in the graph."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Missing Ranges",
    "description": "Given a sorted integer array nums where the elements are in the range [lower, upper], return the missing ranges in the range. The missing ranges should be represented as a list of strings, where each missing range is formatted as 'start->end' if it spans at least 2 numbers, or simply 'start' if it's a single number.",
    "topic": "Array",
    "subtopic": "Finding Missing Ranges",
    "tags": [
      "Array",
      "Range",
      "String"
    ],
    "input_format": "An integer array nums, and two integers lower and upper.",
    "output_format": "A list of strings representing the missing ranges.",
    "constraints": [
      "0 <= nums.length <= 10^4",
      "lower <= nums[i] <= upper",
      "All elements of nums are unique."
    ],
    "examples": [
      {
        "input": "nums = [0, 1, 3, 50, 75], lower = 0, upper = 99",
        "output": "[\"2\", \"4->49\", \"51->74\", \"76->99\"]",
        "explanation": "The missing ranges are from 2, 4 to 49, and from 51 to 74, and from 76 to 99."
      },
      {
        "input": "nums = [], lower = 1, upper = 1",
        "output": "[\"1\"]",
        "explanation": "The range from 1 to 1 is missing."
      },
      {
        "input": "nums = [1, 2, 3, 4], lower = 0, upper = 4",
        "output": "[\"0\"]",
        "explanation": "Only 0 is missing."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Iterate through the range and check for missing values.",
      "Use a two-pointer approach to keep track of the current range."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Binary Tree Right Side View",
    "description": "Given a binary tree, imagine you are looking at it from the right side. Write a function to return the values of the nodes you can see ordered from top to bottom.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "DFS",
      "BFS"
    ],
    "input_format": "The input will consist of the root node of a binary tree.",
    "output_format": "An array of integers representing the values of the nodes visible from the right side.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 10^4].",
      "-100 <= Node.val <= 100"
    ],
    "examples": [
      {
        "input": "root = [1, 2, 3, null, 5, null, 4]",
        "output": "[1, 3, 4]",
        "explanation": "From the right side, the nodes are 1 (the root), 3 (the right child of 1), and 4 (the right child of 3)."
      },
      {
        "input": "root = [1, null, 3]",
        "output": "[1, 3]",
        "explanation": "The only nodes visible from the right side are 1 and 3."
      },
      {
        "input": "root = []",
        "output": "[]",
        "explanation": "An empty tree has no visible nodes."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a level order traversal or depth-first search to explore the tree.",
      "Keep track of the last node at each level."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Game of Life",
    "description": "The Game of Life is a cellular automaton devised by mathematician John Conway. It consists of an infinite two-dimensional grid of cells, where each cell can be either alive (1) or dead (0). The state of the cells evolves over discrete time steps according to the following rules for any live cell (1) and any dead cell (0):\n\n1. Any live cell with fewer than two live neighbors dies as if caused by under-population.\n2. Any live cell with two or three live neighbors lives on to the next generation.\n3. Any live cell with more than three live neighbors dies, as if by over-population.\n4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n\nGiven the current state of the grid, you need to update it to the next state based on the above rules.",
    "topic": "Matrix",
    "subtopic": "Game Simulation",
    "tags": [
      "Array",
      "Matrix",
      "Game of Life"
    ],
    "input_format": "A 2D array of integers representing the current state of the grid, where 0 represents a dead cell and 1 represents a live cell.",
    "output_format": "You should modify the input grid in-place to represent the next state.",
    "constraints": [
      "The input grid will have dimensions m x n where 1 <= m, n <= 25.",
      "Each cell in the grid will be either 0 or 1."
    ],
    "examples": [
      {
        "input": "grid = [[0, 1, 0], [0, 0, 1], [1, 1, 1], [0, 0, 0]]",
        "output": "grid = [[0, 0, 0], [1, 0, 1], [0, 1, 1], [0, 1, 0]]",
        "explanation": "The cells evolve according to the rules. The live cell in the center has too few neighbors, so it dies. The others evolve accordingly."
      },
      {
        "input": "grid = [[1, 1], [1, 0]]",
        "output": "grid = [[1, 1], [1, 1]]",
        "explanation": "The top left cell has three neighbors, so it stays alive. The top right cell has two neighbors; it stays alive. The bottom left cell has two neighbors; it stays alive. The bottom right cell has three neighbors; it becomes alive."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider creating a copy of the grid to apply changes to.",
      "You can use a set to track cells that need to change states during the iteration."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Implement Stack using Queues",
    "description": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time. You must implement the stack using only two queues.",
    "topic": "Data Structure",
    "subtopic": "Stack and Queue",
    "tags": [
      "Stack",
      "Queue",
      "Data Structure"
    ],
    "input_format": "A series of operations on the stack, represented as a list of strings, where each string is either 'push x', 'pop', 'top', or 'getMin'.",
    "output_format": "The output should be a list of results from the 'pop', 'top', and 'getMin' operations.",
    "constraints": [
      "1 <= operations.length <= 1000",
      "-10^6 <= x <= 10^6"
    ],
    "examples": [
      {
        "input": "[\"push 3\", \"push 5\", \"getMin\", \"pop\", \"top\", \"getMin\"]",
        "output": "[5, 3]",
        "explanation": "After pushing 3 and 5, the minimum is 3. After popping, the top is 3 and the minimum remains 3."
      },
      {
        "input": "[\"push -2\", \"push 0\", \"push -3\", \"getMin\", \"pop\", \"top\", \"getMin\"]",
        "output": "[-3, 0]",
        "explanation": "Pushed -2, 0, -3 which makes the minimum -3. After popping, the top is 0 and the minimum remains -2."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two queues for the stack operations.",
      "Consider how elements can be reordered in one queue to mimic stack behavior."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Second Highest Salary",
    "description": "Write a SQL query to find the second highest salary from the Employee table. If there is no second highest salary, the query should return null.",
    "topic": "Database",
    "subtopic": "SQL",
    "tags": [
      "SQL",
      "Database",
      "Query"
    ],
    "input_format": "Table Employee with a column Salary.",
    "output_format": "A single integer representing the second highest salary or null.",
    "constraints": [
      "The Employee table contains at least one record.",
      "The Salary field may contain duplicate values."
    ],
    "examples": [
      {
        "input": "Employee\n+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 3000   |\n| 2  | 2000   |\n| 3  | 2000   |\n| 4  | 4000   |\n+----+--------+",
        "output": "3000",
        "explanation": "The highest salary is 4000 and the second highest salary is 3000."
      },
      {
        "input": "Employee\n+----+--------+\n| Id | Salary |\n+----+--------+\n| 1  | 1000   |\n| 2  | 1000   |\n| 3  | 1000   |\n+----+--------+",
        "output": "null",
        "explanation": "All salaries are the same, so there is no second highest salary."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use DISTINCT to eliminate duplicate salaries.",
      "Consider using ORDER BY to sort salaries."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Fraction to Recurring Decimal",
    "description": "Given two integers representing the numerator and denominator of a fraction, return the fraction as a string. If the fractional part is repeating, enclose the repeating part in parentheses. If the fraction is a whole number, return it as-is. The input is guaranteed to be valid and the denominator is never zero.",
    "topic": "Math",
    "subtopic": "Fraction Representation",
    "tags": [
      "Math",
      "Strings",
      "Fractions"
    ],
    "input_format": "Two integers numerator (p) and denominator (q) where |p|, |q| <= 2 * 10^9.",
    "output_format": "A string representing the fraction in decimal form.",
    "constraints": [
      "0 < q <= 2 * 10^9",
      "-2 * 10^9 <= p <= 2 * 10^9"
    ],
    "examples": [
      {
        "input": "p = 1, q = 2",
        "output": "0.5",
        "explanation": "The fraction 1/2 is equivalent to 0.5."
      },
      {
        "input": "p = 2, q = 1",
        "output": "2",
        "explanation": "The fraction 2/1 is equivalent to the whole number 2."
      },
      {
        "input": "p = 1, q = 3",
        "output": "0.(3)",
        "explanation": "The fraction 1/3 is equivalent to 0.333..., which is represented as 0.(3) since the 3 is repeating."
      },
      {
        "input": "p = 4, q = 333",
        "output": "0.012(012)",
        "explanation": "The fraction 4/333 results in 0.012012..., which is represented as 0.012(012)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use integer division to find the whole part.",
      "Use a hashmap to detect the repeating cycles.",
      "Consider edge cases for negative numbers."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Binary Tree Paths",
    "description": "Given a binary tree, return all root-to-leaf paths. Each path should be represented as a string consisting of the node values, separated by '->'. A leaf is a node with no children.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Depth-First Search",
      "Backtracking"
    ],
    "input_format": "The root node of a binary tree.",
    "output_format": "A list of strings, each representing a root-to-leaf path.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 100].",
      "-100 <= Node.val <= 100"
    ],
    "examples": [
      {
        "input": "root = [1, 2, 3, null, 5]",
        "output": "[\"1->2->5\", \"1->3\"]",
        "explanation": "The binary tree has paths: 1->2->5 and 1->3."
      },
      {
        "input": "root = [1]",
        "output": "[\"1\"]",
        "explanation": "The binary tree has only one node, hence one path."
      },
      {
        "input": "root = []",
        "output": "[]",
        "explanation": "An empty tree has no paths."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use Depth-First Search (DFS) to explore paths.",
      "Check if a node is a leaf by verifying it has no left or right children."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Walls and Gates",
    "description": "You are given a m x n 2D grid initialized with these three possible values: -1 (a wall), 0 (a gate), and INF (an empty room). For each empty room, you need to fill it with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF. The distance to a gate is defined as the number of steps to walk from the room to the gate. You can only walk in four directions: up, down, left, and right.",
    "topic": "Graph",
    "subtopic": "BFS",
    "tags": [
      "Graph",
      "BFS",
      "Matrix"
    ],
    "input_format": "A 2D grid represented as a list of lists with elements being -1, 0, or INF.",
    "output_format": "The input grid updated with the nearest gate distances for each empty room.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 250",
      "grid[i][j] is -1, 0, or INF"
    ],
    "examples": [
      {
        "input": "grid = [[INF, -1, 0, INF], [INF, INF, INF, -1], [0, -1, INF, INF]]",
        "output": "[[3, -1, 0, 1], [2, 1, 2, -1], [0, -1, 1, 2]]",
        "explanation": "The cells of the grid are updated to represent the distance to the nearest gate."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use BFS to traverse the grid from the gates.",
      "Start from all gates simultaneously to ensure minimum distance."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Number of Digit One",
    "description": "Given a non-negative integer n, count the total number of digit 1s appearing in all non-negative integers less than or equal to n. For example, if n is 13, the numbers between 0 and 13 that contain the digit 1 are 1, 10, 11, 12, and 13. Thus, the total count of digit 1s in this range is 6 (1 appears once in '1', and it appears in '10' once, '11' twice, '12' once, and '13' once).",
    "topic": "Math",
    "subtopic": "Counting",
    "tags": [
      "Math",
      "Counting",
      "Digit Count"
    ],
    "input_format": "A single integer n (0 <= n <= 2 * 10^9).",
    "output_format": "An integer representing the total number of digit 1s from 0 to n.",
    "constraints": [
      "0 <= n <= 2 * 10^9"
    ],
    "examples": [
      {
        "input": "n = 13",
        "output": "6",
        "explanation": "The digit 1 appears in the numbers 1, 10, 11, 12, and 13. Therefore, the total count is 6."
      },
      {
        "input": "n = 0",
        "output": "0",
        "explanation": "There are no numbers less than or equal to 0, so the count of digit 1 is 0."
      },
      {
        "input": "n = 100",
        "output": "21",
        "explanation": "The digit 1 appears in 1, 10-19 (10 times), and 21. Therefore, the total count is 21."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how many times the digit 1 appears in each digit place.",
      "Break down the problem based on the position of the digit being considered.",
      "Use a mathematical approach rather than a brute force solution for large n."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Basic Calculator II",
    "description": "Implement a basic calculator to evaluate a simple expression string containing non-negative integers, '+', '-', '*', and '/' operators. The expression must be evaluated following the order of operations (PEMDAS), meaning that multiplication and division should be performed before addition and subtraction. Your task is to create a function that takes the expression as an input and returns its evaluated result as an integer.",
    "topic": "Math",
    "subtopic": "Expression Evaluation",
    "tags": [
      "Math",
      "Calculator",
      "String Parsing"
    ],
    "input_format": "A string expression `s` containing non-negative integers and operators.",
    "output_format": "An integer representing the evaluated result of the expression.",
    "constraints": [
      "1 <= s.length <= 3 * 10^4",
      "The input will not contain any parentheses."
    ],
    "examples": [
      {
        "input": "s = '3+5/2'",
        "output": "5",
        "explanation": "5 divided by 2 gives 2.5, rounded down is 2. Then 3 + 2 = 5."
      },
      {
        "input": "s = ' 3/2 '",
        "output": "1",
        "explanation": "Integer division of 3 by 2 is 1."
      },
      {
        "input": "s = '3+2*2'",
        "output": "7",
        "explanation": "2 multiplied by 2 is 4, then 3 + 4 = 7."
      },
      {
        "input": "s = ' 3-4/2 '",
        "output": "2",
        "explanation": "4 divided by 2 is 2, then 3 - 2 = 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to manage the numbers and operators for evaluation.",
      "Remember to handle integer division carefully."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Wiggle Sort",
    "description": "Given an integer array nums, rearrange the elements of the array in such a way that for every i, nums[2*i] < nums[2*i + 1] if 2*i + 1 < nums.length and nums[2*i] > nums[2*i - 1] if 2*i - 1 >= 0. This creates a 'wiggle' pattern in the array. You must do this in-place without using additional space for another array.",
    "topic": "Array",
    "subtopic": "Sorting and Rearranging",
    "tags": [
      "Array",
      "Sorting",
      "In-place"
    ],
    "input_format": "An integer array nums.",
    "output_format": "The rearranged array nums in a wiggle pattern.",
    "constraints": [
      "1 <= nums.length <= 1000",
      "0 <= nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [3, 5, 2, 1, 6, 4]",
        "output": "[1, 3, 2, 5, 4, 6]",
        "explanation": "One possible wiggle sort could be 1 < 3, 2 < 5, 4 < 6, fulfilling the wiggle condition."
      },
      {
        "input": "nums = [1, 3, 2, 2, 3, 1]",
        "output": "[1, 3, 1, 3, 2, 2]",
        "explanation": "This arrangement satisfies the wiggle condition where every second element is greater than its previous."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to sort the array first and then rearrange it.",
      "Consider using a two-pointer approach for in-place rearrangement."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "3Sum Smaller",
    "description": "Given an array of integers nums and a target integer target, you need to find the number of triplets (i, j, k) such that i < j < k and nums[i] + nums[j] + nums[k] < target. Implement a function that returns the total count of such triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Combination"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An integer representing the number of triplets that satisfy the condition.",
    "constraints": [
      "1 <= nums.length <= 3000",
      "-10^4 <= nums[i] <= 10^4",
      "-10^5 <= target <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-2, 0, 1, 3], target = 2",
        "output": "2",
        "explanation": "The valid triplets are (-2, 0, 1) and (-2, 0, 3) that sum up to less than 2."
      },
      {
        "input": "nums = [], target = 0",
        "output": "0",
        "explanation": "There are no triplets in an empty array."
      },
      {
        "input": "nums = [1, 1, -2, -5, -3, 3, 3, 5], target = -1",
        "output": "4",
        "explanation": "Valid triplets are (-5, -3, 1), (-5, 1, 1), (-3, 1, 1), and (-3, -2, 1)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the array first.",
      "Try using a two-pointer approach to reduce the time complexity."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Read N Characters Given read4 II - Call Multiple Times",
    "description": "You are given a file and have to implement a method to read N characters from it. The read4 API reads 4 characters at a time from the file into a buffer. The read4 API is already defined for you. Your task is to implement the read method that reads N characters from the file, taking into account that multiple calls to read may be necessary. You have to ensure that you handle the state of the buffer between multiple calls effectively.",
    "topic": "String",
    "subtopic": "File I/O",
    "tags": [
      "String",
      "Buffer",
      "File I/O"
    ],
    "input_format": "An integer N representing the number of characters to read.",
    "output_format": "An integer representing the actual number of characters read and a string containing the characters.",
    "constraints": [
      "1 <= N <= 1000",
      "The total number of characters in the file will not exceed 1000."
    ],
    "examples": [
      {
        "input": "N = 5",
        "output": {
          "charsRead": 5,
          "buffer": "Hello"
        },
        "explanation": "The method reads 5 characters and returns them in the buffer."
      },
      {
        "input": "N = 10",
        "output": {
          "charsRead": 10,
          "buffer": "HelloWorld"
        },
        "explanation": "The method reads 10 characters (the entire file) and returns them."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Maintain a buffer to keep track of characters read and manage state across multiple calls.",
      "Use a variable to store how many characters were read in the last read4 call."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Paint Fence",
    "description": "There is a fence with `n` posts, and each post can be painted with one of `k` colors. The goal is to paint the fence such that no more than two adjacent posts have the same color. Given the values of `n` and `k`, return the number of ways to paint the fence.",
    "topic": "Dynamic Programming",
    "subtopic": "Combinatorial Problem",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Combinatorial"
    ],
    "input_format": "Two integers n (the number of posts) and k (the number of colors).",
    "output_format": "An integer representing the total number of ways to paint the fence.",
    "constraints": [
      "1 <= n <= 100",
      "1 <= k <= 10"
    ],
    "examples": [
      {
        "input": "n = 3, k = 2",
        "output": "6",
        "explanation": "The possible ways to paint the fence are: RGB, RBG, GRB, GBR, BRG, BGR."
      },
      {
        "input": "n = 1, k = 1",
        "output": "1",
        "explanation": "There is only one way to paint one post with one color."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the relationship between the current post and the previous two posts.",
      "Think about using dynamic programming to build up solutions from smaller sub-problems."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Longest Substring with At Most Two Distinct Characters",
    "description": "Given a string s, return the length of the longest substring that contains at most two distinct characters.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "Substring"
    ],
    "input_format": "A string s consisting of uppercase and lowercase English letters.",
    "output_format": "An integer representing the length of the longest substring with at most two distinct characters.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of English letters."
    ],
    "examples": [
      {
        "input": "s = 'eceba'",
        "output": "3",
        "explanation": "The longest substring with at most two distinct characters is 'ece' which has length 3."
      },
      {
        "input": "s = 'ccaabbb'",
        "output": "5",
        "explanation": "The longest substring with at most two distinct characters is 'aabbb' which has length 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window approach.",
      "Maintain a count of distinct characters in the current window."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Zigzag Iterator",
    "description": "Given two integer arrays v1 and v2, create a zigzag iterator that alternately picks elements from each array. If one array runs out of elements, append the remaining elements from the other array. Return the resulting zigzag merged array.",
    "topic": "Array",
    "subtopic": "Merging Arrays",
    "tags": [
      "Array",
      "Iterator",
      "Merging"
    ],
    "input_format": "Two integer arrays v1 and v2.",
    "output_format": "An integer array representing the zigzag merged result.",
    "constraints": [
      "0 <= v1.length, v2.length <= 1000",
      "-10^9 <= v1[i], v2[j] <= 10^9"
    ],
    "examples": [
      {
        "input": "v1 = [1, 2], v2 = [3, 4, 5, 6]",
        "output": "[1, 3, 2, 4, 5, 6]",
        "explanation": "The result alternates between elements of v1 and v2. After exhausting v1, the remaining elements of v2 are appended."
      },
      {
        "input": "v1 = [1, 3], v2 = [2]",
        "output": "[1, 2, 3]",
        "explanation": "They alternate until v2 is exhausted, followed by the remaining elements from v1."
      },
      {
        "input": "v1 = [], v2 = [1, 2, 3]",
        "output": "[1, 2, 3]",
        "explanation": "Since v1 is empty, the result is just the elements from v2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a loop to alternate between the two arrays.",
      "Consider using a queue or two pointers for a clean implementation."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock IV",
    "description": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a special time to buy and a special time to sell the stock. You are allowed to make at most k transactions, and you want to determine the maximum profit that you can achieve. A transaction consists of buying and selling the stock once. Note that you cannot engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).",
    "topic": "Dynamic Programming",
    "subtopic": "Stock Problem",
    "tags": [
      "Dynamic Programming",
      "Stock",
      "Transaction"
    ],
    "input_format": "An integer array prices representing the price of the stock on each day and an integer k representing the maximum number of transactions allowed.",
    "output_format": "An integer representing the maximum profit that can be achieved.",
    "constraints": [
      "1 <= prices.length <= 100",
      "0 <= prices[i] <= 1000",
      "0 <= k <= 100"
    ],
    "examples": [
      {
        "input": "prices = [3,2,6,5,0,3], k = 2",
        "output": "7",
        "explanation": "Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6 - 2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3 - 0 = 3. Total profit = 4 + 3 = 7."
      },
      {
        "input": "prices = [1,2,3,4,5], k = 2",
        "output": "4",
        "explanation": "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5 - 1 = 4."
      },
      {
        "input": "prices = [7,6,4,3,1], k = 2",
        "output": "0",
        "explanation": "No transactions are done since the prices are in decreasing order."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using dynamic programming to solve this problem.",
      "Keep track of the profits made after each transaction."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Lowest Common Ancestor of a Binary Search Tree",
    "description": "Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the tree. According to the definition of LCA on a binary search tree: the LCA is defined between two nodes p and q as the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself).",
    "topic": "Tree",
    "subtopic": "Binary Search Tree",
    "tags": [
      "Tree",
      "Binary Search Tree",
      "Depth-First Search"
    ],
    "input_format": "The root of the binary search tree and two nodes p and q.",
    "output_format": "The lowest common ancestor of the nodes p and q.",
    "constraints": [
      "The number of nodes in the tree is in the range [2, 10^5].",
      "-10^9 <= Node.val <= 10^9",
      "All Node.val are unique.",
      "p and q are different and both values will exist in the BST."
    ],
    "examples": [
      {
        "input": "root = [6,2,8,0,4,7,9], p = 2, q = 8",
        "output": "6",
        "explanation": "The lowest common ancestor of nodes 2 and 8 is 6."
      },
      {
        "input": "root = [6,2,8,0,4,7,9], p = 2, q = 4",
        "output": "2",
        "explanation": "The lowest common ancestor of nodes 2 and 4 is 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the properties of a binary search tree.",
      "Use the relationship between nodes to guide your search."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Flip Game",
    "description": "You are given a string that consists of only two characters, '+' and '-'. Your task is to flip the signs of any '+' to '-' or '-' to '+' to achieve a new string result. You need to return all the possible states of the string after one flip operation at any position. The result should be in lexicographical order.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Backtracking"
    ],
    "input_format": "A string s consisting of characters '+' and '-'.",
    "output_format": "A list of distinct strings after flipping one character, sorted in lexicographical order.",
    "constraints": [
      "1 <= s.length <= 20",
      "s consists of only '+' and '-' characters."
    ],
    "examples": [
      {
        "input": "s = '+++-'",
        "output": "['----', '++--', '+++-', '----']",
        "explanation": "Flipping the first, second, third, or the last '+' gives us four unique results."
      },
      {
        "input": "s = '+-+'",
        "output": "['--+', '+++', '+--']",
        "explanation": "There are three unique results from flipping the characters."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider iterating through the string and flipping each character once.",
      "Use a set to ensure all results are unique before returning them."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Strobogrammatic Number",
    "description": "A strobogrammatic number is a number that appears the same when rotated 180 degrees. Given a string num, return true if it is a strobogrammatic number, or false otherwise.",
    "topic": "String",
    "subtopic": "Validation",
    "tags": [
      "String",
      "Validation",
      "Number"
    ],
    "input_format": "A string num representing a non-negative integer.",
    "output_format": "A boolean value indicating whether the number is strobogrammatic.",
    "constraints": [
      "The input string num consists of digits only.",
      "1 <= num.length <= 100"
    ],
    "examples": [
      {
        "input": "num = \"69\"",
        "output": "true",
        "explanation": "Rotating '69' 180 degrees produces '69', which is the same as the original."
      },
      {
        "input": "num = \"88\"",
        "output": "true",
        "explanation": "Rotating '88' 180 degrees produces '88', thus it is strobogrammatic."
      },
      {
        "input": "num = \"962\"",
        "output": "false",
        "explanation": "'962' does not produce a valid strobogrammatic number when rotated 180 degrees."
      },
      {
        "input": "num = \"10\"",
        "output": "false",
        "explanation": "'10' does not remain the same after a 180-degree rotation."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider which digits remain valid when flipped upside down.",
      "Create a mapping of strobogrammatic pairs to simplify validation."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Closest Binary Search Tree Value II",
    "description": "Given a binary search tree (BST) and a target value, find the k values in the BST that are closest to the target. Return these k values in any order. If there are ties, prefer the smaller values.",
    "topic": "Tree",
    "subtopic": "Binary Search Tree",
    "tags": [
      "Tree",
      "Binary Search Tree",
      "Searching"
    ],
    "input_format": "The root of the binary search tree and an integer k representing the number of closest values to find. The target value is a double.",
    "output_format": "A list of k integers representing the values in the BST that are closest to the target value.",
    "constraints": [
      "The number of nodes in the tree is in the range [1, 10^4].",
      "0 <= k <= the total number of nodes in the tree.",
      "-10^9 <= node.val <= 10^9",
      "-10^9 <= target <= 10^9"
    ],
    "examples": [
      {
        "input": "root = [4, 2, 5, 1, 3], k = 2, target = 3.714286",
        "output": "[4, 3]",
        "explanation": "The closest values to 3.714286 are 4 and 3."
      },
      {
        "input": "root = [1], k = 1, target = 3.428571",
        "output": "[1]",
        "explanation": "The only value in the BST is 1, which is the closest to 3.428571."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a BST property for efficient searching.",
      "Utilize a priority queue to help maintain the closest values.",
      "Inorder traversal could help in sorting the values."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Combinations",
    "description": "Given a collection of distinct integers, return all possible subsets (the power set). The solution set must not contain duplicate subsets. You may return the solution in any order.",
    "topic": "Backtracking",
    "subtopic": "Combination Generation",
    "tags": [
      "Backtracking",
      "Subsets",
      "Combination"
    ],
    "input_format": "An array of distinct integers nums with length n.",
    "output_format": "A list of lists containing all possible subsets of nums.",
    "constraints": [
      "0 <= nums.length <= 10",
      "-10 <= nums[i] <= 10"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]",
        "explanation": "The subsets include: empty set, single elements, pairs, and the full set."
      },
      {
        "input": "nums = [0]",
        "output": "[[], [0]]",
        "explanation": "The only subsets are empty set and the single element."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a backtracking approach to generate subsets.",
      "Think of each number being either included or excluded."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Peeking Iterator",
    "description": "Design an iterator that supports the peek operation on a given iterable. The iterator should allow not only the standard next() operation, but also a peek() operation that lets you see the next element without advancing the iterator. Implement the PeekingIterator class that has the following methods: \n\n- PeekingIterator(Iterator<int> nums): This initializes the iterator with the numbers from the provided iterator. \n- int next(): This returns the next element in the iterator and advances the iterator. \n- bool hasNext(): This returns true if there are still elements to iterate over. \n- int peek(): This returns the next element without advancing the iterator.",
    "topic": "Design",
    "subtopic": "Iterator",
    "tags": [
      "Design",
      "Iterator",
      "OOP"
    ],
    "input_format": "An iterator of integer values.",
    "output_format": "The output of the next(), hasNext(), and peek() methods as described.",
    "constraints": [
      "The input iterator will have at least one element.",
      "1 <= numbers.length <= 10^4"
    ],
    "examples": [
      {
        "input": "PeekingIterator iterator = new PeekingIterator(new Iterator<int>([1, 2, 3]));",
        "output": [
          "iterator.peek() -> 1",
          "iterator.next() -> 1",
          "iterator.peek() -> 2",
          "iterator.next() -> 2",
          "iterator.hasNext() -> true",
          "iterator.next() -> 3",
          "iterator.hasNext() -> false"
        ],
        "explanation": "The iterator allows you to peek at the first element, then get it, and peek the next element, proceeding through the iterator correctly."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how you can store the last retrieved item to support peek().",
      "Consider using a buffer to hold the next value."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Flatten 2D Vector",
    "description": "Design an iterator that will flatten a 2D vector. It should support the next() and hasNext() methods. Implement the Vector2D class that takes a 2D vector as input and allows sequential access to their elements, resembling a 1D vector. The 2D vector contains lists of integers, and it can have varying lengths.",
    "topic": "Design",
    "subtopic": "Iterator",
    "tags": [
      "Design",
      "Iterator",
      "Vector"
    ],
    "input_format": "A 2D vector represented as a list of lists of integers.",
    "output_format": "A boolean from hasNext() and an integer from next().",
    "constraints": [
      "0 <= 2D vector's length <= 1000",
      "0 <= each vector's length <= 1000",
      "-10^6 <= element <= 10^6"
    ],
    "examples": [
      {
        "input": "vector2D = [[1, 2], [3], [4]]; vector = new Vector2D(vector2D);",
        "output": "[True, 1, True, 2, True, 3, True, 4, False]",
        "explanation": "The iterator returns True, 1, 2, 3, then 4 sequentially, and finally returns False because there are no more elements."
      },
      {
        "input": "vector2D = [[]]; vector = new Vector2D(vector2D);",
        "output": "[False]",
        "explanation": "The iterator has no elements, hence hasNext() returns False."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "You can maintain an index for the current position in the vector.",
      "Consider handling empty sub-vectors."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Binary Tree Postorder Traversal",
    "description": "Given the root of a binary tree, return the postorder traversal of its nodes' values. Postorder traversal is defined as visiting the left subtree, then the right subtree, and finally the root node.",
    "topic": "Tree",
    "subtopic": "Binary Tree Traversal",
    "tags": [
      "Tree",
      "DFS",
      "Recursion"
    ],
    "input_format": "A binary tree node with the properties val, left, and right.",
    "output_format": "An array of integers representing the postorder traversal of the tree.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 10^4]",
      "-100 <= Node.val <= 100"
    ],
    "examples": [
      {
        "input": "root = [1,null,2,3]",
        "output": "[3,2,1]",
        "explanation": "In the given tree, the left subtree is null. The right subtree has the root 2 with left child 3. The postorder traversal is first visiting 3, then 2, and finally 1."
      },
      {
        "input": "root = []",
        "output": "[]",
        "explanation": "An empty tree results in an empty postorder traversal."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Think about using recursion for tree traversal.",
      "You may need to handle null nodes to avoid errors."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Department Top Three Salaries",
    "description": "Given a table of employee salaries from different departments, write a SQL query to find the top three salaries in each department. If there are fewer than three salaries in a department, return NULL for the remaining ranks. The result should be sorted by department and then by the salary rank.",
    "topic": "Database",
    "subtopic": "SQL",
    "tags": [
      "SQL",
      "Database",
      "Ranking"
    ],
    "input_format": "A table 'Employee' with columns 'DepartmentId' and 'Salary'.",
    "output_format": "A table with columns 'DepartmentId', 'Rank', and 'Salary'.",
    "constraints": [
      "The 'Employee' table may contain duplicates in the Salary column.",
      "1 <= DepartmentId <= 100",
      "0 <= Salary <= 10^6"
    ],
    "examples": [
      {
        "input": "Employee table:\n+-------------+--------+\n| DepartmentId| Salary |\n+-------------+--------+\n| 1           | 100    |\n| 1           | 200    |\n| 1           | 300    |\n| 2           | 100    |\n| 2           | 200    |\n| 2           | 200    |\n| 2           | 50     |\n+-------------+--------+",
        "output": "+-------------+------+--------+\n| DepartmentId| Rank | Salary |\n+-------------+------+--------+\n| 1           | 1    | 300    |\n| 1           | 2    | 200    |\n| 1           | 3    | 100    |\n| 2           | 1    | 200    |\n| 2           | 2    | 200    |\n| 2           | 3    | NULL   |\n+-------------+------+--------+",
        "explanation": "In department 1, the top salaries are 300, 200, and 100. In department 2, the top salaries are 200, 200, and NULL."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use the ROW_NUMBER() function to assign a rank to the salaries in each department.",
      "Be mindful of handling ties in salaries."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Unique Word Abbreviation",
    "description": "You are given an array of words. A unique abbreviation of a word is defined as a string that consists of the first letter of the word, followed by the number of characters in between the first and last letter, and finally the last letter. For example, the unique abbreviation of 'international' is 'i10l'. Your task is to determine if the unique abbreviation for each word in the array is unique. If two words have the same unique abbreviation, return false. Otherwise, return true if all unique abbreviations are unique.",
    "topic": "String",
    "subtopic": "Abbreviation",
    "tags": [
      "String",
      "Abbreviation",
      "Hash Map"
    ],
    "input_format": "An array of strings, words, containing distinct lowercase words.",
    "output_format": "A boolean value indicating whether all words have unique abbreviations.",
    "constraints": [
      "1 <= words.length <= 1000",
      "1 <= words[i].length <= 100"
    ],
    "examples": [
      {
        "input": "words = [\"snake\", \"snack\", \"silent\"]",
        "output": "true",
        "explanation": "Unique abbreviations: 's3e', 's3k', 's4t' are all distinct."
      },
      {
        "input": "words = [\"hello\", \"hallo\", \"leetcode\"]",
        "output": "false",
        "explanation": "Unique abbreviations: both 'h3o' for 'hello' and 'h3o' for 'hallo' are the same."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to store abbreviations and check for duplicates.",
      "Consider words with less than three letters separately."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Spiral Matrix II",
    "description": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n^2 in spiral order. The matrix should start inserting numbers from the top-left corner, moving right across the first row, down the last column, left across the last row, and then up the first column, continuing this pattern until the entire matrix is filled.",
    "topic": "Matrix",
    "subtopic": "Spiral Traversal",
    "tags": [
      "Matrix",
      "Spiral",
      "2D Array"
    ],
    "input_format": "An integer n (1 <= n <= 20) representing the size of the matrix.",
    "output_format": "An n x n matrix filled with integers from 1 to n^2 in spiral order.",
    "constraints": [
      "1 <= n <= 20"
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[[1, 2, 3], [8, 9, 4], [7, 6, 5]]",
        "explanation": "The spiral order for n=3 starts from 1 to 9 in a clockwise manner."
      },
      {
        "input": "n = 1",
        "output": "[[1]]",
        "explanation": "For a single element matrix, it just contains 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use four pointers to track the boundaries of the matrix.",
      "Iterate layer by layer, updating the pointers after filling each side."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Palindrome Permutation",
    "description": "Given a string, determine if it is possible to rearrange the characters of the string to form a palindrome. A palindrome is a word, phrase, or sequence that reads the same backward as forward. For instance, \"civic\" and \"ivicc\" are palindromes. The algorithm should handle case insensitivity and ignore non-alphanumeric characters.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Palindrome",
      "Counting"
    ],
    "input_format": "A single string s containing alphanumeric characters and spaces.",
    "output_format": "Return true if a permutation of the string could form a palindrome, otherwise return false.",
    "constraints": [
      "0 <= s.length <= 10^5"
    ],
    "examples": [
      {
        "input": "s = \"A man, a plan, a canal: Panama\"",
        "output": "true",
        "explanation": "Rearranging the characters can form the palindrome 'AmanaplanacanalPanama', which reads the same forward and backward."
      },
      {
        "input": "s = \"racecar\"",
        "output": "true",
        "explanation": "The string 'racecar' is already a palindrome."
      },
      {
        "input": "s = \"hello\"",
        "output": "false",
        "explanation": "The characters cannot be rearranged to form a palindrome."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Count the frequency of each character.",
      "A string can form a palindrome if at most one character has an odd count."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Flip Game II",
    "description": "You are playing a game using a string that consists of '+' and '-' signs. Your goal is to determine whether you can guarantee to win by flipping the signs of any two adjacent '+' signs to '-' signs. You can flip the signs any number of times. The player who cannot make a move loses. You need to output true if you can guarantee a win, otherwise false.",
    "topic": "Game Theory",
    "subtopic": "Combinatorial Game Theory",
    "tags": [
      "Game",
      "Dynamic Programming",
      "Backtracking"
    ],
    "input_format": "A string s consisting of '+' and '-' characters.",
    "output_format": "A boolean value indicating whether you can guarantee a win.",
    "constraints": [
      "1 <= s.length <= 20",
      "s[i] is either '+' or '-'"
    ],
    "examples": [
      {
        "input": "s = '++++'",
        "output": "true",
        "explanation": "You can flip the first two '+' to '-', resulting in '--++', making the next player's move impossible."
      },
      {
        "input": "s = '++--'",
        "output": "false",
        "explanation": "No matter how you flip, the opponent can always take a winning strategy."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the possible configurations and how they change after each move.",
      "Think about the winning conditions for both players."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Populating Next Right Pointers in Each Node",
    "description": "Given a binary tree where every node has a next pointer that points to its next right node, populate these next pointers for each node. If there is no next right node, the next pointer should be set to null. You may assume that it is a perfect binary tree (all leaves are at the same depth and every parent has two children).",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Pointer Manipulation"
    ],
    "input_format": "The root of a perfect binary tree.",
    "output_format": "The same binary tree with next pointers populated.",
    "constraints": [
      "The number of nodes in the tree is between 0 and 1000.",
      "Node.val is unique and is a positive integer."
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5,6,7]",
        "output": "[1->null, 2->3->null, 4->5->6->7->null]",
        "explanation": "Each node's next pointer should point to the next right node just like shown in the output."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a level order traversal approach.",
      "Once you connect one level, use that information to connect the next level."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Scramble String",
    "description": "Given two strings s1 and s2 of lengths n and m respectively, write a function that returns true if s2 is a scrambled string of s1. A string is considered scrambled if it can be derived from another string by performing a series of swaps among its substrings. Two substrings are considered scrambled if one is able to be rearranged into the other through swapping.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Recursion"
    ],
    "input_format": "Two strings s1 and s2 of lengths n and m respectively, where 1 <= n, m <= 30.",
    "output_format": "A boolean value indicating whether s2 is a scrambled string of s1.",
    "constraints": [
      "1 <= s1.length, s2.length <= 30",
      "s1 and s2 consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s1 = \"great\", s2 = \"rgeat\"",
        "output": "true",
        "explanation": "The string 'rgeat' is a scrambled version of 'great' as we can swap 'gr' with 'rg'."
      },
      {
        "input": "s1 = \"abcde\", s2 = \"caebd\"",
        "output": "false",
        "explanation": "'caebd' cannot be formed from 'abcde' through any series of swaps."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the character counts of both strings.",
      "Use recursion to explore possible swaps."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "N-Queens II",
    "description": "The N-Queens puzzle is the problem of placing N chess queens on an N\u00d7N chessboard so that no two queens threaten each other. Given an integer N, return the total number of distinct solutions for the N-Queens II problem.",
    "topic": "Backtracking",
    "subtopic": "N-Queens",
    "tags": [
      "Backtracking",
      "Recursion",
      "DFS"
    ],
    "input_format": "An integer N representing the size of the chessboard.",
    "output_format": "An integer representing the total number of distinct solutions.",
    "constraints": [
      "1 <= N <= 15"
    ],
    "examples": [
      {
        "input": "N = 1",
        "output": "1",
        "explanation": "With N = 1, there is only one way to place a single queen on the board."
      },
      {
        "input": "N = 4",
        "output": "2",
        "explanation": "The two distinct solutions for a 4x4 chessboard are: 1) Positioning at (0,1), (1,3), (2,0), (3,2) and 2) Positioning at (0,2), (1,0), (2,3), (3,1)."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use backtracking to explore possible placements of queens.",
      "Keep track of columns, diagonals to avoid threats.",
      "Consider using a recursive function to try placing queens."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Minimum Depth of Binary Tree",
    "description": "Given a binary tree, find its minimum depth, which is the number of nodes along the shortest path from the root node down to the nearest leaf node. A leaf is a node with no children.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Depth",
      "Minimum"
    ],
    "input_format": "A binary tree represented by its root node.",
    "output_format": "An integer representing the minimum depth of the binary tree.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 100].",
      "-1000 <= Node.val <= 1000"
    ],
    "examples": [
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "2",
        "explanation": "The minimum depth is the path 3 -> 9, with a total of 2 nodes."
      },
      {
        "input": "root = [2,null,3,null,4,null,5,null,6]",
        "output": "5",
        "explanation": "The minimum depth is the path 2 -> 3 -> 4 -> 5 -> 6, with a total of 5 nodes."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a breadth-first or depth-first search to traverse the tree."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Insertion Sort List",
    "description": "Given the head of a singly linked list, sort the linked list using insertion sort, and return the sorted list. The insertion sort algorithm is a simple sorting algorithm that builds a sorted array one element at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.",
    "topic": "Linked List",
    "subtopic": "Sorting",
    "tags": [
      "Linked List",
      "Sorting",
      "Algorithm"
    ],
    "input_format": "The head of a singly linked list.",
    "output_format": "The head of the sorted singly linked list.",
    "constraints": [
      "The number of nodes in the list is in the range [0, 5000].",
      "-5000 <= Node.val <= 5000."
    ],
    "examples": [
      {
        "input": "head = [4, 2, 1, 3]",
        "output": "[1, 2, 3, 4]",
        "explanation": "The sorted linked list is 1 -> 2 -> 3 -> 4."
      },
      {
        "input": "head = [-1, 5, 3, 4, 0]",
        "output": "[-1, 0, 3, 4, 5]",
        "explanation": "The sorted linked list is -1 -> 0 -> 3 -> 4 -> 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dummy node to simplify the insertion process.",
      "For each node, find the correct position in the sorted part of the list."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Factorial Trailing Zeroes",
    "description": "Given an integer n, return the number of trailing zeroes in n!. Trailing zeroes are created by the factors 10, which is the product of 2 and 5. Since there are usually more factors of 2 than 5 in n!, the problem reduces to counting the number of times 5 is a factor in the numbers from 1 to n.",
    "topic": "Math",
    "subtopic": "Factorial",
    "tags": [
      "Math",
      "Factorial",
      "Counting"
    ],
    "input_format": "An integer n (0 <= n <= 10^4).",
    "output_format": "An integer representing the number of trailing zeroes in n!.",
    "constraints": [
      "0 <= n <= 10^4"
    ],
    "examples": [
      {
        "input": "n = 5",
        "output": "1",
        "explanation": "5! = 120, which has one trailing zero."
      },
      {
        "input": "n = 10",
        "output": "2",
        "explanation": "10! = 3628800, which has two trailing zeroes."
      },
      {
        "input": "n = 25",
        "output": "6",
        "explanation": "25! has six trailing zeroes."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use integer division to count the multiples of 5, 25, 125, etc.",
      "The count of trailing zeroes is related to how many times 5 is a factor."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Word Pattern",
    "description": "Given a string pattern and a string s, find if s follows the same pattern. Here, a string follows a pattern if there is a unique mapping of characters to words. No two characters may map to the same word, and no word may map to different characters.",
    "topic": "String",
    "subtopic": "Pattern Matching",
    "tags": [
      "String",
      "Pattern",
      "Mapping"
    ],
    "input_format": "A string pattern and a string s, separated by a space.",
    "output_format": "A boolean value indicating whether s follows the given pattern.",
    "constraints": [
      "1 <= pattern.length <= 300",
      "1 <= s.length <= 300",
      "pattern and s contain only lowercase English letters and spaces."
    ],
    "examples": [
      {
        "input": "pattern = \"abba\", s = \"dog cat cat dog\"",
        "output": "true",
        "explanation": "The 'a' in pattern corresponds to 'dog' and 'b' corresponds to 'cat'. The mapping is consistent."
      },
      {
        "input": "pattern = \"abba\", s = \"dog cat cat fish\"",
        "output": "false",
        "explanation": "The mapping from 'a' to 'dog' and 'b' to 'cat' is valid, but 'fish' does not match the second 'a'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hashmap to store the character-to-word mappings.",
      "Check for one-to-one correspondence between pattern characters and words."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Remove Duplicates from Sorted List II",
    "description": "Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.",
    "topic": "Linked List",
    "subtopic": "Modification",
    "tags": [
      "Linked List",
      "Deduplication",
      "Sorting"
    ],
    "input_format": "The head of a sorted linked list, where each node contains an integer.",
    "output_format": "The head of the modified linked list with duplicates removed.",
    "constraints": [
      "The number of nodes in the list is in the range [0, 10^4].",
      "-10^5 <= Node.val <= 10^5"
    ],
    "examples": [
      {
        "input": "head = [1, 2, 3, 3, 4, 4, 5]",
        "output": "[1, 2, 5]",
        "explanation": "The numbers 3 and 4 are duplicates, so they are removed."
      },
      {
        "input": "head = [1, 1, 1, 2, 3]",
        "output": "[2, 3]",
        "explanation": "All instances of 1 are duplicates and removed."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a dummy node to simplify the edge cases.",
      "Track the previous node while iterating through the list."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Bitwise AND of Numbers Range",
    "description": "Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.",
    "topic": "Bit Manipulation",
    "subtopic": "Bitwise Operations",
    "tags": [
      "Bit Manipulation",
      "Bitwise AND",
      "Math"
    ],
    "input_format": "Two integers left and right.",
    "output_format": "An integer representing the bitwise AND of all numbers in the range [left, right].",
    "constraints": [
      "0 <= left <= right <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "left = 5, right = 7",
        "output": "4",
        "explanation": "The numbers in the range are 5, 6, and 7. The bitwise AND of 5 & 6 & 7 = 4."
      },
      {
        "input": "left = 0, right = 0",
        "output": "0",
        "explanation": "The only number in the range is 0, so the result is 0."
      },
      {
        "input": "left = 1, right = 2147483647",
        "output": "0",
        "explanation": "The range covers numbers with all bit positions, resulting in an AND of 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how the numbers change in binary format.",
      "Bits in higher positions remain constant if they are the same across the range."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Rank Scores",
    "description": "You are given a list of scores of students in a class. Your task is to rank the students based on their scores in descending order. Each rank should be unique, meaning if two or more students have the same score, they should receive the same rank. If a student comes next after a tie, they should be assigned the rank after the last tied rank. For example, if two students are ranked 1st, the next rank awarded should be 3rd.",
    "topic": "Sorting",
    "subtopic": "Ranking",
    "tags": [
      "Sorting",
      "Ranking",
      "Arrays"
    ],
    "input_format": "An array of integers scores where 1 <= scores.length <= 10^4 and 0 <= scores[i] <= 10^6.",
    "output_format": "An array of integers representing the ranks of students corresponding to their scores.",
    "constraints": [
      "1 <= scores.length <= 10^4",
      "0 <= scores[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "scores = [100, 90, 90, 80]",
        "output": "[1, 2, 2, 4]",
        "explanation": "The scores sorted in descending order are [100, 90, 90, 80]. The ranks are 1 (for 100), 2 (for 90), 2 (for the second 90), and 4 (for 80)."
      },
      {
        "input": "scores = [70, 80, 80, 90, 100, 100, 90]",
        "output": "[4, 3, 3, 2, 1, 1, 2]",
        "explanation": "The scores sorted in descending order are [100, 100, 90, 90, 80, 80, 70]. The ranks are 1 (for 100), 1 (for the second 100), 2 (for 90), 2 (for the second 90), 3 (for 80), 3 (for the second 80), and 4 (for 70)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a data structure to keep track of the scores and their ranks.",
      "Use sorting to arrange the scores in descending order before assigning ranks."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Gray Code",
    "description": "The Gray code is a binary numeral system where two successive values differ in only one bit. Given a non-negative integer n representing the number of bits, return the sequence of Gray code in the form of an array. The binary representation of the numbers should be formatted as non-negative integers.",
    "topic": "Bit Manipulation",
    "subtopic": "Gray Code Generation",
    "tags": [
      "Bit Manipulation",
      "Gray Code",
      "Mathematics"
    ],
    "input_format": "An integer n, the number of bits.",
    "output_format": "An array of integers representing the Gray code sequence.",
    "constraints": [
      "0 <= n <= 20"
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "[0, 1, 3, 2]",
        "explanation": "The 2-bit Gray code sequence is: 00 -> 01 -> 11 -> 10, which corresponds to the integers: 0, 1, 3, 2."
      },
      {
        "input": "n = 1",
        "output": "[0, 1]",
        "explanation": "The 1-bit Gray code sequence is: 0 -> 1, which corresponds to the integers: 0, 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "You can generate the Gray code by using the formula: Gray(i) = i ^ (i >> 1).",
      "Consider how the bits change with each step in the sequence."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Read N Characters Given Read4",
    "description": "The API `read4` reads up to 4 characters from a file and stores them in a buffer. Your task is to implement a function that reads 'n' characters from a file using the `read4` API. You may not assume the file will be an exact multiple of 4 characters long. This means that after reading some characters, you may need to read again to fulfill the 'n' character requirement.",
    "topic": "String Manipulation",
    "subtopic": "File Reading",
    "tags": [
      "String",
      "File IO",
      "Read4"
    ],
    "input_format": "An integer n, representing the number of characters to read.",
    "output_format": "A string containing the characters read from the file.",
    "constraints": [
      "0 <= n <= 1000",
      "The total number of characters in the file is at most 10^4."
    ],
    "examples": [
      {
        "input": "n = 5",
        "output": "abcde",
        "explanation": "The function reads 5 characters 'abcde' from the file using the `read4` API."
      },
      {
        "input": "n = 3",
        "output": "abc",
        "explanation": "The function reads 3 characters 'abc' from the file."
      },
      {
        "input": "n = 0",
        "output": "",
        "explanation": "If n is 0, the function should return an empty string."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a loop to read until you have read 'n' characters.",
      "Pay attention to the number of characters read by `read4`."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Valid Number",
    "description": "Implement a function that determines if a given string can be interpreted as a valid decimal number. A valid number can be represented in the following formats: integers, decimals, or scientific notation. Note that the input may contain leading and trailing spaces.",
    "topic": "String",
    "subtopic": "Parsing",
    "tags": [
      "String",
      "Parsing",
      "Validation"
    ],
    "input_format": "A string s, representing the number to validate.",
    "output_format": "A boolean value indicating whether the string is a valid number.",
    "constraints": [
      "0 <= s.length <= 20",
      "s consists of only the following characters: digits, '+', '-', '.', 'e', and ' '."
    ],
    "examples": [
      {
        "input": "s = \"0.1\"",
        "output": "true",
        "explanation": "The string '0.1' is a valid decimal number."
      },
      {
        "input": "s = \"abc\"",
        "output": "false",
        "explanation": "The string 'abc' does not represent a valid number."
      },
      {
        "input": "s = \"1 a\"",
        "output": "false",
        "explanation": "The presence of a space followed by a character makes '1 a' an invalid input."
      },
      {
        "input": "s = \"3.14e10\"",
        "output": "true",
        "explanation": "The scientific notation '3.14e10' is a valid representation of a number."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a state machine to validate the number formats.",
      "Pay special attention to the positions of the decimal point and 'e'."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Find Minimum in Rotated Sorted Array II",
    "description": "Given a potentially duplicate-sorted array, find the minimum element in it after it has been rotated. The original sorted array is in ascending order, but it may be rotated at an unknown pivot. Your task is to find the minimum value in the array. Note that duplicate values are allowed in the array.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Minimum"
    ],
    "input_format": "An array of integers, nums, where -10^4 <= nums[i] <= 10^4.",
    "output_format": "An integer representing the minimum value in the rotated array.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "nums may contain duplicates."
    ],
    "examples": [
      {
        "input": "nums = [1, 3, 5]",
        "output": "1",
        "explanation": "The array is rotated at pivot 0, and the minimum element is 1."
      },
      {
        "input": "nums = [2, 2, 2, 0, 1]",
        "output": "0",
        "explanation": "The minimum element is 0 after the duplicates."
      },
      {
        "input": "nums = [1, 2, 2, 3, 1]",
        "output": "1",
        "explanation": "The array has duplicates and the minimum is 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use binary search, but handle duplicates carefully.",
      "Compare mid with end to decide which part to search next.",
      "Consider edge cases with duplicate elements."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Find the Celebrity",
    "description": "In a party of n people, there is exactly one celebrity if he/she exists. A celebrity is defined as someone who is known by everyone but does not know anyone. Given a 2D array knows, where knows[i][j] = 1 if person i knows person j, otherwise knows[i][j] = 0, write a function to identify the celebrity. If there's no celebrity, return -1.",
    "topic": "Graph",
    "subtopic": "Identification",
    "tags": [
      "Graph",
      "Search",
      "Celebrity"
    ],
    "input_format": "A 2D array knows of size n x n.",
    "output_format": "An integer representing the index of the celebrity or -1 if there is no celebrity.",
    "constraints": [
      "2 <= n <= 100",
      "knows[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "knows = [[0, 1, 0], [0, 0, 1], [0, 0, 0]]",
        "output": "2",
        "explanation": "Person 2 is the celebrity as everyone knows person 2 and person 2 knows no one."
      },
      {
        "input": "knows = [[0, 0], [0, 0]]",
        "output": "-1",
        "explanation": "There is no celebrity as there are no known relationships."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "A candidate for celebrity must be known by others but should not know anyone themselves.",
      "Use a two-pointer approach to find the potential celebrity.",
      "Validate the candidate by checking if everyone knows the candidate and the candidate knows no one."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Paint House",
    "description": "You are painting a row of houses in three different colors: red, blue, and green. Each house can be painted with one of the three colors, but no two adjacent houses can be painted with the same color. Given an array costs where costs[i][0], costs[i][1], and costs[i][2] represent the cost of painting the i-th house red, blue, and green respectively, return the minimum cost to paint all the houses.",
    "topic": "Dynamic Programming",
    "subtopic": "1D DP",
    "tags": [
      "Dynamic Programming",
      "Min Cost",
      "Array"
    ],
    "input_format": "A 2D array costs of shape n x 3, where n is the number of houses.",
    "output_format": "An integer representing the minimum cost to paint all the houses.",
    "constraints": [
      "1 <= costs.length <= 100",
      "costs[i].length == 3",
      "0 <= costs[i][j] <= 20"
    ],
    "examples": [
      {
        "input": "costs = [[17, 2, 17], [16, 16, 5], [14, 3, 19]]",
        "output": "10",
        "explanation": "The optimal way is to paint the first house blue (cost 2), the second house green (cost 5), and the third house blue (cost 3). The total cost is 2 + 5 + 3 = 10."
      },
      {
        "input": "costs = [[7, 6, 2]]",
        "output": "2",
        "explanation": "Only one house, so choose the minimum cost which is 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about the relationship between the previous house and the current house.",
      "You can use a dynamic programming approach to keep track of the minimum cost."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Binary Tree Level Order Traversal II",
    "description": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).",
    "topic": "Tree",
    "subtopic": "Binary Tree Traversal",
    "tags": [
      "Tree",
      "Binary Tree",
      "BFS",
      "Traversal"
    ],
    "input_format": "A binary tree represented by its root node.",
    "output_format": "A list of lists of integers, where each list contains the values of the nodes at that level, starting from the lowest level.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 2000].",
      "-100 <= Node.val <= 100"
    ],
    "examples": [
      {
        "input": "root = [3,9,20,null,null,15,7]",
        "output": "[[15,7],[9,20],[3]]",
        "explanation": "The bottom-up level order traversal of the given tree is: level 2: [15, 7], level 1: [9, 20], and level 0: [3]."
      },
      {
        "input": "root = [1]",
        "output": "[[1]]",
        "explanation": "The binary tree has only one node, so the bottom-up level order traversal is simply [1]."
      },
      {
        "input": "root = []",
        "output": "[]",
        "explanation": "An empty tree results in an empty traversal output."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a queue to perform level order traversal.",
      "Reverse the order of the levels after traversal."
    ],
    "company": "Google"
  },
  {
    "question_id": "",
    "title": "Range Sum Query - Mutable",
    "description": "Given an array of integers and a list of update queries, you are required to answer range sum queries. Implement a data structure that allows you to efficiently perform the following operations: update an element and compute the sum of elements in a given range. The operations are defined as follows: \n\n1. update(index, value): Update the element at index to value. \n2. sumRange(left, right): Return the sum of elements from index left to index right (inclusive).",
    "topic": "Data Structure",
    "subtopic": "Segment Tree",
    "tags": [
      "Array",
      "Segment Tree",
      "Sum Query"
    ],
    "input_format": "An integer array nums followed by a list of updates and sum queries.",
    "output_format": "A list of integers representing the result of each sumRange query.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5",
      "The number of update and sumRange queries does not exceed 10^4."
    ],
    "examples": [
      {
        "input": "nums = [1, 3, 5], queries = [['sumRange', 0, 2], ['update', 1, 2], ['sumRange', 0, 2]]",
        "output": "[9, 8]",
        "explanation": "Initially, the range sum from index 0 to 2 is 1 + 3 + 5 = 9. After updating index 1 to 2, the array becomes [1, 2, 5]. The new range sum from index 0 to 2 is 1 + 2 + 5 = 8."
      },
      {
        "input": "nums = [7, 1, 3], queries = [['sumRange', 0, 2], ['update', 0, 4], ['sumRange', 0, 2]]",
        "output": "[11, 10]",
        "explanation": "The initial range sum from index 0 to 2 is 7 + 1 + 3 = 11. After updating index 0 to 4, the array becomes [4, 1, 3]. The new range sum from index 0 to 2 is 4 + 1 + 3 = 8."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a Segment Tree or a Fenwick Tree for efficient updates and sum calculations.",
      "Keep track of the structure to handle updates without recalculating sums for the entire array."
    ],
    "company": "Google"
  }
]