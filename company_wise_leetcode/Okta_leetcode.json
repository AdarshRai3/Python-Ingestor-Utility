[
  {
    "question_id": "",
    "title": "Find Median from Data Stream",
    "description": "Design a data structure that supports the following two operations: adding a number to the stream and finding the median of all numbers added so far. Implement the `MedianFinder` class: \n\n- `void addNum(int num)`: Stores the integer num from the data stream. \n- `double findMedian()`: Returns the median of all elements so far. The median is the middle value when the list is sorted. If there is an even number of elements, return the average of the two middle values.",
    "topic": "Design",
    "subtopic": "Data Structure",
    "tags": [
      "Heap",
      "Binary Search",
      "Design"
    ],
    "input_format": "A sequence of integers representing the numbers to be added to the data stream.",
    "output_format": "A double representing the median of the numbers added so far.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "addNum(1); addNum(2); findMedian();",
        "output": "1.5",
        "explanation": "The numbers added are [1, 2]. The median is (1 + 2) / 2 = 1.5."
      },
      {
        "input": "addNum(3); findMedian();",
        "output": "2.0",
        "explanation": "The numbers added are [1, 2, 3]. The median is 2."
      },
      {
        "input": "addNum(4); addNum(5); findMedian();",
        "output": "3.0",
        "explanation": "The numbers added are [1, 2, 3, 4, 5]. The median is 3."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a data structure to maintain the order of elements.",
      "Two heaps can be used to efficiently find the median."
    ],
    "company": "Okta"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. The input is an array of intervals where each interval is represented as a pair of integers [start, end]. The merged intervals should be returned as an array of pairs where the start of an interval is less than or equal to its end.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Intervals",
      "Merging"
    ],
    "input_format": "An array of intervals, where each interval is a list of two integers [start, end].",
    "output_format": "An array of merged intervals, where each interval is represented as [start, end].",
    "constraints": [
      "0 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "-10^4 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "Intervals [1,3] and [2,6] overlap and can be merged into [1,6]."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "Intervals [1,4] and [4,5] overlap at point 4 and can be merged into [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on the starting point.",
      "Iterate through the sorted intervals and merge when necessary."
    ],
    "company": "Okta"
  },
  {
    "question_id": "",
    "title": "Daily Temperatures",
    "description": "Given an array of integers representing daily temperatures, return an array where each element is the number of days you have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "input_format": "An array of integers temperatures representing the daily temperatures.",
    "output_format": "An array of integers where each element represents the number of days until a warmer temperature.",
    "constraints": [
      "1 <= temperatures.length <= 30000",
      "30 <= temperatures[i] <= 100"
    ],
    "examples": [
      {
        "input": "temperatures = [73, 74, 75, 71, 69, 72, 76, 73]",
        "output": "[1, 1, 4, 2, 1, 1, 0, 0]",
        "explanation": "On day 0, the next warmer temperature is on day 1 (74). On day 1, that temperature is on day 2 (75), and so on."
      },
      {
        "input": "temperatures = [30, 40, 50, 60]",
        "output": "[1, 1, 1, 0]",
        "explanation": "Each day has a warmer day following it, except for the last day."
      },
      {
        "input": "temperatures = [100, 100, 100]",
        "output": "[0, 0, 0]",
        "explanation": "There are no warmer days ahead for any of the temperatures."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of indices of the temperatures.",
      "Pop the stack when you find a warmer temperature."
    ],
    "company": "Okta"
  },
  {
    "question_id": "",
    "title": "Insert Delete GetRandom O(1)",
    "description": "Design a data structure that supports the following operations: insert, delete, and getRandom. Your implementation should allow for each operation to run in average O(1) time complexity. Note that you may not use any built-in data structure (i.e., Arrays or Sets) that has special behavior or performance characteristics.",
    "topic": "Design",
    "subtopic": "Data Structures",
    "tags": [
      "Design",
      "Random",
      "Data Structures"
    ],
    "input_format": "You will be given three operations on your data structure: 'insert(val)', 'remove(val)', and 'getRandom()'. Each insert and remove operation is guaranteed to be valid.",
    "output_format": "The output of the 'getRandom()' function should return a random element from the current set of elements in the data structure.",
    "constraints": [
      "1 <= val <= 10^6",
      "The insert and remove operations will only be called with values that exist in the structure."
    ],
    "examples": [
      {
        "input": "Insert 1, Insert 2, Insert 3, Remove 2, GetRandom()",
        "output": "1 or 3",
        "explanation": "After inserting 1, 2, and 3, and removing 2, either 1 or 3 can be randomly selected."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hash map and an array to balance your operations.",
      "Make sure to handle duplicates carefully."
    ],
    "company": "Okta"
  },
  {
    "question_id": "",
    "title": "Strings Differ by One Character",
    "description": "Given two strings, `s1` and `s2`, determine if they differ by exactly one character. The difference can be in either the letters themselves or the length of the strings where one string can have one additional or one fewer character than the other. You should return `true` if the strings differ by exactly one character, and `false` otherwise.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Comparison",
      "Boolean"
    ],
    "input_format": "Two strings s1 and s2, where 1 <= |s1|, |s2| <= 100.",
    "output_format": "A boolean value indicating if the strings differ by exactly one character.",
    "constraints": [
      "1 <= |s1| <= 100",
      "1 <= |s2| <= 100"
    ],
    "examples": [
      {
        "input": "s1 = 'abc', s2 = 'ab'",
        "output": "true",
        "explanation": "The second string is 'ab', which is one character shorter than 'abc'."
      },
      {
        "input": "s1 = 'abc', s2 = 'abd'",
        "output": "true",
        "explanation": "The two strings differ by the last character, 'c' vs 'd'."
      },
      {
        "input": "s1 = 'abc', s2 = 'xyz'",
        "output": "false",
        "explanation": "The two strings differ by more than one character."
      },
      {
        "input": "s1 = 'a', s2 = 'a'",
        "output": "false",
        "explanation": "Both strings are identical; they do not differ."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the lengths of both strings.",
      "Check character by character for differences."
    ],
    "company": "Okta"
  },
  {
    "question_id": "",
    "title": "Koko Eating Bananas",
    "description": "Koko loves bananas. Each day she chooses a pile of bananas to eat, which can be represented as an array of integers. Koko can eat 'k' bananas per hour, but she wants to finish all the bananas in the minimum number of hours. Given an array representing the piles of bananas, determine the minimum integer 'k' such that Koko can eat all the bananas within 'h' hours.",
    "topic": "Binary Search",
    "subtopic": "Search Algorithms",
    "tags": [
      "Binary Search",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of integers piles representing the piles of bananas, and an integer h representing the number of hours.",
    "output_format": "An integer representing the minimum k such that Koko can finish eating all the bananas within h hours.",
    "constraints": [
      "1 <= piles.length <= 10^4",
      "1 <= piles[i] <= 10^9",
      "1 <= h <= 10^9"
    ],
    "examples": [
      {
        "input": "[3, 6, 7, 11], 8",
        "output": "4",
        "explanation": "If k = 4, Koko can eat piles as follows: 4 bananas in the first hour (3 remaining), 4 in the second hour (2 remaining), 4 in the third hour (0 remaining for the first pile), 4 in the fourth hour (6 remaining, 4 for the second pile and 2 for the third pile). In total, she needs only 4 hours to eat all the bananas."
      },
      {
        "input": "[30, 11, 23, 4, 20], 5",
        "output": "30",
        "explanation": "If k = 30, Koko can eat all piles within 5 hours since she can finish each pile by the second hour."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to narrow down the possible values of k.",
      "Remember the time taken for each pile is ceil(pile/k)."
    ],
    "company": "Okta"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache. It should support the following operations: get and put. The get operation should return the value of the key if the key exists in the cache. Otherwise, it should return -1. The put operation should update or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Design",
    "subtopic": "Cache",
    "tags": [
      "Design",
      "Cache",
      "Data Structure"
    ],
    "input_format": "The constructor of the cache takes an integer capacity as an argument. The get operation is called with a key, and the put operation takes a key and value as arguments.",
    "output_format": "The output of the get operation should be an integer, either the value associated with the key or -1 if the key is not found.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key <= 10^4",
      "0 <= value <= 10^4",
      "Assume that the operations get and put are called at most 10^4 times."
    ],
    "examples": [
      {
        "input": "LRUCache cache = new LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1,-1,3,4]",
        "explanation": "The cache is filled to capacity. After adding the third item (3), the least recently used item (2) is removed. Thus, get(1) returns 1, get(2) returns -1, get(3) returns 3, and get(4) returns 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hashmap to store keys and values for O(1) retrieval.",
      "Maintain a doubly-linked list to keep track of the order of usage."
    ],
    "company": "Okta"
  }
]