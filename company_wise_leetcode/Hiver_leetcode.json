[
  {
    "question_id": "",
    "title": "Regular Expression Matching",
    "description": "Implement a simple regular expression matching with support for '.' and '*'. The '.' character matches any single character, while the '*' character matches zero or more of the preceding element. The matching should cover the entire input string, not partial matches.",
    "topic": "String",
    "subtopic": "Regular Expressions",
    "tags": [
      "String",
      "Dynamic Programming",
      "Backtracking"
    ],
    "input_format": "A string s representing the input text, and a string p representing the pattern.",
    "output_format": "A boolean value indicating whether the input text matches the pattern completely.",
    "constraints": [
      "1 <= s.length <= 20",
      "1 <= p.length <= 20"
    ],
    "examples": [
      {
        "input": "s = \"aa\", p = \"a\"",
        "output": "false",
        "explanation": "The pattern 'a' does not match the string 'aa' because 'a' doesn't repeat."
      },
      {
        "input": "s = \"aa\", p = \"a*\"",
        "output": "true",
        "explanation": "The pattern 'a*' matches the string 'aa' because '*' means zero or more of 'a'."
      },
      {
        "input": "s = \"ab\", p = \".*\"",
        "output": "true",
        "explanation": "The pattern '.*' matches any string, including 'ab'."
      },
      {
        "input": "s = \"aab\", p = \"c*a*b\"",
        "output": "true",
        "explanation": "The pattern 'c*a*b' matches 'aab' by treating 'c*' as an empty string."
      },
      {
        "input": "s = \"mississippi\", p = \"mis*is*p*.\"",
        "output": "false",
        "explanation": "The pattern 'mis*is*p*.' does not match the string 'mississippi'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using recursion or dynamic programming.",
      "Handle '*' in the pattern carefully as it can represent multiple characters."
    ],
    "company": "Hiver"
  },
  {
    "question_id": "",
    "title": "Maximum Product Subarray",
    "description": "Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product. Return the largest product you can get.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Product"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum product of the contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "-10 <= nums[i] <= 10",
      "The product of any prefix of nums is guaranteed to fit in 32-bit integer."
    ],
    "examples": [
      {
        "input": "nums = [2, 3, -2, 4]",
        "output": "6",
        "explanation": "The subarray [2, 3] has the largest product 6."
      },
      {
        "input": "nums = [-2, 0, -1]",
        "output": "0",
        "explanation": "The subarray [0] has the largest product 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the effect of negative numbers on the product.",
      "Maintain the maximum and minimum product ending at the current position."
    ],
    "company": "Hiver"
  }
]