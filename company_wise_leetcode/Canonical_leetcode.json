[
  {
    "question_id": "",
    "title": "Divide a String Into Groups of Size k",
    "description": "Given a string s and an integer k, divide the string into groups of size k. If the last group has fewer than k characters, it should still be included in the result. Return a list of the groups created from the string. The groups should preserve the order of characters from the original string.",
    "topic": "String",
    "subtopic": "String Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Group"
    ],
    "input_format": "A string s and an integer k.",
    "output_format": "A list of strings representing the groups of size k.",
    "constraints": [
      "1 <= s.length <= 1000",
      "1 <= k <= s.length"
    ],
    "examples": [
      {
        "input": "s = 'abcdefg', k = 2",
        "output": "['ab', 'cd', 'ef', 'g']",
        "explanation": "The string is divided into groups of size 2, resulting in 'ab', 'cd', 'ef', and the last group 'g' which is less than k."
      },
      {
        "input": "s = 'abc', k = 1",
        "output": "['a', 'b', 'c']",
        "explanation": "Each character is its own group since k is 1."
      },
      {
        "input": "s = 'abcdefghij', k = 3",
        "output": "['abc', 'def', 'ghi', 'j']",
        "explanation": "The string is divided into groups of size 3, resulting in 'abc', 'def', 'ghi', and the last group 'j' which is less than k."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use string slicing to create groups.",
      "Iterate over the string in increments of k."
    ],
    "company": "Canonical"
  },
  {
    "question_id": "",
    "title": "Evaluate Reverse Polish Notation",
    "description": "You are given an array of strings tokens that represents an arithmetic expression in Reverse Polish Notation (RPN). Evaluate the expression and return an integer representing the result. Valid operators are '+', '-', '*', and '/'. Each operator is guaranteed to have two operands. When performing division, truncate towards zero.",
    "topic": "Stack",
    "subtopic": "Expression Evaluation",
    "tags": [
      "Stack",
      "Expression",
      "Math"
    ],
    "input_format": "An array of strings tokens representing the RPN expression.",
    "output_format": "An integer representing the result of the evaluated expression.",
    "constraints": [
      "1 <= tokens.length <= 2000",
      "tokens[i] is either an integer in the range [-1000, 1000] or one of the four operators: '+', '-', '*', '/'"
    ],
    "examples": [
      {
        "input": "tokens = [\"2\", \"1\", \"+\", \"3\", \"*\"]",
        "output": "9",
        "explanation": "The expression is ((2 + 1) * 3) = 9."
      },
      {
        "input": "tokens = [\"4\", \"13\", \"5\", \"/\", \"+\"]",
        "output": "6",
        "explanation": "The expression is (4 + (13 / 5)) = 6."
      },
      {
        "input": "tokens = [\"10\", \"6\", \"9\", \"3\", \"/\", \"-11\", \"*\", \"+\", \"17\", \"+\", \"5\", \"/\"]",
        "output": "1",
        "explanation": "Following the RPN rules, the evaluated result is 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to store operands.",
      "Pop the top two elements for an operation.",
      "Handle division carefully to truncate towards zero."
    ],
    "company": "Canonical"
  },
  {
    "question_id": "",
    "title": "Merge Sorted Array",
    "description": "You are given two sorted integer arrays nums1 and nums2, with num1 containing m elements and nums2 containing n elements. Your task is to merge nums2 into nums1 as one sorted array. The merge operation must be performed in-place and should not return anything. You may assume that nums1 has enough space (size that is equal to m + n) to hold additional elements from nums2.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "In-place"
    ],
    "input_format": "Two sorted integer arrays nums1 and nums2. The first array nums1 has a size of m + n, where the first m elements denote a sorted array and the last n elements are 0, allowing for the append of elements from nums2.",
    "output_format": "The merged array should be in nums1 in a sorted manner.",
    "constraints": [
      "0 <= m, n <= 200",
      "1 <= m + n <= 200",
      "-10^9 <= nums1[i], nums2[j] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3",
        "output": "[1,2,2,3,5,6]",
        "explanation": "After merging, nums1 becomes [1,2,2,3,5,6]."
      },
      {
        "input": "nums1 = [1], m = 1, nums2 = [], n = 0",
        "output": "[1]",
        "explanation": "Since nums2 is empty, nums1 remains unchanged."
      },
      {
        "input": "nums1 = [0], m = 0, nums2 = [1], n = 1",
        "output": "[1]",
        "explanation": "We copy the elements from nums2 to nums1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using two pointers for merging the arrays.",
      "Start merging from the end of the nums1 array."
    ],
    "company": "Canonical"
  }
]