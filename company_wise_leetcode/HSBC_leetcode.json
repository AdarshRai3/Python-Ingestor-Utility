[
  {
    "question_id": "",
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the lines are at (i, 0) and (i, ai). Find two lines, which together with the x-axis forms a container, such that the container contains the most water. Note that you may not slant the container.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Greedy"
    ],
    "input_format": "An array of integers height where height[i] represents the height of the line at position i.",
    "output_format": "An integer representing the maximum area of water that can be contained between two lines.",
    "constraints": [
      "2 <= height.length <= 10^5",
      "0 <= height[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "height = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The lines at indices 1 and 8 form the container with the largest area: min(8, 7) * (8 - 1) = 49."
      },
      {
        "input": "height = [1,1]",
        "output": "1",
        "explanation": "The only container formed by lines at indices 0 and 1 has an area of 1: min(1, 1) * (1 - 0) = 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use two pointers to find the optimal container.",
      "Keep track of the maximum area found so far."
    ],
    "company": "HSBC"
  },
  {
    "question_id": "",
    "title": "Pascal's Triangle",
    "description": "Given an integer n, return the first n rows of Pascal's triangle. In Pascal's triangle, each number is the sum of the two numbers directly above it. The first row is considered to be row 0.",
    "topic": "Dynamic Programming",
    "subtopic": "Combination",
    "tags": [
      "Dynamic Programming",
      "Combinatorics",
      "Triangle"
    ],
    "input_format": "An integer n (0 <= n <= 30), representing the number of rows to generate from Pascal's triangle.",
    "output_format": "A list of lists, where each inner list represents a row of Pascal's triangle.",
    "constraints": [
      "0 <= n <= 30"
    ],
    "examples": [
      {
        "input": "n = 5",
        "output": "[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]",
        "explanation": "The first 5 rows of Pascal's triangle are given, starting from row 0."
      },
      {
        "input": "n = 0",
        "output": "[[]]",
        "explanation": "For n = 0, no rows are needed, hence an empty list."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how each element is formed from the previous row.",
      "Use a nested loop to build each row based on the previous one."
    ],
    "company": "HSBC"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array where each element is the price of a stock on a given day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "Array Manipulation",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices where prices[i] is the price of a given stock on the ith day.",
    "output_format": "An integer representing the maximum profit you can achieve.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). The profit is 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit is 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price seen so far.",
      "Calculate the potential profit at each price point."
    ],
    "company": "HSBC"
  }
]