[
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "target is within the range of -10^9 to 10^9.",
      "Assume that there is exactly one solution."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] == 2 + 7 == 9. Therefore, the indices are 0 and 1."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] == 2 + 4 == 6. Therefore, the indices are 1 and 2."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] == 3 + 3 == 6. Therefore, the indices are 0 and 1."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to use a hash map to store the indices of elements."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Change Null Values in a Table to the Previous Value",
    "description": "You are given a table 'Data' which has a column 'Value' that can contain integers and null values. Your task is to replace each null value in the 'Value' column with the last non-null value that appeared before it. If there is no non-null value before a null, it should remain as null. Write a SQL query to achieve this transformation.",
    "topic": "SQL",
    "subtopic": "Window Functions",
    "tags": [
      "SQL",
      "Window Functions",
      "Data Manipulation"
    ],
    "input_format": "A table named 'Data' with a column 'Value' of type INT.",
    "output_format": "A table with the same structure as 'Data', where null values are replaced as specified.",
    "constraints": [
      "The number of rows in the table will not exceed 2 * 10^4.",
      "The values in the 'Value' column may range from -10^5 to 10^5."
    ],
    "examples": [
      {
        "input": "SELECT * FROM Data;",
        "output": "Value\n1\nnull\n2\nnull\nnull\n3\n",
        "explanation": "The first null is replaced with 1, the second null with 2, and the third null with 3."
      },
      {
        "input": "SELECT * FROM Data;",
        "output": "Value\nnull\nnull\nnull\n",
        "explanation": "All values are null and remain null since there are no non-null values before them."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a window function to access previous rows.",
      "Use COALESCE to handle nulls."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Merge k Sorted Lists",
    "description": "You are given an array of k linked lists, each list is sorted in ascending order. Merge all the linked lists into one sorted linked list and return it. The linked list should be made by splicing together the nodes of the input lists.",
    "topic": "Linked List",
    "subtopic": "Merging Lists",
    "tags": [
      "Linked List",
      "Merge",
      "Sorting"
    ],
    "input_format": "An array of k linked lists, where each linked list is connected through a ListNode structure.",
    "output_format": "A single linked list that is the result of merging all the input lists, sorted in ascending order.",
    "constraints": [
      "0 <= k <= 10^4",
      "0 <= ListNode.val <= 10^4",
      "The total number of nodes across all linked lists is at most 10^4."
    ],
    "examples": [
      {
        "input": "[1->4->5, 1->3->4, 2->6]",
        "output": "1->1->2->3->4->4->5->6",
        "explanation": "The merged linked list is created by combining nodes from the three lists in sorted order."
      },
      {
        "input": "[]",
        "output": "",
        "explanation": "An empty input returns an empty linked list."
      },
      {
        "input": "[null, 2->3->4]",
        "output": "2->3->4",
        "explanation": "Merging with a null list should simply return the non-null list."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a priority queue to facilitate merging the lists.",
      "Keep track of the next node to process in each list."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if the brackets are closed in the correct order. Every opening bracket must have a corresponding closing bracket of the same type.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Validation"
    ],
    "input_format": "A string s consisting of characters '(', ')', '{', '}', '[' and ']'.",
    "output_format": "A boolean value indicating whether the input string is valid.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The string contains a pair of valid parentheses."
      },
      {
        "input": "s = '()[]{}'",
        "output": "true",
        "explanation": "All pairs of brackets are valid and correctly nested."
      },
      {
        "input": "s = '(]')",
        "output": "false",
        "explanation": "The brackets are not closed in the correct order."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The brackets are not properly nested."
      },
      {
        "input": "s = '{[]}'",
        "output": "true",
        "explanation": "The brackets are valid and correctly nested."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of opening brackets.",
      "Check if closing brackets match the most recent opening bracket."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Palindrome Number",
    "description": "Given an integer, determine whether it is a palindrome. An integer is a palindrome when it reads the same backward as forward. For example, 121 is a palindrome while 123 is not.",
    "topic": "Math",
    "subtopic": "Number Theory",
    "tags": [
      "Math",
      "Palindrome",
      "Integer"
    ],
    "input_format": "An integer n.",
    "output_format": "Return true if n is a palindrome, false otherwise.",
    "constraints": [
      "-2^31 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "n = 121",
        "output": "true",
        "explanation": "Reversing the digits of 121 gives 121, which is the same."
      },
      {
        "input": "n = -121",
        "output": "false",
        "explanation": "Reversing the digits gives 121-, which is not the same."
      },
      {
        "input": "n = 10",
        "output": "false",
        "explanation": "Reversing the digits gives 01, which is not the same."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try to reverse the number and compare it with the original."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Longest Palindromic Substring",
    "description": "Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Palindrome"
    ],
    "input_format": "A single string s, where 1 <= s.length <= 1000.",
    "output_format": "A string representing the longest palindromic substring.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consist of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"babad\"",
        "output": "\"bab\"",
        "explanation": "The longest palindromic substring is \"bab\". Note that \"aba\" is also a valid answer."
      },
      {
        "input": "s = \"cbbd\"",
        "output": "\"bb\"",
        "explanation": "The longest palindromic substring is \"bb\"."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider expanding around center points.",
      "Check both even and odd length palindromes."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Managers with at Least 5 Direct Reports",
    "description": "You are given a list of employees, where each employee is represented by a unique identifier and their direct manager's identifier. Your task is to identify all managers who have at least 5 direct reports. Return a list of these manager identifiers in ascending order.",
    "topic": "Tree",
    "subtopic": "Tree Traversal",
    "tags": [
      "Tree",
      "Graph",
      "Traversal"
    ],
    "input_format": "A list of pairs, where each pair consists of two integers: [employee_id, manager_id].",
    "output_format": "A list of unique integers representing the identifiers of managers with at least 5 direct reports, sorted in ascending order.",
    "constraints": [
      "1 <= len(employees) <= 10^5",
      "Each employee_id and manager_id is unique and between 1 and 10^6."
    ],
    "examples": [
      {
        "input": "[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 2], [7, 8], [8, 2], [9, 2]]",
        "output": "[2]",
        "explanation": "Manager 2 has 5 direct reports: employees 1, 3, 6, 7, and 8."
      },
      {
        "input": "[[1, 1], [2, 1], [3, 1], [4, 1], [5, 1], [6, 2]]",
        "output": "[1]",
        "explanation": "Manager 1 has 5 direct reports: employees 1, 2, 3, 4, and 5."
      },
      {
        "input": "[[1, 2], [2, 3], [3, 4], [4, 5]]",
        "output": "[]",
        "explanation": "No manager has at least 5 direct reports."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hashmap to count direct reports for each manager.",
      "Consider sorting the final list before returning."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Reverse Integer",
    "description": "Given a 32-bit signed integer, reverse the digits of the integer. If the reversed integer overflows, return 0. Make sure to handle negative numbers properly.",
    "topic": "Math",
    "subtopic": "Integer Manipulation",
    "tags": [
      "Math",
      "Integer",
      "Reverse"
    ],
    "input_format": "A single integer x, where -2^31 <= x <= 2^31 - 1.",
    "output_format": "A single integer representing the reversed digits of x, or 0 if the result overflows.",
    "constraints": [
      "-2^31 <= x <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "x = 123",
        "output": "321",
        "explanation": "The digits of 123 reversed are 321."
      },
      {
        "input": "x = -123",
        "output": "-321",
        "explanation": "The digits of -123 reversed are -321."
      },
      {
        "input": "x = 120",
        "output": "21",
        "explanation": "The digits of 120 reversed are 021, which is 21."
      },
      {
        "input": "x = 1534236469",
        "output": "0",
        "explanation": "Reversing 1534236469 exceeds the 32-bit signed integer range, hence output is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to handle the sign of the integer.",
      "What happens when the reversed integer exceeds the limits of a 32-bit signed integer?"
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Container With Most Water",
    "description": "Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with the x-axis forms a container, such that the container contains the most water. Note that you may not slant the container.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Geometry"
    ],
    "input_format": "An array of non-negative integers heights representing the height of lines at each x coordinate.",
    "output_format": "An integer representing the maximum amount of water that can be contained.",
    "constraints": [
      "2 <= heights.length <= 3 * 10^4",
      "0 <= heights[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "heights = [1,8,6,2,5,4,8,3,7]",
        "output": "49",
        "explanation": "The maximum amount of water is between the lines at indices 1 and 8, which gives a width of 7 and a height of 7, thus 7 * 7 = 49."
      },
      {
        "input": "heights = [1,1]",
        "output": "1",
        "explanation": "The only container formed by lines at indices 0 and 1 has a width of 1 and height of 1, so the area is 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a two-pointer technique to find the maximum area efficiently.",
      "Start with the widest container and move the pointers towards the center to find a better solution."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "topic": "Dynamic Programming",
    "subtopic": "Fibonacci Sequence",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Fibonacci"
    ],
    "input_format": "An integer n representing the number of steps in the staircase.",
    "output_format": "An integer representing the number of distinct ways to climb to the top.",
    "constraints": [
      "1 <= n <= 45"
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step or 2 steps."
      },
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "There are three ways to climb to the top: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider the last step you take to reach the top.",
      "The number of ways to reach the top can be expressed as a combination of previous steps."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Second Highest Salary",
    "description": "Given a table of employees, your task is to write a SQL query to find the second highest salary from the 'Employees' table. If there is no second highest salary, the query should return null.",
    "topic": "Database",
    "subtopic": "SQL",
    "tags": [
      "SQL",
      "Database",
      "Salary"
    ],
    "input_format": "The input is provided through the 'Employees' table, which contains the columns 'id', 'name', and 'salary'.",
    "output_format": "Return the second highest salary as a single integer. If there is no second highest salary, return null.",
    "constraints": [
      "The 'Employees' table contains at least 1 row and at most 200 rows.",
      "The salary column is a positive integer."
    ],
    "examples": [
      {
        "input": "SELECT second_highest_salary FROM Employees;",
        "output": "2000",
        "explanation": "In this case, the highest salary is 3000, and the second highest salary is 2000."
      },
      {
        "input": "SELECT second_highest_salary FROM Employees;",
        "output": "null",
        "explanation": "If all employees have the same salary or there is only one employee, there is no second highest salary, so the output is null."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "You can use the DISTINCT keyword to filter out duplicate salaries.",
      "Consider using a subquery to rank salaries."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Minimum Time to Repair Cars",
    "description": "You are given an integer array 'cars' where cars[i] is the time taken to repair the i-th car. Your task is to determine the minimum time required to repair all cars, given that you can repair multiple cars simultaneously in different workshops. Each workshop can repair one car at a time, and you have 'k' available workshops. Optimize the usage of your workshops to minimize the total repair time.",
    "topic": "Greedy",
    "subtopic": "Heap",
    "tags": [
      "Greedy",
      "Heap",
      "Simulation"
    ],
    "input_format": "The first line contains two integers n (1 <= n <= 10^5) and k (1 <= k <= n). The second line contains n integers where each integer indicates the repair time for each car.",
    "output_format": "An integer indicating the minimum time required to repair all cars.",
    "constraints": [
      "1 <= cars.length <= 10^5",
      "1 <= cars[i] <= 10^4",
      "1 <= k <= 10^5"
    ],
    "examples": [
      {
        "input": "n = 4, k = 2\ncars = [1, 2, 3, 4]",
        "output": "4",
        "explanation": "Using two workshops, we can have them repair the cars with times 1 and 2 in one workshop, and 3 and 4 in another workshop. The total time taken will be max(2, 4) = 4."
      },
      {
        "input": "n = 5, k = 1\ncars = [5, 4, 3, 2, 1]",
        "output": "15",
        "explanation": "With only one workshop, we need to repair the cars one after another. The total time is 5 + 4 + 3 + 2 + 1 = 15."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a priority queue to track the repair times of the workshops.",
      "Distribute the cars to the workshops optimally to minimize the total time."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Max Consecutive Ones",
    "description": "Given a binary array, find the maximum number of consecutive 1s in this array.",
    "topic": "Array",
    "subtopic": "Traversing Array",
    "tags": [
      "Array",
      "Binary",
      "Count"
    ],
    "input_format": "A binary array nums containing only 0s and 1s.",
    "output_format": "An integer representing the maximum number of consecutive 1s.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "nums[i] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 0, 1, 1, 1]",
        "output": "3",
        "explanation": "The maximum number of consecutive 1s is 3 (the last three 1s)."
      },
      {
        "input": "nums = [1, 0, 1, 1, 0, 1]",
        "output": "2",
        "explanation": "The maximum number of consecutive 1s is 2 (in the second group of 1s)."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a counter to track the current streak of 1s.",
      "Reset the counter when you encounter a 0.",
      "Keep track of the maximum streak found."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Reverse Words in a String",
    "description": "Given a string s, you need to reverse the order of the words in the string. A word is defined as a sequence of non-space characters. The leading and trailing spaces in s should be ignored, and there should be exactly one space between each word in the reversed string.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Manipulation",
      "Reverse"
    ],
    "input_format": "A single string s that may contain leading or trailing spaces.",
    "output_format": "A single string representing the words in reverse order.",
    "constraints": [
      "1 <= s.length <= 10^4",
      "s can contain extra spaces at the beginning or the end."
    ],
    "examples": [
      {
        "input": "s = '  hello world  '",
        "output": "'world hello'",
        "explanation": "After trimming the spaces, we have 'hello world', which when reversed becomes 'world hello'."
      },
      {
        "input": "s = 'a good   example'",
        "output": "'example good a'",
        "explanation": "Ignoring extra spaces, the reversed order of words is 'example good a'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider splitting the string into words.",
      "Trim leading and trailing spaces before processing."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Rising Temperature",
    "description": "Given an array of daily temperatures, represent each day as an integer, calculate the number of days until a warmer temperature. For each day in the input array, you should output an integer. If there is no future day for which this is possible, put 0 instead.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Monotonic Stack"
    ],
    "input_format": "An array of integers temperatures where 1 <= temperatures.length <= 30000 and 30 <= temperatures[i] <= 100.",
    "output_format": "An array of integers where each element represents the number of days until a warmer temperature.",
    "constraints": [
      "1 <= temperatures.length <= 30000",
      "30 <= temperatures[i] <= 100"
    ],
    "examples": [
      {
        "input": "temperatures = [73, 74, 75, 71, 69, 72, 76, 73]",
        "output": "[1, 1, 4, 2, 1, 1, 0, 0]",
        "explanation": "For each day, the days until a warmer temperature are: Day 0 - 1, Day 1 - 1, Day 2 - 4, Day 3 - 2, Day 4 - 1, Day 5 - 1, Day 6 - 0, Day 7 - 0."
      },
      {
        "input": "temperatures = [30, 40, 50, 60]",
        "output": "[1, 1, 1, 0]",
        "explanation": "Each day has a warmer temperature in the future until the last day."
      },
      {
        "input": "temperatures = [100, 90, 80, 70]",
        "output": "[0, 0, 0, 0]",
        "explanation": "No day has a warmer temperature in the future."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of indices of the days.",
      "Iterate through the temperatures from the last day to the first day."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Kth Largest Element in an Array",
    "description": "Given an array of integers nums and an integer k, return the k-th largest element in the array. Note that it is the k-th largest element in the sorted order, not the k-th distinct element.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Heap"
    ],
    "input_format": "An array of integers nums and an integer k.",
    "output_format": "An integer representing the k-th largest element in the array.",
    "constraints": [
      "1 <= k <= nums.length",
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 1, 5, 6, 4], k = 2",
        "output": "5",
        "explanation": "The second largest element in the sorted array [1, 2, 3, 4, 5, 6] is 5."
      },
      {
        "input": "nums = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4",
        "output": "4",
        "explanation": "The fourth largest element in the sorted array [1, 2, 2, 3, 3, 4, 5, 5, 6] is 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a min-heap to efficiently find the k-th largest element.",
      "Sorting the array will also give you the result, but watch out for performance."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Coin Change",
    "description": "You are given an integer array 'coins' representing coins of different denominations and an integer 'amount' representing a total amount of money. You want to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin.",
    "topic": "Dynamic Programming",
    "subtopic": "Coin Change Problem",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Backtracking"
    ],
    "input_format": "An integer array `coins` followed by an integer `amount`.",
    "output_format": "An integer representing the fewest number of coins that make up the amount, or -1 if it's not possible.",
    "constraints": [
      "1 <= coins.length <= 12",
      "1 <= coins[i] <= 2^31 - 1",
      "0 <= amount <= 10^4"
    ],
    "examples": [
      {
        "input": "coins = [1, 2, 5], amount = 11",
        "output": "3",
        "explanation": "11 can be made with 5 + 5 + 1, so the fewest number of coins is 3."
      },
      {
        "input": "coins = [2], amount = 3",
        "output": "-1",
        "explanation": "It is not possible to make amount 3 with coin value 2."
      },
      {
        "input": "coins = [1], amount = 0",
        "output": "0",
        "explanation": "No coins are needed to make amount 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dynamic programming approach to build up results for smaller amounts.",
      "Think about how you can store results for each amount in an array."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Longest Common Prefix",
    "description": "Write a function to find the longest common prefix string among an array of strings. If there is no common prefix, return an empty string \"\".",
    "topic": "String",
    "subtopic": "Prefix Matching",
    "tags": [
      "String",
      "Prefix",
      "Array"
    ],
    "input_format": "An array of strings strs.",
    "output_format": "A string representing the longest common prefix.",
    "constraints": [
      "0 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "All strings consist of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"flower\", \"flow\", \"flight\"]",
        "output": "\"fl\"",
        "explanation": "The longest common prefix is \"fl\"."
      },
      {
        "input": "strs = [\"dog\", \"racecar\", \"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the strings."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider the first string as the prefix initially.",
      "Iterate through the other strings to find the common prefix."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Edit Distance",
    "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. You can perform the following three operations: Insert a character, Delete a character, or Replace a character.",
    "topic": "Dynamic Programming",
    "subtopic": "String Manipulation",
    "tags": [
      "Dynamic Programming",
      "String",
      "Edit Distance"
    ],
    "input_format": "Two strings word1 and word2.",
    "output_format": "An integer representing the minimum number of operations required.",
    "constraints": [
      "0 <= word1.length, word2.length <= 100",
      "word1 and word2 consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "word1 = 'horse', word2 = 'ros'",
        "output": "3",
        "explanation": "The minimum operations to convert 'horse' to 'ros' are: replace 'h' by 'r', remove 'e', and remove 's'."
      },
      {
        "input": "word1 = 'intention', word2 = 'execution'",
        "output": "5",
        "explanation": "The minimum operations to convert 'intention' to 'execution' are: replace 'i' with 'e', replace 't' with 'c', replace 'n' with 'u', remove 't', and remove 'n'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a 2D array to store the results of subproblems.",
      "Try to optimize based on the last characters of the two strings."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Reverse Linked List",
    "description": "Given the head of a singly linked list, reverse the list and return the reversed list's head. A singly linked list is a list where each node contains a value and a pointer to the next node. The operation should be done in O(n) time complexity.",
    "topic": "Linked List",
    "subtopic": "Reversing Linked List",
    "tags": [
      "Linked List",
      "Reversing",
      "Pointers"
    ],
    "input_format": "The input consists of a linked list represented by its head node.",
    "output_format": "The output should be the head node of the reversed linked list.",
    "constraints": [
      "The number of nodes in the linked list is between 0 and 5000.",
      "The value of each node is between -1000 and 1000."
    ],
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5]",
        "output": "[5, 4, 3, 2, 1]",
        "explanation": "The original linked list order is 1 -> 2 -> 3 -> 4 -> 5. Reversing it results in 5 -> 4 -> 3 -> 2 -> 1."
      },
      {
        "input": "head = []",
        "output": "[]",
        "explanation": "An empty linked list remains empty after reversing."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Try using two pointers to reverse the pointers of each node.",
      "Keep track of the previous node while traversing the list."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Article Views I",
    "description": "You are given a list of article views represented as tuples. Each tuple contains a user ID and an article ID they viewed. Your task is to return the number of views per article in descending order. If two articles have the same number of views, return the article IDs in ascending order.",
    "topic": "Hash Table",
    "subtopic": "Counting Frequencies",
    "tags": [
      "Hash Table",
      "Counting",
      "Sorting"
    ],
    "input_format": "A list of tuples where each tuple contains two integers: (user_id, article_id).",
    "output_format": "A list of article IDs sorted in descending order of views.",
    "constraints": [
      "1 <= len(views) <= 10^5",
      "1 <= user_id, article_id <= 10^9"
    ],
    "examples": [
      {
        "input": "views = [(1, 101), (2, 101), (3, 102), (1, 103), (2, 103), (3, 103)]",
        "output": "[103, 101, 102]",
        "explanation": "Article 103 has 3 views, article 101 has 2 views, and article 102 has 1 view."
      },
      {
        "input": "views = [(1, 201), (2, 201), (3, 202), (4, 202), (5, 203)]",
        "output": "[201, 202, 203]",
        "explanation": "Article 201 has 2 views, article 202 has 2 views (same count, hence sorted ascending by ID), and article 203 has 1 view."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a dictionary to count views per article.",
      "Sort the articles based on their view counts and IDs."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Find Customer Referee",
    "description": "In a company database, each customer has a unique ID and can refer other customers. A customer is considered a 'referee' if they have referred at least one other customer. Given a list of customer pairs where each pair represents a customer's ID and the ID of a customer they referred, your task is to find all unique referees from this list. Return the IDs of referees sorted in ascending order.",
    "topic": "Data Structures",
    "subtopic": "Sets and Hashmaps",
    "tags": [
      "Hashmap",
      "Set",
      "Sorting"
    ],
    "input_format": "A list of pairs, where each pair [a, b] represents that customer 'a' referred customer 'b'.",
    "output_format": "A sorted list of unique customer IDs that are referees.",
    "constraints": [
      "1 <= pairs.length <= 1000",
      "1 <= a, b <= 10^5",
      "a != b"
    ],
    "examples": [
      {
        "input": "[[1, 2], [2, 3], [1, 4], [5, 1]]",
        "output": "[1, 2]",
        "explanation": "Customers 1 and 2 referred others. Customer 1 referred customers 2 and 4, and Customer 2 referred customer 3."
      },
      {
        "input": "[[6, 7], [8, 9], [8, 10]]",
        "output": "[8]",
        "explanation": "Only customer 8 referred others (customers 9 and 10)."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a set to track referees for uniqueness.",
      "You can iterate through the list of pairs to populate the set."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Majority Element",
    "description": "Given an array of size n, find the majority element. The majority element is the element that appears more than n/2 times in the array. You may assume that the majority element always exists in the array.",
    "topic": "Array",
    "subtopic": "Counting Elements",
    "tags": [
      "Array",
      "Hash Table",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the majority element.",
    "constraints": [
      "1 <= nums.length <= 5 * 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 3]",
        "output": "3",
        "explanation": "The majority element is 3 as it appears 2 times which is more than n/2."
      },
      {
        "input": "nums = [2, 2, 1, 1, 1, 2, 2]",
        "output": "2",
        "explanation": "The majority element is 2 as it appears 4 times which is more than n/2."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a hash map to count the occurrences of each element.",
      "Think about there being a more efficient solution than O(n log n)."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers prices where 1 <= prices.length <= 10^5 and 0 <= prices[i] <= 10^4.",
    "output_format": "An integer representing the maximum profit.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "In this case, no transactions are done and the max profit = 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price seen so far.",
      "Calculate potential profit by subtracting the minimum price from the current price."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Pascal's Triangle",
    "description": "Given a non-negative integer numRows, generate the first numRows of Pascal's triangle. In Pascal's triangle, each row is a list of integers where the value of each element is the sum of the two elements directly above it in the previous row. The triangle starts with a 1 at the top and each subsequent row has one more element than the previous row.",
    "topic": "Dynamic Programming",
    "subtopic": "Array Manipulation",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Triangle"
    ],
    "input_format": "An integer numRows (0 <= numRows <= 30).",
    "output_format": "A list of lists representing the first numRows of Pascal's triangle.",
    "constraints": [
      "0 <= numRows <= 30"
    ],
    "examples": [
      {
        "input": "numRows = 5",
        "output": "[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]",
        "explanation": "The first 5 rows of Pascal's triangle are generated as follows:\nRow 0: [1]\nRow 1: [1, 1]\nRow 2: [1, 2, 1]\nRow 3: [1, 3, 3, 1]\nRow 4: [1, 4, 6, 4, 1]"
      },
      {
        "input": "numRows = 0",
        "output": "[]",
        "explanation": "There are no rows in Pascal's triangle when numRows is 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider how the elements are related between rows.",
      "Each row starts and ends with 1."
    ],
    "company": "Deloitte"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. For example, if two intervals [1,3] and [2,6] overlap, they should be merged into [1,6]. You need to return the merged intervals in ascending order.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Intervals"
    ],
    "input_format": "An array of intervals where each interval is represented by a pair of integers [start, end].",
    "output_format": "An array of merged intervals.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3], [2,6], [8,10], [15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "The intervals [1,3] and [2,6] overlap, so they are merged into [1,6]. The other intervals do not overlap."
      },
      {
        "input": "intervals = [[1,4], [4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] overlap at the boundary, thus they are merged into [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the intervals based on their starting points first.",
      "Use a stack to keep track of merged intervals."
    ],
    "company": "Deloitte"
  }
]