[
  {
    "question_id": "",
    "title": "House Robber IV",
    "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money hidden. However, adjacent houses have security systems connected, and if two adjacent houses are robbed on the same night, the alarm will automatically trigger. To maximize your money, you need to determine the maximum amount of money you can rob tonight without alerting the police. In this version (IV), you can also 'reset' the robbed amount after robbing 'k' houses. Your task is to find the maximum amount of money you can rob considering the reset rule.",
    "topic": "Dynamic Programming",
    "subtopic": "House Robber Problem",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of integers 'nums' representing the amount of money in each house and an integer 'k' representing the number of houses after which a reset can occur.",
    "output_format": "An integer representing the maximum amount of money that can be robbed.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 1000",
      "1 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 9, 3, 1], k = 1",
        "output": "12",
        "explanation": "Rob houses 1 (2), 3 (9), and 4 (1), skipping house 2."
      },
      {
        "input": "nums = [1, 2, 3, 1], k = 2",
        "output": "4",
        "explanation": "Rob houses 1 (1) and 4 (1), or houses 2 (2) and 3 (3), in either case, the output is 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to store the maximum amounts at each step.",
      "Think about how the reset affects decisions made at each house."
    ],
    "company": "Cashfree"
  },
  {
    "question_id": "",
    "title": "Maximum Erasure Value",
    "description": "You are given an array of integers 'nums'. You need to find the maximum sum of a subarray with unique elements. This means that you cannot have duplicate numbers within your chosen subarray. You can choose any contiguous subarray of 'nums', and your task is to determine the maximum possible sum you can achieve with the selected subarray under the uniqueness constraint.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Subarray",
      "Unique Elements"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum sum of a subarray with unique elements.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [4, 2, 4, 3, 4, 5]",
        "output": "12",
        "explanation": "The subarray [4, 3, 4, 5] has unique elements {4, 3, 5}. The maximum sum is 4 + 3 + 5 = 12."
      },
      {
        "input": "nums = [1, 2, 3, 2, 1]",
        "output": "6",
        "explanation": "The subarray [1, 2, 3] contains unique elements and gives a maximum sum of 1 + 2 + 3 = 6."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window to maintain uniqueness of elements.",
      "A set can help keep track of the current unique elements.",
      "Try to expand and contract the window as needed."
    ],
    "company": "Cashfree"
  },
  {
    "question_id": "",
    "title": "Non-decreasing Array",
    "description": "Given an integer array nums, you can modify at most one element in the array to make it non-decreasing. You need to determine if it is possible to make the array non-decreasing, and return true or false accordingly. An array is said to be non-decreasing if for every index i, nums[i] <= nums[i + 1].",
    "topic": "Array",
    "subtopic": "Modification",
    "tags": [
      "Array",
      "Greedy",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A boolean value indicating whether the array can be made non-decreasing.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [4, 2, 3]",
        "output": "true",
        "explanation": "You can modify 4 to be 2 to make the array non-decreasing."
      },
      {
        "input": "nums = [4, 2, 1]",
        "output": "false",
        "explanation": "No matter what modification you make, the array cannot be made non-decreasing."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the positions of violations in the array.",
      "Try to find the first index where the condition is violated."
    ],
    "company": "Cashfree"
  }
]