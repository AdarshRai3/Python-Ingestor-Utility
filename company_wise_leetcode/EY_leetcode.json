[
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "An array of two integers representing the indices of the two numbers that add up to target.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 3 + 3 = 6."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the indices of the numbers.",
      "Check if the complement (target - num) exists in the hash map."
    ],
    "company": "EY"
  },
  {
    "question_id": "",
    "title": "Fibonacci Number",
    "description": "The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. Given an integer n, return the nth Fibonacci number.",
    "topic": "Dynamic Programming",
    "subtopic": "Fibonacci Sequence",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Mathematics"
    ],
    "input_format": "An integer n (0 <= n <= 30), representing the index of the Fibonacci sequence.",
    "output_format": "An integer representing the nth Fibonacci number.",
    "constraints": [
      "0 <= n <= 30"
    ],
    "examples": [
      {
        "input": "n = 0",
        "output": "0",
        "explanation": "The 0th Fibonacci number is 0."
      },
      {
        "input": "n = 1",
        "output": "1",
        "explanation": "The 1st Fibonacci number is 1."
      },
      {
        "input": "n = 5",
        "output": "5",
        "explanation": "The Fibonacci sequence is 0, 1, 1, 2, 3, 5..."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "You can use recursion to solve this problem.",
      "Consider using memoization to improve performance."
    ],
    "company": "EY"
  },
  {
    "question_id": "",
    "title": "Longest Happy String",
    "description": "A 'happy string' is a string that does not contain the substring 'aaa' or 'bbb'. Given three integers a, b, and c, representing the number of times you can use the letters 'a', 'b', and 'c' respectively, return the longest possible happy string you can construct. If there are multiple solutions, return any of them. If no such string can be formed, return an empty string.",
    "topic": "String",
    "subtopic": "String Construction",
    "tags": [
      "String",
      "Greedy",
      "Construct",
      "Backtracking"
    ],
    "input_format": "Three integers a, b, and c, where 0 <= a, b, c <= 100.",
    "output_format": "A string representing the longest happy string that can be formed.",
    "constraints": [
      "0 <= a, b, c <= 100"
    ],
    "examples": [
      {
        "input": "a = 1, b = 1, c = 7",
        "output": "ccaccbcc",
        "explanation": "The longest happy string can be formed by placing 'c' as it can be used the most, without creating 'aaa' or 'bbb'."
      },
      {
        "input": "a = 2, b = 2, c = 1",
        "output": "aabbc",
        "explanation": "Using 2 'a's, 2 'b's, and 1 'c' gives a valid happy string without containing 'aaa' or 'bbb'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a greedy approach to maximize the length of the string.",
      "Think about the last two characters to avoid creating 'aaa' or 'bbb'."
    ],
    "company": "EY"
  }
]