[
  {
    "question_id": "",
    "title": "Number of Strings Which Can Be Rearranged to Contain Substring",
    "description": "Given a string `s` and a substring `sub`, determine the number of distinct rearrangements of the string `s` that can contain the substring `sub` at least once. The rearrangement should maintain the original character counts of `s`. You must return the total number of valid rearrangements modulo 10^9 + 7.",
    "topic": "String",
    "subtopic": "Permutations",
    "tags": [
      "String",
      "Permutations",
      "Combinatorics"
    ],
    "input_format": "Two strings: s (the main string) and sub (the substring).",
    "output_format": "An integer representing the number of valid rearrangements modulo 10^9 + 7.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "1 <= sub.length <= 10^5",
      "s and sub consist of lowercase English letters only."
    ],
    "examples": [
      {
        "input": "s = 'aabbcc', sub = 'abc'",
        "output": "30",
        "explanation": "The valid rearrangements that contain 'abc' at least once can be counted as the total distinct rearrangements minus those that do not contain 'abc'."
      },
      {
        "input": "s = 'aaa', sub = 'aa'",
        "output": "1",
        "explanation": "Only one arrangement contains 'aa', which is 'aaa'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to count permutations while maintaining character counts.",
      "Think about factorials and how to handle repeated characters.",
      "Use combinatorial mathematics to derive the count efficiently."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Number of Unique XOR Triplets II",
    "description": "Given an array of integers, count the number of unique triplets (i, j, k) such that 0 <= i < j < k < n and the XOR of nums[i], nums[j], and nums[k] equals zero. The triplets must be unique, meaning the combination of indices must differ, not just the values.",
    "topic": "Array",
    "subtopic": "Bit Manipulation",
    "tags": [
      "Array",
      "XOR",
      "Triplet"
    ],
    "input_format": "An array of integers, nums.",
    "output_format": "An integer representing the number of unique triplets satisfying the condition.",
    "constraints": [
      "3 <= nums.length <= 1000",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 0, 3, 2, 1]",
        "output": "7",
        "explanation": "The unique triplets that give XOR of zero are: (0, 1, 2), (0, 2, 3), (1, 3, 4), (1, 4, 5), (2, 3, 4), (2, 4, 5), (3, 4, 5)."
      },
      {
        "input": "nums = [1, 1, 2, 2, 3, 3]",
        "output": "2",
        "explanation": "The unique triplets that give XOR of zero are: (0, 1, 2), (3, 4, 5)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a set to store seen triplet combinations.",
      "Remember that the order of elements matters in forming unique triplets."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Minimum Edge Reversals So Every Node Is Reachable",
    "description": "You are given a directed graph with N nodes (numbered 0 to N-1) and M edges. Each edge has a direction from one node to another. Your goal is to reverse the minimum number of edges in such a way that every node becomes reachable from a starting node (which is node 0). Determine the minimum number of edge reversals required to achieve this.",
    "topic": "Graph",
    "subtopic": "Graph Traversal",
    "tags": [
      "Graph",
      "Traversal",
      "Minimum Edge Reversals"
    ],
    "input_format": "An integer N representing the number of nodes followed by M (the number of edges) and then M pairs of integers (u, v) representing a directed edge from node u to node v.",
    "output_format": "An integer representing the minimum number of edge reversals needed.",
    "constraints": [
      "1 <= N <= 10^4",
      "0 <= M <= 10^4",
      "0 <= u, v < N"
    ],
    "examples": [
      {
        "input": "N = 4, M = 4, edges = [[0, 1], [1, 2], [2, 3], [3, 1]]",
        "output": "1",
        "explanation": "By reversing the edge from 3 to 1, all nodes become reachable from node 0."
      },
      {
        "input": "N = 5, M = 3, edges = [[0, 1], [1, 2], [4, 3]]",
        "output": "2",
        "explanation": "Reversing the edges 1 to 0 and 3 to 4 would ensure all nodes are reachable from 0."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using breadth-first search (BFS) to explore reachable nodes.",
      "Track the edges that need to be reversed to connect all nodes.",
      "Evaluate the impact of each edge reversal on reachability."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Number of Unique XOR Triplets I",
    "description": "Given an array of integers, find the number of unique triplets (i, j, k) such that the XOR of arr[i], arr[j], and arr[k] is zero, where 0 <= i < j < k < arr.length. A triplet is considered unique if it consists of distinct integers.",
    "topic": "Array",
    "subtopic": "Triplet Search",
    "tags": [
      "Array",
      "XOR",
      "Triplets"
    ],
    "input_format": "An array of integers arr.",
    "output_format": "An integer representing the number of unique XOR triplets.",
    "constraints": [
      "1 <= arr.length <= 1000",
      "-10^9 <= arr[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "arr = [1, 2, 3, 0, 1, 2]",
        "output": "3",
        "explanation": "The unique triplets are (0, 1, 2), (1, 2, 3), and (0, 2, 1) which all yield XOR = 0."
      },
      {
        "input": "arr = [5, 1, 2, 3, 4, 5]",
        "output": "0",
        "explanation": "There are no unique triplets that satisfy the condition."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a set to track unique triplets.",
      "XOR is commutative and associative."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Number of Possible Sets of Closing Branches",
    "description": "Given a tree represented as an undirected graph, where each node represents a branch, you need to determine the number of distinct sets of branches that can be closed while ensuring that each branch closure maintains the tree structure. A branch closure means that you remove a branch and all its connected nodes. Your task is to return the total number of ways branches can be closed without disconnecting the tree.",
    "topic": "Graph",
    "subtopic": "Tree Traversal",
    "tags": [
      "Graph",
      "Tree",
      "Dynamic Programming"
    ],
    "input_format": "An integer n representing the number of branches followed by an array of edges representing connections between branches.",
    "output_format": "An integer representing the number of distinct sets of branches that can be closed.",
    "constraints": [
      "1 <= n <= 1000",
      "0 <= edges.length <= 2000",
      "edges[i] contains two integers a and b, representing a connection between branch a and branch b."
    ],
    "examples": [
      {
        "input": "n = 5, edges = [[1, 2], [1, 3], [2, 4], [2, 5]]",
        "output": "10",
        "explanation": "There are 10 distinct sets of branches that can be closed while maintaining the tree structure."
      },
      {
        "input": "n = 3, edges = [[1, 2], [1, 3]]",
        "output": "4",
        "explanation": "There are 4 distinct sets of branches that can be closed: closing none, closing only 1, closing in pairs, and closing all."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using dynamic programming to store the number of ways to close branches at each node.",
      "Think about how closing a branch affects the branches of its children."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Count Complete Substrings",
    "description": "Given a string s, your task is to count the number of complete substrings. A substring is considered complete if it contains all the distinct characters present in the string at least once. Return the count of such complete substrings in s.",
    "topic": "Strings",
    "subtopic": "Substring Problems",
    "tags": [
      "String",
      "Substring",
      "Counting"
    ],
    "input_format": "A single string s consisting of lowercase English letters.",
    "output_format": "An integer representing the number of complete substrings.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "abcabc",
        "output": "10",
        "explanation": "The complete substrings are: 'abc', 'abc', 'abca', 'abcab', 'bc', 'bca', 'cab', 'abcabc', 'a', 'c'."
      },
      {
        "input": "aabbcc",
        "output": "6",
        "explanation": "The complete substrings are: 'aabbcc', 'ab', 'bc', 'aabc', 'abbc', 'abcc'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how to use a sliding window approach.",
      "Keep track of character counts."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Painting the Walls",
    "description": "You are given a rectangular room defined by its width and height. You can paint the walls of the room in any color you want. However, you have a limited amount of paint, represented by the integer amount of paint available. Each color requires a specific amount of paint to cover a square area. Given the dimensions of the room and the paint requirements for different colors, determine the maximum area that can be painted without exceeding the available paint. Output the maximum area that can be painted in integer format.",
    "topic": "Dynamic Programming",
    "subtopic": "Knapsack Problem",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Knapsack"
    ],
    "input_format": "An integer width, an integer height, an integer amount of paint available, and an array of integers representing the paint required for each color.",
    "output_format": "An integer representing the maximum area that can be painted.",
    "constraints": [
      "1 <= width, height <= 1000",
      "1 <= amount of paint <= 10^6",
      "1 <= paint required for each color <= 1000"
    ],
    "examples": [
      {
        "input": "width = 10, height = 10, amount_of_paint = 200, paint_requirements = [10, 20, 30]",
        "output": "100",
        "explanation": "The area of the room is 10*10 = 100. You can use 200 units of paint to paint the entire area using the colors available."
      },
      {
        "input": "width = 5, height = 6, amount_of_paint = 50, paint_requirements = [20, 10]",
        "output": "30",
        "explanation": "You can paint 3 units with color requiring 10 (3 * 10 = 30) utilizing the available paint."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a dynamic programming approach similar to the knapsack problem.",
      "Think about how to maximize area given the constraints of paint available."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Delete and Earn",
    "description": "You are given an integer array nums. You want to maximize your points by deleting elements from the array. When you delete an element x, you earn x points, but all occurrences of x, x-1, and x+1 are deleted from the array as well. You need to return the maximum points you can earn by deleting elements optimally.",
    "topic": "Dynamic Programming",
    "subtopic": "Array Manipulation",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Greedy"
    ],
    "input_format": "An integer array nums, where 1 <= nums.length <= 2 * 10^4 and 1 <= nums[i] <= 10^4.",
    "output_format": "An integer representing the maximum points you can earn.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "1 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [3, 4, 2]",
        "output": "6",
        "explanation": "Delete 4 to earn 4 points, and then delete 3 and 2, earning a total of 4 + 2 = 6."
      },
      {
        "input": "nums = [2, 2, 3, 3, 3, 4]",
        "output": "9",
        "explanation": "Delete 3 to earn 9 points; deleting 3 allows the deletion of 2 and 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how deleting a number affects its neighbors.",
      "Dynamic programming may help to store results of subproblems."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Minimum Number of Taps to Open to Water a Garden",
    "description": "You have a garden represented as a number line of length n, where the ith tap can water the garden from position i - radius[i] to position i + radius[i]. Given an array radius of length n, where radius[i] is the radius of the ith tap, find the minimum number of taps you need to open to water the whole garden. If it is not possible to water the garden, return -1.",
    "topic": "Greedy",
    "subtopic": "Interval Coverage",
    "tags": [
      "Greedy",
      "Dynamic Programming",
      "Interval"
    ],
    "input_format": "An integer n followed by an array radius of size n.",
    "output_format": "An integer representing the minimum number of taps needed to water the garden, or -1 if watering is not possible.",
    "constraints": [
      "1 <= n <= 10^4",
      "0 <= radius[i] <= n"
    ],
    "examples": [
      {
        "input": "n = 5, radius = [3, 4, 1, 1, 0, 0]",
        "output": "1",
        "explanation": "Opening the tap at position 1 can cover the entire garden."
      },
      {
        "input": "n = 5, radius = [0, 0, 0, 0]",
        "output": "-1",
        "explanation": "It is impossible to water the garden since all taps have zero radius."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Think about how you can merge intervals that each tap can cover.",
      "Consider using a greedy approach to minimize the number of taps."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Making A Large Island",
    "description": "You are given a 2D grid of 0s (water) and 1s (land). Your task is to find the size of the largest island, which is represented by connected land cells (1s). Two land cells are considered connected if they are adjacent horizontally or vertically. Return the size of the largest island. If there are no islands, return 0.",
    "topic": "Graph",
    "subtopic": "Depth First Search",
    "tags": [
      "Graph",
      "DFS",
      "Matrix"
    ],
    "input_format": "A 2D binary grid grid where 0s represent water and 1s represent land.",
    "output_format": "An integer representing the size of the largest island.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 50",
      "grid[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "grid = [[0, 0, 1, 0], [0, 1, 1, 0], [0, 0, 0, 1]]",
        "output": "3",
        "explanation": "The largest island consists of the three connected land cells in the middle: grid[1][1], grid[1][2], and grid[0][1]."
      },
      {
        "input": "grid = [[1, 1], [1, 1]]",
        "output": "4",
        "explanation": "All land cells are connected, forming a single island of size 4."
      },
      {
        "input": "grid = [[0, 0], [0, 0]]",
        "output": "0",
        "explanation": "There are no land cells, hence the largest island size is 0."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using Depth First Search (DFS) to traverse the islands.",
      "Use a boolean matrix to track visited cells."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Count Subarrays With Fixed Bounds",
    "description": "Given an integer array nums and two integers min_bnd and max_bnd, return the number of subarrays such that the minimum element in the subarray is at least min_bnd and the maximum element is at most max_bnd. A subarray is a contiguous part of an array.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Counting"
    ],
    "input_format": "An integer array nums, and two integers min_bnd and max_bnd.",
    "output_format": "An integer representing the count of valid subarrays.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^9",
      "0 <= min_bnd <= max_bnd <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4], min_bnd = 2, max_bnd = 3",
        "output": "3",
        "explanation": "The valid subarrays are [2], [3], and [2, 3]."
      },
      {
        "input": "nums = [3, 5, 8, 6, 1], min_bnd = 1, max_bnd = 5",
        "output": "7",
        "explanation": "The valid subarrays are [3], [3, 5], [5], [5, 1], [1], [1, 3], [1, 3, 5]."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a sliding window technique.",
      "Keep track of the minimum and maximum elements in the current window.",
      "Expand the window to include new elements and contract when necessary."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Number of Ways to Form a Target String Given a Dictionary",
    "description": "Given a list of words and a target string, return the number of ways to form the target string using the words from the list. Each word can be used multiple times, but the order of characters in the target string must match sequentially with the chosen words. If it's not possible to form the target string, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "String Manipulation",
    "tags": [
      "Dynamic Programming",
      "String",
      "Counting"
    ],
    "input_format": "An array of strings 'words' denoting the dictionary and a string 'target' representing the target string.",
    "output_format": "An integer representing the number of ways to form the target string.",
    "constraints": [
      "1 <= words.length <= 100",
      "1 <= words[i].length <= 100",
      "1 <= target.length <= 1000",
      "The total number of characters in 'words' does not exceed 10^5."
    ],
    "examples": [
      {
        "input": "words = [\"a\", \"b\", \"ab\"], target = \"ab\"",
        "output": "2",
        "explanation": "We can form 'ab' either by using 'a' + 'b' or by using 'ab' directly."
      },
      {
        "input": "words = [\"a\", \"b\", \"c\"], target = \"abc\"",
        "output": "1",
        "explanation": "We can only form 'abc' by using 'a' + 'b' + 'c'."
      },
      {
        "input": "words = [\"x\", \"y\", \"z\"], target = \"xyxzy\"",
        "output": "0",
        "explanation": "It's impossible to form 'xyxzy' with the given words."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using dynamic programming to store intermediate results.",
      "Count the ways to form substrings leading up to each character in the target."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Design Twitter",
    "description": "You are tasked with designing a simplified version of Twitter. The system should allow users to post tweets, follow other users, and obtain a feed of tweets from the users they follow. Implement the following functionalities: 1. `postTweet(userId, tweetId)`: Compose a new tweet. 2. `getNewsFeed(userId)`: Retrieve the 10 most recent tweet IDs in the user's news feed. 3. `follow(followerId, followeeId)`: The user with ID `followerId` will follow the user with ID `followeeId`. 4. `unfollow(followerId, followeeId)`: The user with ID `followerId` will unfollow the user with ID `followeeId`. Your solution should support efficient retrieval of tweets and handle follow/unfollow operations accordingly.",
    "topic": "Design",
    "subtopic": "System Design",
    "tags": [
      "Design",
      "Twitter",
      "System Design",
      "Feed"
    ],
    "input_format": "The method signatures and their parameters as mentioned above.",
    "output_format": "Return the list of tweet IDs for the `getNewsFeed` method.",
    "constraints": [
      "1 <= userId, tweetId <= 10^4",
      "The number of tweets posted will not exceed 10^5.",
      "A user can follow at most 100 users."
    ],
    "examples": [
      {
        "input": "Twitter twitter = new Twitter();\ntwitter.postTweet(1, 5);\ntwitter.getNewsFeed(1);",
        "output": "[5]",
        "explanation": "User 1 posts a tweet with ID 5. The news feed for user 1 contains tweet ID 5."
      },
      {
        "input": "twitter.follow(1, 2);\ntwitter.postTweet(2, 6);\ntwitter.getNewsFeed(1);",
        "output": "[6, 5]",
        "explanation": "User 1 follows user 2, who posts a tweet with ID 6. User 1's news feed contains tweet IDs 6 and 5 (from latest to oldest)."
      },
      {
        "input": "twitter.unfollow(1, 2);\ntwitter.getNewsFeed(1);",
        "output": "[5]",
        "explanation": "User 1 unfollows user 2. User 1's news feed reverts back to only show tweet ID 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a data structure that allows efficient insertion and retrieval of tweets.",
      "Consider using a priority queue to keep track of the most recent tweets."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Subsequence With the Minimum Score",
    "description": "You are given two strings, `s` and `t`. A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. For example, 'ace' is a subsequence of 'abcde' while 'aec' is not. Your task is to find the minimum score of all the valid subsequences of `s` that can be formed from `t`. The score of a subsequence is defined as the number of characters in `s` that are not included in the formed subsequence. If there are no valid subsequences, return -1.",
    "topic": "String",
    "subtopic": "Subsequence",
    "tags": [
      "String",
      "Subsequence",
      "Algorithm"
    ],
    "input_format": "Two strings s and t, where 1 <= |s|, |t| <= 100000.",
    "output_format": "An integer representing the minimum score of valid subsequences.",
    "constraints": [
      "1 <= |s| <= 10^5",
      "1 <= |t| <= 10^5"
    ],
    "examples": [
      {
        "input": "s = \"abcde\", t = \"ace\"",
        "output": "2",
        "explanation": "The subsequence 'ace' is valid and scores 2 because 'b' and 'd' were not used."
      },
      {
        "input": "s = \"abc\", t = \"xyz\"",
        "output": "-1",
        "explanation": "No characters of 's' can be formed using 't', hence the answer is -1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a two-pointer technique to traverse both strings.",
      "Think about edge cases where characters do not match."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hash Table",
    "tags": [
      "Array",
      "Hash Table",
      "Two Pointers"
    ],
    "input_format": "An array of integers `nums` followed by an integer `target`.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "Each input will have exactly one solution."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] = 2 + 7 = 9, so the output is [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] = 2 + 4 = 6, so the output is [1, 2]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the difference between target and each element.",
      "Check if the complement exists as you iterate through the array."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Minimum Time to Complete Trips",
    "description": "You are given an array `time` where `time[i]` is the time taken for the i-th trip. You must determine the minimum time required to complete `trips` number of trips. You may choose to start at any point in the array. Return the minimum time it takes to complete all the trips.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Binary Search",
      "Searching"
    ],
    "input_format": "An array of integers time followed by the number of trips.",
    "output_format": "An integer representing the minimum time required to complete the specified number of trips.",
    "constraints": [
      "1 <= time.length <= 10^5",
      "1 <= time[i] <= 10^9",
      "1 <= trips <= 10^7"
    ],
    "examples": [
      {
        "input": "[1, 2, 3], trips = 5",
        "output": "6",
        "explanation": "With trips of times 1, 2, 3, to achieve 5 trips, the minimum time is 6."
      },
      {
        "input": "[3, 1, 2], trips = 4",
        "output": "6",
        "explanation": "The corresponding trips according to the times require a total of 6 units of time."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider utilizing binary search to minimize the total time.",
      "Focus on the cumulative time and number of completed trips."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four sides of the grid are surrounded by water.",
    "topic": "Depth-First Search",
    "subtopic": "Grid Traversal",
    "tags": [
      "DFS",
      "Grid",
      "Union-Find"
    ],
    "input_format": "A 2D grid of '1's and '0's representing the map.",
    "output_format": "An integer representing the number of islands.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,1,0,0],[0,0,0,1,1]]",
        "output": "3",
        "explanation": "There are three islands: one consisting of the first two '1's, another consisting of the single '1' at (2,2), and the last island of '1's at (3,3) and (3,4)."
      },
      {
        "input": "grid = [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]",
        "output": "0",
        "explanation": "There are no land cells, hence the number of islands is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using DFS or BFS to explore the grid.",
      "Mark visited lands to avoid counting them multiple times."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Find the Longest Equal Subarray",
    "description": "Given an integer array, find the length of the longest contiguous subarray where all elements are equal.",
    "topic": "Array",
    "subtopic": "Subarray Problems",
    "tags": [
      "Array",
      "Subarray",
      "Sliding Window"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest contiguous subarray of equal elements.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 0, 1, 1, 1]",
        "output": "3",
        "explanation": "The longest subarray of equal elements is [1, 1, 1], which has length 3."
      },
      {
        "input": "nums = [1, 2, 2, 3, 3, 3, 1]",
        "output": "3",
        "explanation": "The longest subarray of equal elements is [3, 3, 3], which has length 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window approach to track equal elements.",
      "Maintain counters for current streaks of equal elements."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Car Pooling",
    "description": "You are given an array of triplets trips where trips[i] = [numPassengers, startLocation, endLocation]. You need to determine if it is possible to pick up and drop off all passengers without exceeding the capacity of the vehicle. The vehicle starts at location 0 and must reach all intended start and end locations. The capacity of the vehicle is given as an integer capacity. Return true if it is possible to complete all trips, or false otherwise.",
    "topic": "Array",
    "subtopic": "Greedy",
    "tags": [
      "Greedy",
      "Simulation",
      "Array"
    ],
    "input_format": "An integer capacity and an array of triplets indicating trips.",
    "output_format": "A boolean value indicating whether all trips can be completed without exceeding capacity.",
    "constraints": [
      "1 <= trips.length <= 1000",
      "1 <= numPassengers <= 100",
      "0 <= startLocation < endLocation <= 1000",
      "1 <= capacity <= 100"
    ],
    "examples": [
      {
        "input": "trips = [[2,1,5],[3,3,7]], capacity = 4",
        "output": "false",
        "explanation": "At location 3, we have 3 passengers to drop off but only 2 remaining in the vehicle, hence it is not possible to achieve this."
      },
      {
        "input": "trips = [[2,1,5],[3,5,7]], capacity = 3",
        "output": "true",
        "explanation": "We can pick up 2 passengers at start location 1 and drop them off at 5, then pick up 3 passengers at 5 and drop them off at 7, remaining within capacity."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a range array to track the number of passengers at each location.",
      "Make sure to account for pickups and drop-offs separately."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Beautiful Arrangement",
    "description": "Suppose you have n integers from 1 to n. We define a beautiful arrangement as an array that is both an arrangement of those n integers and satisfies the following conditions: for each integer i (1 <= i <= n), the absolute difference between i and the number at position i in the array is exactly 1. For instance, for n = 2, [1, 2] and [2, 1] are both beautiful arrangements. Given an integer n, return the total number of different beautiful arrangements that can be created using the integers from 1 to n.",
    "topic": "Dynamic Programming",
    "subtopic": "Backtracking",
    "tags": [
      "Backtracking",
      "Dynamic Programming",
      "Recursion"
    ],
    "input_format": "An integer n representing the upper limit of the arrangement.",
    "output_format": "An integer representing the total number of beautiful arrangements.",
    "constraints": [
      "1 <= n <= 15"
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "The two arrangements [1, 2] and [2, 1] are both considered beautiful."
      },
      {
        "input": "n = 1",
        "output": "1",
        "explanation": "Only one arrangement [1] is possible, which is considered beautiful."
      },
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "The beautiful arrangements are [1, 2, 3], [1, 3, 2], and [2, 1, 3]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using recursion with backtracking to explore all possible arrangements.",
      "Keep track of used numbers to ensure each arrangement is unique."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Count Binary Substrings",
    "description": "Given a string s consisting of '0's and '1's, return the number of non-empty substrings that have the same number of '0's and '1's, and all '0's and all '1's in these substrings are grouped consecutively. The substrings must be of the form '000...111...' or '111...000...'.",
    "topic": "String",
    "subtopic": "Substring",
    "tags": [
      "String",
      "Substring",
      "Counting"
    ],
    "input_format": "A binary string s, where 1 <= s.length <= 100.",
    "output_format": "An integer representing the number of valid substrings.",
    "constraints": [
      "1 <= s.length <= 100",
      "s consists only of '0's and '1's."
    ],
    "examples": [
      {
        "input": "s = \"00110010\"",
        "output": "6",
        "explanation": "The valid substrings are: '0011', '1100', '01', '10', '001100', '110011'."
      },
      {
        "input": "s = \"10101\"",
        "output": "4",
        "explanation": "The valid substrings are: '10', '01', '10', '01'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a sliding window approach to keep track of consecutive 0's and 1's.",
      "Count the pairs of consecutive groups of zeros and ones."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Consecutive Numbers",
    "description": "Given an array of integers, find the maximum length of a sequence of consecutive integers in it. The sequence can be unordered, and you can assume that all integers in the input are unique. Return the length of the longest consecutive integers sequence.",
    "topic": "Array",
    "subtopic": "Sorting and Hashing",
    "tags": [
      "Array",
      "Sorting",
      "Hashing"
    ],
    "input_format": "An array of unique integers nums.",
    "output_format": "An integer representing the maximum length of consecutive integers sequence.",
    "constraints": [
      "0 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [100, 4, 200, 1, 3, 2]",
        "output": "4",
        "explanation": "The longest consecutive sequence is [1, 2, 3, 4], which has a length of 4."
      },
      {
        "input": "nums = [0, 0, 1, 1, 1]",
        "output": "2",
        "explanation": "The longest consecutive sequence is [0, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a set for O(1) lookups.",
      "For each number, check if it is the start of a sequence."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Number of Visible People in a Queue",
    "description": "You are given a queue of people, where each person is represented by their height. A person can only see the people in front of them if they are taller than everyone in front of them. Your task is to determine how many people are visible from the front of the queue.\n\nWrite a function that takes a list of integers representing the heights of people in the queue and returns the number of visible people.",
    "topic": "Stack",
    "subtopic": "Monotonic Stack",
    "tags": [
      "Stack",
      "Monotonic Stack",
      "Greedy"
    ],
    "input_format": "A list of integers heights, where each integer represents the height of a person in the queue.",
    "output_format": "An integer representing the number of visible people in the queue.",
    "constraints": [
      "1 <= heights.length <= 10^5",
      "1 <= heights[i] <= 10^7"
    ],
    "examples": [
      {
        "input": "heights = [1, 2, 3, 2, 1]",
        "output": "3",
        "explanation": "The visible people are heights 3, 2 (from the third position), and 1 (from the fourth position)."
      },
      {
        "input": "heights = [5, 3, 2, 6, 4]",
        "output": "3",
        "explanation": "The visible people are heights 5, 6 (the taller person), and 4 (can see the two people in front of them)."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a stack to keep track of the heights.",
      "Only add a height to the stack if it is greater than the current top of the stack."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Asteroid Collision",
    "description": "We are given an array of integers representing asteroids in a row. Each asteroid is a positive or negative integer: the absolute value represents its size, and the sign represents its direction (positive for right, negative for left). When two asteroids collide, the smaller one will explode. If they are of the same size, both will explode. Return the final state of the asteroids after all collisions.",
    "topic": "Array",
    "subtopic": "Stack",
    "tags": [
      "Array",
      "Stack",
      "Simulation"
    ],
    "input_format": "An array of integers nums representing the asteroids.",
    "output_format": "An array of integers representing the final state of the asteroids.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-1000 <= nums[i] <= 1000",
      "nums[i] != 0"
    ],
    "examples": [
      {
        "input": "nums = [5, 10, -5]",
        "output": "[5, 10]",
        "explanation": "The collision between 10 and -5 results in 10 surviving, leaving [5, 10]."
      },
      {
        "input": "nums = [8, -8]",
        "output": "[]",
        "explanation": "Both asteroids collide and explode, resulting in an empty array."
      },
      {
        "input": "nums = [10, 2, -5]",
        "output": "[10]",
        "explanation": "The collision between 2 and -5 results in 2 exploding, leaving [10]."
      },
      {
        "input": "nums = [-2, -1, 1, 2]",
        "output": "[-2, -1, 1, 2]",
        "explanation": "No collisions occur, so the output is the same as the input."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the surviving asteroids.",
      "Process each asteroid and handle collisions in pairs."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Second Highest Salary",
    "description": "Write a SQL query to get the second highest salary from the Employee table. If there is no second highest salary, the query should return null.",
    "topic": "Databases",
    "subtopic": "SQL Queries",
    "tags": [
      "SQL",
      "Databases",
      "Query"
    ],
    "input_format": "An Employee table with at least the columns id (int) and salary (int).",
    "output_format": "A single integer representing the second highest salary, or null if it does not exist.",
    "constraints": [
      "The Employee table will contain at most 10^4 rows.",
      "Salary values are unique."
    ],
    "examples": [
      {
        "input": "SELECT SecondHighestSalary FROM Employee",
        "output": "20000",
        "explanation": "The salaries are 10000, 20000, and 30000. The second highest is 20000."
      },
      {
        "input": "SELECT SecondHighestSalary FROM Employee",
        "output": "null",
        "explanation": "There is only one salary present, hence no second highest salary."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the DISTINCT keyword to handle duplicate salaries.",
      "You may find it helpful to use subqueries or the LIMIT and OFFSET clauses."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Search Suggestions System",
    "description": "You are tasked with implementing a search suggestions system that provides a list of suggested keywords based on a given input string. The suggestions must be generated from a pre-defined list of keywords and should be lexicographically sorted. If there are fewer suggestions than can be displayed, show as many as there are. The system should generate suggestions for every prefix of the input string as it is typed. If there are no suggestions, return an empty list.",
    "topic": "String",
    "subtopic": "Prefix Search",
    "tags": [
      "String",
      "Searching",
      "Sorting"
    ],
    "input_format": "A list of strings 'words' representing the predefined keywords, and a string 'searchWord' which is the input string for which suggestions are being generated.",
    "output_format": "A list of lists of strings, where each list contains the suggestions for the corresponding prefix of 'searchWord'.",
    "constraints": [
      "1 <= words.length <= 1000",
      "1 <= words[i].length <= 100",
      "All words are unique and contain lowercase letters only.",
      "1 <= searchWord.length <= 100"
    ],
    "examples": [
      {
        "input": {
          "words": [
            "mobile",
            "mouse",
            "moneypot",
            "monitor",
            "mousepad"
          ],
          "searchWord": "mouse"
        },
        "output": [
          [
            "mobile",
            "moneypot",
            "monitor",
            "mouse",
            "mousepad"
          ],
          [
            "mobile",
            "moneypot",
            "monitor",
            "mouse",
            "mousepad"
          ],
          [
            "mobile",
            "moneypot",
            "monitor",
            "mouse",
            "mousepad"
          ],
          [
            "mobile",
            "moneypot",
            "monitor",
            "mouse",
            "mousepad"
          ],
          [
            "mouse",
            "mousepad"
          ]
        ],
        "explanation": "For the input 'mouse', the suggestions are all words starting with 'm', 'mo', 'mou', 'mous', and 'mouse'."
      },
      {
        "input": {
          "words": [
            "apple",
            "app",
            "apricot",
            "banana",
            "berry"
          ],
          "searchWord": "ap"
        },
        "output": [
          [
            "apple",
            "app",
            "apricot"
          ],
          [
            "apple",
            "app",
            "apricot"
          ]
        ],
        "explanation": "For the input 'ap', suggestions are words starting with 'a', 'ap', and 'apri'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a Trie to efficiently store and retrieve the word suggestions.",
      "Leverage sorting to keep the suggestions in lexicographical order."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Jump Game",
    "description": "You are given an array of non-negative integers nums. Each element in the array represents your maximum jump length at that position. Determine if you are able to reach the last index starting from the first index. You can assume you can always jump from the first index, and if you reach an index where you can't jump anymore, you'll be stuck.",
    "topic": "Array",
    "subtopic": "Greedy",
    "tags": [
      "Array",
      "Greedy",
      "Dynamic Programming"
    ],
    "input_format": "An array of non-negative integers nums.",
    "output_format": "A boolean value indicating whether you can reach the last index.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, 1, 1, 4]",
        "output": "true",
        "explanation": "You can jump from index 0 to 1 (3) and then jump to the last index."
      },
      {
        "input": "nums = [3, 2, 1, 0, 4]",
        "output": "false",
        "explanation": "You will be stuck at index 3 and can't reach the last index."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to keep track of the farthest index you can reach at each step.",
      "If at any point your farthest reachable index is less than or equal to your current index, you cannot move further."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Longest Non-decreasing Subarray From Two Arrays",
    "description": "Given two integer arrays, nums1 and nums2, you need to find the length of the longest subarray that is non-decreasing in both arrays when combined. A subarray is defined as a contiguous part of an array. Two subarrays can be combined as a new subarray by first taking a portion from nums1 and then directly followed by a portion from nums2 or vice versa. The goal is to maximize the length of this combined subarray while ensuring that both sections are non-decreasing.",
    "topic": "Array",
    "subtopic": "Subarray Problems",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "input_format": "Two integer arrays nums1 and nums2, where 1 <= nums1.length, nums2.length <= 10^5.",
    "output_format": "An integer representing the length of the longest non-decreasing combined subarray.",
    "constraints": [
      "1 <= nums1.length, nums2.length <= 10^5",
      "-10^9 <= nums1[i], nums2[j] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums1 = [1, 3, 5, 7], nums2 = [2, 4, 6]",
        "output": "5",
        "explanation": "The longest non-decreasing subarray can be [1, 3, 5, 7] from nums1 combined with [2, 4] from nums2."
      },
      {
        "input": "nums1 = [1, 2, 3], nums2 = [3, 2, 1]",
        "output": "3",
        "explanation": "The combined array [1, 2, 3] from nums1 yields a length of 3."
      },
      {
        "input": "nums1 = [5, 4, 3], nums2 = [6, 7, 8]",
        "output": "6",
        "explanation": "The non-decreasing combination is [5, 6, 7, 8] or [6, 7, 8, 5] depending on how segments are combined, both having a length of 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider merging two arrays and finding non-decreasing sequences.",
      "Use a two-pointer technique to effectively navigate both arrays."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Minimum Degree of a Connected Trio in a Graph",
    "description": "You are given an undirected graph represented by a list of edges, where each edge connects two vertices. A 'trio' is defined as a set of three vertices that are all mutually connected to each other. The 'degree' of a trio is the sum of the degrees of its three vertices. Your task is to find the minimum degree among all connected trios in the graph. If no trios exist, return -1.",
    "topic": "Graph",
    "subtopic": "Traversal",
    "tags": [
      "Graph",
      "Trio",
      "Degree"
    ],
    "input_format": "A list of edges, where each edge is represented as a tuple (u, v), indicating an undirected connection between vertices u and v.",
    "output_format": "An integer representing the minimum degree of a connected trio, or -1 if no trios exist.",
    "constraints": [
      "1 <= edges.length <= 20000",
      "0 <= u, v < 10^5"
    ],
    "examples": [
      {
        "input": "edges = [(0, 1), (1, 2), (2, 0), (0, 3), (1, 3)]",
        "output": "3",
        "explanation": "The connected trio (0, 1, 2) has degrees 3, 2, and 2, which sum up to 7. The trio (0, 1, 3) has degrees 3, 2, and 2, which also sum up to 7. The minimum degree is from the trio (0, 1, 2)."
      },
      {
        "input": "edges = [(0, 1), (1, 2), (2, 3)]",
        "output": "-1",
        "explanation": "There are no trio combinations of vertices that are all mutually connected."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using an adjacency list to represent the graph.",
      "You may need to check all combinations of three vertices."
    ],
    "company": "Meesho"
  },
  {
    "question_id": "",
    "title": "Next Permutation",
    "description": "Implement the next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers. If such arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order). The replacement must be done in place and use only constant extra memory.",
    "topic": "Array",
    "subtopic": "Permutation",
    "tags": [
      "Array",
      "Permutation",
      "In-place"
    ],
    "input_format": "An array of distinct integers nums, representing the current permutation.",
    "output_format": "Modify the input array nums in place to represent the next permutation of numbers.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 100"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "[1, 3, 2]",
        "explanation": "The next permutation of [1, 2, 3] is [1, 3, 2]."
      },
      {
        "input": "nums = [3, 2, 1]",
        "output": "[1, 2, 3]",
        "explanation": "As it is the highest permutation, the next permutation is the lowest (sorted) one: [1, 2, 3]."
      },
      {
        "input": "nums = [1, 1, 5]",
        "output": "[1, 5, 1]",
        "explanation": "The next permutation of [1, 1, 5] is [1, 5, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to identify the rightmost ascent in the sequence.",
      "Swap the identified ascent with the smallest number larger than it to its right.",
      "Reverse the sequence after the identified ascent to maintain the next permutation order."
    ],
    "company": "Meesho"
  }
]