[
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid consisting of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "Graph",
    "subtopic": "Depth-First Search (DFS)",
    "tags": [
      "Graph",
      "DFS",
      "Matrix"
    ],
    "input_format": "A 2D array grid where grid[i][j] is either '1' or '0'.",
    "output_format": "An integer representing the number of islands in the grid.",
    "constraints": [
      "1 <= grid.length <= 300",
      "1 <= grid[0].length <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [['1','1','1','1','0'],['1','1','0','1','0'],['1','1','0','0','0'],['0','0','0','0','0']]",
        "output": "1",
        "explanation": "There is one island formed by the '1's."
      },
      {
        "input": "grid = [['1','1','0','0','0'],['1','1','0','0','0'],['0','0','1','0','0'],['0','0','0','1','1']]",
        "output": "3",
        "explanation": "There are three islands in the grid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using DFS or BFS to explore all connected lands.",
      "You can mark the visited land cells to avoid counting the same island multiple times."
    ],
    "company": "Whatnot"
  },
  {
    "question_id": "",
    "title": "Valid Palindrome II",
    "description": "Given a string s, determine if it can be a palindrome after deleting at most one character. A palindrome is a string that reads the same forwards and backwards.",
    "topic": "String",
    "subtopic": "Two Pointers",
    "tags": [
      "String",
      "Palindrome",
      "Two Pointers"
    ],
    "input_format": "A single string s consisting of lowercase and uppercase letters and digits.",
    "output_format": "A boolean value indicating whether the string can be a palindrome after deleting at most one character.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of only alphanumeric characters."
    ],
    "examples": [
      {
        "input": "s = \"abca\"",
        "output": "true",
        "explanation": "By deleting the character 'b', the string becomes 'aca', which is a palindrome."
      },
      {
        "input": "s = \"racecar\"",
        "output": "true",
        "explanation": "The string is already a palindrome, so no character needs to be deleted."
      },
      {
        "input": "s = \"abc\"",
        "output": "false",
        "explanation": "No matter which character is deleted, the result will never be a palindrome."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two pointers to check characters from both ends of the string."
    ],
    "company": "Whatnot"
  },
  {
    "question_id": "",
    "title": "Group Anagrams",
    "description": "Given an array of strings, group the anagrams together. You can return the answer in any order. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Hashing",
    "tags": [
      "String",
      "Hashing",
      "Group Anagrams"
    ],
    "input_format": "An array of strings 'strs'.",
    "output_format": "A list of lists of strings, where each list contains anagrams grouped together.",
    "constraints": [
      "1 <= strs.length <= 10^4",
      "0 <= strs[i].length <= 100",
      "strs[i] consists of lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]",
        "output": "[[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]",
        "explanation": "The anagrams are grouped together. For example, 'eat', 'tea', and 'ate' are anagrams."
      },
      {
        "input": "strs = [\"\"]",
        "output": "[[\"\"]]",
        "explanation": "A single empty string forms a group by itself."
      },
      {
        "input": "strs = [\"a\"]",
        "output": "[[\"a\"]]",
        "explanation": "A single character forms a group by itself."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how you can use sorting or counting characters to identify anagrams."
    ],
    "company": "Whatnot"
  },
  {
    "question_id": "",
    "title": "Remove All Adjacent Duplicates In String",
    "description": "Given a string s, remove all adjacent duplicates from it and return the new string. You must solve the problem using a stack-based approach to ensure optimal performance.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Two Pointers"
    ],
    "input_format": "A single string s consisting of uppercase and lowercase letters.",
    "output_format": "A string representing the result after removing all adjacent duplicates.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists only of lowercase and uppercase English letters."
    ],
    "examples": [
      {
        "input": "s = 'abbaca'",
        "output": "ca",
        "explanation": "Removing adjacent duplicates 'bb' and 'aa' leaves us with 'ca'."
      },
      {
        "input": "s = 'aabbbbccdee'",
        "output": "de",
        "explanation": "Removing 'aa', 'bbbb', and 'cc' leaves us with 'de'."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a stack to keep track of characters.",
      "If the current character is the same as the top of the stack, pop it off."
    ],
    "company": "Whatnot"
  },
  {
    "question_id": "",
    "title": "Search a 2D Matrix II",
    "description": "Write an efficient algorithm that searches for a target value in an m x n integer matrix. This matrix has the following properties: 1. Integers in each row are sorted from left to right. 2. Integers in each column are sorted from top to bottom. Return true if the target value is found in the matrix, otherwise return false.",
    "topic": "Matrix",
    "subtopic": "Binary Search",
    "tags": [
      "Matrix",
      "Binary Search",
      "Searching"
    ],
    "input_format": "A 2D matrix represented as a list of lists of integers and an integer target.",
    "output_format": "A boolean indicating whether the target value exists in the matrix.",
    "constraints": [
      "m == matrix.length",
      "n == matrix[i].length",
      "1 <= m, n <= 100",
      "-10^4 <= matrix[i][j], target <= 10^4"
    ],
    "examples": [
      {
        "input": {
          "matrix": [
            [
              1,
              4,
              7,
              11
            ],
            [
              2,
              5,
              8,
              12
            ],
            [
              3,
              6,
              9,
              16
            ],
            [
              10,
              13,
              14,
              17
            ]
          ],
          "target": 5
        },
        "output": "true",
        "explanation": "Since 5 is found in the matrix, the output is true."
      },
      {
        "input": {
          "matrix": [
            [
              1,
              4,
              7,
              11
            ],
            [
              2,
              5,
              8,
              12
            ],
            [
              3,
              6,
              9,
              16
            ],
            [
              10,
              13,
              14,
              17
            ]
          ],
          "target": 20
        },
        "output": "false",
        "explanation": "Since 20 is not found in the matrix, the output is false."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to improve the search time.",
      "Start searching from the top-right corner and eliminate rows or columns based on comparisons."
    ],
    "company": "Whatnot"
  },
  {
    "question_id": "",
    "title": "Word Search",
    "description": "Given a 2D board and a word, find if the word exists in the grid. The word can be constructed from letters of sequentially adjacent cell, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.",
    "topic": "Backtracking",
    "subtopic": "Depth-First Search",
    "tags": [
      "Backtracking",
      "Depth First Search",
      "Matrix"
    ],
    "input_format": "A 2D board of characters and a string word.",
    "output_format": "A boolean value indicating whether the word exists in the grid.",
    "constraints": [
      "1 <= board.length <= 200",
      "1 <= board[i].length <= 200",
      "board[i][j] is a lowercase English letter.",
      "1 <= word.length <= 10^6"
    ],
    "examples": [
      {
        "input": "board = [['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E']], word = 'ABCCED'",
        "output": "true",
        "explanation": "The word 'ABCCED' can be constructed in the grid, starting from (0,0) to (0,1), (0,2), (1,2), (1,1), (2,1), (2,2)."
      },
      {
        "input": "board = [['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E']], word = 'SEE'",
        "output": "true",
        "explanation": "The word 'SEE' can be constructed in the grid by starting from (2,0) to (2,1) to (1,1)."
      },
      {
        "input": "board = [['A','B','C','E'], ['S','F','C','S'], ['A','D','E','E']], word = 'ABCB'",
        "output": "false",
        "explanation": "The word 'ABCB' cannot be constructed as we cannot visit the same letter cell more than once."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how to search the board.",
      "Consider using a backtracking approach to explore all possible paths.",
      "Keep track of visited cells to avoid using the same letter multiple times."
    ],
    "company": "Whatnot"
  },
  {
    "question_id": "",
    "title": "Squares of a Sorted Array",
    "description": "Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Squares"
    ],
    "input_format": "An array of integers nums that is sorted in non-decreasing order.",
    "output_format": "An array of integers representing the squares of each number in non-decreasing order.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-4, -1, 0, 3, 10]",
        "output": "[0, 1, 9, 16, 100]",
        "explanation": "The squares are [16, 1, 0, 9, 100] which, when sorted, give [0, 1, 9, 16, 100]."
      },
      {
        "input": "nums = [-7, -3, 2, 3, 11]",
        "output": "[4, 9, 9, 49, 121]",
        "explanation": "The squares are [49, 9, 4, 9, 121] which, when sorted, result in [4, 9, 9, 49, 121]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a two-pointer technique to efficiently sort the squares."
    ],
    "company": "Whatnot"
  }
]