[
  {
    "question_id": "",
    "title": "Largest Number",
    "description": "Given a list of non-negative integers, arrange them such that they form the largest possible number when concatenated. Return the largest number as a string. The result may be very large, so you need to return it as a string instead of an integer.",
    "topic": "Sorting",
    "subtopic": "Custom Sorting",
    "tags": [
      "Sorting",
      "Greedy",
      "String"
    ],
    "input_format": "An array of non-negative integers nums.",
    "output_format": "A string representing the largest number that can be formed by concatenating the integers.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [10, 2]",
        "output": "210",
        "explanation": "The largest number is formed by concatenating 2 and 10."
      },
      {
        "input": "nums = [3, 30, 34, 5, 9]",
        "output": "9534330",
        "explanation": "The largest number is formed by concatenating 9, 5, 34, 3, and 30."
      },
      {
        "input": "nums = [0, 0]",
        "output": "0",
        "explanation": "The largest number is 0 when all numbers are 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how to compare two numbers based on their concatenated values.",
      "You may need to implement a custom comparator for sorting."
    ],
    "company": "Nykaa"
  },
  {
    "question_id": "",
    "title": "Koko Eating Bananas",
    "description": "Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. Koko can decide to eat some or all bananas in a pile during the day. Koko can choose the speed of eating bananas but must eat at least one banana each day. Koko wants to eat all the bananas in the piles within h hours. Your goal is to determine the minimum integer speed k such that Koko can eat all the bananas within h hours.\n\nKoko can eat bananas at two different speeds: k bananas per hour during the day and 1 banana per hour during the night. If Koko starts the day with k or more bananas, he will eat at the speed of k. Otherwise, he will eat any remaining bananas at the speed of 1 banana per hour until no bananas remain in that pile. Calculate the minimum speed k required for Koko to finish all the bananas in h hours.",
    "topic": "Binary Search",
    "subtopic": "Searching",
    "tags": [
      "Binary Search",
      "Greedy",
      "Array"
    ],
    "input_format": "Two integers n and h followed by an array piles of length n, where piles[i] indicates the count of bananas in the ith pile.",
    "output_format": "An integer representing the minimum speed k for Koko to eat all the bananas within h hours.",
    "constraints": [
      "1 <= piles.length <= 10^4",
      "1 <= piles[i] <= 10^9",
      "1 <= h <= 10^9"
    ],
    "examples": [
      {
        "input": "piles = [3, 6, 7, 11], h = 8",
        "output": "4",
        "explanation": "With speed k = 4, Koko takes 4 hours to eat 3 bananas from the first pile, 2 hours for 6 bananas from the second pile, 2 hours for 7 bananas, and 1 hour for 1 banana from the last pile. Total 4 + 2 + 2 + 0 = 8 hours."
      },
      {
        "input": "piles = [30, 11, 23, 4, 20], h = 5",
        "output": "30",
        "explanation": "With speed k = 30, Koko can finish within 5 hours (30 from the first pile, 0 from the other piles)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider performing a binary search on the possible eating speeds.",
      "Adjust the search range based on whether the current speed allows Koko to finish in h hours."
    ],
    "company": "Nykaa"
  },
  {
    "question_id": "",
    "title": "Merge k Sorted Lists",
    "description": "You are given an array of k linked-lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.",
    "topic": "Linked List",
    "subtopic": "Merging",
    "tags": [
      "Linked List",
      "Sorting",
      "Merge"
    ],
    "input_format": "An array of k linked-lists where each linked-list is represented by a head node.",
    "output_format": "A linked-list that represents all the merged values from the k sorted linked-lists.",
    "constraints": [
      "0 <= k <= 10^4",
      "0 <= n <= 500",
      "The total number of nodes across all linked-lists does not exceed 10^4."
    ],
    "examples": [
      {
        "input": "lists = [[1,4,5],[1,3,4],[2,6]]",
        "output": "[1,1,2,3,4,4,5,6]",
        "explanation": "The merged linked-list is 1->1->2->3->4->4->5->6."
      },
      {
        "input": "lists = []",
        "output": "[]",
        "explanation": "Since the input is an empty list of linked-lists, the output is also an empty linked-list."
      },
      {
        "input": "lists = [[-1,5,11],[2,6],[3,4]]",
        "output": "[-1,2,3,4,5,6,11]",
        "explanation": "The merged linked-list is -1->2->3->4->5->6->11."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a priority queue to efficiently merge the lists.",
      "Take advantage of the fact that all lists are already sorted."
    ],
    "company": "Nykaa"
  },
  {
    "question_id": "",
    "title": "Diagonal Traverse",
    "description": "Given a 2D matrix of integers, return all elements of the matrix in diagonal order starting from the top-left corner of the matrix. The traversal starts from the leftmost column and goes up and down alternately. When reaching the boundary of the matrix, the direction of traversal changes.",
    "topic": "Matrix",
    "subtopic": "Traversal",
    "tags": [
      "Matrix",
      "Traversal",
      "Diagonal"
    ],
    "input_format": "A 2D matrix of integers represented as a list of lists.",
    "output_format": "A list of integers representing the elements in diagonal order.",
    "constraints": [
      "1 <= matrix.length <= 100",
      "1 <= matrix[i].length <= 100",
      "-10^5 <= matrix[i][j] <= 10^5"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "[1, 2, 4, 7, 5, 3, 6, 8, 9]",
        "explanation": "The diagonal order is: 1 -> 2, then change direction to 4 -> 7, then back up to 5, then down to 3, and so on."
      },
      {
        "input": "matrix = [[1, 2], [3, 4]]",
        "output": "[1, 2, 4, 3]",
        "explanation": "The diagonal order is: 1 -> 2, then change direction to 4, then back down to 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Keep track of the direction of traversal.",
      "Think about how you handle boundaries of the matrix."
    ],
    "company": "Nykaa"
  },
  {
    "question_id": "",
    "title": "Remove Duplicates from Sorted Array II",
    "description": "Given a sorted integer array nums, you need to remove some duplicates in-place such that each element appears at most twice and returns the new length of the array. Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "In-place",
      "Modification"
    ],
    "input_format": "A sorted integer array nums.",
    "output_format": "An integer representing the new length of the modified array.",
    "constraints": [
      "0 <= nums.length <= 3 * 10^4",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [1,1,1,2,2,3]",
        "output": "5",
        "explanation": "After removing duplicates, the array might look like [1,1,2,2,3], and the new length is 5."
      },
      {
        "input": "nums = [0,0,1,1,1,1,2,3,3]",
        "output": "7",
        "explanation": "The modified array is [0,0,1,1,2,3,3], and the new length is 7."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a two-pointer technique to manage the position of duplicates.",
      "Keep track of the count of occurrences while iterating through the array."
    ],
    "company": "Nykaa"
  }
]