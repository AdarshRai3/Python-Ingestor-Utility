[
  {
    "question_id": "",
    "title": "Maximum Points in an Archery Competition",
    "description": "In an archery competition, there are multiple rounds. Each round consists of shooting arrows at a set of concentric circles, where each circle has a specified number of points. Given an integer array `points` where `points[i]` represents the points available for the i-th circle, and an integer `arrows` representing the total number of arrows that can be shot, your task is to find the maximum possible points that can be obtained by distributing the arrows optimally across the circles. You can choose to shoot the arrows in any sequence, but you can't exceed the available arrows at any circle.",
    "topic": "Dynamic Programming",
    "subtopic": "Optimization",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Optimization"
    ],
    "input_format": "An integer array points where 1 <= points.length <= 100 and 1 <= points[i] <= 100, followed by an integer arrows (1 <= arrows <= 100).",
    "output_format": "An integer representing the maximum points achievable.",
    "constraints": [
      "1 <= points.length <= 100",
      "1 <= points[i] <= 100",
      "1 <= arrows <= 100"
    ],
    "examples": [
      {
        "input": "points = [1, 2, 3], arrows = 4",
        "output": "10",
        "explanation": "Shoot all 4 arrows at the highest scoring circle to maximize points: 3*4 = 12."
      },
      {
        "input": "points = [3, 2, 1], arrows = 3",
        "output": "6",
        "explanation": "Shoot 3 arrows at the first circle (3 points) to get 9 points."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a greedy approach to maximize points with the available arrows.",
      "Try to find a way to distribute arrows that prioritizes higher point circles."
    ],
    "company": "Kakao"
  },
  {
    "question_id": "",
    "title": "Minimum Moves to Reach Target with Rotations",
    "description": "You are given a 2D grid representing a board, where each cell contains an integer representing the cost to enter that cell. You can move up, down, left, or right, and you can also rotate in place to move to an adjacent cell. Your goal is to find the minimum cost to reach a target position from a starting position. The movement cost is defined by the integer values in the cells you pass through, and rotations have a cost of zero. Return the minimum cost to reach the target cell.",
    "topic": "Graph",
    "subtopic": "Shortest Path",
    "tags": [
      "Graph",
      "Shortest Path",
      "Dynamic Programming"
    ],
    "input_format": "A 2D grid of integers, grid, representing the cost of entering each cell, and two pairs of integers (startRow, startCol) and (targetRow, targetCol) representing the starting and target positions, respectively.",
    "output_format": "An integer representing the minimum cost to reach the target cell.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 100",
      "0 <= grid[i][j] <= 100",
      "0 <= startRow, startCol < grid.length",
      "0 <= targetRow, targetCol < grid.length"
    ],
    "examples": [
      {
        "input": "grid = [[1,3,1],[1,5,1],[4,2,1]], startRow = 0, startCol = 0, targetRow = 2, targetCol = 2",
        "output": "7",
        "explanation": "The minimum cost path is 1 \u2192 3 \u2192 1 \u2192 1, which costs 1 + 3 + 1 + 2 = 7."
      },
      {
        "input": "grid = [[1,2,3],[4,5,6],[7,8,9]], startRow = 0, startCol = 0, targetRow = 1, targetCol = 2",
        "output": "8",
        "explanation": "The minimum cost path is 1 \u2192 2 \u2192 6, which costs 1 + 2 + 5 = 8."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using Dijkstra's algorithm to find the minimum cost path.",
      "Keep track of the costs while exploring each cell."
    ],
    "company": "Kakao"
  }
]