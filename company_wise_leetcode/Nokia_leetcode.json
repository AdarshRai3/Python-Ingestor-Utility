[
  {
    "question_id": "",
    "title": "Minimum Cost of Buying Candies With Discount",
    "description": "You are given an integer array 'cost' where cost[i] represents the cost of the i-th candy. When you buy a candy, you can get another candy of the lowest cost for free if you buy three or more candies. Your task is to calculate the minimum cost to buy all candies while maximizing the usage of this discount.",
    "topic": "Greedy",
    "subtopic": "Optimization",
    "tags": [
      "Greedy",
      "Dynamic Programming",
      "Array"
    ],
    "input_format": "An array of integers cost, where 1 <= cost.length <= 1000 and 1 <= cost[i] <= 1000.",
    "output_format": "An integer representing the minimum cost of buying all candies.",
    "constraints": [
      "1 <= cost.length <= 1000",
      "1 <= cost[i] <= 1000"
    ],
    "examples": [
      {
        "input": "cost = [1, 2, 3, 4, 5]",
        "output": "9",
        "explanation": "Buy candies with costs 4, 5 and get the candy with cost 3 for free. Total cost = 4 + 5 = 9."
      },
      {
        "input": "cost = [2, 3, 5, 1, 4]",
        "output": "11",
        "explanation": "Buy candies with costs 5, 4, and 3 and get the candy with cost 1 for free. Total cost = 5 + 4 + 3 = 12."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Sort the cost array in descending order and process in groups of three."
    ],
    "company": "Nokia"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for a Least Recently Used (LRU) Cache. It should support the following operations: get and put. The get operation retrieves the value of the key if the key exists in the cache, otherwise, it returns -1. The put operation should insert or update the value of the key. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Data Structures",
    "subtopic": "Cache",
    "tags": [
      "HashMap",
      "LinkedList",
      "Cache",
      "Design"
    ],
    "input_format": "The operations will be given as a list of tuples, where each tuple is either ('put', key, value) or ('get', key).",
    "output_format": "An integer value for get operations, or None for put operations.",
    "constraints": [
      "1 <= capacity <= 3000",
      "0 <= key, value <= 10^4",
      "The operations are guaranteed to be called in a valid order."
    ],
    "examples": [
      {
        "input": "[('put', 1, 1), ('put', 2, 2), ('get', 1), ('put', 3, 3), ('get', 2), ('put', 4, 4), ('get', 1), ('get', 3), ('get', 4)]",
        "output": "[1, -1, -1, 3, 4]",
        "explanation": "The sequence of operations results in the following outputs for corresponding get operations."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a combination of a hash map and a doubly linked list.",
      "Keep track of the order of usage to determine the least recently used item."
    ],
    "company": "Nokia"
  },
  {
    "question_id": "",
    "title": "Check If It Is a Good Array",
    "description": "Given an array of integers, determine if it is a 'good' array. An array is defined as 'good' if you can make the greatest common divisor (GCD) of the array equal to 1 by possibly deleting some elements. Your task is to implement a function that checks if the given array meets this condition.",
    "topic": "Math",
    "subtopic": "Greatest Common Divisor",
    "tags": [
      "GCD",
      "Math",
      "Array"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A boolean value indicating whether the array is 'good'.",
    "constraints": [
      "1 <= nums.length <= 100",
      "1 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [3, 6, 9]",
        "output": "false",
        "explanation": "The GCD of all elements is 3, and it cannot be made 1 by deleting any element."
      },
      {
        "input": "nums = [3, 5, 7]",
        "output": "true",
        "explanation": "The GCD of all elements is 1, so the array is already good."
      },
      {
        "input": "nums = [12, 15, 21]",
        "output": "true",
        "explanation": "By deleting 12, the GCD of remaining elements 15 and 21 becomes 3, which can be made 1 by further deletion."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider the properties of GCD.",
      "Using the Euclidean algorithm may simplify your approach."
    ],
    "company": "Nokia"
  },
  {
    "question_id": "",
    "title": "Count Primes",
    "description": "Given an integer n, return the number of prime numbers that are strictly less than n.",
    "topic": "Number Theory",
    "subtopic": "Primality Testing",
    "tags": [
      "Prime",
      "Counting",
      "Number Theory"
    ],
    "input_format": "An integer n (0 <= n <= 10^6).",
    "output_format": "An integer representing the number of prime numbers less than n.",
    "constraints": [
      "0 <= n <= 10^6"
    ],
    "examples": [
      {
        "input": "n = 10",
        "output": "4",
        "explanation": "The prime numbers less than 10 are 2, 3, 5, and 7. Therefore, the count is 4."
      },
      {
        "input": "n = 0",
        "output": "0",
        "explanation": "There are no prime numbers less than 0."
      },
      {
        "input": "n = 1",
        "output": "0",
        "explanation": "There are no prime numbers less than 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the Sieve of Eratosthenes for efficient prime counting."
    ],
    "company": "Nokia"
  },
  {
    "question_id": "",
    "title": "Longest Common Prefix",
    "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \"\".",
    "topic": "String",
    "subtopic": "Prefix",
    "tags": [
      "String",
      "Prefix",
      "Array"
    ],
    "input_format": "An array of strings strs where 1 <= strs.length <= 200 and 0 <= strs[i].length <= 200.",
    "output_format": "A string representing the longest common prefix. If there is none, return \"\".",
    "constraints": [
      "1 <= strs.length <= 200",
      "0 <= strs[i].length <= 200",
      "All strings consist of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "strs = [\"flower\", \"flow\", \"flight\"]",
        "output": "\"fl\"",
        "explanation": "The longest common prefix is \"fl\"."
      },
      {
        "input": "strs = [\"dog\", \"racecar\", \"car\"]",
        "output": "\"\"",
        "explanation": "There is no common prefix among the strings."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider sorting the array to find the common prefix more easily.",
      "Compare the characters of the strings one by one."
    ],
    "company": "Nokia"
  },
  {
    "question_id": "",
    "title": "Valid Anagram",
    "description": "Given two strings s and t, return true if t is an anagram of s and false otherwise. An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.",
    "topic": "String",
    "subtopic": "Hash Table",
    "tags": [
      "String",
      "Hash Table",
      "Sorting"
    ],
    "input_format": "Two strings s and t, each containing only lowercase English letters.",
    "output_format": "A boolean value indicating whether t is an anagram of s.",
    "constraints": [
      "1 <= s.length, t.length <= 5 * 10^4",
      "s and t consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"anagram\", t = \"nagaram\"",
        "output": "true",
        "explanation": "Both strings have the same letters with the same frequency."
      },
      {
        "input": "s = \"rat\", t = \"car\"",
        "output": "false",
        "explanation": "The string 'car' cannot be formed from the string 'rat' as they have different letters."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Think about how you can count occurrences of each character.",
      "You might want to use a hash map or sort the strings."
    ],
    "company": "Nokia"
  }
]