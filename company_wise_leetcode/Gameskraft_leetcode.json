[
  {
    "question_id": "",
    "title": "Maximize Sum of Weights after Edge Removals",
    "description": "You are given an undirected graph with weighted edges. Your task is to maximize the sum of weights of the remaining edges after you are allowed to remove certain edges. However, you can only remove edges if the resulting graph remains connected. Calculate the maximum possible sum of weights of the edges that can be retained.",
    "topic": "Graph",
    "subtopic": "Graph Theory",
    "tags": [
      "Graph",
      "Dynamic Programming",
      "Union Find"
    ],
    "input_format": "The input consists of two integers n (the number of nodes) and m (the number of edges) followed by m edges, each represented by three integers u, v, and w, which denote an edge between nodes u and v with weight w.",
    "output_format": "An integer representing the maximum possible sum of weights of the remaining edges.",
    "constraints": [
      "1 <= n <= 1000",
      "1 <= m <= 2000",
      "1 <= w <= 10^5"
    ],
    "examples": [
      {
        "input": "n = 5, m = 6, edges = [[1, 2, 3], [1, 3, 4], [2, 3, 5], [3, 4, 6], [4, 5, 1], [2, 5, 2]]",
        "output": "16",
        "explanation": "The edges with weights 4, 5, and 6 can be retained, forming a connected graph with a total weight of 4 + 5 + 6 = 15."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a greedy approach to prioritize heavier edges.",
      "Think about the properties of Minimum Spanning Trees."
    ],
    "company": "Gameskraft"
  },
  {
    "question_id": "",
    "title": "IPO",
    "description": "You are a venture capitalist and have a certain amount of investment capital. Given a list of projects, each with a cost and expected return, determine the maximum total return you can achieve. You can only invest in a project if you have enough capital to cover its cost. Your goal is to maximize the profit based on your initial capital and the projects available.",
    "topic": "Dynamic Programming",
    "subtopic": "Knapsack Problem",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Knapsack"
    ],
    "input_format": "An integer 'capital' representing the initial investment capital and a list of projects where each project is represented by a pair of integers [cost, return].",
    "output_format": "An integer representing the maximum return possible from the investment.",
    "constraints": [
      "0 <= capital <= 10^6",
      "1 <= projects.length <= 10^4",
      "0 <= projects[i][0], projects[i][1] <= 10^6"
    ],
    "examples": [
      {
        "input": "capital = 5, projects = [[1, 2], [2, 3], [3, 4]]",
        "output": "7",
        "explanation": "Invest in project [2, 3] and then project [1, 2]. Total return is 3 + 2 = 5."
      },
      {
        "input": "capital = 10, projects = [[5, 10], [6, 8], [3, 5]]",
        "output": "18",
        "explanation": "Choose projects [5, 10] and [3, 5]. Total return is 10 + 5 = 15."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider sorting the projects based on their cost and utilizing a greedy approach.",
      "Dynamic programming can help you keep track of maximum returns with available capital."
    ],
    "company": "Gameskraft"
  },
  {
    "question_id": "",
    "title": "LFU Cache",
    "description": "Design and implement a data structure for a Least Frequently Used (LFU) Cache. It should support the following operations: get and put. The cache should be initialized with a positive capacity. When the capacity is reached, it should invalidate the least frequently used item before inserting a new item. The get method should return the value of the key if the key exists in the cache, otherwise return -1. The put method should update or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used key before inserting a new key-value pair.",
    "topic": "Data Structures",
    "subtopic": "Cache Implementation",
    "tags": [
      "Cache",
      "Data Structures",
      "Design"
    ],
    "input_format": "An integer representing the capacity of the cache and a series of operations (get, put) in the form of key-value pairs.",
    "output_format": "The value returned by the get operation, or -1 if the key is not found.",
    "constraints": [
      "The cache capacity is a positive integer (1 <= capacity <= 10^4).",
      "Keys and values are integers (1 <= key, value <= 10^5).",
      "The total number of operations will not exceed 2 * 10^5."
    ],
    "examples": [
      {
        "input": "cache = new LFUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.get(3); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1,-1,3,4]",
        "explanation": "After putting 1, 2, and 3 (with respective accesses), the cache evicts 2 to add 4."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use hash maps to store key-value and key-frequency pairs.",
      "Use a data structure to efficiently retrieve and remove the least frequently used item."
    ],
    "company": "Gameskraft"
  },
  {
    "question_id": "",
    "title": "Sliding Window Maximum",
    "description": "Given an array of integers nums and an integer k, return the maximum sliding window for each sliding window of size k. You must solve it in O(n) time complexity.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Deque"
    ],
    "input_format": "An array of integers nums followed by an integer k.",
    "output_format": "An array of integers representing the maximum values of each sliding window.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [1,3,-1,-3,5,3,6,7], k = 3",
        "output": "[3,3,5,5,6,7]",
        "explanation": "The sliding windows are: [1, 3, -1], [3, -1, -3], [-1, -3, 5], [-3, 5, 3], [5, 3, 6], [3, 6, 7]. The maximums of these windows are 3, 3, 5, 5, 6, and 7 respectively."
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]",
        "explanation": "Only one element is present, so the maximum is that element itself."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a deque to keep track of the maximums efficiently.",
      "To maintain the invariant of the deque, remove elements that are out of the current sliding window.",
      "Only keep useful elements in the deque that are candidates for the maximum."
    ],
    "company": "Gameskraft"
  }
]