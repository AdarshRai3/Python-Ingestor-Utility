[
  {
    "question_id": "",
    "title": "Longest String Chain",
    "description": "Given a list of words, you need to determine the length of the longest possible string chain. A string 'A' is said to be a predecessor of string 'B' if and only if we can insert exactly one letter anywhere in 'A' to make 'B'. For example, 'a' is a predecessor of 'ab', and 'abc' is a predecessor of 'abcd'. Your task is to find the maximum length of a string chain that can be formed from the listed words.",
    "topic": "Dynamic Programming",
    "subtopic": "Longest Chain",
    "tags": [
      "Dynamic Programming",
      "String Manipulation",
      "Greedy"
    ],
    "input_format": "A list of strings words.",
    "output_format": "An integer representing the length of the longest string chain.",
    "constraints": [
      "1 <= words.length <= 1000",
      "1 <= words[i].length <= 16",
      "All words consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "words = [\"a\", \"b\", \"ba\", \"bca\", \"bda\", \"bdca\"]",
        "output": "5",
        "explanation": "The longest chain is 'a' -> 'ba' -> 'bda' -> 'bdca' with length 4."
      },
      {
        "input": "words = [\"xbc\", \"pc\", \"xbc\", \"a\"]",
        "output": "2",
        "explanation": "The longest chain is 'a' -> 'pc' with length 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the words based on length.",
      "Use a dynamic programming approach to keep track of the longest chain for each word.",
      "Check all possible predecessors when updating chain lengths."
    ],
    "company": "Moloco"
  },
  {
    "question_id": "",
    "title": "Design a Stack With Increment Operation",
    "description": "Design a stack that supports the following operations: push, pop, and an increment operation. Implement the Stack class, which supports the following methods: \n\n1. `push(int x)`: Pushes an element x onto the stack.\n2. `pop()`: Removes the element on the top of the stack and returns it. If the stack is empty, return -1.\n3. `increment(int k, int val)`: Increments the bottom k elements of the stack by val. If there are fewer than k elements in the stack, increment all elements.\n\nImplement this stack efficiently, considering optimal time complexity for each operation.",
    "topic": "Design",
    "subtopic": "Stack",
    "tags": [
      "Stack",
      "Design",
      "Data Structure"
    ],
    "input_format": "A series of operations to be performed on the stack.",
    "output_format": "The result of pop operations, if applicable.",
    "constraints": [
      "All operations will be valid.",
      "The number of operations will not exceed 1000.",
      "0 <= val <= 1000",
      "0 <= k <= 1000"
    ],
    "examples": [
      {
        "input": "stack.push(1); stack.push(2); stack.increment(2, 5); stack.pop(); stack.pop();",
        "output": "7, 6",
        "explanation": "After pushing 1 and 2, the stack is [1, 2]. Incrementing the bottom 2 elements by 5 results in [6, 7]. Popping returns 7 first, then 6."
      },
      {
        "input": "stack.push(1); stack.increment(1, 2); stack.pop();",
        "output": "3",
        "explanation": "After pushing 1 and incrementing the bottom element by 2, popping gives 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use an underlying array to implement the stack.",
      "Consider using an auxiliary array to keep track of increments."
    ],
    "company": "Moloco"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the height of walls, compute how much rainwater can be trapped after raining. Each wall has a width of 1.",
    "topic": "Dynamic Programming",
    "subtopic": "Array",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Two Pointers"
    ],
    "input_format": "An array of integers height representing the height of walls.",
    "output_format": "An integer representing the total amount of rainwater that can be trapped.",
    "constraints": [
      "0 <= height.length <= 2 * 10^4",
      "0 <= height[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The walls at indexes 1 and 7 can trap rainwater, totaling to 6 units."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The walls can trap a total of 9 units of water."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how to calculate the water trapped at each index based on the height to the left and right."
    ],
    "company": "Moloco"
  },
  {
    "question_id": "",
    "title": "Meeting Rooms II",
    "description": "Given an array of meeting time intervals where intervals[i] = [start_i, end_i], return the minimum number of conference rooms required to hold all meetings. A conference room is available if it is not occupied by another meeting at the same time.",
    "topic": "Greedy",
    "subtopic": "Interval Scheduling",
    "tags": [
      "Greedy",
      "Sorting",
      "Interval",
      "Meeting Rooms"
    ],
    "input_format": "An array of intervals, where each interval is represented as [start, end].",
    "output_format": "An integer representing the minimum number of conference rooms required.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "0 <= start_i < end_i <= 10^6"
    ],
    "examples": [
      {
        "input": "intervals = [[0, 30], [5, 10], [15, 20]]",
        "output": "2",
        "explanation": "There are two overlapping meetings, so we need two conference rooms."
      },
      {
        "input": "intervals = [[7, 10], [2, 4]]",
        "output": "1",
        "explanation": "The meetings do not overlap, so only one conference room is needed."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sorting approach based on start times."
    ],
    "company": "Moloco"
  },
  {
    "question_id": "",
    "title": "Single Element in a Sorted Array",
    "description": "You are given a sorted array of integers where every element appears exactly twice, except for one element that appears once. Your task is to find the single element that appears only once. You must implement an algorithm that runs in O(log n) time complexity.",
    "topic": "Binary Search",
    "subtopic": "Search Algorithm",
    "tags": [
      "Array",
      "Binary Search",
      "Bit Manipulation"
    ],
    "input_format": "A sorted array of integers nums.",
    "output_format": "An integer representing the single element that appears only once.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "nums[i] is sorted and follows the condition that every other element appears exactly twice."
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 2, 2, 3, 3, 4, 5, 5]",
        "output": "4",
        "explanation": "The number 4 appears only once in the array, while all other numbers appear twice."
      },
      {
        "input": "nums = [0, 0, 1, 1, 2, 3, 3, 4, 4]",
        "output": "2",
        "explanation": "The number 2 appears only once, while all other numbers occur twice."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to reduce the search space.",
      "Observe the properties of the indices in regards to even and odd."
    ],
    "company": "Moloco"
  },
  {
    "question_id": "",
    "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
    "description": "Given an integer array nums and an integer limit, return the length of the longest continuous subarray such that the absolute difference between any two elements in this subarray is less than or equal to limit.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Two Pointers"
    ],
    "input_format": "An integer array nums and an integer limit.",
    "output_format": "An integer representing the length of the longest continuous subarray.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^9",
      "0 <= limit <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [8, 2, 4, 7], limit = 4",
        "output": "2",
        "explanation": "The longest subarray with an absolute difference <= 4 is [2, 4] or [4, 7], both of which have length 2."
      },
      {
        "input": "nums = [10, 1, 2, 4, 7, 2], limit = 5",
        "output": "4",
        "explanation": "The longest subarray with an absolute difference <= 5 is [1, 2, 4, 2], which has length 4."
      },
      {
        "input": "nums = [4, 2, 2, 2, 4], limit = 0",
        "output": "3",
        "explanation": "The longest subarray with an absolute difference <= 0 is [2, 2, 2], which has length 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach.",
      "Keep track of the maximum and minimum values in the current window."
    ],
    "company": "Moloco"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given an m x n 2D binary grid `grid` which represents a map where '1's represent land and '0's represent water, return the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically.",
    "topic": "Graph",
    "subtopic": "Depth First Search",
    "tags": [
      "DFS",
      "Graph",
      "Matrix",
      "Recursion"
    ],
    "input_format": "A 2D binary grid where `grid[i][j]` is either '0' (water) or '1' (land).",
    "output_format": "An integer representing the number of islands.",
    "constraints": [
      "m == grid.length",
      "n == grid[i].length",
      "1 <= m, n <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "grid = [[1,1,0,0,0],[1,1,0,0,1],[0,0,0,1,1]]",
        "output": "3",
        "explanation": "There are three islands in the grid."
      },
      {
        "input": "grid = [[1,1,1,1,0],[1,1,0,0,0],[1,0,0,1,1],[0,0,0,0,0],[0,1,1,1,1]]",
        "output": "2",
        "explanation": "There are two islands in the grid."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using DFS to explore the islands.",
      "Mark the visited land as water to avoid counting it again."
    ],
    "company": "Moloco"
  }
]