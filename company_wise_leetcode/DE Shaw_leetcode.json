[
  {
    "question_id": "",
    "title": "Binary Tree Cameras",
    "description": "You are given a binary tree where each node can either have a camera or not. The camera can monitor its parent, itself, and its immediate children. You need to determine the minimum number of cameras needed to ensure that every node in the tree is monitored. If a node has a camera, it does not require additional cameras for its children or itself. If a node is monitored by its parent or its children, it also does not require a camera.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "The root of a binary tree.",
    "output_format": "An integer representing the minimum number of cameras required to monitor all nodes in the tree.",
    "constraints": [
      "1 <= number of nodes <= 1000",
      "Node values are distinct and between 1 and 10^4."
    ],
    "examples": [
      {
        "input": "root = [0,0,null,0,0]",
        "output": "1",
        "explanation": "Placing a camera at the root node monitors all nodes."
      },
      {
        "input": "root = [0,0,0,null,null,0,0]",
        "output": "2",
        "explanation": "One camera at the left child and one at the right child is needed to monitor all nodes."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider a post-order traversal to decide where to place cameras.",
      "Think about how to cover the nodes effectively with the least cameras."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Minimum Size Subarray in Infinite Array",
    "description": "Given an infinite array with positive integers starting from 1 and incrementing by 1, find the minimum size of a contiguous subarray such that the sum of the elements is at least a given target value. Your goal is to determine the smallest length of such a subarray, or return 0 if no such subarray exists.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Prefix Sum"
    ],
    "input_format": "An integer target representing the target sum.",
    "output_format": "An integer representing the minimum size of the subarray, or 0 if no such subarray exists.",
    "constraints": [
      "1 <= target <= 10^9"
    ],
    "examples": [
      {
        "input": "target = 7",
        "output": "3",
        "explanation": "The minimum subarray to achieve a sum of at least 7 is [2, 3, 4] (sum = 9). The length is 3."
      },
      {
        "input": "target = 15",
        "output": "5",
        "explanation": "The minimum subarray to achieve a sum of at least 15 is [5, 6, 7] (sum = 18). The length is 5."
      },
      {
        "input": "target = 1",
        "output": "1",
        "explanation": "The minimum subarray to achieve a sum of at least 1 is [1] (sum = 1). The length is 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window approach to minimize the length of the subarray.",
      "Keep track of the cumulative sum of the elements as you iterate through the array."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Removing Minimum Number of Magic Beans",
    "description": "You are given an integer array, nums, where each element represents the number of magic beans in each pot. Your task is to determine the minimum number of beans you need to remove so that the sum of the remaining beans is at least a given threshold, target. If it is not possible to reach the threshold even after removing all beans, return -1.",
    "topic": "Dynamic Programming",
    "subtopic": "Prefix Sum",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An integer array nums, followed by an integer target.",
    "output_format": "An integer representing the minimum number of beans to remove, or -1 if the task is impossible.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^4",
      "0 <= target <= sum(nums)"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5], target = 9",
        "output": "2",
        "explanation": "By removing 1 and 2, the remaining sum is 3 + 4 + 5 = 12 which is >= 9."
      },
      {
        "input": "nums = [1, 2, 3], target = 10",
        "output": "-1",
        "explanation": "Even removing all beans gives a total of 1 + 2 + 3 = 6, which is less than 10."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the array to facilitate the removal process.",
      "Use a greedy approach to maximize the remaining total after removals.",
      "Calculate the total beans and check how many need to be removed."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Letter Combinations of a Phone Number",
    "description": "Given a string representing the digits on a phone keypad, return all possible letter combinations that the number could represent. A mapping of digit to letters is provided below (1 does not map to any letters):\n\n2 -> 'abc'\n3 -> 'def'\n4 -> 'ghi'\n5 -> 'jkl'\n6 -> 'mno'\n7 -> 'pqrs'\n8 -> 'tuv'\n9 -> 'wxyz'\n\nFor example, if the input is '23', a possible output can be ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']. The combinations should be returned in lexicographical order.",
    "topic": "Backtracking",
    "subtopic": "Combinatorial Generation",
    "tags": [
      "Backtracking",
      "Recursion",
      "String"
    ],
    "input_format": "A string of digits (from '2' to '9') representing the phone number.",
    "output_format": "A list of all possible letter combinations that the number could represent.",
    "constraints": [
      "0 <= digits.length <= 4",
      "digits[i] is a digit in the range ['2', '9']"
    ],
    "examples": [
      {
        "input": "digits = '23'",
        "output": "['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']",
        "explanation": "The digit '2' maps to 'abc' and '3' maps to 'def'. The combinations are formed by taking each letter from the first mapped string and appending each letter from the second."
      },
      {
        "input": "digits = ''",
        "output": "[]",
        "explanation": "An empty input leads to no combinations."
      },
      {
        "input": "digits = '2'",
        "output": "['a', 'b', 'c']",
        "explanation": "The digit '2' maps directly to 'abc'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using backtracking to generate combinations.",
      "Use a list to map each digit to its corresponding letters."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Maximum Subsequence Score",
    "description": "You are given two arrays of integers, nums1 and nums2, both of length n. You need to find a subsequence that selects one element from nums1 and one element from nums2 such that the score of the subsequence is defined as the sum of the selected elements multiplied by the minimum element of the selected elements. Return the maximum possible score of any such subsequence.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "Two arrays of integers nums1 and nums2.",
    "output_format": "An integer representing the maximum score of the subsequence.",
    "constraints": [
      "1 <= nums1.length, nums2.length <= 10^5",
      "-10^4 <= nums1[i], nums2[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums1 = [1, 3, 5], nums2 = [2, 4, 6]",
        "output": "30",
        "explanation": "Selecting 5 from nums1 and 6 from nums2 gives us the score (5 + 6) * min(5, 6) = 11 * 5 = 55."
      },
      {
        "input": "nums1 = [2, 1, 8], nums2 = [3, 3, 1]",
        "output": "24",
        "explanation": "Selecting 8 from nums1 and 3 from nums2 gives us the score (8 + 3) * min(8, 3) = 11 * 3 = 33."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the contribution of each pair on the score.",
      "Utilize the min function effectively with array selections."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Sum Game",
    "description": "In a game, players are given a list of integers representing the scores they can earn in different rounds. Each player can choose to score from any round, but they cannot choose scores from consecutive rounds. Your task is to write a function that calculates the maximum score a player can achieve following these rules.",
    "topic": "Dynamic Programming",
    "subtopic": "Memoization",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Memoization"
    ],
    "input_format": "An array of integers scores where scores[i] represents the score for round i.",
    "output_format": "An integer representing the maximum score the player can achieve.",
    "constraints": [
      "1 <= scores.length <= 100",
      "0 <= scores[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "scores = [3, 2, 5, 10, 7]",
        "output": "15",
        "explanation": "Choose scores from rounds 1 (3) and 3 (10) and round 4 (7) for a maximum score of 3 + 10 + 7 = 15."
      },
      {
        "input": "scores = [5, 3, 4, 11, 2]",
        "output": "16",
        "explanation": "Choose scores from rounds 0 (5) and 3 (11) for a total of 5 + 11 = 16."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about dynamic programming: what states can you represent?",
      "Consider using a decision tree for choosing or skipping scores.",
      "The problem can be reduced to choosing non-consecutive elements."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Minimum Cost Walk in Weighted Graph",
    "description": "Given a weighted, directed graph represented as an adjacency list, find the minimum cost to walk from a starting node to a destination node. Each edge has a cost associated with it, and you must choose the path with the least total cost. If no path exists, return -1.",
    "topic": "Graph",
    "subtopic": "Shortest Path",
    "tags": [
      "Graph",
      "Dijkstra's Algorithm",
      "Shortest Path"
    ],
    "input_format": "An adjacency list representing the graph, and two integers representing the start and end nodes.",
    "output_format": "An integer representing the minimum cost to walk from the start node to the destination node, or -1 if no such path exists.",
    "constraints": [
      "1 <= number of nodes <= 10^5",
      "0 <= cost of each edge <= 10^4",
      "The graph is directed and may contain cycles."
    ],
    "examples": [
      {
        "input": {
          "graph": {
            "0": [
              [
                1,
                4
              ],
              [
                2,
                2
              ]
            ],
            "1": [
              [
                2,
                1
              ],
              [
                3,
                5
              ]
            ],
            "2": [
              [
                3,
                3
              ]
            ],
            "3": []
          },
          "start": 0,
          "end": 3
        },
        "output": "6",
        "explanation": "The path 0 -> 2 -> 3 has a cost of 2 + 3 = 5, and the path 0 -> 1 -> 2 -> 3 has a cost of 4 + 1 + 3 = 8. The minimum cost is 5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using Dijkstra's algorithm for finding the shortest path.",
      "Use a priority queue to efficiently select the next node to expand."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Relative Sort Array",
    "description": "Given two arrays, arr1 and arr2, the task is to sort arr1 such that the relative order among the elements of arr1 are the same as those in arr2. The remaining elements of arr1 that are not in arr2 should be sorted in ascending order and placed at the end of arr1. Return the sorted array.",
    "topic": "Sorting",
    "subtopic": "Custom Sorting",
    "tags": [
      "Sorting",
      "Array",
      "Custom Order"
    ],
    "input_format": "Two arrays, arr1 and arr2.",
    "output_format": "An array representing the sorted arr1.",
    "constraints": [
      "1 <= arr1.length, arr2.length <= 10^4",
      "0 <= arr1[i], arr2[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "arr1 = [2, 1, 2, 5, 7], arr2 = [2, 1]",
        "output": "[2, 2, 1, 5, 7]",
        "explanation": "The elements 2 and 1 appear in arr2, so they come first in arr1. The remaining element 5 and 7 are sorted afterwards."
      },
      {
        "input": "arr1 = [4, 5, 6, 1, 2, 3], arr2 = [2, 1, 4]",
        "output": "[4, 2, 1, 3, 5, 6]",
        "explanation": "The elements 4, 2, and 1 appear in arr2. 3, 5, and 6 are sorted subsequently."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to keep track of the counts of the elements in arr1.",
      "Sort the remaining elements that are not in arr2."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Max Number of K-Sum Pairs",
    "description": "Given an integer array nums and an integer k, return the maximum number of pairs (i, j) such that i < j and nums[i] + nums[j] == k. Each element in the array can be used at most once in a pair.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "HashMap"
    ],
    "input_format": "An integer array nums and an integer k.",
    "output_format": "An integer representing the maximum number of k-sum pairs.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9",
      "0 <= k <= 2 * 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5], k = 5",
        "output": "2",
        "explanation": "The pairs are (1, 4) and (2, 3)."
      },
      {
        "input": "nums = [3, 1, 3, 4, 3], k = 6",
        "output": "1",
        "explanation": "The pair is (3, 3) but we can only use one of the 3's so we can only form one pair."
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], k = 10",
        "output": "0",
        "explanation": "No pairs sum up to 10."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a HashMap to store complements.",
      "Sort the array to use the two-pointer technique."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Maximum Points After Collecting Coins From All Nodes",
    "description": "In a tree represented as an undirected graph, each node contains coins. You are allowed to traverse the tree to collect coins from the nodes while adhering to certain collection rules. Your goal is to maximize the number of coins you can collect after visiting all nodes. You start at any node of the tree. The structure of the tree is given in terms of edges. Each node has a specific number of coins. Your task is to determine the maximum number of coins you can collect after visiting all the nodes.",
    "topic": "Graph",
    "subtopic": "Tree",
    "tags": [
      "Graph",
      "DFS",
      "Tree",
      "Dynamic Programming"
    ],
    "input_format": "The first line contains an integer n (1 <= n <= 10^5), the number of nodes. The second line contains n integers representing the number of coins at each node (1 <= coins[i] <= 100). The following n-1 lines each contain two integers u and v, denoting an edge between nodes u and v.",
    "output_format": "An integer representing the maximum number of coins that can be collected.",
    "constraints": [
      "1 <= n <= 10^5",
      "1 <= coins[i] <= 100"
    ],
    "examples": [
      {
        "input": "5\n1 2 3 4 5\n1 2\n1 3\n2 4\n2 5",
        "output": "15",
        "explanation": "Starting at node 1, you can collect coins from nodes 1, 2, 4, and 5 for a total of 1 + 2 + 4 + 5 = 12. You can also go to node 3 to collect 3 more coins, totaling 15."
      },
      {
        "input": "3\n10 20 30\n1 2\n1 3",
        "output": "60",
        "explanation": "Collect all coins from all nodes. Node 1 has 10, node 2 has 20, and node 3 has 30; hence the output is 10 + 20 + 30 = 60."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how to traverse the tree efficiently using DFS.",
      "Think about how to aggregate the coins while backtracking."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Maximum Points Tourist Can Earn",
    "description": "A tourist is planning to visit a series of cities, each with its own points associated with the attractions available. Given an array of integers representing points from each city, the tourist has the choice to either visit the current city or skip it to visit the next one. However, if the tourist chooses to skip, they cannot earn points from both the current and the next city. Calculate the maximum points the tourist can earn.",
    "topic": "Dynamic Programming",
    "subtopic": "Memoization",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of integers points where points[i] represents the points earned from the i-th city.",
    "output_format": "An integer representing the maximum points the tourist can earn.",
    "constraints": [
      "1 <= points.length <= 1000",
      "0 <= points[i] <= 1000"
    ],
    "examples": [
      {
        "input": "points = [3, 2, 5, 10, 7]",
        "output": "15",
        "explanation": "The optimal way is to visit cities with points: 3 (skip 2), 5 (skip 10), 7. Total = 3 + 5 + 7 = 15."
      },
      {
        "input": "points = [1, 2, 3, 1]",
        "output": "4",
        "explanation": "The optimal way is to visit cities with points: 1 (skip 2), 3. Total = 1 + 3 = 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to store results of subproblems.",
      "You can either take the current city's points or skip to the next one."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Equal Row and Column Pairs",
    "description": "You are given a 2D integer array 'grid' of size n x n. Two pairs (r1, c1) and (r2, c2) are called equal if the row 'r1' is identical to the column 'c2'. Your task is to count the total number of such equal pairs (r1, c1) in the 'grid'.",
    "topic": "Matrix",
    "subtopic": "Grid Traversal",
    "tags": [
      "Matrix",
      "Counting",
      "Array"
    ],
    "input_format": "A 2D integer array 'grid' where 1 <= n <= 100 and 1 <= grid[i][j] <= 100.",
    "output_format": "An integer representing the count of equal row and column pairs.",
    "constraints": [
      "1 <= n <= 100",
      "1 <= grid[i][j] <= 100"
    ],
    "examples": [
      {
        "input": "grid = [[1,2,3],[1,2,3],[1,2,3]]",
        "output": "3",
        "explanation": "The first row (1,2,3) is equal to the first three columns, resulting in 3 equal pairs: (0,0), (0,1), (0,2)."
      },
      {
        "input": "grid = [[1,2],[2,1]]",
        "output": "2",
        "explanation": "The rows and columns have two pairs that are equal: (0,1) and (1,0), counting to 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider transposing the grid to compare rows and columns more easily.",
      "Use a hash map to count occurrences of rows and columns."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Greatest Sum Divisible by Three",
    "description": "Given an integer array nums, you need to find the greatest sum of elements such that the sum is divisible by three. The sum can be obtained by any combination of elements in the array. If no valid sum exists, return 0.",
    "topic": "Dynamic Programming",
    "subtopic": "Subset Sum",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Greedy"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the greatest sum divisible by three.",
    "constraints": [
      "1 <= nums.length <= 1000",
      "0 <= nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "nums = [3, 6, 5, 1, 8]",
        "output": "18",
        "explanation": "The sum of all elements is 23, which is not divisible by 3. The next greatest sum possible is 18 (3 + 6 + 5 + 1 + 8 - 5 = 18)."
      },
      {
        "input": "nums = [1, 2, 3, 4, 4]",
        "output": "12",
        "explanation": "The sum of all elements is 14, not divisible by 3. The sum 12 (1 + 2 + 3 + 4 + 4 - 2 = 12) is possible, which is the maximum sum divisible by 3."
      },
      {
        "input": "nums = [1]",
        "output": "0",
        "explanation": "The only element is 1, which is not divisible by 3. Thus, the greatest sum divisible by 3 is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the modulo operation to find numbers that contribute to sums divisible by three.",
      "Track the maximum sums for each modulo class (0, 1, 2).",
      "Look for subsets of the array that give the right remainder when summed."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Maximum Strength of K Disjoint Subarrays",
    "description": "Given an array of integers, find the maximum strength of K disjoint subarrays. The strength of a subarray is defined as the minimum value in that subarray multiplied by the sum of the values in the subarray. Your task is to select K non-overlapping (disjoint) subarrays such that their total strength is maximized.",
    "topic": "Dynamic Programming",
    "subtopic": "Subarray Selection",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An integer array nums and an integer k.",
    "output_format": "An integer representing the maximum total strength of K disjoint subarrays.",
    "constraints": [
      "1 <= nums.length <= 5000",
      "-10^5 <= nums[i] <= 10^5",
      "1 <= k <= min(nums.length, 100)"
    ],
    "examples": [
      {
        "input": "nums = [1, 5, 4, 3, 2], k = 2",
        "output": "22",
        "explanation": "The maximum strength can be obtained by choosing the subarrays [5] and [4, 3] which gives (5*1 + 3*7 = 22)."
      },
      {
        "input": "nums = [2, 1, 4, 3], k = 1",
        "output": "12",
        "explanation": "Choosing the entire array gives strength (1 * (2 + 1 + 4 + 3) = 12)."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using dynamic programming to store the best results for subarrays.",
      "Calculate strengths for subarrays first before making selections."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Number of Substrings Containing All Three Characters",
    "description": "Given a string s that consists of only three distinct characters: 'a', 'b', and 'c', return the number of substrings that contain all three characters. A substring is defined as a contiguous sequence of characters within the string.",
    "topic": "String",
    "subtopic": "Substring Search",
    "tags": [
      "String",
      "Substring",
      "Counting"
    ],
    "input_format": "A string s of length n, where 1 <= n <= 1000.",
    "output_format": "An integer representing the number of substrings containing all three characters.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists only of characters 'a', 'b', and 'c'."
    ],
    "examples": [
      {
        "input": "s = 'abcabc'",
        "output": "10",
        "explanation": "Substrings containing all three characters include: 'abc', 'abca', 'abcab', 'abcabc', 'bca', 'bcab', 'bcabc', 'cab', 'cabc', 'abc'."
      },
      {
        "input": "s = 'aaacb'",
        "output": "3",
        "explanation": "The valid substrings are 'aab', 'aacb', 'acb'."
      },
      {
        "input": "s = 'abc'",
        "output": "1",
        "explanation": "The entire string itself is the only substring that contains all three characters."
      },
      {
        "input": "s = 'aabcbc'",
        "output": "6",
        "explanation": "Substrings include: 'abc', 'abcb', 'bcbc', 'aabc', 'ab', 'b' with any combination that has all characters."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window technique to keep track of the counts of each character.",
      "You can expand and contract the window based on the character counts."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Minimum Deletions to Make String K-Special",
    "description": "You are given a string s and an integer k. A string is considered K-special if it contains at most k distinct characters. Your task is to determine the minimum number of deletions needed to make the string K-special. You can delete any character from the string and there are no restrictions on how many times a character can be deleted.",
    "topic": "String",
    "subtopic": "Character Frequency",
    "tags": [
      "String",
      "Manipulation",
      "Frequency"
    ],
    "input_format": "A string s and an integer k, where 1 <= k <= 26.",
    "output_format": "An integer representing the minimum number of deletions to make the string K-special.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of only lowercase English letters."
    ],
    "examples": [
      {
        "input": "s = \"abaccd\", k = 2",
        "output": "2",
        "explanation": "We can delete 'b' and 'd' to have the string 'aaac', which contains 2 distinct characters."
      },
      {
        "input": "s = \"abcabc\", k = 3",
        "output": "0",
        "explanation": "The string 'abcabc' already has 3 distinct characters, so no deletion is needed."
      },
      {
        "input": "s = \"aabbcc\", k = 1",
        "output": "4",
        "explanation": "We need to delete all but one character. Removing 'a', 'b', and 'c' will leave us with 1 character."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Count the frequency of each character in the string.",
      "Sort the frequencies and sum the excess characters."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Minimize Connected Groups by Inserting Interval",
    "description": "You are given an array of intervals where each interval is represented as a pair of integers [start, end]. The intervals may overlap, and you need to minimize the number of connected groups of intervals by inserting the fewest new intervals. An interval [a, b] is connected to another interval [c, d] if they overlap or touch, i.e., if b >= c. Your task is to determine the minimum number of intervals you need to insert so that all intervals become connected.",
    "topic": "Greedy",
    "subtopic": "Interval Scheduling",
    "tags": [
      "Greedy",
      "Intervals",
      "Scheduling"
    ],
    "input_format": "An array of intervals intervals representing pairs of integers.",
    "output_format": "An integer representing the minimum number of intervals that need to be inserted.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "-10^5 <= intervals[i][0] <= intervals[i][1] <= 10^5"
    ],
    "examples": [
      {
        "input": "intervals = [[1, 3], [6, 9]]",
        "output": "1",
        "explanation": "Insert [3, 6] to connect the intervals [[1, 3], [6, 9]]."
      },
      {
        "input": "intervals = [[1, 2], [2, 3], [3, 4]]",
        "output": "0",
        "explanation": "All intervals are already connected."
      },
      {
        "input": "intervals = [[1, 4], [5, 6], [7, 8]]",
        "output": "2",
        "explanation": "Insert [4, 5] and [6, 7] to connect the intervals into one group."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider sorting the intervals to make the problem simpler.",
      "You can track the endpoints of the intervals to determine connections.",
      "Think about the gap between connected intervals."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Find Peak Calling Hours for Each City",
    "description": "You are given a list of calling records, where each record consists of a city, start time, and end time of a call. Your task is to find the peak calling hours for each city. A peak hour is defined as the hour in which the maximum number of calls occur. Return the city names along with their corresponding peak hours in a list of tuples sorted by city names.",
    "topic": "Intervals",
    "subtopic": "Merge Intervals",
    "tags": [
      "Intervals",
      "Time",
      "Sorting"
    ],
    "input_format": "A list of calling records, where each record is a tuple (city: string, start_time: string, end_time: string). The time format is 'HH:MM'.",
    "output_format": "A list of tuples, each containing (city: string, peak_hour: string). The list should be sorted by city names.",
    "constraints": [
      "1 <= len(records) <= 10^4",
      "Each city name is unique and consists of printable ASCII characters.",
      "Start and end times are valid 24-hour format strings."
    ],
    "examples": [
      {
        "input": "records = [('New York', '10:00', '11:30'), ('Los Angeles', '10:30', '11:00'), ('New York', '10:15', '10:45'), ('Los Angeles', '10:45', '11:15')]",
        "output": "[('Los Angeles', '10:00'), ('New York', '10:00')]",
        "explanation": "For New York, the peak hour is from 10:00 to 11:00 with 2 calls. For Los Angeles, peak is from 10:00 to 11:00 also with 2 calls, but earlier."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a map to record call counts for each hour.",
      "Remember to convert start and end times into hours for counting."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Median of a Row Wise Sorted Matrix",
    "description": "Given a matrix of integers where each row is sorted in non-decreasing order, find the median of all the elements in the matrix. The median is defined as the middle number in a sorted list of numbers or the average of the two middle numbers if the list has an even number of elements.",
    "topic": "Matrix",
    "subtopic": "Searching",
    "tags": [
      "Matrix",
      "Sorting",
      "Median"
    ],
    "input_format": "A 2D list of integers matrix, where each row is sorted in non-decreasing order.",
    "output_format": "A floating-point number representing the median of the elements in the matrix.",
    "constraints": [
      "1 <= matrix.length <= 100",
      "1 <= matrix[i].length <= 100",
      "All elements in the matrix are integers."
    ],
    "examples": [
      {
        "input": "matrix = [[1, 3], [2, 4]]",
        "output": "2.5",
        "explanation": "The elements in the matrix are [1, 2, 3, 4]. The median is (2 + 3) / 2 = 2.5."
      },
      {
        "input": "matrix = [[1, 2, 3], [4, 5, 6]]",
        "output": "3.5",
        "explanation": "The elements in the matrix are [1, 2, 3, 4, 5, 6]. The median is (3 + 4) / 2 = 3.5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the total number of elements in the matrix.",
      "You can use a binary search approach to find the median efficiently."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Query Kth Smallest Trimmed Number",
    "description": "You are given an array of integers that represents a list of numbers. Each number is trimmed to a certain length from the rightmost end. Your task is to find the Kth smallest number among the trimmed numbers. The trim length is provided in a list, and for each query, you need to trim the numbers accordingly and determine the Kth smallest. If a trimmed number doesn't exist, return -1.",
    "topic": "Sorting",
    "subtopic": "Arrays",
    "tags": [
      "Sorting",
      "Arrays",
      "Search"
    ],
    "input_format": "The first line contains two integers n (the number of elements in the array) and q (the number of queries). The second line contains n integers representing the array elements. The next q lines each contain two integers k and length, where k is the Kth position and length is the number of digits to trim.",
    "output_format": "For each query, output the Kth smallest trimmed number after the transformation; return -1 if not applicable.",
    "constraints": [
      "1 <= n <= 1000",
      "1 <= q <= 1000",
      "1 <= length <= 10",
      "Each number in the array is positive and can be at most 10^9."
    ],
    "examples": [
      {
        "input": "3 2\n123 456 789\n1 2\n2 1",
        "output": "56\n78",
        "explanation": "After trimming the rightmost 2 digits from '123', we get '1'; from '456' we get '4'; from '789' we get '7'. The ordered trimmed numbers are [1, 4, 7]. For the first query, the 1st smallest is '1', and for the second query trimming 1 digit gives [12, 45, 78], where the 2nd smallest is '78'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use string manipulation to trim numbers.",
      "Sort the trimmed numbers to find the Kth smallest."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Maximum Deletions on a String",
    "description": "You are given a string `s` consisting of lowercase letters. Your task is to delete characters from `s` such that no two adjacent characters are the same. You can perform this operation multiple times. Your goal is to determine the maximum number of deletions you can make from the string such that the final string has no two adjacent characters that are the same.",
    "topic": "String",
    "subtopic": "Manipulation",
    "tags": [
      "String",
      "Greedy",
      "Simulation"
    ],
    "input_format": "A single string s (1 <= s.length <= 1000).",
    "output_format": "An integer representing the maximum number of deletions.",
    "constraints": [
      "1 <= s.length <= 1000",
      "s consists of only lowercase letters."
    ],
    "examples": [
      {
        "input": "s = \"aaabbbc\"",
        "output": "4",
        "explanation": "By deleting two 'a's and two 'b's, the final string would be \"abc\"."
      },
      {
        "input": "s = \"aabba\"",
        "output": "2",
        "explanation": "By deleting one 'a' and one 'b', the final string would be \"ab\"."
      },
      {
        "input": "s = \"abcde\"",
        "output": "0",
        "explanation": "No deletions are needed as there are no adjacent repeating characters."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Look for adjacent characters and consider how to utilize a stack-like structure.",
      "Keep track of the previous character to decide whether to delete or keep a character."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Number of Subarrays With AND Value of K",
    "description": "Given an array of integers and an integer K, return the number of contiguous subarrays whose bitwise AND is equal to K. The bitwise AND of an array is calculated by performing the AND operation on all its elements.",
    "topic": "Array",
    "subtopic": "Bit Manipulation",
    "tags": [
      "Array",
      "Bitwise AND",
      "Subarrays"
    ],
    "input_format": "An array of integers nums and an integer K.",
    "output_format": "An integer representing the number of contiguous subarrays with AND value equal to K.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i], K <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5], K = 2",
        "output": "1",
        "explanation": "The only subarray with AND value equal to 2 is [2]."
      },
      {
        "input": "nums = [2, 2, 2, 2], K = 2",
        "output": "10",
        "explanation": "All subarrays have an AND value of 2. The total count is 10."
      },
      {
        "input": "nums = [1, 2, 3, 4, 5], K = 10",
        "output": "0",
        "explanation": "No subarray results in an AND value of 10."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Focus on the properties of the bitwise AND operation.",
      "Consider using a sliding window technique to evaluate subarrays."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Determine the Winner of a Bowling Game",
    "description": "In a bowling game, the player who has the highest score at the end of the game is declared the winner. Your task is to determine the winner between two players based on their scores for each round of the game. A player scores points based on the pinfall in each round, which can range from 0 to 10. The game consists of 10 frames, and the scores for each player are provided in a format where the scores for each individual round are represented in a list. If the scores are equal, return 'Draw'.",
    "topic": "Game Theory",
    "subtopic": "Score Calculation",
    "tags": [
      "Array",
      "Game",
      "Score Calculation"
    ],
    "input_format": "Two lists of integers, scoresA and scoresB, representing the scores of Player A and Player B respectively.",
    "output_format": "A string representing the winner: either 'Player A', 'Player B', or 'Draw'.",
    "constraints": [
      "scoresA.length == 10",
      "scoresB.length == 10",
      "0 <= scoresA[i], scoresB[i] <= 10"
    ],
    "examples": [
      {
        "input": {
          "scoresA": [
            10,
            7,
            10,
            9,
            10,
            8,
            10,
            7,
            10,
            10
          ],
          "scoresB": [
            9,
            10,
            10,
            10,
            10,
            6,
            10,
            10,
            8,
            10
          ]
        },
        "output": "Player A",
        "explanation": "Player A's total score is 10 + 7 + 10 + 9 + 10 + 8 + 10 + 7 + 10 + 10 = 101. Player B's total score is 9 + 10 + 10 + 10 + 10 + 6 + 10 + 10 + 8 + 10 = 99. Player A wins."
      },
      {
        "input": {
          "scoresA": [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ],
          "scoresB": [
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5,
            5
          ]
        },
        "output": "Draw",
        "explanation": "Both players have the same total score of 50."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a simple loop to sum the scores for each player.",
      "Compare the total scores to determine the winner."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Take Gifts From the Richest Pile",
    "description": "You are given an array 'gifts' where each element represents the number of gifts in a pile. Your task is to determine the maximum number of gifts you can take from the richest pile. A pile is considered the richest if it has the maximum number of gifts. In case there are multiple piles with the same maximum number, you should return any of those values.",
    "topic": "Array",
    "subtopic": "Finding Maximum",
    "tags": [
      "Array",
      "Maximum",
      "Greedy"
    ],
    "input_format": "An array of integers gifts.",
    "output_format": "An integer representing the maximum number of gifts from the richest pile.",
    "constraints": [
      "1 <= gifts.length <= 10^4",
      "0 <= gifts[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "gifts = [1, 3, 2, 4, 4, 3]",
        "output": "4",
        "explanation": "The richest piles contain 4 gifts. Therefore, the answer is 4."
      },
      {
        "input": "gifts = [0, 0, 0]",
        "output": "0",
        "explanation": "All piles have 0 gifts. Thus, the maximum number of gifts is 0."
      },
      {
        "input": "gifts = [7, 1, 5, 6, 9, 9, 2]",
        "output": "9",
        "explanation": "The richest piles contain 9 gifts. Therefore, the answer is 9."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Iterate through the gifts array to find the maximum value.",
      "You can use a built-in function to get the maximum number."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Find the Sum of the Power of All Subsequences",
    "description": "Given an array of integers, calculate the sum of the power of all possible subsequences. The power of a subsequence is defined as the product of the elements in that subsequence. The empty subsequence has a power of 0. Your task is to find the total sum of all powers of all non-empty subsequences.",
    "topic": "Dynamic Programming",
    "subtopic": "Subsequences",
    "tags": [
      "Dynamic Programming",
      "Subsequences",
      "Mathematics"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the sum of the power of all non-empty subsequences.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "23",
        "explanation": "The subsequences are: [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]. Their powers are: 1, 2, 3, 1*2=2, 1*3=3, 2*3=6, 1*2*3=6. The sum is 1 + 2 + 3 + 2 + 3 + 6 + 6 = 23."
      },
      {
        "input": "nums = [0, 1]",
        "output": "1",
        "explanation": "The non-empty subsequences are: [0], [1], [0, 1]. Their powers are: 0, 1, 0*1=0. The sum is 0 + 1 + 0 = 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a mathematical formula to calculate the sum of powers instead of generating all subsequences.",
      "The contribution of each element in the array can be analyzed separately."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Find the Maximum Divisibility Score",
    "description": "Given an array of integers, each integer is a divisor for a certain number. Your task is to find the maximum divisibility score for a given target number, which is defined as the sum of all integers in the array that can evenly divide the target number.",
    "topic": "Array",
    "subtopic": "Filtering and Summation",
    "tags": [
      "Array",
      "Divisibility",
      "Sum"
    ],
    "input_format": "An array of integers 'nums' and an integer 'target'.",
    "output_format": "An integer representing the maximum divisibility score.",
    "constraints": [
      "1 <= nums.length <= 1000",
      "1 <= nums[i] <= 1000",
      "1 <= target <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 4, 5] and target = 10",
        "output": "6",
        "explanation": "The divisors of 10 from the array are 1, 2, and 5. Their sum is 1 + 2 + 5 = 8."
      },
      {
        "input": "nums = [2, 3, 7, 14] and target = 28",
        "output": "21",
        "explanation": "The divisors of 28 from the array are 2, 7, and 14. Their sum is 2 + 7 + 14 = 23."
      },
      {
        "input": "nums = [5, 6, 10, 20] and target = 15",
        "output": "10",
        "explanation": "Only 10 is the divisor of 15 from the array. Hence the score is 10."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Check each number in the array to see if it divides the target without a remainder.",
      "You can use the modulus operator to verify divisibility."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Shortest String That Contains Three Strings",
    "description": "Given three strings A, B, and C, your task is to find the shortest possible string that contains A, B, and C as substrings. The string should be formed by concatenating the three strings in any order but without rearranging the characters within each string. If no valid string can be formed, return an empty string.",
    "topic": "String",
    "subtopic": "Substring Search",
    "tags": [
      "String",
      "Substring",
      "Concatenation"
    ],
    "input_format": "Three strings A, B, and C.",
    "output_format": "A string representing the shortest possible string that contains A, B, and C as substrings.",
    "constraints": [
      "1 <= A.length, B.length, C.length <= 100",
      "A, B, and C consist of lowercase English letters."
    ],
    "examples": [
      {
        "input": "A = 'abc', B = 'bca', C = 'cab'",
        "output": "abcba",
        "explanation": "The shortest string containing all three is 'abcba'."
      },
      {
        "input": "A = 'aa', B = 'ab', C = 'ba'",
        "output": "aab",
        "explanation": "The string 'aab' contains all three substrings."
      },
      {
        "input": "A = 'a', B = 'b', C = 'c'",
        "output": "abc",
        "explanation": "The shortest string containing all three substrings is 'abc'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider all permutations of the three strings.",
      "Use a helper function to check if a string contains the other two as substrings."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Count the Number of Incremovable Subarrays II",
    "description": "Given an integer array nums, your task is to find the total number of contiguous subarrays that can be removed from the array while maintaining the same maximum element in the remaining part of the array. A subarray is defined as 'incremovable' if removing it does not change the maximum element of the remaining elements. An element can only be counted once in the result regardless of its position in the original array.",
    "topic": "Array",
    "subtopic": "Subarray Manipulation",
    "tags": [
      "Array",
      "Subarray",
      "Count"
    ],
    "input_format": "An integer array nums of length n.",
    "output_format": "An integer representing the count of incremovable subarrays.",
    "constraints": [
      "1 <= n <= 10^5",
      "1 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 3, 2, 3, 2]",
        "output": "5",
        "explanation": "The incremovable subarrays are [3], [2, 3], [3, 2], [1, 3, 2, 3], and [3, 2]."
      },
      {
        "input": "nums = [2, 2, 2]",
        "output": "7",
        "explanation": "All single-element subarrays are incremovable. Further, any contiguous combination of 2s is also preservative of the maximum, totaling 7."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how the maximum element changes when removing subarrays.",
      "Use a two-pointer approach to identify removable segments."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Minimum Number of Taps to Open to Water a Garden",
    "description": "You have a garden represented as a number line of length n, and you want to water the garden using n taps. Each tap can water a specific range of the garden. Given an integer n and an array of integers ranges where ranges[i] represents the range that the i-th tap can water, your task is to find the minimum number of taps you need to open to water the entire garden from 0 to n. If it is impossible to cover the entire garden, return -1.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithms",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Interval Coverage"
    ],
    "input_format": "An integer n followed by an array ranges of size (n + 1).",
    "output_format": "An integer representing the minimum number of taps to open to water the entire garden, or -1 if it's not possible.",
    "constraints": [
      "1 <= n <= 10^4",
      "0 <= ranges[i] <= n"
    ],
    "examples": [
      {
        "input": "n = 5, ranges = [3,4,1,1,0,0]",
        "output": "1",
        "explanation": "Opening the tap at index 1 can water the entire garden."
      },
      {
        "input": "n = 5, ranges = [0,0,0,0,0,0]",
        "output": "-1",
        "explanation": "No tap can water any part of the garden."
      },
      {
        "input": "n = 7, ranges = [1,2,1,0,2,1,0,1]",
        "output": "3",
        "explanation": "Opens taps at indexes 1, 4, and 7 to cover the whole garden."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how many intervals can cover each point on the number line.",
      "Greedily prioritize the farthest-reaching intervals.",
      "Merge overlapping intervals as you check coverage."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Minimum Number of Refueling Stops",
    "description": "You are driving a car that can go at most 'fuel' miles on a full tank. There are 'gas stations' located at certain distances along the route, each offering a certain amount of fuel. Your goal is to determine the minimum number of refueling stops required to reach your destination. If it's impossible to reach the destination, return -1.",
    "topic": "Greedy",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Greedy",
      "Dynamic Programming",
      "Array"
    ],
    "input_format": "An integer fuel representing the maximum distance the car can travel and an array of integers gas_stations representing the distances of the gas stations from the starting point.",
    "output_format": "An integer representing the minimum number of refueling stops required to reach the destination, or -1 if it's impossible.",
    "constraints": [
      "1 <= fuel <= 10^6",
      "1 <= gas_stations.length <= 10^4",
      "0 <= gas_stations[i] <= 10^6",
      "The destination distance is strictly greater than the maximum distance a full tank can cover."
    ],
    "examples": [
      {
        "input": {
          "fuel": 3,
          "gas_stations": [
            1,
            2,
            3,
            4,
            5,
            6
          ]
        },
        "output": 2,
        "explanation": "To reach the sixth mile, you'd stop at the third and fifth gas stations."
      },
      {
        "input": {
          "fuel": 2,
          "gas_stations": [
            3,
            4,
            5
          ]
        },
        "output": -1,
        "explanation": "It's impossible to reach any gas station because the car can only cover 2 miles."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a priority queue to keep track of gas stations.",
      "Think about what conditions allow you to refuel at a station."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock",
    "description": "You are given an array `prices` where `prices[i]` is the price of a given stock on the `i-th` day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Greedy"
    ],
    "input_format": "An array of integers `prices` representing the stock prices.",
    "output_format": "An integer representing the maximum profit.",
    "constraints": [
      "1 <= prices.length <= 10^5",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "5",
        "explanation": "Buy on day 2 (price = 1) and sell on day 5 (price = 6). Profit = 6 - 1 = 5."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "There is no way to make a profit, so the maximum profit is 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Keep track of the minimum price you've seen so far.",
      "Calculate profit as the difference between the current price and the minimum price."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Painting the Walls",
    "description": "You are given a wall with dimensions given by width and height. You have a certain number of paint cans each with a specific coverage (how much area one can of paint can cover). Your task is to determine the minimum number of cans required to paint the entire wall. If it is not possible to cover the wall, return -1. Assume that you cannot combine partial cans of paint.",
    "topic": "Dynamic Programming",
    "subtopic": "Optimization",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Optimization"
    ],
    "input_format": "The first line contains two integers width and height, followed by an integer n indicating the number of paint cans. The next n lines each contain one integer representing the coverage of each can.",
    "output_format": "An integer representing the minimum number of cans required to paint the wall or -1 if impossible.",
    "constraints": [
      "1 <= width, height <= 10^4",
      "1 <= n <= 100",
      "1 <= coverage[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "5 4\n3\n4\n5\n2",
        "output": "2",
        "explanation": "The wall area is 20. Two cans with coverage 5 each can cover the area."
      },
      {
        "input": "5 5\n3\n2\n1\n4",
        "output": "-1",
        "explanation": "The maximum area that can be covered by all cans is less than the wall area."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a greedy approach to maximize coverage with fewer cans.",
      "You might want to sort the can coverage in descending order."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Number of Wonderful Substrings",
    "description": "A substring is wonderful if it contains the same number of '0's and '1's. Given a binary string s, return the number of wonderful substrings of s.",
    "topic": "String",
    "subtopic": "Substring Count",
    "tags": [
      "String",
      "Substring",
      "Counting"
    ],
    "input_format": "A binary string s of length n.",
    "output_format": "An integer representing the number of wonderful substrings of s.",
    "constraints": [
      "1 <= n <= 10^5",
      "s consists only of '0's and '1's."
    ],
    "examples": [
      {
        "input": "s = \"010001\"",
        "output": "9",
        "explanation": "The wonderful substrings are: \"0\", \"1\", \"00\", \"01\", \"10\", \"001\", \"010\", \"100\", and \"010001\"."
      },
      {
        "input": "s = \"1110\"",
        "output": "5",
        "explanation": "The wonderful substrings are: \"1\", \"11\", \"111\", \"110\", and \"1110\"."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a prefix sum approach.",
      "Track counts of the difference between '0's and '1's."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Maximum Product Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest product, and return that product. The subarray should be contiguous and can be of any length.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Math"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum product of a contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "-10 <= nums[i] <= 10"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, -2, 4]",
        "output": "6",
        "explanation": "The subarray [2, 3] has the largest product 6."
      },
      {
        "input": "nums = [-2, 0, -1]",
        "output": "0",
        "explanation": "The subarray [0] has the largest product 0."
      },
      {
        "input": "nums = [-2, 3, -4]",
        "output": "24",
        "explanation": "The subarray [3, -4] has the largest product 24."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the impact of negative numbers on the product.",
      "Use a dynamic approach to keep track of the maximum and minimum products."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Sliding Window Maximum",
    "description": "Given an integer array nums and an integer k, return the maximum sliding window for that range. The sliding window consists of elements nums[i], nums[i+1], ..., nums[i+k-1] which represents the subarray of size k starting from index i. Increment the window by one each time you slide it to the right.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Maximum"
    ],
    "input_format": "An integer array nums and an integer k.",
    "output_format": "An array of integers representing the maximum values of the sliding window.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4",
      "1 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [1,3,-1,-3,5,3,6,7], k = 3",
        "output": "[3,3,5,5,6,7]",
        "explanation": "The sliding windows are: \n [1,3,-1] -> max is 3 \n [3,-1,-3] -> max is 3 \n [-1,-3,5] -> max is 5 \n [-3,5,3] -> max is 5 \n [5,3,6] -> max is 6 \n [3,6,7] -> max is 7."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a deque to keep track of the indexes of the useful elements.",
      "Remove elements which are out of the current window from the deque.",
      "Maintain the decreasing order of elements in the deque."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "K-th Smallest in Lexicographical Order",
    "description": "Given two integers n and k, return the k-th smallest integer in the range from 1 to n when the integers are sorted in lexicographical order as strings. For example, given n = 13, the integers in lexicographical order are '1', '10', '11', '12', '13', '2', '3', '4', '5', '6', '7', '8', '9'. The 3rd smallest integer is '2'.",
    "topic": "Sorting",
    "subtopic": "Lexicographical Ordering",
    "tags": [
      "Sorting",
      "String Manipulation",
      "Binary Search"
    ],
    "input_format": "Two integers n (1 <= n <= 10^9) and k (1 <= k <= n).",
    "output_format": "An integer representing the k-th smallest integer in lexicographical order.",
    "constraints": [
      "1 <= n <= 10^9",
      "1 <= k <= n"
    ],
    "examples": [
      {
        "input": "n = 13, k = 2",
        "output": "10",
        "explanation": "The sorted integers are '1', '10', '11', '12', '13', '2', '3', '4', '5', '6', '7', '8', '9'. The 2nd smallest is '10'."
      },
      {
        "input": "n = 20, k = 5",
        "output": "2",
        "explanation": "The sorted integers are '1', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '2', '20', '3', '4', '5', '6', '7', '8', '9'. The 5th smallest is '2'."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a priority queue to help with ordering.",
      "Think about how to convert integers to strings and sort them efficiently."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "House Robber",
    "description": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected. If two adjacent houses are robbed on the same night, the alarms will automatically be triggered. Given an integer array representing the amount of money of each house, you need to determine the maximum amount of money you can rob tonight without alerting the police.",
    "topic": "Dynamic Programming",
    "subtopic": "Memoization",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of integers nums, representing the amount of money in each house.",
    "output_format": "An integer representing the maximum amount of money you can rob without triggering the alarm.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 400"
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 9, 3, 1]",
        "output": "12",
        "explanation": "Robbing houses 1, 3, and 5 gives the maximum sum: 2 + 9 + 1 = 12."
      },
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "4",
        "explanation": "Robbing houses 2 and 4 gives the maximum sum: 2 + 2 = 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about a way to decide whether to rob the current house or not.",
      "Consider using dynamic programming to store results of subproblems."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Put Marbles in Bags",
    "description": "You have a collection of marbles, and you want to distribute them into several bags. Each bag can hold a maximum of capacity marbles. Given an array of integers representing the count of marbles of different colors and an integer representing the capacity of each bag, return the maximum number of bags you can fill with the marbles, such that each bag contains marbles of at most two different colors. If it's not possible to use all marbles, return -1.",
    "topic": "Greedy",
    "subtopic": "Two Pointers",
    "tags": [
      "Greedy",
      "Two Pointers",
      "Array"
    ],
    "input_format": "An integer array `marbles` where `marbles[i]` represents the count of i-th color marbles, and an integer `capacity` representing the maximum capacity of each bag.",
    "output_format": "An integer representing the maximum number of bags that can be filled under the given condition, or -1 if not possible.",
    "constraints": [
      "1 <= marbles.length <= 1000",
      "1 <= marbles[i] <= 10^4",
      "1 <= capacity <= 10^4"
    ],
    "examples": [
      {
        "input": "marbles = [1, 2, 3, 4], capacity = 5",
        "output": "3",
        "explanation": "You can fill one bag with 1 marble of color 1 and 4 marbles of color 2, one bag with 2 marbles of color 3 and 3 marbles of color 4, and one bag with 2 marbles of color 1 and 3 of color 3."
      },
      {
        "input": "marbles = [2, 2, 2], capacity = 2",
        "output": "3",
        "explanation": "Each bag can contain 2 marbles of the same color."
      },
      {
        "input": "marbles = [5, 3, 6], capacity = 4",
        "output": "-1",
        "explanation": "It's impossible to fill bags with at most two different colors without exceeding the capacity since we have 6 marbles of one color."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how many bags you can fill with different color combinations.",
      "Use a greedy strategy to fill bags optimally."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Best Time to Buy and Sell Stock II",
    "description": "You are given an integer array prices where prices[i] is the price of a given stock on the ith day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. However, you can buy and sell the stock multiple times, meaning you can engage in multiple transactions as long as you own the stock at the time of selling it. Write a function to calculate the maximum profit you can achieve.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy",
    "tags": [
      "Dynamic Programming",
      "Array",
      "Greedy"
    ],
    "input_format": "An array of integers prices representing the stock prices.",
    "output_format": "An integer representing the maximum profit that can be achieved.",
    "constraints": [
      "1 <= prices.length <= 3 * 10^4",
      "0 <= prices[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "prices = [7, 1, 5, 3, 6, 4]",
        "output": "7",
        "explanation": "Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5 - 1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6 - 3 = 3. Total profit = 4 + 3 = 7."
      },
      {
        "input": "prices = [1, 2, 3, 4, 5]",
        "output": "4",
        "explanation": "Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5 - 1 = 4."
      },
      {
        "input": "prices = [7, 6, 4, 3, 1]",
        "output": "0",
        "explanation": "No transactions are done since prices are in decreasing order."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider every pair of days where you can buy and sell.",
      "Use a greedy approach to capture all profitable transactions."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Majority Element",
    "description": "Given an array of size n, find the majority element. The majority element is the element that appears more than n/2 times in the array. You may assume that the majority element always exists in the array.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Searching",
      "Majority Element"
    ],
    "input_format": "An array of integers nums of size n.",
    "output_format": "An integer representing the majority element.",
    "constraints": [
      "1 <= n <= 5 * 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 3]",
        "output": "3",
        "explanation": "The element 3 appears 2 times which is more than n/2=1.5."
      },
      {
        "input": "nums = [2, 2, 1, 1, 1, 2, 2]",
        "output": "2",
        "explanation": "The element 2 appears 4 times which is more than n/2=3.5."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a hash map to count frequencies.",
      "If you encounter the same element more than once, increase its count."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Insert Delete GetRandom O(1)",
    "description": "Design a data structure that supports the following operations: insert, delete, and getRandom. All operations should be done in constant time (O(1)). Implement your data structure by creating a class RandomizedSet that supports the following methods: \n\n1. **insert(val: int) -> bool:** Inserts an item val into the set if not already present. Returns true if the item was not present and was successfully inserted, false otherwise.\n2. **remove(val: int) -> bool:** Removes an item val from the set if present. Returns true if the item was present and was successfully removed, false otherwise.\n3. **getRandom() -> int:** Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). The returned result must be equal to one of the elements currently in the set.\n\nThis data structure should allow for the operations to be performed with an average time complexity of O(1).",
    "topic": "Data Structure",
    "subtopic": "Randomization",
    "tags": [
      "Data Structure",
      "Randomization",
      "Design"
    ],
    "input_format": "The input consists of multiple operations to perform on the RandomizedSet class.",
    "output_format": "The output for each operation should return a boolean for insert and remove operations; getRandom should return an integer.",
    "constraints": [
      "The number of calls to insert and remove will be at most 2 * 10^4.",
      "The value of the element for insert and remove will be in the range of -10^9 to 10^9."
    ],
    "examples": [
      {
        "input": "RandomizedSet obj = new RandomizedSet();\nobj.insert(1);\nobj.remove(2);\nint param_3 = obj.getRandom();\nobj.insert(2);\nint param_4 = obj.getRandom();",
        "output": "true, false, 1, true, 1 or 2",
        "explanation": "At first, we insert 1 (successful), then try to remove 2 (not present), so it returns false. getRandom can return 1 since it's the only item available. We then insert 2 (successful) and getRandom can return 1 or 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a hash map to maintain the elements and their indices.",
      "Maintain a list for accessing random elements."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Remove K Digits",
    "description": "Given a non-negative integer represented as a string num, and an integer k, remove k digits from num, such that the new number is the smallest possible. Note that the resulting number should not have leading zeros.",
    "topic": "String",
    "subtopic": "Greedy",
    "tags": [
      "String",
      "Greedy",
      "Stack"
    ],
    "input_format": "A string num representing a non-negative integer and an integer k.",
    "output_format": "A string representing the smallest possible number after removing k digits.",
    "constraints": [
      "1 <= num.length <= 100",
      "0 <= k <= num.length",
      "num does not contain any leading zeros."
    ],
    "examples": [
      {
        "input": "num = '1432219', k = 3",
        "output": "'1219'",
        "explanation": "Removing '4', '3', and '2' gives '1219', which is the smallest number possible."
      },
      {
        "input": "num = '10200', k = 1",
        "output": "'200'",
        "explanation": "Removing '1' gives '0200', but we cannot have leading zeros, so the result is '200'."
      },
      {
        "input": "num = '10', k = 2",
        "output": "'0'",
        "explanation": "Removing both digits results in an empty string which should be interpreted as '0'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of the digits.",
      "Remove the top of the stack while the current digit is smaller.",
      "Ensure to handle leading zeros in the result."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Median of Two Sorted Arrays",
    "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Median"
    ],
    "input_format": "Two sorted arrays nums1 and nums2.",
    "output_format": "A float representing the median of the two sorted arrays.",
    "constraints": [
      "0 <= nums1.length <= 1000",
      "0 <= nums2.length <= 1000",
      "nums1 and nums2 are both sorted in ascending order."
    ],
    "examples": [
      {
        "input": "nums1 = [1, 3], nums2 = [2]",
        "output": "2.0",
        "explanation": "The merged array is [1, 2, 3]. The median is 2."
      },
      {
        "input": "nums1 = [1, 2], nums2 = [3, 4]",
        "output": "2.5",
        "explanation": "The merged array is [1, 2, 3, 4]. The median is (2 + 3) / 2 = 2.5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider binary search to find the partition point.",
      "The partition should balance the left and right halves."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Maximum Subarray",
    "description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
    "topic": "Array",
    "subtopic": "Dynamic Programming",
    "tags": [
      "Array",
      "Dynamic Programming",
      "Maximum Subarray"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum sum of the contiguous subarray.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^4 <= nums[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "6",
        "explanation": "The contiguous subarray [4,-1,2,1] has the largest sum = 6."
      },
      {
        "input": "nums = [1]",
        "output": "1",
        "explanation": "The only element in the array is 1, so the maximum sum is 1."
      },
      {
        "input": "nums = [5,4,-1,7,8]",
        "output": "23",
        "explanation": "The contiguous subarray [5,4,-1,7,8] has the largest sum = 23."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using Kadane's algorithm for an efficient solution.",
      "Maintain a running sum and a maximum sum variable.",
      "Reset the running sum to zero if it becomes negative."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Maximal Square",
    "description": "Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.",
    "topic": "Dynamic Programming",
    "subtopic": "Matrix",
    "tags": [
      "Dynamic Programming",
      "Matrix",
      "Square",
      "Area"
    ],
    "input_format": "A 2D binary matrix (a list of lists) where each element is either '0' or '1'.",
    "output_format": "An integer representing the area of the largest square containing only 1's.",
    "constraints": [
      "1 <= matrix.length <= 300",
      "1 <= matrix[i].length <= 300",
      "matrix[i][j] is '0' or '1'"
    ],
    "examples": [
      {
        "input": "[['1', '0', '1', '0', '0'], ['1', '0', '1', '1', '1'], ['1', '1', '1', '1', '1'], ['1', '0', '0', '1', '0']]",
        "output": "4",
        "explanation": "The largest square has a size of 2x2 and contains only 1's, resulting in an area of 2 * 2 = 4."
      },
      {
        "input": "[['0', '1'], ['1', '1']]",
        "output": "1",
        "explanation": "The largest square that can be formed contains one 1, so the area is 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dynamic programming approach to store the size of the largest square ending at each position.",
      "Keep track of the previous row's values while iterating."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Longest Consecutive Sequence",
    "description": "Given an unsorted array of integers, find the length of the longest consecutive elements sequence. Your algorithm should run in O(n) time complexity and use O(n) space complexity.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "Hashing",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the length of the longest consecutive elements sequence.",
    "constraints": [
      "0 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [100, 4, 200, 1, 3, 2]",
        "output": "4",
        "explanation": "The longest consecutive elements sequence is [1, 2, 3, 4], which has a length of 4."
      },
      {
        "input": "nums = [0, -1]",
        "output": "2",
        "explanation": "The longest consecutive elements sequence is [-1, 0], which has a length of 2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a set to store unique elements.",
      "Look for consecutive sequences by checking for previous and next numbers."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Find First and Last Position of Element in Sorted Array",
    "description": "Given an array of integers sorted in ascending order, find the starting and ending position of a given target value. If the target is not found in the array, return [-1, -1]. You must write an algorithm with O(log n) runtime complexity.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Search"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "A list of two integers representing the starting and ending position of the target.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "nums is a non-decreasing array.",
      "-10^5 <= nums[i] <= 10^5",
      "The target value will always be a valid integer."
    ],
    "examples": [
      {
        "input": "nums = [5, 7, 7, 8, 8, 10], target = 8",
        "output": "[3, 4]",
        "explanation": "The target 8 appears from index 3 to index 4."
      },
      {
        "input": "nums = [5, 7, 7, 8, 8, 10], target = 6",
        "output": "[-1, -1]",
        "explanation": "The target 6 is not found in the array."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to find the first and last position.",
      "You can implement two binary searches: one for the first position and another for the last."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Maximal Rectangle",
    "description": "Given an m x n binary matrix filled with 0's and 1's, find the maximal rectangle containing only 1's and return its area. A rectangle is formed by surrounding 1's vertically and horizontally.",
    "topic": "Dynamic Programming",
    "subtopic": "Matrix",
    "tags": [
      "Dynamic Programming",
      "Matrix",
      "Area"
    ],
    "input_format": "A 2D binary matrix represented as an array of strings, where each string consists of '0's and '1's.",
    "output_format": "An integer representing the area of the largest rectangle containing only 1's.",
    "constraints": [
      "1 <= m, n <= 200",
      "matrix[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]",
        "output": "6",
        "explanation": "The maximal rectangle is formed by the 1's in the last two rows and spans 3 columns, hence the area is 3 * 2 = 6."
      },
      {
        "input": "matrix = [[\"0\"]]",
        "output": "0",
        "explanation": "There are no 1's, so the area of the maximal rectangle is 0."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using histograms to convert rows into heights.",
      "Use a stack to find the maximum area in histograms."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Jump Game II",
    "description": "You are given an array of non-negative integers nums. Each integer in the array represents your maximum jump length at that position. Write a function to determine the minimum number of jumps you need to reach the last index. If you cannot reach the last index, return -1.",
    "topic": "Dynamic Programming",
    "subtopic": "Greedy Algorithms",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of non-negative integers nums.",
    "output_format": "An integer representing the minimum number of jumps to reach the last index, or -1 if it is not possible.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "0 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [2, 3, 1, 1, 4]",
        "output": "2",
        "explanation": "Jump 1 step from index 0 to 1, then 2 steps to the last index."
      },
      {
        "input": "nums = [2, 3, 0, 1, 4]",
        "output": "2",
        "explanation": "Jump 1 step from index 0 to 1, then 2 steps to the last index."
      },
      {
        "input": "nums = [0]",
        "output": "0",
        "explanation": "You are already at the last index."
      },
      {
        "input": "nums = [1, 0, 0, 0]",
        "output": "-1",
        "explanation": "You cannot reach the end of the array."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the farthest index you can reach from the current index.",
      "Use a greedy approach to count the number of jumps."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Koko Eating Bananas",
    "description": "Koko loves to eat bananas. Every day, she chooses a positive integer K and can eat up to K bananas in a day. However, she must finish all the bananas in the pile within a given number of days, D. If she does not finish within D days, she cannot eat any more bananas. Given an integer array piles, where piles[i] represents the number of bananas in the i-th pile, and an integer D representing the maximum number of days, return the minimum integer K such that Koko can eat all the bananas within D days.",
    "topic": "Binary Search",
    "subtopic": "Search Algorithms",
    "tags": [
      "Binary Search",
      "Greedy",
      "Array"
    ],
    "input_format": "An integer array `piles` and an integer `D`.",
    "output_format": "An integer representing the minimum number of bananas Koko can eat in a day.",
    "constraints": [
      "1 <= piles.length <= 10^4",
      "1 <= piles[i] <= 10^9",
      "1 <= D <= 10^9"
    ],
    "examples": [
      {
        "input": "piles = [3, 6, 7, 11], D = 8",
        "output": "4",
        "explanation": "With K = 4, Koko can finish the piles in 8 days: (3, 1) in day 1, (4, 3) in day 2, (4, 3) in days 3-8."
      },
      {
        "input": "piles = [30, 11, 23, 4, 20], D = 5",
        "output": "30",
        "explanation": "With K = 30, Koko can finish all piles in 5 days as she can consume the largest pile in a single day."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to find the minimum K.",
      "You can calculate the number of days needed for a fixed K by iterating through piles."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Minimum Number of Pushes to Type Word II",
    "description": "Given a string word and a list of strings keyboard, determine the minimum number of pushes required to type the word using the provided keyboard. Each keyboard string can be used only once. If a character in the word cannot be found in any keyboard string, return -1.",
    "topic": "Strings",
    "subtopic": "Keyboard Typing",
    "tags": [
      "Strings",
      "Greedy",
      "Typing"
    ],
    "input_format": "A string word and a list of strings keyboard.",
    "output_format": "An integer representing the minimum number of pushes required to type the word, or -1 if not possible.",
    "constraints": [
      "1 <= word.length <= 100",
      "1 <= keyboard.length <= 100",
      "1 <= keyboard[i].length <= 100"
    ],
    "examples": [
      {
        "input": {
          "word": "hello",
          "keyboard": [
            "h",
            "e",
            "l",
            "o",
            "hell"
          ]
        },
        "output": "4",
        "explanation": "Using the first keyboard for 'h', 'e', 'l', 'o', it takes 4 pushes to type 'hello'."
      },
      {
        "input": {
          "word": "hello",
          "keyboard": [
            "h",
            "e",
            "l",
            "o",
            "world"
          ]
        },
        "output": "5",
        "explanation": "Using the first keyboard for 'h', 'e', 'l', 'l', 'o', it takes 5 pushes."
      },
      {
        "input": {
          "word": "abc",
          "keyboard": [
            "x",
            "y",
            "z"
          ]
        },
        "output": "-1",
        "explanation": "None of the characters 'a', 'b', or 'c' can be found in any keyboard string; hence, it returns -1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how you can map each character in your word to the available keyboards.",
      "You can use a set to check if a character exists in the current keyboard."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Max Sum of Rectangle No Larger Than K",
    "description": "Given an m x n matrix, find the maximum sum of a rectangle from the matrix such that its sum is no larger than K. If there is no rectangle that has a sum no larger than K, return 0. The rectangle's sum is defined as the sum of its elements and it must be a contiguous submatrix.",
    "topic": "Dynamic Programming",
    "subtopic": "2D Range Queries",
    "tags": [
      "Dynamic Programming",
      "Matrix",
      "Binary Search"
    ],
    "input_format": "An integer m representing the number of rows, an integer n representing the number of columns, and a 2D array matrix of dimensions m x n, where matrix[i][j] represents the value at position (i, j). An integer K that represents the upper limit for the rectangle sum.",
    "output_format": "An integer representing the maximum sum of a rectangle whose sum is no larger than K.",
    "constraints": [
      "1 <= m, n <= 100",
      "-10000 <= matrix[i][j] <= 10000",
      "-10^7 <= K <= 10^7"
    ],
    "examples": [
      {
        "input": "m = 3, n = 4, matrix = [[1, 0, -2, -4], [-8, -1, 0, 2], [3, 4, 5, 1]], K = 2",
        "output": "2",
        "explanation": "The rectangle with sum 2 can be formed by the elements at positions (0, 0), (0, 1), (1, 1), which gives us 1 + 0 - 1 = 2."
      },
      {
        "input": "m = 2, n = 2, matrix = [[2, 2], [2, 2]], K = 3",
        "output": "2",
        "explanation": "The maximum rectangle sum we can form without exceeding K is 2, which isolates any single cell."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using prefix sums to reduce the problem's complexity.",
      "Explore the potential of binary search to maintain the sum limits."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Unique Paths",
    "description": "A robot is located at the top-left corner of an m x n grid. The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid. How many unique paths are there from the top-left corner to the bottom-right corner?",
    "topic": "Dynamic Programming",
    "subtopic": "Grid Paths",
    "tags": [
      "Dynamic Programming",
      "Grid",
      "Combinatorics"
    ],
    "input_format": "Two integers m and n representing the number of rows and columns of the grid respectively.",
    "output_format": "An integer representing the number of unique paths from the top-left corner to the bottom-right corner.",
    "constraints": [
      "1 <= m, n <= 100"
    ],
    "examples": [
      {
        "input": "m = 3, n = 7",
        "output": "28",
        "explanation": "There are a total of 28 unique paths to reach the bottom-right corner from the top-left corner."
      },
      {
        "input": "m = 3, n = 2",
        "output": "3",
        "explanation": "There are 3 unique paths from the top-left to the bottom-right corner."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to build up a solution.",
      "You can use a 2D array to store the number of ways to reach each cell.",
      "Think about the relationship between the current cell and the cells above or to the left."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Swim in Rising Water",
    "description": "You are given an array `heights` where `heights[i]` represents the height of the water at the ith unit of distance. You start at the leftmost position (index 0) and your goal is to reach the rightmost position (index n - 1). You can only swim upstream and you can only swim through water that is higher than or equal to your current height. Calculate the minimum height you need to start swimming from in order to reach the end of the array.",
    "topic": "Binary Search",
    "subtopic": "Search and Optimization",
    "tags": [
      "Binary Search",
      "Greedy",
      "Array"
    ],
    "input_format": "An array of integers `heights` representing the heights of water at various distances.",
    "output_format": "An integer representing the minimum height needed to reach the end.",
    "constraints": [
      "1 <= heights.length <= 10^5",
      "0 <= heights[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "heights = [1, 2, 3, 2, 1, 0, 2, 3, 4]",
        "output": "2",
        "explanation": "Starting from height 2, you can move to indices 1, 2, and keep swimming to reach the last index."
      },
      {
        "input": "heights = [0, 1, 2, 3, 4, 5]",
        "output": "5",
        "explanation": "The maximum height is required, starting with height 5 allows you to swim through all indices."
      },
      {
        "input": "heights = [3, 2, 1, 0]",
        "output": "3",
        "explanation": "You can start at height 3 and swim directly to the end since you start at the highest point."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using binary search to find the optimal height.",
      "You can simulate swimming to validate potential heights."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Average Waiting Time",
    "description": "You are given a list of customers, each customer has a time at which they arrive and the time it takes to serve them. The customers are served in the order they arrive. Your task is to calculate the average waiting time for all customers after they are served. The waiting time for a customer is defined as the time spent waiting in the queue before being served. Note that the first customer can start being served immediately upon arrival.",
    "topic": "Simulation",
    "subtopic": "Queue Management",
    "tags": [
      "Simulation",
      "Queue",
      "Average"
    ],
    "input_format": "An array of pairs representing arrival times and service times of each customer. Each pair [arrival, service] consists of two integers.",
    "output_format": "A single float representing the average waiting time rounded to two decimal points.",
    "constraints": [
      "1 <= customers.length <= 10^5",
      "0 <= arrival[i] <= 10^6",
      "1 <= service[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "customers = [[0, 3], [1, 9], [2, 6]]",
        "output": "8.00",
        "explanation": "Customer 1 arrives at 0 and is served at 0, spending 0 minutes waiting. Customer 2 arrives at 1, starts being served after 3, spends 3 minutes waiting. Customer 3 arrives at 2, starts being served after 12, spending 10 minutes waiting. Average waiting time = (0 + 3 + 10) / 3 = 4.33."
      },
      {
        "input": "customers = [[1, 4], [2, 3], [3, 5]]",
        "output": "1.33",
        "explanation": "Average waiting time = (0 + 0 + 1) / 3 = 0.33."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Keep track of the current time as you serve customers.",
      "Calculate waiting time for each customer based on their arrival and service times.",
      "Use a running sum to compute the average waiting time."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Find the Smallest Divisor Given a Threshold",
    "description": "Given an array of positive integers nums and an integer threshold, you need to find the smallest divisor d such that the sum of the division of each element in nums by d, rounded up to the nearest integer, is less than or equal to threshold. In other words, you divide each element of nums by d, round up the result, and sum all these results. Your goal is to find the minimum d that satisfies this condition.",
    "topic": "Binary Search",
    "subtopic": "Optimization",
    "tags": [
      "Binary Search",
      "Math",
      "Greedy"
    ],
    "input_format": "An array of integers nums and an integer threshold.",
    "output_format": "An integer representing the smallest divisor.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i] <= 10^6",
      "1 <= threshold <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 5, 9], threshold = 6",
        "output": "5",
        "explanation": "Using divisor 5, we get: ceil(1/5) + ceil(2/5) + ceil(5/5) + ceil(9/5) = 1 + 1 + 1 + 2 = 5, which is <= 6. For d = 4, we exceed the threshold."
      },
      {
        "input": "nums = [44, 22, 33, 11, 1], threshold = 5",
        "output": "44",
        "explanation": "For d = 44, we have: ceil(44/44) + ceil(22/44) + ceil(33/44) + ceil(11/44) + ceil(1/44) = 1 + 0 + 1 + 0 + 1 = 3, which is < 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to optimize the finding of the smallest divisor.",
      "The rounding up operation can be done using (num + d - 1) / d."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Furthest Building You Can Reach",
    "description": "You are climbing a building and can use a ladder to reach higher floors. You can initially reach the first building without using a ladder. Each building has a certain height and you can use a ladder to climb a building if your current height is not enough. You have a limited number of ladders and some bricks. Given an array of building heights and the number of bricks and ladders you have, determine the furthest building index you can reach.",
    "topic": "Greedy",
    "subtopic": "Priority Queue",
    "tags": [
      "Greedy",
      "Priority Queue",
      "Simulation"
    ],
    "input_format": "An integer array heights representing the heights of buildings, and two integers bricks and ladders.",
    "output_format": "An integer representing the furthest building index you can reach.",
    "constraints": [
      "1 <= heights.length <= 1000",
      "1 <= heights[i] <= 10^6",
      "0 <= bricks <= 10^9",
      "0 <= ladders <= heights.length"
    ],
    "examples": [
      {
        "input": "heights = [1, 2, 3, 4, 5], bricks = 0, ladders = 1",
        "output": "4",
        "explanation": "You cannot climb using bricks, but you can use one ladder to climb to the last building."
      },
      {
        "input": "heights = [1, 3, 2, 4, 5], bricks = 1, ladders = 1",
        "output": "4",
        "explanation": "Use the 1 brick to climb from height 2 to 3, then use the ladder to climb to the building of height 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using the bricks first on the smallest gaps.",
      "Keep track of the gaps you need to fill to maximize the furthest building you can reach."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Min Cost to Connect All Points",
    "description": "You are given a list of points in a 2D plane where points[i] = [xi, yi]. The cost to connect two points (xi, yi) and (xj, yj) is the Manhattan distance between them, which is calculated as |xi - xj| + |yi - yj|. Return the minimum cost to connect all points in the given list.",
    "topic": "Graph",
    "subtopic": "Minimum Spanning Tree",
    "tags": [
      "Graph",
      "Minimum Spanning Tree",
      "Union Find"
    ],
    "input_format": "A list of points where each point is represented as an array of two integers.",
    "output_format": "An integer representing the minimum cost to connect all points.",
    "constraints": [
      "1 <= points.length <= 100",
      "-10000 <= points[i][0], points[i][1] <= 10000"
    ],
    "examples": [
      {
        "input": "points = [[0,0],[2,2],[3,10],[5,2],[7,0]]",
        "output": "20",
        "explanation": "The minimum cost to connect all points is 20."
      },
      {
        "input": "points = [[0,0],[1,1],[1,0],[0,1]]",
        "output": "4",
        "explanation": "All points can be connected with a cost of 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a graph approach to find the minimum spanning tree.",
      "Consider using Prim's or Kruskal's algorithm.",
      "Remember the properties of Manhattan distance."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Largest Rectangle in Histogram",
    "description": "Given an array of integers representing the heights of bars in a histogram, return the area of the largest rectangle that can be formed within those bars. You may consider each bar as width of 1 unit.",
    "topic": "Stack",
    "subtopic": "Monotonic Stack",
    "tags": [
      "Stack",
      "Histogram",
      "Array",
      "Dynamic Programming"
    ],
    "input_format": "An array of integers heights where heights[i] represents the height of the i-th bar.",
    "output_format": "An integer representing the area of the largest rectangle that can be formed.",
    "constraints": [
      "1 <= heights.length <= 10^5",
      "0 <= heights[i] <= 10^4"
    ],
    "examples": [
      {
        "input": "heights = [2,1,5,6,2,3]",
        "output": "10",
        "explanation": "The largest rectangle has a height of 5 and width of 2, yielding an area of 10."
      },
      {
        "input": "heights = [2,4]",
        "output": "4",
        "explanation": "The largest rectangle is the second bar with height 4 and width 1, yielding an area of 4."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a stack to keep track of the indices of the bars.",
      "Calculate area when popping from the stack.",
      "Consider the width of the rectangle based on the indices."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Trapping Rain Water",
    "description": "Given an array of non-negative integers representing the height of bars in a histogram, compute how much rainwater can be trapped between the bars after it rains. The width of each bar is 1.",
    "topic": "Array",
    "subtopic": "Two Pointers / Stack",
    "tags": [
      "Array",
      "Two Pointers",
      "Dynamic Programming"
    ],
    "input_format": "An array of non-negative integers, height[], where height[i] represents the height of the i-th bar.",
    "output_format": "An integer representing the total units of rainwater that can be trapped.",
    "constraints": [
      "0 <= height.length <= 10000",
      "0 <= height[i] <= 50000"
    ],
    "examples": [
      {
        "input": "height = [0,1,0,2,1,0,1,3,2,1,2,1]",
        "output": "6",
        "explanation": "The water can be trapped above heights 1, 2, and 1. The total trapped water is (1+0+1+2+0+1) = 6."
      },
      {
        "input": "height = [4,2,0,3,2,5]",
        "output": "9",
        "explanation": "The water can be trapped above heights 2, 0, 3, and 2. The total trapped water is (2+0+3+2) = 9."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how to find the maximum height to the left and right of each bar.",
      "Use a stack to keep track of bars and calculate the water trapped."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Generate Parentheses",
    "description": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
    "topic": "Backtracking",
    "subtopic": "Combination Generation",
    "tags": [
      "Backtracking",
      "String",
      "DFS"
    ],
    "input_format": "An integer n representing the number of pairs of parentheses.",
    "output_format": "A list of strings representing all combinations of well-formed parentheses.",
    "constraints": [
      "1 <= n <= 8"
    ],
    "examples": [
      {
        "input": "n = 3",
        "output": "[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]",
        "explanation": "The five combinations of well-formed parentheses are: '((()))', '(()())', '(())()', '()(())', and '()()()'."
      },
      {
        "input": "n = 1",
        "output": "[\"()\"]",
        "explanation": "With one pair of parentheses, the only combination is '()'."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a recursive approach to build combinations.",
      "Track the number of left and right parentheses used.",
      "A valid combination will have left parentheses count equal to n and right count also equal to n."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Longest Increasing Path in a Matrix",
    "description": "Given an m x n integers matrix, return the length of the longest increasing path in the matrix. From each cell, you can move to any of the four directions: up, down, left, or right. You may not move diagonally or move outside the boundary of the matrix. You must start from a cell in the matrix and can move to a cell with a strictly greater value.",
    "topic": "Dynamic Programming",
    "subtopic": "Depth-first Search",
    "tags": [
      "Matrix",
      "DFS",
      "Dynamic Programming"
    ],
    "input_format": "An m x n matrix of integers.",
    "output_format": "An integer representing the length of the longest increasing path.",
    "constraints": [
      "1 <= m, n <= 200",
      "0 <= matrix[i][j] <= 10^4"
    ],
    "examples": [
      {
        "input": "matrix = [[9,9,4],[6,6,8],[2,1,1]]",
        "output": "4",
        "explanation": "The longest increasing path is [1, 2, 6, 9]."
      },
      {
        "input": "matrix = [[3,3,3],[3,3,3]]",
        "output": "1",
        "explanation": "There is no increasing path, the longest path has only one element."
      },
      {
        "input": "matrix = [[1]]",
        "output": "1",
        "explanation": "The longest path contains only the cell with the value 1."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using Depth First Search (DFS) with memoization.",
      "You can use a topological sorting approach to process the matrix."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Task Scheduler",
    "description": "You are given a list of tasks with their corresponding cooling periods. Your goal is to schedule these tasks such that the same tasks are not executed within a cooling period. Implement the function to determine the minimum time required to finish all tasks, including idle time where necessary.",
    "topic": "Greedy",
    "subtopic": "Task Scheduling",
    "tags": [
      "Greedy",
      "Task Scheduling",
      "Array"
    ],
    "input_format": "An array of tasks of type char, and an integer n representing the cooldown period.",
    "output_format": "An integer representing the minimum time required to finish all tasks.",
    "constraints": [
      "1 <= tasks.length <= 1000",
      "0 <= n <= 1000"
    ],
    "examples": [
      {
        "input": "tasks = ['A', 'A', 'A', 'B', 'B', 'B'], n = 2",
        "output": "8",
        "explanation": "One possible scheduling is A -> B -> idle -> A -> B -> idle -> A -> B, which takes 8 units of time."
      },
      {
        "input": "tasks = ['A', 'A', 'A', 'B', 'B', 'B'], n = 0",
        "output": "6",
        "explanation": "Since there is no cooldown period, all tasks can be executed back to back in 6 units of time."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a priority queue to keep track of tasks.",
      "Calculate the frequency of each task to determine the order of execution."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Heaters",
    "description": "You are given a list of house locations and a list of heater locations. Each heater can heat houses within a certain radius. Your task is to determine the minimum radius such that all houses can be heated. If it's impossible to heat all the houses, return -1.",
    "topic": "Sorting",
    "subtopic": "Binary Search",
    "tags": [
      "Greedy",
      "Binary Search",
      "Sorting"
    ],
    "input_format": "Two arrays: houses (representing the locations of houses) and heaters (representing the locations of heaters).",
    "output_format": "An integer representing the minimum radius needed to heat all houses, or -1 if it's impossible.",
    "constraints": [
      "1 <= houses.length, heaters.length <= 10000",
      "0 <= houses[i], heaters[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "houses = [1, 2, 3], heaters = [2]",
        "output": "1",
        "explanation": "The heater at position 2 can heat house at position 1 and 3 with a radius of 1."
      },
      {
        "input": "houses = [1, 4, 8], heaters = [2, 3, 6]",
        "output": "3",
        "explanation": "With a radius of 3, the heater at position 2 heats house 1 and the heater at position 6 heats houses 4 and 8."
      },
      {
        "input": "houses = [1, 2, 3], heaters = [5]",
        "output": "-1",
        "explanation": "The only heater is too far away from all houses, thus it's impossible to heat them."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider the distance between houses and heaters.",
      "Use binary search to find the closest heater for each house."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Maximum Performance of a Team",
    "description": "Given an array of integers engineers representing the speed of each engineer and another array of integers efficiency representing their respective efficiencies, return the maximum performance of a team of engineers you can form. The performance of a team is defined as the product of their total speed and the minimum efficiency among them. You must select at least one engineer to form a team, and you may choose engineers such that their total number of engineers does not exceed a given limit k. Performance could be a large number, so return it modulo 10^9 + 7.",
    "topic": "Greedy",
    "subtopic": "Sorting",
    "tags": [
      "Greedy",
      "Sorting",
      "Performance"
    ],
    "input_format": "Two arrays of integers: engineers and efficiency, and an integer k.",
    "output_format": "An integer representing the maximum performance modulo 10^9 + 7.",
    "constraints": [
      "1 <= engineers.length == efficiency.length <= 10^5",
      "1 <= engineers[i], efficiency[i] <= 10^5",
      "1 <= k <= engineers.length"
    ],
    "examples": [
      {
        "input": "engineers = [2, 10, 3], efficiency = [5, 4, 3], k = 2",
        "output": "60",
        "explanation": "The optimal team is formed by selecting the engineers with speeds 10 and 2 (their respective efficiency is 4). Total speed is 10 + 2 = 12 and minimum efficiency is 4, thus performance = 12 * 4 = 48."
      },
      {
        "input": "engineers = [1, 2], efficiency = [1, 1], k = 1",
        "output": "2",
        "explanation": "The optimal team can just consist of either engineer as we need to select at least one. Selecting the engineer with speed 2 gives a performance of 2 * 1 = 2."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider sorting engineers based on their efficiencies to maximize performance.",
      "Use a priority queue to maintain the top k speeds."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Basic Calculator II",
    "description": "Implement a basic calculator to evaluate a simple expression string containing non-negative integers, '+', '-', '*', and '/' operators. The expression should be evaluated according to the order of operations (i.e., multiplication and division should be performed before addition and subtraction). The expression strings are guaranteed to be valid, and the result should be returned as an integer.",
    "topic": "Mathematics",
    "subtopic": "Expression Evaluation",
    "tags": [
      "Mathematics",
      "Stack",
      "Expression Evaluation"
    ],
    "input_format": "A string s representing the expression to evaluate.",
    "output_format": "An integer representing the result of the evaluated expression.",
    "constraints": [
      "1 <= s.length <= 3 * 10^5",
      "s consists of digits, '+', '-', '*', '/' operators, and spaces.",
      "The expression is guaranteed to be valid."
    ],
    "examples": [
      {
        "input": "s = '3+2*2'",
        "output": "7",
        "explanation": "The expression evaluates as 3 + (2 * 2) = 3 + 4 = 7."
      },
      {
        "input": "s = ' 3/2 '",
        "output": "1",
        "explanation": "The expression evaluates as 3 / 2 = 1 after flooring the result."
      },
      {
        "input": "s = ' 3+5 / 2 '",
        "output": "5",
        "explanation": "The expression evaluates as 3 + (5 / 2) = 3 + 2.5 = 5 after flooring."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to handle the order of operations.",
      "Keep track of the current number and the last operator.",
      "Be careful with division to ensure flooring of the result."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Shortest Subarray to be Removed to Make Array Sorted",
    "description": "Given an integer array nums, you need to find the length of the shortest subarray that can be removed to make the remaining elements sorted in non-decreasing order. If the array is already sorted, return 0.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Sorting",
      "Two Pointers"
    ],
    "input_format": "An integer array nums.",
    "output_format": "An integer representing the length of the shortest subarray to be removed.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 10, 4, 2, 3, 5]",
        "output": "3",
        "explanation": "Removing the subarray [10, 4, 2] makes the remaining elements sorted as [1, 2, 3, 3, 5]."
      },
      {
        "input": "nums = [5, 4, 3, 2, 1]",
        "output": "5",
        "explanation": "Removing the entire array makes an empty array which is trivially sorted."
      },
      {
        "input": "nums = [1, 2, 3]",
        "output": "0",
        "explanation": "The array is already sorted, so no removal is needed."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how the array elements should look before and after the removal.",
      "Try to find the longest sorted prefix and suffix.",
      "Utilize two pointers or binary search to optimize your approach."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
    "description": "Given a 2D grid of integers and a threshold value, find the maximum side length of a square whose sum of all elements is less than or equal to the threshold. Return 0 if no such square exists.",
    "topic": "Dynamic Programming",
    "subtopic": "Prefix Sum",
    "tags": [
      "Dynamic Programming",
      "Matrix",
      "Prefix Sum"
    ],
    "input_format": "A 2D matrix of integers grid and an integer threshold.",
    "output_format": "An integer representing the maximum side length of the square.",
    "constraints": [
      "1 <= grid.length, grid[i].length <= 100",
      "0 <= grid[i][j] <= 100",
      "0 <= threshold <= 100000"
    ],
    "examples": [
      {
        "input": {
          "grid": [
            [
              1,
              2,
              3
            ],
            [
              4,
              5,
              6
            ],
            [
              7,
              8,
              9
            ]
          ],
          "threshold": 18
        },
        "output": 2,
        "explanation": "The maximum side length of a square with a sum less than or equal to 18 is 2, formed by the top-left 2x2 square."
      },
      {
        "input": {
          "grid": [
            [
              1,
              2
            ],
            [
              3,
              4
            ]
          ],
          "threshold": 4
        },
        "output": 1,
        "explanation": "The maximum side length is 1, since the individual elements (1, 2, 3, 4) are less than or equal to 4."
      },
      {
        "input": {
          "grid": [
            [
              5,
              5
            ],
            [
              5,
              5
            ]
          ],
          "threshold": 10
        },
        "output": 1,
        "explanation": "No square with side length 2 can be formed as its sum (20) exceeds the threshold of 10."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider calculating the prefix sum for the grid to optimize sum queries.",
      "Iterate over possible side lengths and check if the sum of the square is within the threshold."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Kth Smallest Number in Multiplication Table",
    "description": "You are given an integer m representing the number of rows and an integer n representing the number of columns of a multiplication table, where the value at the intersection of the i-th row and j-th column is i * j. Your task is to find the kth smallest element in the multiplication table (1-indexed).",
    "topic": "Binary Search",
    "subtopic": "Kth Smallest Element",
    "tags": [
      "Binary Search",
      "Matrix",
      "Kth Smallest"
    ],
    "input_format": "Three integers m, n, and k, where 1 <= m, n <= 10^3 and 1 <= k <= m*n.",
    "output_format": "An integer representing the kth smallest element in the multiplication table.",
    "constraints": [
      "1 <= m, n <= 10^3",
      "1 <= k <= m * n"
    ],
    "examples": [
      {
        "input": "m = 3, n = 3, k = 5",
        "output": "3",
        "explanation": "The multiplication table is: [[1, 2, 3], [2, 4, 6], [3, 6, 9]]. The sorted unique elements are [1, 2, 3, 4, 6, 9]. The 5th smallest is 3."
      },
      {
        "input": "m = 2, n = 3, k = 6",
        "output": "6",
        "explanation": "The multiplication table is: [[1, 2, 3], [2, 4, 6]]. The sorted unique elements are [1, 2, 3, 4, 6]. The 6th smallest is 6."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using binary search to find the kth element efficiently.",
      "Try to determine how many elements are less than or equal to a mid value in the table."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Interleaving String",
    "description": "Given three strings s1, s2, and s3, write a function to determine if s3 is formed by the interleaving of s1 and s2. An interleaving of two strings s and t is a configuration where they can be divided into non-empty sub-strings such that s3 is created by an alternating sequence of characters from s and t without changing the order of the characters. The goal is to return true if s3 is an interleaving of s1 and s2; otherwise, false.",
    "topic": "Dynamic Programming",
    "subtopic": "String Interleaving",
    "tags": [
      "Dynamic Programming",
      "String",
      "Interleaving"
    ],
    "input_format": "Three strings s1, s2, and s3.",
    "output_format": "A boolean value indicating whether s3 is an interleaving of s1 and s2.",
    "constraints": [
      "0 <= s1.length, s2.length, s3.length <= 100",
      "s1, s2, and s3 consist of English letters."
    ],
    "examples": [
      {
        "input": "s1 = \"aab\", s2 = \"axy\", s3 = \"aaxyab\"",
        "output": "true",
        "explanation": "s3 can be interleaved from s1 and s2 as follows: a from s1, a from s1, x from s2, y from s2, a from s1, b from s1."
      },
      {
        "input": "s1 = \"aa\", s2 = \"ab\", s3 = \"aaba\"",
        "output": "false",
        "explanation": "s3 cannot be obtained by interleaving s1 and s2."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a dynamic programming table to store intermediate results.",
      "Check characters sequentially from s1 and s2 to see if they match with s3."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Number of Ways to Reorder Array to Get Same BST",
    "description": "Given an array of distinct integers, calculate the number of ways to reorder the array such that it can represent the same Binary Search Tree (BST) as the original array. The BST can be defined by the property that for any given node, the values of all nodes in its left subtree are less than the node's value, and the values of all nodes in its right subtree are greater than the node's value. The output should account for unique arrangements that maintain the BST structure.",
    "topic": "Trees",
    "subtopic": "Binary Search Tree",
    "tags": [
      "Trees",
      "Dynamic Programming",
      "Combinatorics"
    ],
    "input_format": "An array of distinct integers representing the original array.",
    "output_format": "An integer representing the number of valid reorderings that result in the same BST.",
    "constraints": [
      "1 <= nums.length <= 20",
      "1 <= nums[i] <= 1000"
    ],
    "examples": [
      {
        "input": "[2, 1, 3]",
        "output": "1",
        "explanation": "The only way to reorder the array [2, 1, 3] to get the same BST is [2, 1, 3] itself."
      },
      {
        "input": "[3, 2, 1, 4]",
        "output": "3",
        "explanation": "The valid reorderings that create the same BST are [3, 2, 1, 4], [3, 1, 2, 4], and [2, 1, 3, 4]."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider how to represent the structure of the BST.",
      "Think about how combinatorics might apply to counting reorderings.",
      "Use dynamic programming to store intermediate results."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Next Permutation",
    "description": "Implement the next permutation algorithm that rearranges numbers into the lexicographically next greater permutation of numbers. If such arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order). The algorithm must run in-place and use only constant extra memory.",
    "topic": "Array",
    "subtopic": "Permutation",
    "tags": [
      "Array",
      "Permutation",
      "In-place"
    ],
    "input_format": "An array of integers nums representing the permutation.",
    "output_format": "The next permutation of the array in-place.",
    "constraints": [
      "1 <= nums.length <= 100",
      "0 <= nums[i] <= 100"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "[1, 3, 2]",
        "explanation": "The next permutation is obtained by swapping the last two elements."
      },
      {
        "input": "nums = [3, 2, 1]",
        "output": "[1, 2, 3]",
        "explanation": "No greater permutation is possible, so we return the lowest order."
      },
      {
        "input": "nums = [1, 1, 5]",
        "output": "[1, 5, 1]",
        "explanation": "The next permutation is obtained by changing the last two elements."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Look for the last ascent in the array.",
      "Swap the found element with the smallest element greater than it to the right.",
      "Reverse the sub-array to the right of the position found."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Reverse Nodes in k-Group",
    "description": "Given a linked list, reverse the nodes of the list k at a time and return the modified list. You may not alter the values in the nodes, only nodes themselves may be changed. If the number of nodes is not a multiple of k, then left-out nodes in the end should remain as they are.",
    "topic": "Linked List",
    "subtopic": "Reversal",
    "tags": [
      "Linked List",
      "Reversal",
      "Recursion"
    ],
    "input_format": "A singly linked list represented by its head node and a positive integer k.",
    "output_format": "The head node of the modified linked list after reversing the nodes k at a time.",
    "constraints": [
      "The number of nodes in the list is in the range [0, 5000].",
      "1 <= k <= 5000."
    ],
    "examples": [
      {
        "input": "head = [1, 2, 3, 4, 5], k = 2",
        "output": "[2, 1, 4, 3, 5]",
        "explanation": "After reversing every 2 nodes, the list becomes [2, 1] -> [4, 3] with the last node 5 remaining unchanged."
      },
      {
        "input": "head = [1, 2, 3, 4, 5], k = 3",
        "output": "[3, 2, 1, 4, 5]",
        "explanation": "The first group of three nodes is reversed to [3, 2, 1] and the remaining two nodes are [4, 5], which remain unchanged."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a dummy node to simplify the edge cases.",
      "You need to manage connections before and after reversing each k-group."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Minimum Number of Visited Cells in a Grid",
    "description": "You are given a 2D grid of size m x n that represents a field of flowers. Each cell in the grid contains either a flower (denoted by 1) or is empty (denoted by 0). You want to visit flowers only once, and movement is allowed in any of the four cardinal directions (up, down, left, right). Your goal is to figure out the minimum number of cells you need to visit to ensure you can see all the flowers. If it is not possible to visit all flowers, return -1.",
    "topic": "Graph",
    "subtopic": "Traversal",
    "tags": [
      "Graph",
      "DFS",
      "BFS",
      "Grid"
    ],
    "input_format": "A 2D array of integers grid where grid[i][j] is either 0 or 1.",
    "output_format": "An integer representing the minimum number of cells needed to visit all flowers, or -1 if it's impossible.",
    "constraints": [
      "1 <= m, n <= 100",
      "grid[i][j] is either 0 or 1"
    ],
    "examples": [
      {
        "input": "grid = [[1,0,0],[0,1,1],[1,0,0]]",
        "output": "5",
        "explanation": "You can visit the cells (0,0), (1,1), (1,2), (2,1), and (2,0) to visit all flowers."
      },
      {
        "input": "grid = [[0,0],[0,0]]",
        "output": "-1",
        "explanation": "There are no flowers to visit."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using BFS or DFS for traversal.",
      "Keep track of visited cells to avoid revisiting.",
      "Check for possible paths to every flower."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Find the Shortest Superstring",
    "description": "Given an array of strings 'words', your task is to find the shortest string which contains each string in 'words' as a substring exactly once. If there are multiple valid shortest superstrings, return any of them. The superstring should minimize the number of characters.",
    "topic": "String",
    "subtopic": "Greedy",
    "tags": [
      "String",
      "Greedy",
      "Backtracking"
    ],
    "input_format": "An array of strings 'words' where 1 <= words.length <= 12 and 1 <= words[i].length <= 100.",
    "output_format": "A string representing the shortest superstring containing all substrings exactly once.",
    "constraints": [
      "1 <= words.length <= 12",
      "1 <= words[i].length <= 100",
      "All strings consist of lowercase letters."
    ],
    "examples": [
      {
        "input": "words = [\"alex\", \"loves\", \"leetcode\"]",
        "output": "alexlovesleetcode",
        "explanation": "The string 'alexlovesleetcode' contains all the given substrings exactly once."
      },
      {
        "input": "words = [\"cat\", \"cats\", \"and\", \"dog\"]",
        "output": "catsanddog",
        "explanation": "The string 'catsanddog' contains all the given substrings exactly once."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a backtracking approach to generate possible superstrings.",
      "Think about the overlaps between strings to minimize the length."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Longest Valid Parentheses",
    "description": "Given a string s consisting of parentheses, find the length of the longest valid parentheses substring. A valid parentheses substring is one that is correctly matched and nested. For example, '()' and '(())' are valid, while ')(' and '(()' are not.",
    "topic": "String",
    "subtopic": "Dynamic Programming",
    "tags": [
      "String",
      "Dynamic Programming",
      "Stack"
    ],
    "input_format": "A single string s consisting of parentheses '(' and ')'.",
    "output_format": "An integer representing the length of the longest valid parentheses substring.",
    "constraints": [
      "0 <= s.length <= 10^4",
      "s consists of '(' and ')'."
    ],
    "examples": [
      {
        "input": "s = '(()')",
        "output": "2",
        "explanation": "The longest valid parentheses substring is '()', which has length 2."
      },
      {
        "input": "s = ')()())'",
        "output": "4",
        "explanation": "The longest valid parentheses substring is '()()', which has length 4."
      },
      {
        "input": "s = '()()()'",
        "output": "6",
        "explanation": "The entire string is valid, with a length of 6."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a stack to track indices of unmatched parentheses.",
      "Consider using dynamic programming to store lengths of valid substrings."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Minimum Size Subarray Sum",
    "description": "Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Two Pointers"
    ],
    "input_format": "An array of positive integers nums, followed by a positive integer target.",
    "output_format": "An integer representing the minimal length of a contiguous subarray with a sum \u2265 target, or 0 if no such subarray exists.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "1 <= nums[i] <= 10^4",
      "1 <= target <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [2,3,1,2,4,3], target = 7",
        "output": "2",
        "explanation": "The subarray [4,3] has the minimal length of 2, with a sum of 7."
      },
      {
        "input": "nums = [1,4,4], target = 4",
        "output": "1",
        "explanation": "The subarray [4] has the minimal length of 1, with a sum of 4."
      },
      {
        "input": "nums = [1,1,1,1,1,1], target = 11",
        "output": "0",
        "explanation": "There is no subarray that sums to 11, so the result is 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a sliding window technique.",
      "Keep track of the current sum and the minimal length found."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "4Sum",
    "description": "Given an array of integers nums and an integer target, return all unique quadruplets (a, b, c, d) such that a + b + c + d = target. You may return the answer in any order.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Combination"
    ],
    "input_format": "An array of integers nums and an integer target.",
    "output_format": "A list of unique quadruplets that add up to the target.",
    "constraints": [
      "0 <= nums.length <= 200",
      "-10^9 <= nums[i] <= 10^9",
      "Each input would have at least one valid answer."
    ],
    "examples": [
      {
        "input": "nums = [1, 0, -1, 0, -2, 2], target = 0",
        "output": "[[-2, -1, 0, 1], [-2, 0, 0, 2], [-1, 0, 0, 1]]",
        "explanation": "The quadruplets that add up to 0 are [-2, -1, 0, 1], [-2, 0, 0, 2], and [-1, 0, 0, 1]."
      },
      {
        "input": "nums = [2, 2, 2, 2, 2], target = 8",
        "output": "[[2, 2, 2, 2]]",
        "explanation": "The only quadruplet that adds up to 8 is [2, 2, 2, 2]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using sorting to help eliminate duplicates.",
      "Use a hash set to store results."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Maximum Points You Can Obtain from Cards",
    "description": "You have a stack of cards where each card has a number of points written on it. The stack is arranged in a sequence, and you can only take cards from the top of the stack. You can take a total of C cards from the top, and your friend can take D cards from the bottom. Determine the maximum points you can obtain while choosing cards in this manner. Note that you can take some cards from the top, some cards from the bottom, or a combination of both, but the total number of cards taken cannot exceed C + D.",
    "topic": "Array",
    "subtopic": "Sliding Window",
    "tags": [
      "Array",
      "Sliding Window",
      "Greedy"
    ],
    "input_format": "An integer array, cards, representing the points on each card, and two integers, C and D, representing the number of cards you and your friend can take respectively.",
    "output_format": "An integer representing the maximum points obtainable.",
    "constraints": [
      "1 <= cards.length <= 1000",
      "0 <= C, D <= cards.length",
      "0 <= cards[i] <= 10^6"
    ],
    "examples": [
      {
        "input": {
          "cards": [
            1,
            2,
            3,
            4,
            5
          ],
          "C": 2,
          "D": 2
        },
        "output": 10,
        "explanation": "You can take cards with points 4 and 5 from the top (total 9) and your friend can take cards 1 and 2 from the bottom (total 3). Overall, this totals to 9 + 1 + 2 = 10."
      },
      {
        "input": {
          "cards": [
            5,
            1,
            2,
            10,
            6
          ],
          "C": 3,
          "D": 1
        },
        "output": 17,
        "explanation": "You can take the top cards with points 5, 1, and 2 (total 8) and your friend can take the bottom card with points 10. Overall, this totals to 8 + 10 = 18."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how many cards you can take from both ends.",
      "Consider a sliding window approach to optimize your selection.",
      "Keep track of the maximum points as you iterate through combinations."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Combination Sum",
    "description": "Given an array of distinct integers candidates and a target integer target, return all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order. The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.",
    "topic": "Backtracking",
    "subtopic": "Combination Generation",
    "tags": [
      "Backtracking",
      "DFS",
      "Combinations"
    ],
    "input_format": "An array of distinct integers candidates and a target integer target.",
    "output_format": "A list of lists, where each list contains integers that sum up to the target.",
    "constraints": [
      "1 <= candidates.length <= 30",
      "1 <= candidates[i] <= 200",
      "All elements of candidates are distinct.",
      "1 <= target <= 500"
    ],
    "examples": [
      {
        "input": "candidates = [2, 3, 6, 7], target = 7",
        "output": "[[7], [2, 2, 3]]",
        "explanation": "The combinations that sum to 7 are [7] and [2, 2, 3]."
      },
      {
        "input": "candidates = [2, 3, 5], target = 8",
        "output": "[[2, 2, 2, 2], [2, 3, 3], [3, 5]]",
        "explanation": "The combinations that sum to 8 are [2, 2, 2, 2], [2, 3, 3], and [3, 5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Try to explore all possible combinations recursively.",
      "Use backtracking to remove the last added number and try the next candidate."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Maximum OR",
    "description": "Given an array of integers, find the maximum value that can be obtained by performing the bitwise OR operation on any subset of the array. The subset can contain zero or more elements, including the empty set.",
    "topic": "Bit Manipulation",
    "subtopic": "Subsets",
    "tags": [
      "Bit Manipulation",
      "Subset",
      "OR"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "An integer representing the maximum OR value of any subset.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "0 <= nums[i] <= 10^6"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3]",
        "output": "3",
        "explanation": "The maximum OR is achieved by taking the subset [2, 3]. The OR operation results in 2 | 3 = 3."
      },
      {
        "input": "nums = [5, 1, 2, 3]",
        "output": "7",
        "explanation": "The maximum OR is achieved by taking the subset [5, 2]. The OR operation results in 5 | 2 = 7."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "The OR operation is associative; consider using the entire array.",
      "Empty subset gives 0, but subsets with elements are better."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Insert Delete GetRandom O(1) - Duplicates Allowed",
    "description": "Design a data structure that supports the following operations: insert, delete, and getRandom. These operations should allow duplicate elements, with the following characteristics: insert should add the element to the structure, delete should remove one occurrence of the element, and getRandom should return a random element from the structure. All operations should be done in average O(1) time complexity.",
    "topic": "Data Structure",
    "subtopic": "Randomized Collection",
    "tags": [
      "Data Structure",
      "Randomization",
      "Collection"
    ],
    "input_format": "A series of operations in the form of strings which can be 'insert' with an integer, 'delete' with an integer, or 'getRandom'.",
    "output_format": "For 'getRandom', return a random integer from the collection. For 'insert' and 'delete' return True if the operation was successful otherwise return False.",
    "constraints": [
      "The number of operations will not exceed 10^5.",
      "The inserted element will be an integer within the range [-10^5, 10^5]."
    ],
    "examples": [
      {
        "input": "['insert(1)', 'insert(1)', 'insert(2)', 'getRandom()', 'delete(1)', 'getRandom()']",
        "output": "1 or 2 (Random)",
        "explanation": "Initially after insertion, we have two 1's and one 2. getRandom can return either 1 or 2. After deleting one occurrence of 1, getRandom will also return 1 or 2 based on the remaining elements."
      },
      {
        "input": "['insert(3)', 'insert(3)', 'insert(3)', 'getRandom()', 'delete(3)', 'getRandom()']",
        "output": "3 (first getRandom), 3 (second getRandom) or None if all instances deleted.",
        "explanation": "After three inserts of 3, getRandom should return 3. After deleting one occurrence, it can still return 3 if one remains."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a dictionary to map values to lists of indices.",
      "Make use of randomization functions available in your programming language."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Rotate Image",
    "description": "You are given an n x n 2D matrix representing an image. You need to rotate the image by 90 degrees clockwise. You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. Do not use an additional matrix.",
    "topic": "Matrix",
    "subtopic": "In-Place Rotation",
    "tags": [
      "Matrix",
      "Array",
      "In-place"
    ],
    "input_format": "A 2D list of integers representing the image, where matrix[i][j] is the pixel value.",
    "output_format": "The same 2D list of integers rotated 90 degrees clockwise.",
    "constraints": [
      "1 <= n <= 20",
      "-1000 <= matrix[i][j] <= 1000"
    ],
    "examples": [
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[[7,4,1],[8,5,2],[9,6,3]]",
        "explanation": "Rotating the matrix clockwise results in: [[7,4,1],[8,5,2],[9,6,3]]."
      },
      {
        "input": "matrix = [[ 5, 1, 9,11],[ 2, 4, 8,10],[13, 3, 6, 7],[15,14,12,16]]",
        "output": "[[15,13, 2, 5],[14, 3, 4, 1],[12, 6, 8, 9],[16, 7,10,11]]",
        "explanation": "The matrix rotated 90 degrees clockwise is: [[15,13, 2, 5],[14, 3, 4, 1],[12, 6, 8, 9],[16, 7,10,11]]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider how to swap elements in a layer-wise manner.",
      "You may need to use a temporary variable for swapping values."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Cheapest Flights Within K Stops",
    "description": "You are given a list of flights where flights[i] = [from_i, to_i, price_i] represents a flight from city from_i to city to_i with a price of price_i. You are also given a source city and a destination city, along with the maximum number of allowed stops K. Your task is to find the cheapest price to travel from the source city to the destination city, considering at most K stops. If there is no such route, return -1.",
    "topic": "Graph",
    "subtopic": "Shortest Path",
    "tags": [
      "Graph",
      "Dijkstra",
      "BFS"
    ],
    "input_format": "A list of flights, a source city, a destination city, and an integer representing the maximum number of stops K.",
    "output_format": "An integer representing the cheapest price to reach the destination city from the source city with at most K stops, or -1 if no valid route exists.",
    "constraints": [
      "1 <= flights.length <= 100",
      "flights[i].length == 3",
      "0 <= from_i, to_i < n where n is the number of cities",
      "1 <= price_i <= 10^4",
      "0 <= K <= 100"
    ],
    "examples": [
      {
        "input": {
          "flights": [
            [
              0,
              1,
              100
            ],
            [
              1,
              2,
              100
            ],
            [
              0,
              2,
              500
            ]
          ],
          "source": 0,
          "destination": 2,
          "K": 1
        },
        "output": 500,
        "explanation": "The cheapest route from city 0 to city 2 with at most 1 stop is via city 0 -> city 1 -> city 2, costing 100 + 100 = 200, but the direct cost is 500."
      },
      {
        "input": {
          "flights": [
            [
              0,
              1,
              100
            ],
            [
              1,
              2,
              100
            ],
            [
              0,
              2,
              500
            ]
          ],
          "source": 0,
          "destination": 2,
          "K": 0
        },
        "output": 500,
        "explanation": "With K=0, only the direct flight from city 0 to city 2 can be used, costing 500."
      },
      {
        "input": {
          "flights": [
            [
              0,
              1,
              100
            ],
            [
              1,
              2,
              100
            ],
            [
              0,
              2,
              500
            ]
          ],
          "source": 1,
          "destination": 2,
          "K": 1
        },
        "output": 100,
        "explanation": "From city 1, you can reach city 2 directly in one flight costing 100."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a priority queue to keep track of the minimum costs.",
      "Remember to keep track of the number of stops made."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Maximum Profit in Job Scheduling",
    "description": "You are given a list of jobs, where each job has a start time, an end time, and a profit associated with it. Your goal is to schedule jobs in such a way that you maximize the total profit, ensuring that no two jobs overlap. A job can be scheduled only if its start time is greater than or equal to the end time of the last scheduled job.",
    "topic": "Dynamic Programming",
    "subtopic": "Interval Scheduling",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Interval",
      "Profit"
    ],
    "input_format": "An array of jobs, where each job is represented as a tuple (start_time, end_time, profit).",
    "output_format": "An integer representing the maximum profit that can be achieved.",
    "constraints": [
      "1 <= jobs.length <= 10^4",
      "0 <= start_time < end_time <= 10^4",
      "0 <= profit <= 10^6"
    ],
    "examples": [
      {
        "input": "jobs = [(1, 3, 50), (2, 5, 20), (3, 6, 30), (5, 8, 60)]",
        "output": "110",
        "explanation": "Schedule jobs (1, 3, 50) and (5, 8, 60) to achieve a maximum profit of 50 + 60 = 110."
      },
      {
        "input": "jobs = [(0, 6, 50), (1, 4, 30), (3, 5, 20), (4, 8, 70), (5, 7, 60)]",
        "output": "120",
        "explanation": "Schedule jobs (1, 4, 30), (4, 8, 70) to achieve a maximum profit of 30 + 70 = 100."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider sorting the jobs based on their end times.",
      "Use a dynamic programming approach to keep track of the maximum profit."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Implement Stack using Queues",
    "description": "Design a stack implementation that uses two queues. The stack should support the following operations: push, pop, top, and isEmpty. Implement the methods using only the queues as storage. You may not use any other data structures;",
    "topic": "Data Structures",
    "subtopic": "Stack and Queue",
    "tags": [
      "Stack",
      "Queue",
      "Data Structures",
      "Design"
    ],
    "input_format": "A series of operations to perform on the stack.",
    "output_format": "Return the output of pop and top operations.",
    "constraints": [
      "The number of operations will not exceed 1000.",
      "Each operation is either 'push', 'pop', 'top', or 'isEmpty'.",
      "You may assume all pushed values are integers."
    ],
    "examples": [
      {
        "input": "Operations: ['push(1)', 'push(2)', 'top()', 'pop()', 'isEmpty()']",
        "output": "[2, 2, false]",
        "explanation": "After pushing 1 and 2 onto the stack, the top element is 2. After popping, the stack is not empty."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use two queues for the implementation.",
      "When pushing an element, always move existing elements to maintain stack order."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Basic Calculator",
    "description": "Implement a basic calculator to evaluate a simple expression string consisting of non-negative integers, '+', '-', '(', and ')'. The expression can also contain whitespace characters. You must return the result of the arithmetic expression. The functions of addition, subtraction, and parentheses must be handled correctly, while following the standard order of operations.",
    "topic": "Mathematics",
    "subtopic": "Expression Evaluation",
    "tags": [
      "Stack",
      "Math",
      "Expression Parsing"
    ],
    "input_format": "A string expression s containing non-negative integers and the operators '+', '-', '(', and ')'.",
    "output_format": "An integer representing the result of the evaluated expression.",
    "constraints": [
      "1 <= s.length <= 3 * 10^5",
      "s consists of digits, '+', '-', '(', ')', and ' ' (spaces).",
      "The expression is guaranteed to be valid."
    ],
    "examples": [
      {
        "input": "s = \"1 + 1\"",
        "output": "2",
        "explanation": "The expression evaluates to 1 + 1 = 2."
      },
      {
        "input": "s = \" 2-1 + 2 \"",
        "output": "3",
        "explanation": "The expression evaluates to 2 - 1 + 2 = 3."
      },
      {
        "input": "s = \"(1+(4+5+2)-3)+(6+8)\"",
        "output": "23",
        "explanation": "The expression evaluates to (1 + (4 + 5 + 2) - 3) + (6 + 8) = 23."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a stack to handle parentheses.",
      "Keep track of the current number and current operation.",
      "Remove whitespaces before processing the string."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Contains Duplicate",
    "description": "Given an integer array 'nums', return true if any value appears at least twice in the array, and return false if every element is distinct.",
    "topic": "Array",
    "subtopic": "Searching",
    "tags": [
      "Array",
      "Hash Table",
      "Searching"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A boolean value indicating whether any values appear at least twice.",
    "constraints": [
      "1 <= nums.length <= 10^5",
      "-10^9 <= nums[i] <= 10^9"
    ],
    "examples": [
      {
        "input": "nums = [1, 2, 3, 1]",
        "output": "true",
        "explanation": "The number 1 appears twice in the array."
      },
      {
        "input": "nums = [1, 2, 3, 4]",
        "output": "false",
        "explanation": "All elements are distinct."
      },
      {
        "input": "nums = [1, 2, 3, 1, 2]",
        "output": "true",
        "explanation": "The number 1 and 2 both appear more than once in the array."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash table to track previously seen numbers.",
      "If a number is already in the hash table, return true."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Largest 1-Bordered Square",
    "description": "Given a 2D binary grid consisting of 0s and 1s, find the largest square containing only 1s and return its area. A square is 1-bordered if all of its border cells are 1s.",
    "topic": "Dynamic Programming",
    "subtopic": "2D Array",
    "tags": [
      "Dynamic Programming",
      "Matrix",
      "Grid"
    ],
    "input_format": "A 2D binary grid represented by an array of arrays, where each element is either 0 or 1.",
    "output_format": "An integer representing the area of the largest square containing only 1s.",
    "constraints": [
      "1 <= grid.length <= 300",
      "1 <= grid[i].length <= 300",
      "grid[i][j] is either 0 or 1."
    ],
    "examples": [
      {
        "input": "[[1,0,1],[1,1,1],[1,0,1]]",
        "output": "1",
        "explanation": "The largest square of 1s has an area of 1 (1x1)."
      },
      {
        "input": "[[1,1,1],[1,1,1],[1,1,1]]",
        "output": "9",
        "explanation": "The largest square of 1s has an area of 9 (3x3)."
      },
      {
        "input": "[[0,0,0],[0,1,1],[0,1,1]]",
        "output": "4",
        "explanation": "The largest square of 1s has an area of 4 (2x2)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use dynamic programming to keep track of the largest square ending at each cell.",
      "Consider the minimum of the three neighboring cells while determining the largest square."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for a Least Recently Used (LRU) cache. It should support the following operations: get(key) and put(key, value). The get(key) method retrieves the value of the key if the key exists in the cache, otherwise returns -1. The put(key, value) method updates or adds the value if the key is not already present in the cache. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Design",
    "subtopic": "Cache Implementation",
    "tags": [
      "Design",
      "Cache",
      "Data Structure"
    ],
    "input_format": "Two methods: get(key: int) and put(key: int, value: int).",
    "output_format": "The value associated with the key, or -1 if the key is not found.",
    "constraints": [
      "The cache will be initialized with a positive capacity.",
      "Follow-up: Could you do it in O(1) time complexity for both get and put operations?"
    ],
    "examples": [
      {
        "input": "LRUCache cache = new LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1, -1, 3, 4]",
        "explanation": "Cache stores a capacity of 2. After inserting 1 and 2, getting 1 returns 1. Inserting 3 evicts key 2. Getting 2 returns -1. Inserting 4 evicts key 1. Finally, getting 1 returns -1, 3 returns 3, and 4 returns 4."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a combination of a hash map and a doubly linked list.",
      "The doubly linked list can help keep track of the order of usage."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Triangle",
    "description": "Given an integer array 'sides' representing the lengths of the sides of a triangle, determine if these sides can form a valid triangle. A triangle is valid if the sum of the lengths of any two sides is greater than the length of the remaining side.",
    "topic": "Geometry",
    "subtopic": "Triangle Inequality",
    "tags": [
      "Geometry",
      "Triangle",
      "Validation"
    ],
    "input_format": "An integer array 'sides' of length 3 where each element represents the length of a side.",
    "output_format": "Return true if the sides can form a valid triangle, otherwise return false.",
    "constraints": [
      "1 <= sides[i] <= 10^6",
      "sides.length == 3"
    ],
    "examples": [
      {
        "input": "sides = [3, 4, 5]",
        "output": "true",
        "explanation": "The sum of any two sides (3+4=7, 3+5=8, 4+5=9) is greater than the third side."
      },
      {
        "input": "sides = [1, 1, 2]",
        "output": "false",
        "explanation": "The sum of 1 and 1 is not greater than 2, hence these sides cannot form a triangle."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Check the triangle inequality theorem."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Make Costs of Paths Equal in a Binary Tree",
    "description": "Given a binary tree, where each node has a cost associated with it, your task is to find the minimum number of adjustments needed to make all the root-to-leaf paths have equal total costs. An adjustment involves changing the cost of a single node, and each adjustment has a cost of 1. You must return the minimum number of adjustments required.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Dynamic Programming"
    ],
    "input_format": "The root of a binary tree, where each node contains an integer representing its cost.",
    "output_format": "An integer representing the minimum number of adjustments required.",
    "constraints": [
      "1 <= number of nodes <= 1000",
      "-10^4 <= node.cost <= 10^4"
    ],
    "examples": [
      {
        "input": "root = [1, 2, 3]",
        "output": "1",
        "explanation": "Here, the costs along the paths are 1->2 = 3 and 1->3 = 4. We need to adjust one path to make them equal."
      },
      {
        "input": "root = [5, 4, 8, 11, null, 13, 4]",
        "output": "2",
        "explanation": "Adjustments can be made in 11 and 4 nodes to equalize the paths to match the highest path cost."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider all root-to-leaf paths and their costs.",
      "You may need to use a frequency map to track the costs.",
      "Think about the most common cost path and adjust the other paths to match it."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Edit Distance",
    "description": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2. You can perform the following operations: insert a character, delete a character, or replace a character.",
    "topic": "Dynamic Programming",
    "subtopic": "String Manipulation",
    "tags": [
      "Dynamic Programming",
      "String",
      "Edit Distance"
    ],
    "input_format": "Two strings word1 and word2.",
    "output_format": "An integer representing the minimum number of operations needed to convert word1 to word2.",
    "constraints": [
      "1 <= word1.length, word2.length <= 100",
      "word1 and word2 consist of lowercase English letters only."
    ],
    "examples": [
      {
        "input": "word1 = 'horse', word2 = 'ros'",
        "output": "3",
        "explanation": "You need to perform the following three operations: \n1. 'h' -> 'r' (replace 'h' with 'r') \n2. 'o' -> 'o' (keep 'o') \n3. 'e' -> '' (delete 'e')"
      },
      {
        "input": "word1 = 'intention', word2 = 'execution'",
        "output": "5",
        "explanation": "You need to perform the following five operations: \n1. 'i' -> 'e' (replace 'i' with 'e') \n2. 'n' -> '' (delete 'n') \n3. 't' -> 'c' (replace 't' with 'c') \n4. 'i' -> 'u' (replace 'i' with 'u') \n5. 'o' -> 'o' (keep 'o')"
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using dynamic programming to store intermediate results.",
      "Think about how you can build the solution using smaller subproblems.",
      "Check the relationship between the edit distance of the prefixes of the strings."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Sort Colors",
    "description": "Given an array nums consisting of red, white, and blue elements represented by integers 0, 1, and 2, respectively, sort the array in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. You must solve this problem without using the library's sort function.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Sorting",
      "Two Pointers"
    ],
    "input_format": "An array of integers nums, where each integer is either 0, 1, or 2.",
    "output_format": "The sorted array in-place, with the same reference as the input.",
    "constraints": [
      "1 <= nums.length <= 300",
      "nums[i] is either 0, 1, or 2."
    ],
    "examples": [
      {
        "input": "nums = [2, 0, 2, 1, 1, 0]",
        "output": "[0, 0, 1, 1, 2, 2]",
        "explanation": "Sorting the colors gives [0, 0, 1, 1, 2, 2]."
      },
      {
        "input": "nums = [2, 0, 1]",
        "output": "[0, 1, 2]",
        "explanation": "Sorting the colors gives [0, 1, 2]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a three-pointer approach.",
      "Maintain pointers for the current element and boundaries for colors."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Peak Index in a Mountain Array",
    "description": "An array arr is called a mountain array if and only if: 1. arr.length >= 3 2. There exists some i with 0 < i < arr.length - 1 such that arr[0] < arr[1] < ... < arr[i-1] < arr[i] and arr[i] > arr[i+1] > ... > arr[arr.length - 1]. Given an integer array arr that is guaranteed to be a mountain array, return the index of the peak element.",
    "topic": "Array",
    "subtopic": "Binary Search",
    "tags": [
      "Array",
      "Binary Search",
      "Peak Element"
    ],
    "input_format": "An integer array arr representing a mountain array.",
    "output_format": "An integer representing the index of the peak element.",
    "constraints": [
      "3 <= arr.length <= 10^4",
      "0 <= arr[i] <= 10^6",
      "arr is guaranteed to be a mountain array."
    ],
    "examples": [
      {
        "input": "arr = [0, 2, 1, 0]",
        "output": "1",
        "explanation": "The peak element is 2 at index 1."
      },
      {
        "input": "arr = [0, 10, 5, 2]",
        "output": "1",
        "explanation": "The peak element is 10 at index 1."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using binary search to find the peak efficiently.",
      "A peak element will always be greater than its neighbors."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "All Nodes Distance K in Binary Tree",
    "description": "Given the root of a binary tree and a target node, return a list of all nodes that are a distance K from the target node. The distance between two nodes is defined as the number of edges in the path connecting them. You may return the answer in any order.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Depth-first Search",
      "Breath-first Search"
    ],
    "input_format": "A binary tree represented by the root node and an integer target representing the value of the target node.",
    "output_format": "A list of integers representing the values of nodes that are at distance K from the target node.",
    "constraints": [
      "The number of nodes in the tree is in the range [1, 10^4].",
      "0 <= Node.val <= 10^5",
      "All Node.val are unique.",
      "target is the value of one of the nodes in the tree."
    ],
    "examples": [
      {
        "input": "root = [1, 2, 3, 4, 5, 6, 7], target = 3, K = 1",
        "output": "[2, 3, 7]",
        "explanation": "Nodes at distance 1 from target node 3 are nodes 2 and 7."
      },
      {
        "input": "root = [1], target = 1, K = 0",
        "output": "[1]",
        "explanation": "The only node is the target node itself."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a DFS to find the target node and keep track of the parent nodes.",
      "Once the target is found, perform a BFS to find nodes at distance K."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. For each pair of intervals that overlap, combine them into one interval which covers the entire duration of both intervals. The output should be a list of non-overlapping intervals that cover all the intervals in the input.",
    "topic": "Array",
    "subtopic": "Sorting and Merging",
    "tags": [
      "Array",
      "Sorting",
      "Merge Intervals"
    ],
    "input_format": "A list of intervals, where each interval is represented as a pair of integers [start, end].",
    "output_format": "A list of merged non-overlapping intervals.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^5"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "The intervals [1,3] and [2,6] overlap, so they can be merged into [1,6]. The other intervals do not overlap."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] touch but do not overlap, so they are merged into the interval [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on the starting time.",
      "Use a loop to check for overlaps and merge intervals accordingly."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Open the Lock",
    "description": "You have a lock that can be opened by entering a sequence of digits. Each digit can be turned either up or down to a neighboring digit, and you can only enter a 4-digit sequence at a time. The lock starts at '0000'. Your task is to determine the minimum number of turns required to reach a target combination from the initial combination '0000', given a list of dead ends that cannot be accessed. If it's impossible to reach the target, return -1.",
    "topic": "Graph",
    "subtopic": "Breadth-First Search",
    "tags": [
      "Graph",
      "BFS",
      "Arrays"
    ],
    "input_format": "A string representing the target combination and a list of strings representing dead ends.",
    "output_format": "An integer representing the minimum number of turns needed to open the lock, or -1 if it cannot be opened.",
    "constraints": [
      "target is a 4-digit string.",
      "each digit in dead ends is a 0-9 digit and dead ends contain unique values.",
      "1 <= deadEnds.length <= 1000."
    ],
    "examples": [
      {
        "input": {
          "target": "0202",
          "deadEnds": [
            "0201",
            "0101",
            "0102",
            "1212",
            "2002"
          ]
        },
        "output": "6",
        "explanation": "The sequence to reach '0202' can be '0000' -> '0001' -> '0002' -> '0012' -> '0022' -> '0020' -> '0200' -> '0202'."
      },
      {
        "input": {
          "target": "8888",
          "deadEnds": [
            "8887",
            "8889",
            "8878",
            "8898",
            "8788",
            "8988"
          ]
        },
        "output": "-1",
        "explanation": "It is impossible to reach '8888' as all possible routes are blocked by dead ends."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a queue for breadth-first search.",
      "Think about all possible combinations from the current state.",
      "Use a set to track dead ends and visited combinations."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Valid Parentheses",
    "description": "Given a string s consisting of parentheses, determine if the input string is valid. An input string is valid if the brackets are closed in the correct order, and each type of bracket must be closed by the same type of bracket. Open brackets must be closed by the corresponding close brackets. Every close bracket must have a corresponding open bracket of the same type.",
    "topic": "String",
    "subtopic": "Stack",
    "tags": [
      "String",
      "Stack",
      "Parentheses"
    ],
    "input_format": "A string s of parentheses consisting of '(', ')', '{', '}', '[' and ']'.",
    "output_format": "A boolean indicating whether the input string is valid (true) or not (false).",
    "constraints": [
      "1 <= s.length <= 104",
      "s consists of parentheses only."
    ],
    "examples": [
      {
        "input": "s = '()'",
        "output": "true",
        "explanation": "The string '()' is valid because the parentheses are correctly closed."
      },
      {
        "input": "s = '([{}])'",
        "output": "true",
        "explanation": "The string '([{}])' is valid as all types of brackets are correctly closed."
      },
      {
        "input": "s = '(]'",
        "output": "false",
        "explanation": "The string '(]' is not valid because the types of brackets do not match."
      },
      {
        "input": "s = '([)]'",
        "output": "false",
        "explanation": "The string '([)]' is not valid because the parentheses are not closed in the correct order."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a stack to keep track of the opening brackets.",
      "Check if the corresponding closing bracket matches the top of the stack."
    ],
    "company": "DE Shaw"
  },
  {
    "question_id": "",
    "title": "Spiral Matrix",
    "description": "Given an m x n matrix, return all elements of the matrix in spiral order. The matrix has to be traversed in a clockwise spiral starting from the top-left corner and moving towards the center.",
    "topic": "Matrix",
    "subtopic": "Traversal",
    "tags": [
      "Matrix",
      "Traversal",
      "Spiral"
    ],
    "input_format": "An m x n matrix `matrix` where 1 <= m, n <= 10^4 and the total number of elements does not exceed 10^4.",
    "output_format": "A list of integers representing the elements of the matrix in spiral order.",
    "constraints": [
      "1 <= m, n <= 100",
      "m * n <= 10^4"
    ],
    "examples": [
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[1, 2, 3, 6, 9, 8, 7, 4, 5]",
        "explanation": "Starting from 1, we traverse right to 3, then down to 9, left to 7, and finally up to 5."
      },
      {
        "input": "matrix = [[1]]",
        "output": "[1]",
        "explanation": "The only element in the matrix is 1."
      },
      {
        "input": "matrix = [[1,2],[3,4]]",
        "output": "[1, 2, 4, 3]",
        "explanation": "We start from 1, move right to 2, then down to 4, and finally left to 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use four boundaries to keep track of the current limits of the spiral.",
      "Start with top, bottom, left, and right boundaries.",
      "Iteratively shrink the boundaries as you complete an outer layer."
    ],
    "company": "DE Shaw"
  }
]