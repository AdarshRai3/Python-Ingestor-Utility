[
  {
    "question_id": "",
    "title": "Snapshot Array",
    "description": "Design a Snapshot Array that supports the following operations: `set(index, val)`, `snap()` and `get(index, snap_id)`. The `set(index, val)` sets the element at the given `index` to `val`. The `snap()` method records the current state within the Snapshot Array and returns the `snap_id` for future retrievals. The `get(index, snap_id)` method returns the value at the given `index` at the time of the given `snap_id`. Follow-up: Optimize for space and time where possible.",
    "topic": "Data Structure",
    "subtopic": "Array",
    "tags": [
      "Data Structure",
      "Array",
      "Design"
    ],
    "input_format": "The operations will be performed sequentially based on user input.",
    "output_format": "Return results based on the operations performed, especially for `snap()` and `get()`.",
    "constraints": [
      "0 <= index <= 10^9",
      "0 <= val <= 10^9",
      "There will be at most 10^4 `set` operations and 10^4 `snap` operations."
    ],
    "examples": [
      {
        "input": "SnapshotArray snapshotArray = new SnapshotArray(3);\nsnapshotArray.set(0, 5);\nsnapshotArray.snap();\nsnapshotArray.set(0, 6);\nsnapshotArray.get(0, 0);",
        "output": "5",
        "explanation": "The value at index 0 is set to 5 and snapped. When we try to get at snap_id 0, we retrieve the value before it was changed to 6."
      },
      {
        "input": "SnapshotArray snapshotArray = new SnapshotArray(2);\nsnapshotArray.set(1, 10);\nsnapshotArray.snap();\nsnapshotArray.set(0, 20);\nsnapshotArray.snap();\nsnapshotArray.get(0, 0);",
        "output": "0",
        "explanation": "At snap_id 0, index 0 was never set, so it is 0. The value at index 1 was set to 10 in the first snap."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a data structure that efficiently handles dynamic states.",
      "You might need to include a way to track historical versions of the values."
    ],
    "company": "Verkada"
  },
  {
    "question_id": "",
    "title": "Interval List Intersections",
    "description": "Given two lists of intervals, return the list of intervals representing their intersection. Each interval is represented by a pair of integers [start, end], where start < end. The intersection of two intervals [a, b] and [c, d] is defined as [max(a, c), min(b, d)] if they overlap, otherwise it is empty. Your task is to find all the overlapping intervals between the two lists.",
    "topic": "Intervals",
    "subtopic": "Interval Management",
    "tags": [
      "Intervals",
      "Array",
      "Intersection"
    ],
    "input_format": "Two lists of intervals, each represented as a 2D array of integers, where each sub-array has two integers denoting the start and end of the interval.",
    "output_format": "A list of intervals that represent the intersection of the two input lists.",
    "constraints": [
      "0 <= len(intervals1), len(intervals2) <= 1000",
      "-10^9 <= intervals[i][0] < intervals[i][1] <= 10^9"
    ],
    "examples": [
      {
        "input": "intervals1 = [[0, 2], [5, 10], [13, 23], [24, 25]], intervals2 = [[1, 5], [8, 12], [15, 24], [25, 26]]",
        "output": "[[1, 2], [5, 5], [15, 23], [25, 25]]",
        "explanation": "The intersections are [1, 2] from [0, 2] and [1, 5]; [5, 5] from [5, 10] and [1, 5]; [15, 23] from [13, 23] and [15, 24]; and [25, 25] from [24, 25] and [25, 26]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals by their start times before finding the intersection.",
      "Use two pointers to iterate through both lists of intervals."
    ],
    "company": "Verkada"
  },
  {
    "question_id": "",
    "title": "Basic Calculator II",
    "description": "Implement a basic calculator to evaluate a simple expression string containing non-negative integers, '+', '-', '*', and '/' operators. The expression should be evaluated according to the following rules: Operators must have the correct precedence, with '*' and '/' being evaluated before '+' and '-'. The input is guaranteed to be a valid expression with no spaces, and integers are non-negative.",
    "topic": "Math",
    "subtopic": "Expression Evaluation",
    "tags": [
      "Math",
      "Expression",
      "Calculator"
    ],
    "input_format": "A string s representing a valid arithmetic expression.",
    "output_format": "An integer representing the result of the evaluated expression.",
    "constraints": [
      "1 <= s.length <= 10^5",
      "s consists of non-negative integers and operators only."
    ],
    "examples": [
      {
        "input": "s = '3+2*2'",
        "output": "7",
        "explanation": "The evaluation is done as 2*2=4, then add 3, resulting in 3+4=7."
      },
      {
        "input": "s = ' 3/2 '",
        "output": "1",
        "explanation": "The division is evaluated as 3/2, which equals 1 after truncating."
      },
      {
        "input": "s = ' 3+5 / 2 '",
        "output": "5",
        "explanation": "First, evaluate 5/2 which equals 2, then add 3 to get 5."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a stack to keep track of operands.",
      "Consider operator precedence while evaluating."
    ],
    "company": "Verkada"
  },
  {
    "question_id": "",
    "title": "Maximum Profit in Job Scheduling",
    "description": "You are given a list of jobs where each job is represented as a tuple (startTime, endTime, profit). Your goal is to maximize the total profit earned by performing non-overlapping jobs. Jobs can only be scheduled if they do not overlap in time. Return the maximum profit that can be achieved.",
    "topic": "Dynamic Programming",
    "subtopic": "Job Scheduling",
    "tags": [
      "Dynamic Programming",
      "Greedy",
      "Interval Scheduling"
    ],
    "input_format": "A list of tuples where each tuple consists of three integers (startTime, endTime, profit).",
    "output_format": "An integer representing the maximum profit from scheduling the jobs.",
    "constraints": [
      "1 <= jobs.length <= 1000",
      "0 <= startTime < endTime <= 10^4",
      "0 <= profit <= 10^4"
    ],
    "examples": [
      {
        "input": "jobs = [(1, 3, 50), (2, 5, 20), (4, 6, 70), (6, 9, 60)]",
        "output": "120",
        "explanation": "Select jobs (1, 3, 50) and (4, 6, 70) for a total profit of 50 + 70 = 120."
      },
      {
        "input": "jobs = [(1, 2, 100), (2, 3, 200), (3, 4, 300)]",
        "output": "600",
        "explanation": "All jobs do not overlap. The maximum profit is 100 + 200 + 300 = 600."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a sorting strategy to order the jobs by their end times.",
      "Use dynamic programming to keep track of the maximum profit at each job index."
    ],
    "company": "Verkada"
  },
  {
    "question_id": "",
    "title": "Guess the Word",
    "description": "You are participating in a game where you need to guess a secret word based on a series of hints provided. Each hint will indicate how many letters of your guess match the secret word in both value and position. You are given a list of words as potential guesses, and your goal is to implement a function that helps you guess the secret word accurately. The function should return the correct word based on the provided hints and guesses.",
    "topic": "String",
    "subtopic": "Searching",
    "tags": [
      "String",
      "Guessing Game",
      "Search"
    ],
    "input_format": "A list of strings words containing potential guesses and the string secret representing the secret word.",
    "output_format": "A string representing the correctly guessed word.",
    "constraints": [
      "1 <= words.length <= 1000",
      "1 <= words[i].length == secret.length == 6",
      "words[i] contains only lowercase English letters."
    ],
    "examples": [
      {
        "input": {
          "words": [
            "acmxyz",
            "apple",
            "banana",
            "orange",
            "grapef",
            "secret"
          ],
          "secret": "secret"
        },
        "output": "secret",
        "explanation": "The only word that matches the secret is 'secret' itself."
      },
      {
        "input": {
          "words": [
            "abcdef",
            "hijklmn",
            "mnopqr",
            "mnoprs"
          ],
          "secret": "mnopqr"
        },
        "output": "mnopqr",
        "explanation": "Only 'mnopqr' matches both letters and position with the secret."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a loop to check each guess against the secret.",
      "You may want to track the matches using an array."
    ],
    "company": "Verkada"
  },
  {
    "question_id": "",
    "title": "Merge k Sorted Lists",
    "description": "You are given an array of k linked lists, each linked list is sorted in ascending order. Merge all the linked lists into one sorted linked list and return it. The resulting linked list should also be in ascending order.",
    "topic": "Linked List",
    "subtopic": "Merge K Sorted Lists",
    "tags": [
      "Linked List",
      "Merge",
      "Sorting"
    ],
    "input_format": "An array of k linked lists, where each linked list is represented by its head node.",
    "output_format": "The head node of the merged sorted linked list.",
    "constraints": [
      "0 <= k <= 10^4",
      "0 <= nums[i].length <= 500",
      "-10^4 <= nums[i][j] <= 10^4"
    ],
    "examples": [
      {
        "input": "lists = [[1,4,5],[1,3,4],[2,6]]",
        "output": "[1,1,2,3,4,4,5,6]",
        "explanation": "Merging the three lists gives a single sorted list: 1 -> 1 -> 2 -> 3 -> 4 -> 4 -> 5 -> 6."
      },
      {
        "input": "lists = []",
        "output": "[]",
        "explanation": "An empty list of lists results in an empty merged list."
      },
      {
        "input": "lists = [[1,2,3],[4,5],[6]]",
        "output": "[1,2,3,4,5,6]",
        "explanation": "Merging these lists gives a single sorted list: 1 -> 2 -> 3 -> 4 -> 5 -> 6."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Use a min-heap to keep track of the current smallest node.",
      "Pop the smallest node from the heap and push the next node from the same list into the heap."
    ],
    "company": "Verkada"
  },
  {
    "question_id": "",
    "title": "Non-overlapping Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. The result should be a list of non-overlapping intervals that cover all the intervals in the input.",
    "topic": "Interval",
    "subtopic": "Merging Intervals",
    "tags": [
      "Interval",
      "Sorting",
      "Merge"
    ],
    "input_format": "A list of intervals, where each interval is represented as a pair of integers [start, end].",
    "output_format": "A list of merged intervals, each represented as a pair of integers [start, end].",
    "constraints": [
      "0 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "[[1, 3], [2, 6], [8, 10], [15, 18]]",
        "output": "[[1, 6], [8, 10], [15, 18]]",
        "explanation": "Intervals [1, 3] and [2, 6] overlap, they can be merged into [1, 6]. The other intervals do not overlap."
      },
      {
        "input": "[[1, 4], [4, 5]]",
        "output": "[[1, 5]]",
        "explanation": "The intervals [1, 4] and [4, 5] overlap at point 4, so they can be merged into [1, 5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on their start times.",
      "Use a result list to store the merged intervals."
    ],
    "company": "Verkada"
  },
  {
    "question_id": "",
    "title": "Remove Sub-Folders from the Filesystem",
    "description": "Given a list of folders in a filesystem, you should remove any subfolder that is contained within another folder. For example, if there are folders '/a', '/a/b', and '/c', the output should only include '/a' and '/c'. Your task is to return the list of folders with all subfolders removed.",
    "topic": "String",
    "subtopic": "Path Manipulation",
    "tags": [
      "String",
      "Path",
      "Manipulation"
    ],
    "input_format": "A list of strings representing folder paths.",
    "output_format": "A list of strings representing the remaining folders after removal of subfolders.",
    "constraints": [
      "1 <= folders.length <= 10^4",
      "2 <= folders[i].length <= 100",
      "folders[i] is a valid folder path."
    ],
    "examples": [
      {
        "input": "folders = ['/a', '/a/b', '/c', '/c/d', '/a/b/c']",
        "output": "['/a', '/c']",
        "explanation": "The folders '/a/b' and '/c/d' are subfolders of '/a' and '/c' respectively and thus removed."
      },
      {
        "input": "folders = ['/a', '/a/b/c', '/a/b', '/c/d/e', '/c']",
        "output": "['/a', '/c']",
        "explanation": "Subfolders '/a/b' and '/a/b/c' under '/a' and '/c/d/e' under '/c' are removed."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the folders to handle nested subfolders effectively.",
      "Use a set to track valid folders."
    ],
    "company": "Verkada"
  },
  {
    "question_id": "",
    "title": "Transpose Matrix",
    "description": "Given a 2D matrix, transpose the matrix. The transpose of a matrix is obtained by swapping the rows and columns. For a matrix represented as 'matrix', the element at row 'i' and column 'j' becomes the element at row 'j' and column 'i'.",
    "topic": "Matrix",
    "subtopic": "Transformation",
    "tags": [
      "Matrix",
      "Transposition",
      "2D Arrays"
    ],
    "input_format": "A 2D list of integers 'matrix' where matrix[i][j] represents the element in the i-th row and j-th column.",
    "output_format": "A 2D list of integers representing the transposed matrix.",
    "constraints": [
      "1 <= matrix.length <= 1000",
      "1 <= matrix[0].length <= 1000",
      "matrix[i][j] is a valid integer."
    ],
    "examples": [
      {
        "input": "matrix = [[1, 2, 3], [4, 5, 6]]",
        "output": "[[1, 4], [2, 5], [3, 6]]",
        "explanation": "The first row [1, 2, 3] becomes the first column [1, 4] and the second row [4, 5, 6] becomes the second column [2, 5], and so forth."
      },
      {
        "input": "matrix = [[1]]",
        "output": "[[1]]",
        "explanation": "A single element matrix transposes to itself."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using an auxiliary matrix or modifying the existing one."
    ],
    "company": "Verkada"
  },
  {
    "question_id": "",
    "title": "Image Smoother",
    "description": "Given a 2D integer matrix representing the grayscale of an image, you need to smooth the image by applying a smoothing filter to each pixel in the matrix. The value of each pixel is calculated as the average of the values in its 8-neighborhood (including itself). Pixels on the border of the image have fewer than 8 neighbors and should be averaged with only existing neighbors. The result should be rounded down to the nearest integer.",
    "topic": "Matrix",
    "subtopic": "Image Processing",
    "tags": [
      "Matrix",
      "Image Processing",
      "Smoothing"
    ],
    "input_format": "A 2D integer array of size m x n representing the grayscale values of the image.",
    "output_format": "A 2D integer array representing the smoothed image.",
    "constraints": [
      "1 <= m, n <= 200",
      "0 <= image[i][j] <= 255"
    ],
    "examples": [
      {
        "input": "[[1, 1, 1], [1, 0, 1], [1, 1, 1]]",
        "output": "[[0, 0, 0], [0, 1, 0], [0, 0, 0]]",
        "explanation": "The center pixel (0) has the neighbors: 1, 1, 1, 1, 1, 1, 1, 1. Their average is 1. So, using integer division, this rounds down to 0."
      },
      {
        "input": "[[100, 200, 100], [200, 50, 200], [100, 200, 100]]",
        "output": "[[137, 150, 137], [150, 120, 150], [137, 150, 137]]",
        "explanation": "For each pixel, compute the average of its 8 neighbors and the pixel itself for the smoothed output."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider each pixel and its surrounding neighbors.",
      "Use integer division to round down the average."
    ],
    "company": "Verkada"
  },
  {
    "question_id": "",
    "title": "Basic Calculator III",
    "description": "Implement a basic calculator to evaluate a string expression containing non-negative integers, '+', '-', '*', and '/' operators, and parentheses. The calculator should respect the order of operations (PEMDAS/BODMAS) and return the result as an integer. The expression is guaranteed to be valid and well-formed.",
    "topic": "Mathematics",
    "subtopic": "Expression Evaluation",
    "tags": [
      "Mathematics",
      "Stack",
      "Expression Evaluation"
    ],
    "input_format": "A string expression containing non-negative integers and operators.",
    "output_format": "An integer representing the evaluated result of the expression.",
    "constraints": [
      "The input expression is always valid and well-formed.",
      "The length of the expression will not exceed 1000 characters."
    ],
    "examples": [
      {
        "input": "s = \"3+(2*2)\"",
        "output": "7",
        "explanation": "The expression evaluates to 3 + (2 * 2) = 3 + 4 = 7."
      },
      {
        "input": "s = \" 3/2 \"",
        "output": "1",
        "explanation": "The expression evaluates to 3 / 2 = 1 (integer division)."
      },
      {
        "input": "s = \" 3+5 / 2 \"",
        "output": "5",
        "explanation": "The expression evaluates to 3 + (5 / 2) = 3 + 2 = 5."
      }
    ],
    "difficulty": "Hard",
    "hints": [
      "Consider using a stack to handle operations.",
      "Make sure to handle different precedence levels of operators.",
      "Use a two-pass approach: one for tokens and another for evaluation."
    ],
    "company": "Verkada"
  },
  {
    "question_id": "",
    "title": "LRU Cache",
    "description": "Design and implement a data structure for a Least Recently Used (LRU) Cache. It should support the following operations: get and put.\n\n- get(key): Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.\n- put(key, value): Set or insert the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least recently used item before inserting a new item.",
    "topic": "Data Structure",
    "subtopic": "Cache",
    "tags": [
      "HashMap",
      "Linked List",
      "Design"
    ],
    "input_format": "Two operations on the LRU cache: 'get' and 'put'. A call to put will have two parameters (key and value). A call to get will have one parameter (key).",
    "output_format": "For each get operation, return the value associated with the key or -1 if the key does not exist.",
    "constraints": [
      "The maximum capacity of the cache is between 1 and 3000.",
      "All keys and values are positive integers."
    ],
    "examples": [
      {
        "input": "cache = LRUCache(2); cache.put(1, 1); cache.put(2, 2); cache.get(1); cache.put(3, 3); cache.get(2); cache.put(4, 4); cache.get(1); cache.get(3); cache.get(4);",
        "output": "[1, -1, 3, 4]",
        "explanation": "Initially, the cache is empty. Adding (1,1) and (2,2). Accessing key 1 gives 1. Adding (3,3) evicts key 2. Accessing key 2 gives -1 (not found). Adding (4,4) evicts key 1. Accessing keys 1, 3, and 4 gives [-1, 3, 4]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a combination of a hash map and a doubly linked list.",
      "Make sure you can quickly find and remove the least recently used item."
    ],
    "company": "Verkada"
  },
  {
    "question_id": "",
    "title": "Diameter of Binary Tree",
    "description": "Given the root of a binary tree, return the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root. The length of a path between two nodes is represented by the number of edges between them.",
    "topic": "Tree",
    "subtopic": "Binary Tree",
    "tags": [
      "Tree",
      "Binary Tree",
      "Depth-First Search"
    ],
    "input_format": "The root of a binary tree.",
    "output_format": "An integer representing the diameter of the binary tree.",
    "constraints": [
      "The number of nodes in the tree is in the range [0, 10^4].",
      "-100 <= Node.val <= 100"
    ],
    "examples": [
      {
        "input": "root = [1,2,3,4,5]",
        "output": "3",
        "explanation": "The longest path is between the leaf nodes 4 and 5, which has a length of 3."
      },
      {
        "input": "root = [1]",
        "output": "0",
        "explanation": "The tree has only one node, so the diameter is 0."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Think about the depth of the left and right subtrees.",
      "You can use depth-first search to calculate the diameter."
    ],
    "company": "Verkada"
  },
  {
    "question_id": "",
    "title": "Number of 1 Bits",
    "description": "Given an integer n, return the number of '1' bits it has (also known as the Hamming weight). Note that the input will be treated as an unsigned integer.",
    "topic": "Bit Manipulation",
    "subtopic": "Counting Bits",
    "tags": [
      "Bit Manipulation",
      "Counting",
      "Hamming Weight"
    ],
    "input_format": "A single integer n (0 <= n <= 2^31 - 1).",
    "output_format": "An integer representing the number of '1' bits in the binary representation of n.",
    "constraints": [
      "0 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "n = 11",
        "output": "3",
        "explanation": "The binary representation of 11 is '1011', which has three '1' bits."
      },
      {
        "input": "n = 128",
        "output": "1",
        "explanation": "The binary representation of 128 is '10000000', which has one '1' bit."
      },
      {
        "input": "n = 7",
        "output": "3",
        "explanation": "The binary representation of 7 is '111', which has three '1' bits."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using bit manipulation techniques.",
      "You can repeatedly check the least significant bit and shift right."
    ],
    "company": "Verkada"
  },
  {
    "question_id": "",
    "title": "Time Based Key-Value Store",
    "description": "Design a time-based key-value data structure that can store a value associated with a key at a specific timestamp. Implement the following methods: \n\n1. `set(key: str, value: str, timestamp: int)`: Store the key-value pair along with the given timestamp.\n2. `get(key: str, timestamp: int) -> str`: Retrieve the value associated with a key at the most recent timestamp that is less than or equal to the given timestamp. If there is no such timestamp, return an empty string.",
    "topic": "Design",
    "subtopic": "Data Structure",
    "tags": [
      "HashMap",
      "Binary Search",
      "Design"
    ],
    "input_format": "The input consists of multiple method calls, with `set` given three parameters and `get` given two parameters.",
    "output_format": "The output consists of return values from the `get` method calls, which are strings.",
    "constraints": [
      "All keys and values are alphanumeric strings.",
      "1 <= timestamp <= 10^9.",
      "The number of `set` and `get` calls will not exceed 10000."
    ],
    "examples": [
      {
        "input": "obj = TimeMap()\nobj.set('foo', 'bar', 1)\nobj.get('foo', 1)",
        "output": "bar",
        "explanation": "At timestamp 1, the value associated with 'foo' is 'bar'."
      },
      {
        "input": "obj.set('foo', 'bar', 1)\nobj.get('foo', 3)",
        "output": "bar",
        "explanation": "At timestamp 3, the most recent value for 'foo' is still 'bar' from timestamp 1."
      },
      {
        "input": "obj.set('foo', 'bar', 1)\nobj.set('foo', 'baz', 2)\nobj.get('foo', 1)",
        "output": "bar",
        "explanation": "At timestamp 1, the value of 'foo' is 'bar'."
      },
      {
        "input": "obj.set('foo', 'bar', 1)\nobj.get('foo', 0)",
        "output": "",
        "explanation": "There is no value for 'foo' at timestamp 0."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a map to keep track of timestamps for each key.",
      "Consider binary search for efficient retrieval."
    ],
    "company": "Verkada"
  }
]