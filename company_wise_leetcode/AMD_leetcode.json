[
  {
    "question_id": "",
    "title": "Rotate Image",
    "description": "You are given an n x n 2D matrix representing an image. Rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to do this using only constant extra space. The rotation must be done in such a way that the pixels remain in the same matrix.",
    "topic": "Matrix",
    "subtopic": "In-place Matrix Rotation",
    "tags": [
      "Matrix",
      "In-place",
      "Rotation"
    ],
    "input_format": "An n x n 2D list of integers representing the matrix.",
    "output_format": "The same matrix rotated by 90 degrees clockwise.",
    "constraints": [
      "1 <= n <= 20",
      "-1000 <= matrix[i][j] <= 1000"
    ],
    "examples": [
      {
        "input": "matrix = [[1,2,3],[4,5,6],[7,8,9]]",
        "output": "[[7,4,1],[8,5,2],[9,6,3]]",
        "explanation": "Rotating the matrix by 90 degrees clockwise results in this transformation."
      },
      {
        "input": "matrix = [[ 5, 1, 9,11],[ 2, 4, 8,10],[13, 3, 6, 7],[15,14,12,16]]",
        "output": "[[15,13, 2, 5],[14, 3, 4, 1],[12, 6, 8, 9],[16, 7,10,11]]",
        "explanation": "The matrix is rotated 90 degrees clockwise, changing the position of each element."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Think about how you can swap the elements in layers.",
      "You can divide the rotation into two steps: transpose and then reverse."
    ],
    "company": "AMD"
  },
  {
    "question_id": "",
    "title": "Spiral Matrix",
    "description": "Given an m x n matrix, return all elements of the matrix in spiral order. The traversal should start from the top-left corner and proceed to the right, then downward, then left, and finally upward, continuing this pattern until all elements have been traversed.",
    "topic": "Matrix",
    "subtopic": "Traversal",
    "tags": [
      "Matrix",
      "Traversal",
      "Spiral"
    ],
    "input_format": "A 2D list of integers matrix where 1 <= matrix.length, matrix[i].length <= 100.",
    "output_format": "A list of integers representing the elements of the matrix in spiral order.",
    "constraints": [
      "1 <= m, n <= 100",
      "-10^3 <= matrix[i][j] <= 10^3"
    ],
    "examples": [
      {
        "input": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "[1, 2, 3, 6, 9, 8, 7, 4, 5]",
        "explanation": "The elements in spiral order are: 1, 2, 3, 6, 9, 8, 7, 4, 5."
      },
      {
        "input": "matrix = [[1], [2], [3], [4]]",
        "output": "[1, 2, 3, 4]",
        "explanation": "The only column results in a simple spiral order."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use four pointers to keep track of the boundaries of the spiral.",
      "Iterate while layers of the matrix remain."
    ],
    "company": "AMD"
  },
  {
    "question_id": "",
    "title": "Number of 1 Bits",
    "description": "Write a function that takes an integer and returns the number of '1' bits it has. This is also known as the Hamming weight. The function should work for any non-negative integer.",
    "topic": "Bit Manipulation",
    "subtopic": "Counting Bits",
    "tags": [
      "Bit Manipulation",
      "Counting",
      "Hamming Weight"
    ],
    "input_format": "A single non-negative integer n.",
    "output_format": "An integer representing the number of '1' bits in the binary representation of n.",
    "constraints": [
      "0 <= n <= 2^31 - 1"
    ],
    "examples": [
      {
        "input": "n = 11",
        "output": "3",
        "explanation": "The binary representation of 11 is '1011', which contains three '1' bits."
      },
      {
        "input": "n = 128",
        "output": "1",
        "explanation": "The binary representation of 128 is '10000000', which contains one '1' bit."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "You can use bitwise operations to count the bits.",
      "Consider repeatedly shifting the bits of the number.",
      "You could also use built-in functions to convert to binary."
    ],
    "company": "AMD"
  },
  {
    "question_id": "",
    "title": "Longest Substring Without Repeating Characters",
    "description": "Given a string s, find the length of the longest substring without repeating characters.",
    "topic": "String",
    "subtopic": "Sliding Window",
    "tags": [
      "String",
      "Sliding Window",
      "HashMap"
    ],
    "input_format": "A string s (0 <= s.length <= 10^5).",
    "output_format": "An integer representing the length of the longest substring without repeating characters.",
    "constraints": [
      "0 <= s.length <= 10^5",
      "s consists of English letters, digits, symbols, and spaces."
    ],
    "examples": [
      {
        "input": "s = 'abcabcbb'",
        "output": "3",
        "explanation": "The answer is 'abc', with the length of 3."
      },
      {
        "input": "s = 'bbbbb'",
        "output": "1",
        "explanation": "The answer is 'b', with the length of 1."
      },
      {
        "input": "s = 'pwwkew'",
        "output": "3",
        "explanation": "The answer is 'wke', with the length of 3."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use a sliding window approach to track the substring.",
      "Utilize a HashMap to store the last seen index of characters."
    ],
    "company": "AMD"
  },
  {
    "question_id": "",
    "title": "Climbing Stairs",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "topic": "Dynamic Programming",
    "subtopic": "Fibonacci Sequence",
    "tags": [
      "Dynamic Programming",
      "Recursion",
      "Backtracking"
    ],
    "input_format": "An integer n, the total number of steps in the staircase.",
    "output_format": "An integer representing the number of distinct ways to climb to the top.",
    "constraints": [
      "1 <= n <= 45"
    ],
    "examples": [
      {
        "input": "n = 2",
        "output": "2",
        "explanation": "There are two ways to climb to the top: 1 step + 1 step or 2 steps."
      },
      {
        "input": "n = 3",
        "output": "3",
        "explanation": "There are three ways to climb to the top: 1 step + 1 step + 1 step, 1 step + 2 steps, or 2 steps + 1 step."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider the relation of ways to reach the current step from the previous steps."
    ],
    "company": "AMD"
  },
  {
    "question_id": "",
    "title": "Number of Islands",
    "description": "Given a 2D grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
    "topic": "DFS",
    "subtopic": "Graph Traversal",
    "tags": [
      "DFS",
      "Graph",
      "Matrix"
    ],
    "input_format": "A 2D grid represented as a list of lists, where each element is either '1' or '0'.",
    "output_format": "An integer representing the number of islands.",
    "constraints": [
      "1 <= grid.length <= 300",
      "1 <= grid[i].length <= 300",
      "grid[i][j] is '0' or '1'."
    ],
    "examples": [
      {
        "input": "[['1','1','1','1','0'],['1','1','0','1','0'],['1','1','0','0','0'],['0','0','0','0','0']]",
        "output": "1",
        "explanation": "There is one island in the provided grid, consisting of connected lands."
      },
      {
        "input": "[['1','1','0','0','0'],['1','0','0','1','1'],['0','0','0','0','0'],['0','1','1','0','0']]",
        "output": "3",
        "explanation": "There are three islands separated by water."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Use Depth-First Search (DFS) to explore connected lands.",
      "Mark visited islands to avoid counting them multiple times.",
      "Check all four possible directions from each land cell."
    ],
    "company": "AMD"
  },
  {
    "question_id": "",
    "title": "Kth Largest Element in an Array",
    "description": "Given an array of integers nums and an integer k, return the kth largest element in the array. Note that it is the kth largest element in the sorted order, not the kth distinct element. You must solve it in O(n log n) time complexity.",
    "topic": "Array",
    "subtopic": "Sorting",
    "tags": [
      "Array",
      "Sorting",
      "Heap"
    ],
    "input_format": "An integer array nums and an integer k (1 <= k <= nums.length).",
    "output_format": "An integer representing the kth largest element in the array.",
    "constraints": [
      "1 <= nums.length <= 10^4",
      "-10^5 <= nums[i] <= 10^5",
      "1 <= k <= nums.length"
    ],
    "examples": [
      {
        "input": "nums = [3, 2, 1, 5, 6, 4], k = 2",
        "output": "5",
        "explanation": "The 2nd largest element in the array is 5 after sorting it in descending order: [6, 5, 4, 3, 2, 1]."
      },
      {
        "input": "nums = [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4",
        "output": "4",
        "explanation": "The 4th largest element in the array is 4 after sorting it in descending order: [6, 5, 5, 4, 3, 3, 2, 2, 1]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a heap to efficiently find the kth largest element.",
      "Sorting the entire array may be less efficient than needed."
    ],
    "company": "AMD"
  },
  {
    "question_id": "",
    "title": "Two Sum",
    "description": "Given an array of integers `nums` and an integer `target`, return the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "topic": "Array",
    "subtopic": "Hashing",
    "tags": [
      "Array",
      "HashTable",
      "TwoPointers"
    ],
    "input_format": "An array of integers `nums` and an integer `target`.",
    "output_format": "An array of two integers representing the indices of the two numbers.",
    "constraints": [
      "2 <= nums.length <= 10^4",
      "-10^9 <= nums[i] <= 10^9",
      "-10^9 <= target <= 10^9",
      "Only one valid answer exists."
    ],
    "examples": [
      {
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] == 2 + 7 == 9, so return [0, 1]."
      },
      {
        "input": "nums = [3, 2, 4], target = 6",
        "output": "[1, 2]",
        "explanation": "nums[1] + nums[2] == 2 + 4 == 6, so return [1, 2]."
      },
      {
        "input": "nums = [3, 3], target = 6",
        "output": "[0, 1]",
        "explanation": "nums[0] + nums[1] == 3 + 3 == 6, so return [0, 1]."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Use a hash map to store the indices of the elements.",
      "Check if the complement (target - nums[i]) exists in the hash map."
    ],
    "company": "AMD"
  },
  {
    "question_id": "",
    "title": "Subarray Sum Equals K",
    "description": "Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k. A subarray is defined as a contiguous part of an array.",
    "topic": "Array",
    "subtopic": "Prefix Sum",
    "tags": [
      "Array",
      "Hash Table",
      "Prefix Sum"
    ],
    "input_format": "An array of integers nums and an integer k.",
    "output_format": "An integer representing the number of continuous subarrays whose sum equals k.",
    "constraints": [
      "1 <= nums.length <= 2 * 10^4",
      "-1000 <= nums[i] <= 1000",
      "-10^7 <= k <= 10^7"
    ],
    "examples": [
      {
        "input": "nums = [1, 1, 1], k = 2",
        "output": "2",
        "explanation": "The subarrays are [1, 1] (index 0 to 1) and [1, 1] (index 1 to 2)."
      },
      {
        "input": "nums = [1, 2, 3], k = 3",
        "output": "2",
        "explanation": "The subarrays are [3] (index 2) and [1, 2] (index 0 to 1)."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Consider using a hashmap to store the prefix sums.",
      "Think about how to update the prefix sum as you iterate through the array."
    ],
    "company": "AMD"
  },
  {
    "question_id": "",
    "title": "Roman to Integer",
    "description": "Given a string representing a Roman numeral, convert it to an integer. The input string is guaranteed to be within the range from 1 to 3999.",
    "topic": "String",
    "subtopic": "Parsing",
    "tags": [
      "String",
      "Parsing",
      "Conversion"
    ],
    "input_format": "A string s containing Roman numeral characters.",
    "output_format": "An integer representing the converted value of the Roman numeral.",
    "constraints": [
      "1 <= s.length <= 15",
      "s consists of uppercase Latin letters (I, V, X, L, C, D, M) only."
    ],
    "examples": [
      {
        "input": "s = 'III'",
        "output": "3",
        "explanation": "The Roman numeral 'III' represents 3."
      },
      {
        "input": "s = 'IV'",
        "output": "4",
        "explanation": "The Roman numeral 'IV' represents 4, where I is before V."
      },
      {
        "input": "s = 'IX'",
        "output": "9",
        "explanation": "The Roman numeral 'IX' represents 9, where I is before X."
      },
      {
        "input": "s = 'LVIII'",
        "output": "58",
        "explanation": "The Roman numeral 'LVIII' represents 58, calculated as 50 + 5 + 3."
      },
      {
        "input": "s = 'MCMXCIV'",
        "output": "1994",
        "explanation": "The Roman numeral 'MCMXCIV' represents 1994, calculated as 1000 + (1000 - 100) + (100 - 10) + (5 - 1)."
      }
    ],
    "difficulty": "Easy",
    "hints": [
      "Consider using a map to store the values of the Roman numerals.",
      "Be careful with the cases where a smaller numeral appears before a larger numeral."
    ],
    "company": "AMD"
  },
  {
    "question_id": "",
    "title": "Merge Intervals",
    "description": "Given a collection of intervals, merge all overlapping intervals. An interval is represented as a pair of integers where the first integer is the start of the interval and the second integer is the end of the interval. The resulting merged intervals should be returned as a list.",
    "topic": "Array",
    "subtopic": "Sorting and Merging",
    "tags": [
      "Array",
      "Interval",
      "Sorting"
    ],
    "input_format": "A list of intervals, where each interval is represented as a list of two integers. The list is not necessarily sorted.",
    "output_format": "A list of merged intervals, where each interval is represented as a list of two integers.",
    "constraints": [
      "1 <= intervals.length <= 10^4",
      "intervals[i].length == 2",
      "0 <= intervals[i][0] <= intervals[i][1] <= 10^4"
    ],
    "examples": [
      {
        "input": "intervals = [[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "The intervals [1,3] and [2,6] overlap, so they are merged into [1,6]."
      },
      {
        "input": "intervals = [[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [1,4] and [4,5] touch each other, so they are merged into [1,5]."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the intervals based on the start time.",
      "Use a loop to determine the merging of intervals."
    ],
    "company": "AMD"
  },
  {
    "question_id": "",
    "title": "3Sum",
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets.",
    "topic": "Array",
    "subtopic": "Two Pointers",
    "tags": [
      "Array",
      "Two Pointers",
      "Sorting"
    ],
    "input_format": "An array of integers nums.",
    "output_format": "A list of unique triplets that sum up to zero.",
    "constraints": [
      "0 <= nums.length <= 3000",
      "-10^5 <= nums[i] <= 10^5"
    ],
    "examples": [
      {
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "[[-1, -1, 2], [-1, 0, 1]]",
        "explanation": "The triplets that sum to zero are [-1, -1, 2] and [-1, 0, 1]."
      },
      {
        "input": "nums = []",
        "output": "[]",
        "explanation": "There are no triplets in an empty array."
      },
      {
        "input": "nums = [0]",
        "output": "[]",
        "explanation": "A single element cannot form a triplet."
      }
    ],
    "difficulty": "Medium",
    "hints": [
      "Sort the array to utilize the two-pointer technique.",
      "Use a loop to fix one number and search for the other two."
    ],
    "company": "AMD"
  }
]